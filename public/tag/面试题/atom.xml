<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://qiyins.cn</id>
    <title>七音 • Posts by &#34;面试题&#34; tag</title>
    <link href="https://qiyins.cn" />
    <updated>2020-12-17T04:05:00.000Z</updated>
    <category term="hexo" />
    <category term="算法" />
    <category term="Linux" />
    <category term="MySQL" />
    <category term="MongoDB" />
    <category term="git" />
    <category term="Idea" />
    <category term="Typora" />
    <category term="Java" />
    <category term="面试题" />
    <category term="RabbitMQ" />
    <category term="设计模式" />
    <category term="Shiro" />
    <category term="Redis" />
    <category term="SpringCloud" />
    <entry>
        <id>https://qiyins.cn/computer/questions/course-1/web_questions/</id>
        <title>web面试题</title>
        <link rel="alternate" href="https://qiyins.cn/computer/questions/course-1/web_questions/"/>
        <content type="html">&lt;h2 id=&#34;get和post的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get和post的区别&#34;&gt;#&lt;/a&gt; Get 和 Post 的区别&lt;/h2&gt;
&lt;p&gt;get 和 post 都是 http 的请求方式，用户通过不同的请求方式来完成对资源的不同操作，get、post、put、delete 分别对应着资源的查、改、增、删四个操作，一般来说 get 用来获取资源，post 用于更新资源&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;get 请求提交的数据会在地址栏显示出来，post 请求不会&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;由于地址栏长度有限，导致 get 传输的数据有限，而 post 不会&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性，post 安全性比 get 高&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;对servlet的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对servlet的理解&#34;&gt;#&lt;/a&gt; 对 Servlet 的理解&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Servlet 是用 Java 程序编写的服务端程序，而这些 Servlet 都要实现 Servlet 接口，其主要功能是用于交互式的浏览和修改数据，生成动态网页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HttpServlet 重写 doget 和 dopost 方法或者重写 service 方式可以实现对 get 和 post 请求的响应&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;servlet的生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servlet的生命周期&#34;&gt;#&lt;/a&gt; Servlet 的生命周期&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;加载 Servlet 的生命周期，调用 init () 进行初始化，然后调用 service () 方法来处理客户端的请求，最后调用 destroy () 终止&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;forward与redirect的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#forward与redirect的区别&#34;&gt;#&lt;/a&gt; forward 与 redirect 的区别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;forward 地址栏不会发生改变，redirect 地址栏会发生改变&lt;/li&gt;
&lt;li&gt;forward 是服务器上的行为，redirect 是客户端的行为&lt;/li&gt;
&lt;li&gt;forward 是一次请求完成的，redirect 是两次请求完成的&lt;/li&gt;
&lt;li&gt;forward 效率较高&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;jsp与servlet的相同点与不同点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsp与servlet的相同点与不同点&#34;&gt;#&lt;/a&gt; JSP 与 Servlet 的相同点与不同点&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;相同点：JSP 是 Servlet 的扩展，所有的 JSP 文件最终都会被翻译成一个继承 HttpServlet 类，也就是说 JSP 最终也是一个 Servlet&lt;/p&gt;
&lt;p&gt;不同点：JSP 侧重于视图，Servlet 侧重于控制逻辑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;jsp的九大内置对象与四大作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsp的九大内置对象与四大作用域&#34;&gt;#&lt;/a&gt; JSP 的九大内置对象与四大作用域&lt;/h2&gt;
&lt;p&gt;九大内置对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Request：客户端的请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Response：网页传回客户端的响应&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PageContext：网页属性的管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session：会话&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application：servlet 正在执行的内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Out：传递回应的输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Config：servlet 的架构不见&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Page：Jsp 网页本身&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exception：针对错误的网页&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四大作用域&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;page：只在一个页面保留数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;request：只在一个请求中保存数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session：再一次会话中保存数据，仅供单个用户使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application：在整个服务器中保存数据，全部用户共享&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cookie与session的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie与session的区别&#34;&gt;#&lt;/a&gt; Cookie 与 Session 的区别&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cookie 和 session 都是会话跟踪技术&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不同点&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;cookie 的数据是存在客户端的，session 的数据是存在服务器上的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cookie 是不安全的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;session 会在一定时间内存放在服务器上，当访问增多时，会占用服务器的性能&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单个 cookie 的保存数据不能超过 4k, 很多浏览器一个站点最多存放 20 个 cookie&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;建议&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;将登录信息等重要信息保存在 session 中，其他信息如需保留，可以放在 cookie 中，如：购物车&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;购物车最好使用 cookie，范式 cookie 实在客户端禁用的，只是要我们需要使用 cookie + 数据库的方式实现，当从 cookie 中不能取出数据时，就从数据库中取&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="面试题" />
        <updated>2020-12-17T04:05:00.000Z</updated>
    </entry>
    <entry>
        <id>https://qiyins.cn/computer/questions/course-1/mysql/</id>
        <title>数据库面试题</title>
        <link rel="alternate" href="https://qiyins.cn/computer/questions/course-1/mysql/"/>
        <content type="html">&lt;h2 id=&#34;数据库的分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库的分类&#34;&gt;#&lt;/a&gt; 数据库的分类&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;非关系数据库：mysql、oracle、sqlserver 等&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关系型数据库：redis、memcache、mongodb、hahdoop 等&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;redis：键值对数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mongodb：文档数据库&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数据库三范式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库三范式&#34;&gt;#&lt;/a&gt; 数据库三范式&lt;/h2&gt;
&lt;p&gt;范式就是规范，就是在关系型数据库设计表时要遵循的规范&lt;/p&gt;
&lt;p&gt;要想满足第二范式就必须满足第一范式，要想满足第三范式就必须满足第二范式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;第一范式：要求属性具有原子性，不可再分解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二范式：每一行必须被唯一标识（主键）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三范式：任何字段不能由其他字段派生出来，要求字段没有冗余（外键）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;事务四个基本特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务四个基本特性&#34;&gt;#&lt;/a&gt; 事务四个基本特性&lt;/h2&gt;
&lt;p&gt;事务是并发控制的单位，是用户定义的一个操作序列，这些操作要么都做要么都不做，是一个不可分割的工作单位&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原子性（A）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个事务要么完整执行，要么就不执行&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一致性（C）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;底层数据存储的完整性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;隔离性（I）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事务必须在不干扰其他进程或事务的前提下独立完成&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;持久性（D）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;某个事务的执行过程中，对数据所做的所有改动都必须再事务成功结束前保存至某种物理存储设备&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;事务的隔离级别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事务的隔离级别&#34;&gt;#&lt;/a&gt; 事务的隔离级别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;脏读：A 查询 B 修改后问提交的数据，当 B 回滚时，A 查询的数据是无效的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不可重复读：A 在第一次查询用户甲的信息，B 将用户甲的信息修改并提交；A 再次读取用户甲的信息，A 两次获取的信息不同则称为 “不可重复读”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;幻读：A 查询用户数量时，当 B 新增或删除用户时，A 再次获取用户数量时，两次数量不一致，则称为 “幻读”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：“不可重复读” 与 “幻读” 的区别在于，不可重复读强调的是数据信息的改变，幻读强调的是数量上的改变&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;隔离级别&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;脏读&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;不可重复读&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;幻读&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读未提交 (Read Uncommitted)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读已提交 (Read Committed)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可重复读 (Repeated Read)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;串行化 (Serializable)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;以上四种隔离级别，串行化的级别最高，读未提交的级别最低，级别越高，效率越低&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL 支持以上四种隔离级别，默认的隔离级别是可重复度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Oracle 数据库只支持串行化和读已提交 ，默认是读已提交；&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mysql最大的默认连接数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql最大的默认连接数&#34;&gt;#&lt;/a&gt; Mysql 最大的默认连接数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;100&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为什么需要最大连接数？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;特定服务器上面数据库最多只能支持一定数目同时连接&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mysql分页oracle分页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql分页oracle分页&#34;&gt;#&lt;/a&gt; Mysql 分页？Oracle 分页&lt;/h2&gt;
&lt;p&gt;为什么需要分页？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;当有很多数据，一个页面不可能显示为所有数据，需要进行分段显示&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;mysql 使用了 limit 关键字来限制查询条数&lt;/p&gt;
&lt;p&gt;oracle 使用了 rownum 三层嵌套循环&lt;/p&gt;
&lt;h2 id=&#34;对jdbc的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对jdbc的理解&#34;&gt;#&lt;/a&gt; 对 JDBC 的理解&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;他就是 Java 与数据库建立连接的桥梁或插件，用 Java 代码就能操作数据库的增删查改、存储过程、事务等&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;写一个简单的jdbc程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写一个简单的jdbc程序&#34;&gt;#&lt;/a&gt; 写一个简单的 JDBC 程序&lt;/h2&gt;
&lt;h3 id=&#34;操作步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作步骤&#34;&gt;#&lt;/a&gt; 操作步骤&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;加载驱动 (com.mysql.jdbc.Driver)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取参数 (DriverManager.getConnection (url,username,password))&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置参数 (Statement PrepareStatement)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行 (execute)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例子&#34;&gt;#&lt;/a&gt; 例子&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;com.mysql.cj.jdbc.Driver&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;jdbc:mysql://localhost:3306/user?serverTimezone=GMT&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;root&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; password &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;123456&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Connection&lt;/span&gt; connection &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DriverManager&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getConnection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; sql &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;select * from user&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;PreparedStatement&lt;/span&gt; preparedStatement &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; connection&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;prepareStatement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sql&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;ResultSet&lt;/span&gt; resultSet &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; preparedStatement&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;executeQuery&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;resultSet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;resultSet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;resultSet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getObject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;connection&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;preparedStatement&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;resultSet&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;preparedstatement相比于statement的好处&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#preparedstatement相比于statement的好处&#34;&gt;#&lt;/a&gt; PreparedStatement 相比于 statement 的好处&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;PreparedStatement 是预编译的，比 statement 快&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码的可读性和可维护性高&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以防 SQL 注入&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数据库连接池的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库连接池的作用&#34;&gt;#&lt;/a&gt; 数据库连接池的作用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;限定数据库的连接个数，进行统一的连接管理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节约资源&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加快响应速度&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数据库优化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库优化&#34;&gt;#&lt;/a&gt; 数据库优化&lt;/h2&gt;
</content>
        <category term="面试题" />
        <updated>2020-12-17T04:04:00.000Z</updated>
    </entry>
    <entry>
        <id>https://qiyins.cn/computer/questions/course-1/mybatis/</id>
        <title>Mybatis面试题</title>
        <link rel="alternate" href="https://qiyins.cn/computer/questions/course-1/mybatis/"/>
        <content type="html">&lt;h3 id=&#34;什么是mybatis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是mybatis&#34;&gt;#&lt;/a&gt; 什么是 Mybatis&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Mybatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制 SQL、存储过程以及高级映射&lt;/p&gt;
&lt;p&gt;Mybatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO 为数据库中的记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;和的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和的区别&#34;&gt;#&lt;/a&gt; #{} 和 ${} 的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;#{} 是占位符，预编译处理；${} 是拼接符，字符串替换；&lt;/p&gt;
&lt;p&gt;处理 #{} 时，#{} 传入参数是以字符串传入，会将 #{} 替换为？，调用 PrepareStatement 的 set 方法进行赋值&lt;/p&gt;
&lt;p&gt;变量替换后 #{} 对应的变量自动加上单引号 &#39;&#39;，${} 对应的变量不会加上单引号 &#39;&#39;；&lt;/p&gt;
&lt;p&gt;#{} 可以有效的防止 SQL 注入，提高系统安全&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一级缓存和二级缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一级缓存和二级缓存&#34;&gt;#&lt;/a&gt; 一级缓存和二级缓存&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一级缓存：是 Session 缓存，是基于 HashMap 存储的，作用域为 SqlSession 范围的，默认是打开一级缓存&lt;/p&gt;
&lt;p&gt;二级缓存：是 namespace 缓存，是基于 HashMap 存储的，作用域为 Mapper 的，默认不开启&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="面试题" />
        <updated>2020-12-17T04:01:00.000Z</updated>
    </entry>
    <entry>
        <id>https://qiyins.cn/computer/questions/course-1/springmvc_questions/</id>
        <title>SpringMVC面试题</title>
        <link rel="alternate" href="https://qiyins.cn/computer/questions/course-1/springmvc_questions/"/>
        <content type="html">&lt;h3 id=&#34;springmvc的执行流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#springmvc的执行流程&#34;&gt;#&lt;/a&gt; springmvc 的执行流程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;发送请求到前端控制器 DispatcherServlet&lt;/li&gt;
&lt;li&gt;前端控制器请求处理映射器 HandlerMapping 查找 Handler&lt;/li&gt;
&lt;li&gt;处理映射器向前端控制器返回 Handler&lt;/li&gt;
&lt;li&gt;前端控制器调用处理适配器去执行 Handler&lt;/li&gt;
&lt;li&gt;Handler 执行完给适配器返回 ModelAndView&lt;/li&gt;
&lt;li&gt;处理适配器向前端控制器返回 ModelAndView&lt;/li&gt;
&lt;li&gt;前端控制器请求视图解析器 ViewResolver 去进行视图解析&lt;/li&gt;
&lt;li&gt;视图解析器向前端控制器返回 View 视图&lt;/li&gt;
&lt;li&gt;前端控制器进行视图渲染&lt;/li&gt;
&lt;li&gt;前端控制器向用户响应结果&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
        <category term="面试题" />
        <updated>2020-12-17T03:59:00.000Z</updated>
    </entry>
    <entry>
        <id>https://qiyins.cn/computer/questions/course-1/java_quetsions/</id>
        <title>Java面试题</title>
        <link rel="alternate" href="https://qiyins.cn/computer/questions/course-1/java_quetsions/"/>
        <content type="html">&lt;h2 id=&#34;java基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java基础&#34;&gt;#&lt;/a&gt; Java 基础&lt;/h2&gt;
&lt;h3 id=&#34;java跨平台原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java跨平台原理&#34;&gt;#&lt;/a&gt; Java 跨平台原理&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Java 对于不同系统、不同版本、不同位数的 Java 虚拟机来屏蔽不同的系统指令集差异而对外提供统一的接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;jdk-jre-jvm的关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jdk-jre-jvm的关系&#34;&gt;#&lt;/a&gt; JDK、JRE、JVM 的关系&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JDK (java development toolkit)：Java 开发工具包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是 java 的核心，包括了 java 运行环境，一堆 java 工具（javac、java、jdb）和 java 基础类库（javaAPI 包括 rt.jar）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JRE (java runtime environment)：Java 运行环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有的 java 程序都要在 JRE 下才能运行，包括 JVM 和 Java 核心类库和支持文件，与 JDK 相比不包含开发工具（编译器、调试器和其他工具）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JVM (java virtual mechinal)：Java 虚拟机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JVM 是 JRE 的一部分，他是一个虚拟出来的计算机，JVM 的主要工作是解释自己的指令集（即字节码）并映射到本地的 CPU 指令集或 OS 的系统调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面向对象的特征&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象的特征&#34;&gt;#&lt;/a&gt; 面向对象的特征&lt;/h3&gt;
&lt;p&gt;四个：封装、抽象、继承、多态&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;封装：将客观的事物封装成抽象的类，并且将自己类中的属性私有化，只对外提供 set 和 get 方法来进行属性的赋值和取值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;继承：子类继承父类，子类可以使用父类的所有功能，并且在无需改变父类的情况下能对这些功能进行扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多态：允许相同或不同子类型的对象对同一消息作出不同的响应，如重载和重写&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;访问修饰符publicprivateprotected以及默认时的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问修饰符publicprivateprotected以及默认时的区别&#34;&gt;#&lt;/a&gt; 访问修饰符 public,private,protected, 以及默认时的区别&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;修饰符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;当前类&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;同包&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;子类&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;其他包&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;public&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;protect&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;default&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;private&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;√&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;基本数据类型包装类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型包装类型&#34;&gt;#&lt;/a&gt; 基本数据类型，包装类型&lt;/h3&gt;
&lt;p&gt;基本数据类型有八种&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;byte、short、int、long、char、boolean、float、double&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数据类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;占用字节&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;取值范围&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;默认值&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;包装类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;boolean&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;只有 true 和 false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true、false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;byte&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1 (8 位）&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-128~127&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;short&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2 (16 位)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-32768~32767&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Short&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4 (32 位)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2&lt;sup&gt;31~2&lt;/sup&gt;31-1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;long&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2&lt;sup&gt;63~2&lt;/sup&gt;63-1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.0l&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3.4E-45~1.4E38&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.0f&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.9E-324~1.8E308&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;char&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0~65535&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\u0000 (空格)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;包装类型：每一个基本数据类型都一一对于一个包装类型&lt;/p&gt;
&lt;p&gt;java 是一个面向对象的语言，而基本数据类型不具备面向对象的特征&lt;/p&gt;
&lt;h3 id=&#34;拆箱和装箱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拆箱和装箱&#34;&gt;#&lt;/a&gt; 拆箱和装箱&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;装箱：把基本数据类型转化为对应的包装类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integer i = 1;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动装箱实际上会在编译时会调用 Integer.valueOf () 方法来装箱&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拆箱：把包装类型转换为基本数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;int j = i;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实际上在编译时会调用 intValue () 方法来拆箱&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;和equals的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#和equals的区别&#34;&gt;#&lt;/a&gt; == 和 equals 的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;== 用来判断两个变量之间的值是否相等，变量可分为基本数据变量和引用类型，如果比较的是基本数据类型，那么就是比较他们的值是否相等，如果比较的是引用类型，那么比较的是他们引用的内存地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;equals 不能用于作用与基本数据类型的变量，他继承至 Object 类，比较的是是否是同一对象，如果没有对 equals 方法进行重写，则比较的是引用类型变量所指向对象的地址&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;重写equals为何要重写hashcode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重写equals为何要重写hashcode&#34;&gt;#&lt;/a&gt; 重写 equals 为何要重写 hashcode&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;使用 hashcode 方法提前校验，可以避免每一次对比都调用 equals 方法，提高效率（因为 hashcode 不等，equals 一定不等）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为了保证是同一对象，如果重写了 equals 方法，而没有重写 hashcode 方法，会出现 equals 相等，hashcode 不相等的情况，重写 hashcode 方法就是为了避免这种情况发生&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;stringstringbuilderstringbuffer的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stringstringbuilderstringbuffer的区别&#34;&gt;#&lt;/a&gt; String，StringBuilder，StringBuffer 的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;String 是字符串常量，其值不能改变，底层是使用了一个不可变的数组对象 (final char [])&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;StringBulider 是线程不安全的，其值可以改变，速度快，底层是使用了一个可变的数组对象（没有用 final 修饰）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;StringBuffer 是线程安全的，其值可以改变，速度慢。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;拼接字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拼接字符串&#34;&gt;#&lt;/a&gt; 拼接字符串&lt;/h3&gt;
&lt;blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;开辟了三个内存空间&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt; sb &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sb&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;只开辟了一个内存空间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拼接字符串不能使用 String，要是有 StringBuilder 或 StringBuffer&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合&#34;&gt;#&lt;/a&gt; 集合&lt;/h2&gt;
&lt;h3 id=&#34;map&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#map&#34;&gt;#&lt;/a&gt; Map&lt;/h3&gt;
&lt;p&gt;可分为 HashMap 和 TreeMap&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HashMap：hash 表无序，不能放重复键，允许放空键空值&lt;/p&gt;
&lt;p&gt;TreeMap：数据结构是树，有序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;collection&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#collection&#34;&gt;#&lt;/a&gt; Collection&lt;/h3&gt;
&lt;p&gt;分为 List 和 Set&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;List：有序的，可以重复的&lt;/p&gt;
&lt;p&gt;Set：无序的，不可重复的，需要重写 equals 和 hashcode 方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List 接口：ArrayList、LinkedList&lt;/p&gt;
&lt;p&gt;Set 接口：HashSet、TreeSet&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HashSet：底层数据结构是哈希链表，保证元素的唯一，不保证元素顺序不变，需要使用 equals 方法和 hashcode 方法&lt;/p&gt;
&lt;p&gt;TreeSet：底层数据结构是二叉树，保证元素唯一，并对元素按自然排序进行排序，可以实现 Compareable 接口重写 compareTo () 实现自定义排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;arraylist-linkedlist和vector的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arraylist-linkedlist和vector的区别&#34;&gt;#&lt;/a&gt; ArrayList、LinkedList 和 vector 的区别&lt;/h3&gt;
&lt;p&gt;ArrayLsit 和 LinkedList 都是实现了 List 接口&lt;/p&gt;
&lt;p&gt;ArrayList 是基于动态数组的数据结构，LinkedList 是基于链表的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ArrayList：查询快，增加删除慢，由于数组在内存中是一块连续的内存，查询根据索引就能找到，所以快，而添加和删除需要移动内存，所以慢。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LinkedList：增加删除快，查询慢，由于链表在内存中不是连续的，查找时，需要从头部开始，挨着找，所以查询慢，而添加删除时，只需要改变引用指向即可，所以增加删除快&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ArrayList：默认容量 10，每次扩容时为之前的 1.5 倍，是线程不安全的，效率高&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;vector：默认容量 10，每次扩容是为之前的 2 倍，是线程安全的，效率低&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;hashmap和hashtable的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hashmap和hashtable的区别&#34;&gt;#&lt;/a&gt; HashMap 和 HashTable 的区别&lt;/h3&gt;
&lt;p&gt;相同点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HashMap 和 HashTable 都是通过键值对来存储值的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不同点&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HashMap：可以把 null 作为键或值，是线程安全的，效率较高，默认容量 16，每次扩容时为原来的两倍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HashTable：不能把 null 作为键或值，是线程不安全的，效率较低，默认容量为 11，每次 扩容为原来的两倍加一&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建时，如果给定容量初始值，那么 HashTable 就是给定的初始值，而 HashMap 会自动扩充为 2 的幂次方大小&lt;/p&gt;
&lt;h3 id=&#34;hashmap与concurrenthashmap的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hashmap与concurrenthashmap的区别&#34;&gt;#&lt;/a&gt; HashMap 与 concurrentHashMap 的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;concurrentHashMap 对整个 Map 进行了分段分割，分为了 N 个 Segment，默认提升 16 倍，相对于 HashTable 的 synchronized 锁粒度更精细了一些，并发性能更好，而 HashMap 没有锁机制，不是线程安全的，JDk1.8 之后 concurrentHashMap 摒弃了 Segment 的数据结构，直接采用数组 + 链表 + 红黑树的数据结构实现，并发控制使用 synchronized 和 CAS (compare and swap) 来操作&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;io&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io&#34;&gt;#&lt;/a&gt; IO&lt;/h2&gt;
&lt;h3 id=&#34;bio-nio-aio的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bio-nio-aio的区别&#34;&gt;#&lt;/a&gt; BIO、NIO、AIO 的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;BIO：同步阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户发起一个 IO 操作请求后，必须等待 IO 操作的完成，只有当真正完成了 IO 操作之后，用户进程才能运行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NIO：同步非阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户发起一个 IO 操作请求后，后边可以做其他事情，但是用户进程需要时不时的询问 IO 操作是否就绪，从而引起不必要的 CPU 资源浪费&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AIO：异步非阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户发起一个 IO 操作请求后立即返回，等 IO 操作真正完成之后，应用程序会得到 IO 操作完成的通知。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;实现拷贝文件的工具类使用字符流还是字节流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现拷贝文件的工具类使用字符流还是字节流&#34;&gt;#&lt;/a&gt; 实现拷贝文件的工具类使用字符流还是字节流&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我们拷贝的文件不确定是只包含字符流，又可能是字节流（图片、声音、图像等），为保证通用性，要是有字节流&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;多线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程&#34;&gt;#&lt;/a&gt; 多线程&lt;/h2&gt;
&lt;h3 id=&#34;实现线程的方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现线程的方式&#34;&gt;#&lt;/a&gt; 实现线程的方式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;继承 Thread 类&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现 Runnable 接口&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现 Callable 接口&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;继承拓展性不强，Java 总是单继承，如果一个类继承了 Thread 类就不能继承其他类了&lt;/p&gt;
&lt;h3 id=&#34;线程的启动方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程的启动方式&#34;&gt;#&lt;/a&gt; 线程的启动方式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;启动线程调用 start 方法，而启动以后执行的是 run 方法&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;区分线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#区分线程&#34;&gt;#&lt;/a&gt; 区分线程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;调用 setName 方法，设置一个线程名称，只是一种规范，在线程创建完成后，都需要设置名称&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;sleep和wait的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sleep和wait的区别&#34;&gt;#&lt;/a&gt; sleep 和 wait 的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;sleep 定义在 Thread 类上，不会释放锁，使用在任何地方&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wait 定义在 object 类上，会释放锁，必须在同步方法或同步代码块中执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;超时或调用 interrupt 方法唤醒 sleep 线程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;notify 随机唤醒一个 wait 线程，notifyall 唤醒所有 wait 线程&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;synchronized和lock的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#synchronized和lock的区别&#34;&gt;#&lt;/a&gt; synchronized 和 lock 的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;synchronized 时一个关键字，lock 是一个接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;synchronized 可以给方法和同步代码块加锁，lock 只能给同步代码块加锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;synchronized 无需手动获取和释放锁，发生异常时会自动解锁，不会出现死锁，lock 需要自己手动加锁和释放锁，如 lock ()、unlock ()，如果忘记使用 unlock ()，则会出现死锁，所以一般在 finally 里面加上 unlock ()&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;synchronized和volatile的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#synchronized和volatile的区别&#34;&gt;#&lt;/a&gt; synchronized 和 volatile 的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用位置不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;synchronized 修饰方法、代码块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;volatile 修饰变量&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;作用不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;synchronized 可以保证原子性和可见性，可能会造成线程阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;volatile 仅能保证可见性，无法保证原子性，不会造成线程阻塞&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;什么是死锁如何解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是死锁如何解决&#34;&gt;#&lt;/a&gt; 什么是死锁，如何解决&lt;/h3&gt;
&lt;p&gt;死锁&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;线程 1 独占资源 a 并且尝试获取独占资源 b，而线程 2 独占资源 b 并尝试获取独占资源 a，两个线程在等待另一个资源的同时不释放资源，就形成了死锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;形成死锁的四个必要条件&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;互斥条件：一个资源每次只能被一个进程使用&lt;/li&gt;
&lt;li&gt;请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放&lt;/li&gt;
&lt;li&gt;不剥夺资源：进程以获得的资源，在未完成之前，不能强行剥夺&lt;/li&gt;
&lt;li&gt;循环等待条件：若干个进程形成一种头尾相接的循环等待资源关系&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;预防死锁&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;破坏请求和保存条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一次性的申请所有资源，之后不再申请资源，如果不满足资源条件则得不到资源分配。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只获得初期资源运行，之后将运行完的资源释放，请求新的资源&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;破坏不可抢占条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当一个进程获取某种不可抢占资源，提出新的资源申请，若不能满足，则释放所有资源，以后需要，再次重新申请&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;破坏循环等待条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对资源进行排号，按照序号递增的顺序请求资源，若进程获得序号高的资源想要获取序号低的资源，就需要先释放序号高的资源&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;线程并发库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程并发库&#34;&gt;#&lt;/a&gt; 线程并发库&lt;/h3&gt;
&lt;p&gt;创建线程池的四种方式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方法名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;newFixedThreadPool()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;创建固定数量的线程池&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;newCachedThreadPool()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;创建缓存的线程池&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;newSingleThreadExecutor()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;创建单个线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;newScheduledThreadPool()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;创建定时器线程池&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;线程池的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程池的作用&#34;&gt;#&lt;/a&gt; 线程池的作用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;限定线程的个数，提高线程的可管理性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高响应速度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;降低资源消耗&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;反射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射&#34;&gt;#&lt;/a&gt; 反射&lt;/h2&gt;
&lt;h3 id=&#34;什么是反射&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是反射&#34;&gt;#&lt;/a&gt; 什么是反射&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;程序在运行时可以通过类名获取类的所有信息&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;反射的实现方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射的实现方式&#34;&gt;#&lt;/a&gt; 反射的实现方式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Class.forName()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类名.class&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象.getClass ()&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;反射的优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反射的优缺点&#34;&gt;#&lt;/a&gt; 反射的优缺点&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;优点：在运行期间绑定对象，提高了灵活性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：有性能有影响，他的操作总是慢于直接代码&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;怎么实现动态代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#怎么实现动态代理&#34;&gt;#&lt;/a&gt; 怎么实现动态代理&lt;/h3&gt;
&lt;p&gt;JDK 动态代理和 Cglib 代理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JDK 代理是基于接口实现的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cglib 代理是基于继承实现的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="面试题" />
        <updated>2020-12-15T11:21:00.000Z</updated>
    </entry>
    <entry>
        <id>https://qiyins.cn/computer/questions/course-1/spring_questions/</id>
        <title>web面试题</title>
        <link rel="alternate" href="https://qiyins.cn/computer/questions/course-1/spring_questions/"/>
        <content type="html">&lt;h2 id=&#34;get和post的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#get和post的区别&#34;&gt;#&lt;/a&gt; Get 和 Post 的区别&lt;/h2&gt;
&lt;p&gt;get 和 post 都是 http 的请求方式，用户通过不同的请求方式来完成对资源的不同操作，get、post、put、delete 分别对应着资源的查、改、增、删四个操作，一般来说 get 用来获取资源，post 用于更新资源&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;get 请求提交的数据会在地址栏显示出来，post 请求不会&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;由于地址栏长度有限，导致 get 传输的数据有限，而 post 不会&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性，post 安全性比 get 高&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;对servlet的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对servlet的理解&#34;&gt;#&lt;/a&gt; 对 Servlet 的理解&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Servlet 是用 Java 程序编写的服务端程序，而这些 Servlet 都要实现 Servlet 接口，其主要功能是用于交互式的浏览和修改数据，生成动态网页&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HttpServlet 重写 doget 和 dopost 方法或者重写 service 方式可以实现对 get 和 post 请求的响应&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;servlet的生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#servlet的生命周期&#34;&gt;#&lt;/a&gt; Servlet 的生命周期&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;加载 Servlet 的生命周期，调用 init () 进行初始化，然后调用 service () 方法来处理客户端的请求，最后调用 destroy () 终止&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;forward与redirect的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#forward与redirect的区别&#34;&gt;#&lt;/a&gt; forward 与 redirect 的区别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;forward 地址栏不会发生改变，redirect 地址栏会发生改变&lt;/li&gt;
&lt;li&gt;forward 是服务器上的行为，redirect 是客户端的行为&lt;/li&gt;
&lt;li&gt;forward 是一次请求完成的，redirect 是两次请求完成的&lt;/li&gt;
&lt;li&gt;forward 效率较高&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;jsp与servlet的相同点与不同点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsp与servlet的相同点与不同点&#34;&gt;#&lt;/a&gt; JSP 与 Servlet 的相同点与不同点&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;相同点：JSP 是 Servlet 的扩展，所有的 JSP 文件最终都会被翻译成一个继承 HttpServlet 类，也就是说 JSP 最终也是一个 Servlet&lt;/p&gt;
&lt;p&gt;不同点：JSP 侧重于视图，Servlet 侧重于控制逻辑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;jsp的九大内置对象与四大作用域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsp的九大内置对象与四大作用域&#34;&gt;#&lt;/a&gt; JSP 的九大内置对象与四大作用域&lt;/h2&gt;
&lt;p&gt;九大内置对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Request：客户端的请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Response：网页传回客户端的响应&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PageContext：网页属性的管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session：会话&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application：servlet 正在执行的内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Out：传递回应的输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Config：servlet 的架构不见&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Page：Jsp 网页本身&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exception：针对错误的网页&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;四大作用域&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;page：只在一个页面保留数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;request：只在一个请求中保存数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session：再一次会话中保存数据，仅供单个用户使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application：在整个服务器中保存数据，全部用户共享&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cookie与session的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cookie与session的区别&#34;&gt;#&lt;/a&gt; Cookie 与 Session 的区别&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cookie 和 session 都是会话跟踪技术&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不同点&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;cookie 的数据是存在客户端的，session 的数据是存在服务器上的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cookie 是不安全的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;session 会在一定时间内存放在服务器上，当访问增多时，会占用服务器的性能&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单个 cookie 的保存数据不能超过 4k, 很多浏览器一个站点最多存放 20 个 cookie&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;建议&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;将登录信息等重要信息保存在 session 中，其他信息如需保留，可以放在 cookie 中，如：购物车&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;购物车最好使用 cookie，范式 cookie 实在客户端禁用的，只是要我们需要使用 cookie + 数据库的方式实现，当从 cookie 中不能取出数据时，就从数据库中取&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mvc的各个部分有哪些技术实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mvc的各个部分有哪些技术实现&#34;&gt;#&lt;/a&gt; MVC 的各个部分有哪些技术实现&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;M (Model)：模型 Javabean&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;V (View)：视图 jsp、html&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C (Control)：控制器：Servlet、Action&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JSP+Servlet+Javabean 是最经典的 mvc 模式，实际上就是 model2 的实现方式，将逻辑与视图隔离开&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;model1：jsp+service+dao&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;model2：jsp+servlet+service+dao&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="面试题" />
        <updated>2020-12-15T11:21:00.000Z</updated>
    </entry>
</feed>
