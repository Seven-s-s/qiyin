{
    "version": "https://jsonfeed.org/version/1",
    "title": "七音 • All posts by \"java\" tag",
    "description": "路漫漫其修远兮，吾将上下而求索",
    "home_page_url": "https://qiyins.cn",
    "items": [
        {
            "id": "https://qiyins.cn/computer/Java/course-1/collection/",
            "url": "https://qiyins.cn/computer/Java/course-1/collection/",
            "title": "集合",
            "date_published": "2020-12-15T11:21:00.000Z",
            "content_html": "<h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h2>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>无序的，不可重复的集合</p>\n<p>要保证元素的唯一性，需要重写 hashCode () 和 equals () 方法</p>\n<h3 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h3>\n<blockquote>\n<p>​\t<strong>添加：add ()</strong></p>\n<p>​\t<strong>删除：remove ()</strong></p>\n</blockquote>\n<h3 id=\"取值方式\"><a class=\"anchor\" href=\"#取值方式\">#</a> 取值方式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>foreach 遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h2>\n<h3 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h3>\n<p>有序的，可重复的集合</p>\n<h3 id=\"方法-2\"><a class=\"anchor\" href=\"#方法-2\">#</a> 方法</h3>\n<blockquote>\n<p><strong>添加：add ()</strong></p>\n<p><strong>删除：remove ()</strong></p>\n<p><strong>获取：get ()</strong></p>\n<p><strong>长度：size ()</strong></p>\n</blockquote>\n<h3 id=\"取值方式-2\"><a class=\"anchor\" href=\"#取值方式-2\">#</a> 取值方式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>for 循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>foreach 循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h2>\n<h3 id=\"概念-3\"><a class=\"anchor\" href=\"#概念-3\">#</a> 概念</h3>\n<p>无序，键值对集合（映射关系），键不能重复，值可以重复，键可以为 null，值也可为 null。</p>\n<h3 id=\"方法-3\"><a class=\"anchor\" href=\"#方法-3\">#</a> 方法</h3>\n<blockquote>\n<p><strong>添加：put (key,value)</strong></p>\n<p><strong>获取：get (key)</strong></p>\n<p><strong>删除：remove (key)</strong></p>\n</blockquote>\n<h3 id=\"获取所有的值\"><a class=\"anchor\" href=\"#获取所有的值\">#</a> 获取所有的值</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"better\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"best\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>拿到所有的 key，遍历 key，根据 key 拿值</p>\n<p><strong>foreach 循环遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"获取所有的映射关系集合\"><a class=\"anchor\" href=\"#获取所有的映射关系集合\">#</a> 获取所有的映射关系集合</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entries <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>for 循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span>entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<h3 id=\"iterator\"><a class=\"anchor\" href=\"#iterator\">#</a> Iterator</h3>\n<h4 id=\"方法-4\"><a class=\"anchor\" href=\"#方法-4\">#</a> 方法</h4>\n<blockquote>\n<p><strong>next ()：返回迭代中的下一个元素</strong></p>\n<p><strong>hasNext ()：如果迭代器有下一个元素，返回 true</strong></p>\n</blockquote>\n<h3 id=\"listiterator\"><a class=\"anchor\" href=\"#listiterator\">#</a> ListIterator</h3>\n<h4 id=\"方法-5\"><a class=\"anchor\" href=\"#方法-5\">#</a> 方法</h4>\n<blockquote>\n<p><strong>next()</strong></p>\n<p><strong>hasNext()</strong></p>\n<p><strong>previous ()：返回列表中的上一个元素</strong></p>\n<p><strong>hasPrevious ()：如果迭代在相反方向上遍历有更多元素，返回 true</strong></p>\n<p><strong>add ()：向指定的元素插入列表</strong></p>\n</blockquote>\n<h2 id=\"array和list的相互转换\"><a class=\"anchor\" href=\"#array和list的相互转换\">#</a> <strong>Array 和 List 的相互转换</strong></h2>\n<h3 id=\"array转list\"><a class=\"anchor\" href=\"#array转list\">#</a> <strong>array 转 list</strong></h3>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"string1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"string2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"string3\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Arrays.asList 产生一个 Arrays 内置的类 其中数组用 final 表示！</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//list.add (\"string4\");  所以不能往其中添加元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"list转array\"><a class=\"anchor\" href=\"#list转array\">#</a> <strong>list 转 array</strong></h3>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//toArray 中不指定参数 只能转换为 Object 类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strings <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>list2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> v<span class=\"token operator\">:</span>strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://qiyins.cn/computer/Java/course-1/file/",
            "url": "https://qiyins.cn/computer/Java/course-1/file/",
            "title": "file",
            "date_published": "2020-12-15T11:21:00.000Z",
            "content_html": "<h1 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h1>\n<blockquote>\n<p><strong>File file = new File (路径);</strong></p>\n<p><strong>createNewFile ()：创建文件，如果有没有该文件就创建文件并返回 true，否则返回 false</strong></p>\n<p><strong>mkdir ()：创建目录，如果有该目录则创建该目录并返回 true，否则返回 false</strong></p>\n<p><strong>mkdirs ()：创建多级目录，如果有这多级目录则创建多级目录并返回 true，否则返回 false</strong></p>\n<p><strong>isDirectory ()：判断 file 是否为目录</strong></p>\n<p><strong>isFile ()：判断 file 是否为文件</strong></p>\n<p><strong>exists ()：判断 file 是否存在</strong></p>\n<p><strong>getAbsolutePath ()：返回该路径的绝对路径名字符串</strong></p>\n<p><strong>getPath ()：返回该路径的路径名字符串</strong></p>\n<p><strong>getName ()：返回该路径表示的文件或目录</strong></p>\n<p><strong>list ()：返回该目录中的文件和目录的名称字符串数组</strong></p>\n<p><strong>listFiles ()：返回该目录中的文件和目录的 file 对象数组</strong></p>\n<p><strong>delete ()：删除该目录，如果目录中有内容，不能直接删除，先要删除目录中的内容，在删除目录</strong></p>\n</blockquote>\n<h1 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h1>\n<ol>\n<li>\n<p>在 D 盘下创建文件 file.txt</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 D 盘下创建目录 file</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 D 盘下创建目录 file，在 file 目录下在创建目录 files</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file//files\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://qiyins.cn/computer/Java/course-1/io/",
            "url": "https://qiyins.cn/computer/Java/course-1/io/",
            "title": "IO流",
            "date_published": "2020-12-15T11:21:00.000Z",
            "content_html": "<h1 id=\"字节流\"><a class=\"anchor\" href=\"#字节流\">#</a> 字节流</h1>\n<h2 id=\"输出流\"><a class=\"anchor\" href=\"#输出流\">#</a> 输出流</h2>\n<h3 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileOutputStream fos = new FileOutputStream (文件名);</strong></p>\n<p><strong>write ()：往文件里面写数据</strong></p>\n<p><strong>getBytes ()：返回字符串对应的字节数组</strong></p>\n<p><strong>close ()：释放资源</strong></p>\n</blockquote>\n<h3 id=\"换行符\"><a class=\"anchor\" href=\"#换行符\">#</a> 换行符</h3>\n<blockquote>\n<p><strong>Window：\\r\\n</strong></p>\n<p><strong>Linux：\\n</strong></p>\n<p><strong>Mac：\\r</strong></p>\n</blockquote>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p>向 file.txt 文件写入 HelloWorld</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"输入流\"><a class=\"anchor\" href=\"#输入流\">#</a> 输入流</h2>\n<h3 id=\"方法-2\"><a class=\"anchor\" href=\"#方法-2\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileInputStream fis = new FileInputStream (文件名);</strong></p>\n<p><strong>read ()：读取一个字节，如果有参数并且是 byte 数组，则返回的数据长度</strong></p>\n<p><strong>close ()：释放资源</strong></p>\n</blockquote>\n<h3 id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子</h3>\n<blockquote>\n<p><strong>向 file.txt 读取数据</strong></p>\n<p><strong>方法一</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>方法二</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> data <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"字符流\"><a class=\"anchor\" href=\"#字符流\">#</a> 字符流</h1>\n<h2 id=\"输出流-2\"><a class=\"anchor\" href=\"#输出流-2\">#</a> 输出流</h2>\n<h3 id=\"方法-3\"><a class=\"anchor\" href=\"#方法-3\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileWriter fw = new FileWriter();</strong></p>\n<p><strong>write ()：写数据</strong></p>\n<p><strong>flush ()：刷新</strong></p>\n<p><strong>close ()：释放资源</strong></p>\n</blockquote>\n<h4 id=\"例子-3\"><a class=\"anchor\" href=\"#例子-3\">#</a> 例子</h4>\n<blockquote>\n<p><strong>向 file.txt 写入 Hello World</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不刷新将不会写入</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭资源前会自动刷新</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"输入流-2\"><a class=\"anchor\" href=\"#输入流-2\">#</a> 输入流</h2>\n<h3 id=\"方法-4\"><a class=\"anchor\" href=\"#方法-4\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileReader fr = new FileReader();</strong></p>\n<p><strong>read ()：读取数据</strong></p>\n</blockquote>\n<h3 id=\"例子-4\"><a class=\"anchor\" href=\"#例子-4\">#</a> 例子</h3>\n<blockquote>\n<p>方法一</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>方法二</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> data <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://qiyins.cn/computer/Java/course-1/Java/",
            "url": "https://qiyins.cn/computer/Java/course-1/Java/",
            "title": "Java基础",
            "date_published": "2020-12-15T11:21:00.000Z",
            "content_html": "<h1 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">占用字节</th>\n<th style=\"text-align:center\">取值范围</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">包装类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只有 true 和 false</td>\n<td style=\"text-align:center\">true、false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">Boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">1 (8 位）</td>\n<td style=\"text-align:center\">-128~127</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Byte</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">2 (16 位)</td>\n<td style=\"text-align:center\">-32768~32767</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Short</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4 (32 位)</td>\n<td style=\"text-align:center\">-2<sup>31~2</sup>31-1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Integer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">-2<sup>63~2</sup>63-1</td>\n<td style=\"text-align:center\">0.0l</td>\n<td style=\"text-align:center\">Long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3.4E-45~1.4E38</td>\n<td style=\"text-align:center\">0.0f</td>\n<td style=\"text-align:center\">Float</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">4.9E-324~1.8E308</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Double</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0~65535</td>\n<td style=\"text-align:center\">\\u0000 (空格)</td>\n<td style=\"text-align:center\">Character</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"访问控制修饰符\"><a class=\"anchor\" href=\"#访问控制修饰符\">#</a> 访问控制修饰符</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">修饰符</th>\n<th style=\"text-align:center\">当前类</th>\n<th style=\"text-align:center\">同包</th>\n<th style=\"text-align:center\">子类</th>\n<th style=\"text-align:center\">其他包</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protect</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"character类\"><a class=\"anchor\" href=\"#character类\">#</a> Character 类</h1>\n<ul>\n<li>方法</li>\n</ul>\n<blockquote>\n<p><strong>isDigit()</strong><br />\n 是否是一个数字字符</p>\n<p><strong>isWhitespace()</strong><br />\n 是否是一个空白字符</p>\n<p><strong>isUpperCase()</strong><br />\n 是否是大写字母</p>\n<p><strong>isLowerCase()</strong><br />\n 是否是小写字母</p>\n<p>**toUpperCase() **<br />\n 指定字母的大写形式</p>\n<p><strong>toLowerCase()</strong><br />\n 指定字母的小写形式</p>\n<p><strong>toString()</strong><br />\n 返回字符的字符串形式，字符串的长度仅为 1</p>\n</blockquote>\n<h1 id=\"string类\"><a class=\"anchor\" href=\"#string类\">#</a> String 类</h1>\n<h2 id=\"常用方法\"><a class=\"anchor\" href=\"#常用方法\">#</a> 常用方法</h2>\n<blockquote>\n<p>char charAt (int index)：返回指定索引处的 char 值。</p>\n<p>int compareTo (String anotherString)：按字典顺序比较两个字符串。</p>\n<p>String concat (String str)：将指定字符串连接到此字符串的结尾。</p>\n<p>byte [] getBytes ()：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</p>\n<p>int indexOf (int ch)：返回指定字符在此字符串中第一次出现处的索引。</p>\n<p>boolean matches (String regex)：告知此字符串是否匹配给定的正则表达式。</p>\n<p>String replace (char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</p>\n<p>String [] split (String regex)：根据给定正则表达式的匹配拆分此字符串。</p>\n<p>char [] toCharArray ()：将此字符串转换为一个新的字符数组。</p>\n<p>String substring (int beginIndex, int endIndex)：返回一个新字符串，它是此字符串的一个子字符串。</p>\n<p>contains (CharSequence chars)：判断是否包含指定的字符系列。</p>\n<p>isEmpty ()：判断字符串是否为空。</p>\n</blockquote>\n<h2 id=\"其他方法\"><a class=\"anchor\" href=\"#其他方法\">#</a> 其他方法</h2>\n<blockquote>\n<p>int compareTo (Object o)：把这个字符串和另一个对象比较。</p>\n<p>int compareToIgnoreCase (String str)：按字典顺序比较两个字符串，不考虑大小写。</p>\n<p>static String copyValueOf (char [] data)：返回指定数组中表示该字符序列的 String。</p>\n<p>static String copyValueOf (char [] data, int offset, int count)：返回指定数组中表示该字符序列的 String。</p>\n<p>boolean equals (Object anObject)：将此字符串与指定的对象比较。</p>\n<p>boolean equalsIgnoreCase (String anotherString)：将此 String 与另一个 String 比较，不考虑大小写。</p>\n<p>byte [] getBytes (String charsetName)：使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</p>\n<p>void getChars (int srcBegin, int srcEnd, char [] dst, int dstBegin)：将字符从此字符串复制到目标字符数组。</p>\n<p>int hashCode ()：返回此字符串的哈希码。</p>\n<p>int indexOf (int ch, int fromIndex)：返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</p>\n<p>int indexOf (String str)：返回指定子字符串在此字符串中第一次出现处的索引。</p>\n<p>int indexOf (String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</p>\n<p>int lastIndexOf (int ch)：返回指定字符在此字符串中最后一次出现处的索引。</p>\n<p>int lastIndexOf (int ch, int fromIndex)：返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</p>\n<p>int lastIndexOf (String str)：返回指定子字符串在此字符串中最右边出现处的索引。</p>\n<p>int lastIndexOf (String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</p>\n<p>int length ()：返回此字符串的长度。</p>\n<p>boolean regionMatches (boolean ignoreCase, int toffset, String other, int ooffset, int len)：测试两个字符串区域是否相等。</p>\n<p>boolean regionMatches (int toffset, String other, int ooffset, int len)：测试两个字符串区域是否相等。</p>\n<p>String replaceAll (String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 String replaceFirst (String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</p>\n<p>String [] split (String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串。</p>\n<p>boolean startsWith (String prefix)：测试此字符串是否以指定的前缀开始。</p>\n<p>boolean startsWith (String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</p>\n<p>CharSequence subSequence (int beginIndex, int endIndex)：：返回一个新的字符序列，它是此序列的一个子序列。</p>\n<p>String substring (int beginIndex)：返回一个新的字符串，它是此字符串的一个子字符串。</p>\n<p>String toLowerCase ()：使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</p>\n<p>String toLowerCase (Locale locale)：：使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</p>\n<p>String toString ()：：返回此对象本身（它已经是一个字符串！）。</p>\n<p>String toUpperCase ()：使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</p>\n<p>String toUpperCase (Locale locale)：使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</p>\n<p>String trim ()：返回字符串的副本，忽略前导空白和尾部空白。</p>\n<p>static String valueOf (primitive data type x)：返回给定 data type 类型 x 参数的字符串表示形式。</p>\n</blockquote>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<ol>\n<li>split</li>\n</ol>\n<blockquote>\n<p><strong>split(String regex, int limit)</strong></p>\n<p><strong>regex</strong> -- 正则表达式分隔符。</p>\n<p><strong>limit</strong> -- 分割的份数。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"1,2,3,4,5\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>subSequence</li>\n</ol>\n<blockquote>\n<p><strong>subSequence(int beginIndex, int endIndex)</strong></p>\n<p><strong>beginIndex</strong> -- 起始索引（包括）。</p>\n<p><strong>endIndex</strong> -- 结束索引（不包括）。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"HelloWord\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">subSequence</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>输出：ell</p>\n</blockquote>\n<h1 id=\"stringbuffer类\"><a class=\"anchor\" href=\"#stringbuffer类\">#</a> StringBuffer 类</h1>\n<ul>\n<li>方法</li>\n</ul>\n<blockquote>\n<p><strong>public StringBuffer append(String s)</strong><br />\n 将指定的字符串追加到此字符序列。</p>\n<p><strong>public StringBuffer reverse()</strong><br />\n 将此字符序列用其反转形式取代。</p>\n<p><strong>public delete(int start, int end)</strong><br />\n 移除此序列的子字符串中的字符。</p>\n<p><strong>public insert(int offset, int i)</strong><br />\n 将 int 参数的字符串表示形式插入此序列中。</p>\n<p><strong>replace(int start, int end, String str)</strong><br />\n 使用给定 String 中的字符替换此序列的子字符串中的字符。</p>\n</blockquote>\n<h1 id=\"string与stringbuilder\"><a class=\"anchor\" href=\"#string与stringbuilder\">#</a> String 与 StringBuilder</h1>\n<blockquote>\n<p><strong>StringBuilder 拼接字符串耗时耗空间，需要用 StringBuilder</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>拼接 sb.append (字符串)</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"math类\"><a class=\"anchor\" href=\"#math类\">#</a> Math 类</h1>\n<blockquote>\n<p><strong>xxxValue()</strong><br />\n 将 Number 对象转换为 xxx 数据类型的值并返回。</p>\n<p><strong>compareTo()</strong><br />\n 将 number 对象与参数比较。</p>\n<p><strong>equals()</strong><br />\n 判断 number 对象是否与参数相等。</p>\n<p><strong>valueOf()</strong><br />\n 返回一个 Number 对象指定的内置数据类型</p>\n<p><strong>toString()</strong><br />\n 以字符串形式返回值。</p>\n<p><strong>parseInt()</strong><br />\n 将字符串解析为 int 类型。</p>\n<p><strong>abs()</strong><br />\n 返回参数的绝对值。</p>\n<p><strong>ceil()</strong><br />\n 返回大于等于 (&gt;=) 给定参数的的最小整数，类型为双精度浮点型。</p>\n<p><strong>floor()</strong><br />\n 返回小于等于（&lt;=）给定参数的最大整数 。</p>\n<p><strong>rint()</strong><br />\n 返回与参数最接近的整数。返回类型为 double。</p>\n<p><strong>round()</strong><br />\n 它表示<strong>四舍五入</strong>，算法为 <strong>Math.floor(x+0.5)</strong>，即将原来的数字加上 0.5 后再向下取整，所以，Math.round (11.5) 的结果为 12，Math.round (-11.5) 的结果为 - 11。</p>\n<p><strong>min()</strong><br />\n 返回两个参数中的最小值。</p>\n<p><strong>max()</strong><br />\n 返回两个参数中的最大值。</p>\n<p><strong>pow()</strong><br />\n 返回第一个参数的第二个参数次方。</p>\n<p><strong>sqrt()</strong><br />\n 求参数的算术平方根。</p>\n<p><strong>random()</strong><br />\n 返回一个随机数</p>\n</blockquote>\n<h1 id=\"arrays-类\"><a class=\"anchor\" href=\"#arrays-类\">#</a> Arrays 类</h1>\n<blockquote>\n<p><strong>Arrays.asList()</strong><br />\n 可以从 Array 转换成 List。可以作为其他集合类型构造器的参数</p>\n<p><strong>Arrays.binarySearch()</strong><br />\n 在一个已排序的或者其中一段中快速查找</p>\n<p><strong>Arrays.copyOf()</strong><br />\n 如果你想扩大数组容量又不想改变它的内容的时候可以使用这个方法</p>\n<p><strong>Arrays.copyOfRange()</strong><br />\n 可以复制整个数组或其中的一部分</p>\n<p><strong>Arrays.deepEquals()</strong><br />\n<strong>Arrays.deepHashCode()</strong><br />\n Arrays.equals/hashCode 的高级版本，支持子数组的操作</p>\n<p><strong>Arrays.equals()</strong><br />\n 如果你想要比较两个数组是否相等，应该调用这个方法而不是数组对象中的 equals 方法（数组对象中没有重写 equals () 方法，所以这个方法之比较引用而不比较内容）。这个方法集合了 Java 5 的自动装箱和无参变量的特性，来实现将一个变量快速地传给 equals () 方法 —— 所以这个方法在比较了对象的类型之后是直接传值进去比较的</p>\n<p><strong>Arrays.fill()</strong><br />\n 用一个给定的值填充整个数组或其中的一部分</p>\n<p><strong>Arrays.hashCode()</strong><br />\n 用来根据数组的内容计算其哈希值（数组对象的 hashCode () 不可用）。这个方法集合了 Java 5 的自动装箱和无参变量的特性，来实现将一个变量快速地传给 Arrays.hashcode 方法 —— 只是传值进去，不是对象</p>\n<p><strong>Arrays.sort()</strong><br />\n 对整个数组或者数组的一部分进行排序。也可以使用此方法用给定的比较器对对象数组进行排序</p>\n<p><strong>Arrays.toString()</strong><br />\n 打印数组的内容</p>\n</blockquote>\n<h1 id=\"日期时间\"><a class=\"anchor\" href=\"#日期时间\">#</a> 日期时间</h1>\n<h2 id=\"基本方法\"><a class=\"anchor\" href=\"#基本方法\">#</a> 基本方法</h2>\n<blockquote>\n<p><strong>boolean after(Date date)</strong><br />\n 若当调用此方法的 Date 对象在指定日期之后返回 true, 否则返回 false。</p>\n<p><strong>boolean before(Date date)</strong><br />\n 若当调用此方法的 Date 对象在指定日期之前返回 true, 否则返回 false。</p>\n<p><strong>int compareTo(Date date)</strong><br />\n 比较当调用此方法的 Date 对象和指定日期。两者相等时候返回 0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</p>\n<p><strong>boolean equals(Object date)</strong><br />\n 当调用此方法的 Date 对象和指定日期相等时候返回 true, 否则返回 false。</p>\n<p><strong>long getTime( )</strong><br />\n 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</p>\n<p><strong>void setTime(long time)</strong><br />\n 用自 1970 年 1 月 1 日 00:00:00 GMT 以后 time 毫秒数设置时间和日期。</p>\n<p><strong>String toString( )</strong><br />\n 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</p>\n</blockquote>\n<h2 id=\"日期和时间的格式化编码\"><a class=\"anchor\" href=\"#日期和时间的格式化编码\">#</a> 日期和时间的格式化编码</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>字母</strong></th>\n<th style=\"text-align:left\"><strong>描述</strong></th>\n<th style=\"text-align:left\"><strong>示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">G</td>\n<td style=\"text-align:left\">纪元标记</td>\n<td style=\"text-align:left\">AD</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">y</td>\n<td style=\"text-align:left\">四位年份</td>\n<td style=\"text-align:left\">2001</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">M</td>\n<td style=\"text-align:left\">月份</td>\n<td style=\"text-align:left\">July or 07</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\">一个月的日期</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">h</td>\n<td style=\"text-align:left\">A.M./P.M. (1~12) 格式小时</td>\n<td style=\"text-align:left\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">H</td>\n<td style=\"text-align:left\">一天中的小时 (0~23)</td>\n<td style=\"text-align:left\">22</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m</td>\n<td style=\"text-align:left\">分钟数</td>\n<td style=\"text-align:left\">30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:left\">秒数</td>\n<td style=\"text-align:left\">55</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S</td>\n<td style=\"text-align:left\">毫秒数</td>\n<td style=\"text-align:left\">234</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">E</td>\n<td style=\"text-align:left\">星期几</td>\n<td style=\"text-align:left\">Tuesday</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">D</td>\n<td style=\"text-align:left\">一年中的日子</td>\n<td style=\"text-align:left\">360</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F</td>\n<td style=\"text-align:left\">一个月中第几周的周几</td>\n<td style=\"text-align:left\">2 (second Wed. in July)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td style=\"text-align:left\">一年中第几周</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">W</td>\n<td style=\"text-align:left\">一个月中第几周</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a</td>\n<td style=\"text-align:left\">A.M./P.M. 标记</td>\n<td style=\"text-align:left\">PM</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">k</td>\n<td style=\"text-align:left\">一天中的小时 (1~24)</td>\n<td style=\"text-align:left\">24</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">K</td>\n<td style=\"text-align:left\">A.M./P.M. (0~11) 格式小时</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">z</td>\n<td style=\"text-align:left\">时区</td>\n<td style=\"text-align:left\">Eastern Standard Time</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">'</td>\n<td style=\"text-align:left\">文字定界符</td>\n<td style=\"text-align:left\">Delimiter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&quot;</td>\n<td style=\"text-align:left\">单引号</td>\n<td style=\"text-align:left\">`                       |</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"string与date自定义格式转化\"><a class=\"anchor\" href=\"#string与date自定义格式转化\">#</a> String 与 Date 自定义格式转化</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>获取当前时间返回一个毫秒值</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Long</span> time <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>date<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>将 date 转化为 String</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>将 String 转化为 date</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:left\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，&quot;n&quot; 匹配字符 &quot;n&quot;。&quot;\\n&quot; 匹配换行符。序列 &quot;\\\\&quot; 匹配 &quot;\\&quot;，&quot;\\(&quot; 匹配 &quot;(&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与 &quot;\\n&quot; 或 &quot;\\r&quot; 之后的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与 &quot;\\n&quot; 或 &quot;\\r&quot; 之前的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配 &quot;z&quot; 和 &quot;zoo&quot;。* 等效于 {0,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">一次或多次匹配前面的字符或子表达式。例如，&quot;zo+&quot; 与 &quot;zo&quot; 和 &quot;zoo&quot; 匹配，但与 &quot;z&quot; 不匹配。+ 等效于 {1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">零次或一次匹配前面的字符或子表达式。例如，&quot;do (es)?&quot; 匹配 &quot;do&quot; 或 &quot;does&quot; 中的 &quot;do&quot;。? 等效于 {0,1}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{<em>n</em>}</td>\n<td style=\"text-align:left\"><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，&quot;o {2}&quot; 与 &quot;Bob&quot; 中的 &quot;o&quot; 不匹配，但与 &quot;food&quot; 中的两个 &quot;o&quot; 匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{<em>n</em>,}</td>\n<td style=\"text-align:left\"><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，&quot;o {2,}&quot; 不匹配 &quot;Bob&quot; 中的 &quot;o&quot;，而匹配 &quot;foooood&quot; 中的所有 o。&quot;o {1,}&quot; 等效于 &quot;o+&quot;。&quot;o {0,}&quot; 等效于 &quot;o*&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{<em>n</em>,<em>m</em>}</td>\n<td style=\"text-align:left\"><em>m</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，&quot;o {1,3}&quot; 匹配 &quot;fooooood&quot; 中的头三个 o。'o {0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">当此字符紧随任何其他限定符（*、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是 &quot;非贪心的&quot;。&quot;非贪心的&quot; 模式匹配搜索到的、尽可能短的字符串，而默认的 &quot;贪心的&quot; 模式匹配搜索到的、尽可能长的字符串。例如，在字符串 &quot;oooo&quot; 中，&quot;o+?&quot; 只匹配单个 &quot;o&quot;，而 &quot;o+&quot; 匹配所有 &quot;o&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">匹配除 &quot;\\r\\n&quot; 之外的任何单个字符。若要匹配包括 &quot;\\r\\n&quot; 在内的任意字符，请使用诸如 &quot;[\\s\\S]&quot; 之类的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(<em>pattern</em>)</td>\n<td style=\"text-align:left\">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果 &quot;匹配&quot; 集合中检索捕获的匹配。若要匹配括号字符 ()，请使用 &quot;(&quot; 或者 &quot;)&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:<em>pattern</em>)</td>\n<td style=\"text-align:left\">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用 &quot;or&quot; 字符 (|) 组合模式部件的情况很有用。例如，'industr (?:y|ies) 是比 'industry|industries' 更经济的表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?=<em>pattern</em>)</td>\n<td style=\"text-align:left\">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95|98|NT|2000)' 匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot;，但不匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?!<em>pattern</em>)</td>\n<td style=\"text-align:left\">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95|98|NT|2000)' 匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;，但不匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot;。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>x</em>|<em>y</em></td>\n<td style=\"text-align:left\">匹配 <em>x</em> 或 <em>y</em>。例如，'z|food' 匹配 &quot;z&quot; 或 &quot;food&quot;。'(z|f) ood' 匹配 &quot;zood&quot; 或 &quot;food&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[<em>xyz</em>]</td>\n<td style=\"text-align:left\">字符集。匹配包含的任一字符。例如，&quot;[abc]&quot; 匹配 &quot;plain&quot; 中的 &quot;a&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^<em>xyz</em>]</td>\n<td style=\"text-align:left\">反向字符集。匹配未包含的任何字符。例如，&quot;[^abc]&quot; 匹配 &quot;plain&quot; 中 &quot;p&quot;，&quot;l&quot;，&quot;i&quot;，&quot;n&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[<em>a-z</em>]</td>\n<td style=\"text-align:left\">字符范围。匹配指定范围内的任何字符。例如，&quot;[a-z]&quot; 匹配 &quot;a&quot; 到 &quot;z&quot; 范围内的任何小写字母。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^<em>a-z</em>]</td>\n<td style=\"text-align:left\">反向范围字符。匹配不在指定的范围内的任何字符。例如，&quot;[^a-z]&quot; 匹配任何不在 &quot;a&quot; 到 &quot;z&quot; 范围内的任何字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">匹配一个字边界，即字与空格间的位置。例如，&quot;er\\b&quot; 匹配 &quot;never&quot; 中的 &quot;er&quot;，但不匹配 &quot;verb&quot; 中的 &quot;er&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td style=\"text-align:left\">非字边界匹配。&quot;er\\B&quot; 匹配 &quot;verb&quot; 中的 &quot;er&quot;，但不匹配 &quot;never&quot; 中的 &quot;er&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\c<em>x</em></td>\n<td style=\"text-align:left\">匹配 <em>x</em> 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是 &quot;c&quot; 字符本身。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d</td>\n<td style=\"text-align:left\">数字字符匹配。等效于 [0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\D</td>\n<td style=\"text-align:left\">非数字字符匹配。等效于 [^0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页符匹配。等效于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行符匹配。等效于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">匹配一个回车符。等效于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\s</td>\n<td style=\"text-align:left\">匹配任何空白字符，包括空格、制表符、换页符等。与 [\\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\S</td>\n<td style=\"text-align:left\">匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">制表符匹配。与 \\x09 和 \\cI 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\w</td>\n<td style=\"text-align:left\">匹配任何字类字符，包括下划线。与 &quot;[A-Za-z0-9_]&quot; 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\W</td>\n<td style=\"text-align:left\">与任何非单词字符匹配。与 &quot;[^A-Za-z0-9_]&quot; 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\x<em>n</em></td>\n<td style=\"text-align:left\">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，&quot;\\x41&quot; 匹配 &quot;A&quot;。&quot;\\x041&quot; 与 &quot;\\x04&quot;&amp;&quot;1&quot; 等效。允许在正则表达式中使用 ASCII 代码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*num*</td>\n<td style=\"text-align:left\">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，&quot;(.)\\1&quot; 匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*n*</td>\n<td style=\"text-align:left\">标识一个八进制转义码或反向引用。如果 *n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*nm*</td>\n<td style=\"text-align:left\">标识一个八进制转义码或反向引用。如果 *nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm* 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 *nm* 匹配八进制值 <em>nm</em>，其中 <em>n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nml</td>\n<td style=\"text-align:left\">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\u<em>n</em></td>\n<td style=\"text-align:left\">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h1>\n<blockquote>\n<p><strong>&amp;：逻辑与，无论左边为真还是假，后面都要执行</strong></p>\n<p><strong>&amp;&amp;： 短路与，只要左边为假，后面都不执行</strong></p>\n<p><strong>|：  逻辑或，无论左边是真还是假，后面都要执行</strong></p>\n<p><strong>||：  短路或，只要左边为真，后面都不执行</strong></p>\n</blockquote>\n",
            "tags": [
                "Java"
            ]
        }
    ]
}