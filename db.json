{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/shoka/source/css/app.styl","path":"css/app.styl","modified":0,"renderable":1},{"_id":"themes/shoka/source/css/comment.styl","path":"css/comment.styl","modified":0,"renderable":1},{"_id":"themes/shoka/source/css/mermaid.styl","path":"css/mermaid.styl","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/404.png","path":"images/404.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/failure.ico","path":"images/failure.ico","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/paypal.png","path":"images/paypal.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/play_disc.png","path":"images/play_disc.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/play_needle.png","path":"images/play_needle.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/search.png","path":"images/search.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1},{"_id":"source/assets/algorithm.assets/Bucket_sort_1.svg.png","path":"assets/algorithm.assets/Bucket_sort_1.svg.png","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/Bucket_sort_2.svg.png","path":"assets/algorithm.assets/Bucket_sort_2.svg.png","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/Sorting_heapsort_anim.gif","path":"assets/algorithm.assets/Sorting_heapsort_anim.gif","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/bubbleSort.gif","path":"assets/algorithm.assets/bubbleSort.gif","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/countingSort.gif","path":"assets/algorithm.assets/countingSort.gif","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/heapSort.gif","path":"assets/algorithm.assets/heapSort.gif","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/insertionSort.gif","path":"assets/algorithm.assets/insertionSort.gif","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/mergeSort.gif","path":"assets/algorithm.assets/mergeSort.gif","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/quickSort.gif","path":"assets/algorithm.assets/quickSort.gif","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/radixSort.gif","path":"assets/algorithm.assets/radixSort.gif","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/selectionSort.gif","path":"assets/algorithm.assets/selectionSort.gif","modified":0,"renderable":0},{"_id":"source/assets/algorithm.assets/shellSort.gif","path":"assets/algorithm.assets/shellSort.gif","modified":0,"renderable":0},{"_id":"themes/shoka/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"source/assets/RabbitMQ.assets/1.png","path":"assets/RabbitMQ.assets/1.png","modified":0,"renderable":0},{"_id":"source/assets/RabbitMQ.assets/2.png","path":"assets/RabbitMQ.assets/2.png","modified":0,"renderable":0},{"_id":"source/assets/RabbitMQ.assets/3.png","path":"assets/RabbitMQ.assets/3.png","modified":0,"renderable":0},{"_id":"source/assets/RabbitMQ.assets/4.png","path":"assets/RabbitMQ.assets/4.png","modified":0,"renderable":0},{"_id":"source/assets/RabbitMQ.assets/5.png","path":"assets/RabbitMQ.assets/5.png","modified":0,"renderable":0},{"_id":"source/assets/RabbitMQ.assets/6.png","path":"assets/RabbitMQ.assets/6.png","modified":0,"renderable":0},{"_id":"source/assets/RabbitMQ.assets/direct.png","path":"assets/RabbitMQ.assets/direct.png","modified":0,"renderable":0},{"_id":"source/assets/RabbitMQ.assets/fanout.png","path":"assets/RabbitMQ.assets/fanout.png","modified":0,"renderable":0},{"_id":"source/assets/RabbitMQ.assets/helloworld.png","path":"assets/RabbitMQ.assets/helloworld.png","modified":0,"renderable":0},{"_id":"source/assets/RabbitMQ.assets/topic.png","path":"assets/RabbitMQ.assets/topic.png","modified":0,"renderable":0},{"_id":"source/assets/RabbitMQ.assets/work.png","path":"assets/RabbitMQ.assets/work.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/assets/algorithm.assets/Bucket_sort_1.svg.png","hash":"4b8de36b672bc205af7c34817d113be9739b09e0","modified":1607576932299},{"_id":"source/assets/algorithm.assets/Bucket_sort_2.svg.png","hash":"43e502f25ee9f7a2b9a81b511f88943fc2879b24","modified":1607576932247},{"_id":"source/_posts/computer/Hexo.md","hash":"bf6ce67716a2e95b97d91c458d6da3b09e6490a6","modified":1608882862471},{"_id":"source/_posts/computer/algorithm.md","hash":"4319adf239dd0c8dd78e300da558c032348e2bc2","modified":1608188171509},{"_id":"source/_posts/computer/linux.md","hash":"1db707ef614f1db8a546c73eee4fd12a94002b56","modified":1608180685639},{"_id":"source/_posts/computer/mysql.md","hash":"1aa0a2c8c16285a699848ed7d94e49d6e5765fe7","modified":1608189365953},{"_id":"source/_posts/computer/course-2/cover.jpg","hash":"ebae55f16102e07e507e4e536d5c75ffb33da846","modified":1608179069870},{"_id":"source/_posts/computer/course-2/git.md","hash":"4b7a02df229ba45d91f4462beaa9926300f274a8","modified":1608180069800},{"_id":"source/_posts/computer/course-2/idea.md","hash":"b43451f9b07dcad0ccf6ade7d680e3bf15f36090","modified":1608198887713},{"_id":"source/_posts/computer/course-2/typora.md","hash":"3ef32d3bc2fe4aed1856d5535545f72d991909a8","modified":1608180067187},{"_id":"source/_posts/computer/course-1/MongoDB.md","hash":"dad65fb4f3e632393f64accbc96cac30d0558411","modified":1608881378914},{"_id":"source/_posts/computer/course-1/RabbitMQ.md","hash":"314a36415b5376e1d182c27e2df161f29a491c53","modified":1608881692303},{"_id":"source/_posts/computer/course-1/Shiro.md","hash":"8d2ef1ac5b418234380d5b48a9a61bea035fc226","modified":1608179492067},{"_id":"source/_posts/computer/course-1/cover.jpg","hash":"d6622d7c0107faa8a228ed0c6e9dea91dfdc3846","modified":1608179053705},{"_id":"source/_posts/computer/course-1/redis.md","hash":"cb5babdb6fea0a165f8aa8ebe582ce93b414a12e","modified":1608195632150},{"_id":"source/_posts/computer/course-3/behavioral_pattern.md","hash":"829fb7f81f8ad0f0499b3a949a8e40612706f995","modified":1608353430315},{"_id":"source/_posts/computer/course-3/cover.jpg","hash":"b1a02e809bf4e9e68762a82516b6b9e6fc842086","modified":1608349830174},{"_id":"source/_posts/computer/course-3/create_pattern.md","hash":"78f250f49d64ebaf4662dba7666e5b31aa2f6eaf","modified":1608350435470},{"_id":"source/_posts/computer/course-3/structural_pattern.md","hash":"15a4013a890c5c05797285887fa9ccd4f5ee2eef","modified":1608350416950},{"_id":"source/_posts/computer/Java/course-1/Java.md","hash":"70089f87d612bd59ba272fe53a0ffb3261fb6eb2","modified":1608873763682},{"_id":"source/_posts/computer/Java/course-1/collection.md","hash":"16e7d894cc75bf470a6c4451e97e26868248c1f2","modified":1608175912332},{"_id":"source/_posts/computer/Java/course-1/cover.jpg","hash":"7d67b4d7ecd571fad613ea95ce15c0acee824d6f","modified":1606208171509},{"_id":"source/_posts/computer/Java/course-1/file.md","hash":"8aede1b0b3e3fa0f5bab5fa7a28d91e2ff515621","modified":1608175944564},{"_id":"source/_posts/computer/Java/course-1/io.md","hash":"be29b69fc62c474d0625998e8f64e02f5258e944","modified":1608175961980},{"_id":"source/_posts/computer/questions/course-1/cover.jpg","hash":"5e0a1bd44de0a67d3c222e0b53ca5762bee48778","modified":1606220868293},{"_id":"source/_posts/computer/questions/course-1/java_quetsions.md","hash":"199e64a2196e55612d0a76e8f96abecf8b89899e","modified":1608034138533},{"_id":"source/_posts/computer/questions/course-1/mybatis.md","hash":"057b5694d47412d74c5d93aa4dd4e38e8e284f5f","modified":1608178552234},{"_id":"source/_posts/computer/questions/course-1/mysql.md","hash":"0891240ea4f64ccd5c904b849e86baf4f641e49b","modified":1608178611416},{"_id":"source/_posts/computer/questions/course-1/spring_questions.md","hash":"eb32464fccc348980a503c9c95c934c6585b27b0","modified":1608034146623},{"_id":"source/_posts/computer/questions/course-1/springmvc_questions.md","hash":"aae86c62d0d02e9b24b80751d1dd3d0ad4790a06","modified":1608178519677},{"_id":"source/_posts/computer/questions/course-1/web_questions.md","hash":"d7ec04e025a7d9bc349102f94d983f7d0d58be93","modified":1608180395641},{"_id":"source/assets/algorithm.assets/radixSort.gif","hash":"b0c0244dc01eda00d0b92572b6c0eaf088ae3dee","modified":1607664232203},{"_id":"source/assets/algorithm.assets/countingSort.gif","hash":"dda8c95e868f3ffa28663140a5fac5fa3bc746b2","modified":1607490002999},{"_id":"source/assets/algorithm.assets/Sorting_heapsort_anim.gif","hash":"d70822274ca52ebc2c925fb94e81dc6a11591afa","modified":1607403583829},{"_id":"source/assets/algorithm.assets/bubbleSort.gif","hash":"e3316329fee9b7906fa857af53e2dcd053a039cd","modified":1606885693989},{"_id":"source/assets/algorithm.assets/quickSort.gif","hash":"9d0e7c1b3d02e77e41dfbba78ae9c02daec2744f","modified":1607321261889},{"_id":"source/assets/algorithm.assets/insertionSort.gif","hash":"29e9d8b18a7bac20f4e642968598fa48eb9f6199","modified":1607059828777},{"_id":"source/assets/algorithm.assets/mergeSort.gif","hash":"0fb0ff4cc92da6d0a0f3d3a0742bbedac7c16c2a","modified":1607241088370},{"_id":"themes/shoka/.editorconfig","hash":"57f50fc69fdc98a28c9bb04c338865a8b267b4bc","modified":1607925116817},{"_id":"themes/shoka/.gitignore","hash":"bfd7d4c19270c8b349107ffb26f50302943571a9","modified":1607925116817},{"_id":"themes/shoka/LICENSE","hash":"1a301f54567fbcd67fc138c37071b96ac9e670a1","modified":1607925116818},{"_id":"themes/shoka/README.md","hash":"162ec0ffef6a69e09c9b00dbc9a8f400b3826fac","modified":1607925116818},{"_id":"themes/shoka/_config.yml","hash":"4e0cecf1a8a6460a22fc918c1754d620eb6a7c4b","modified":1608348992430},{"_id":"themes/shoka/_images.yml","hash":"bca089255d50638a65fe91b58cd94aff42d9f49c","modified":1607925116820},{"_id":"themes/shoka/package.json","hash":"78e368a218a687a4a0d1936fc723e2e6fca2bdfb","modified":1607925116874},{"_id":"themes/shoka/example/_config.shoka.yml","hash":"ab07b1fd050e985e120d0e1797c588c721ac1772","modified":1607925116820},{"_id":"themes/shoka/example/_config.yml","hash":"9d1681e201b9be0cc7b1cc5df5efbb6f4901df2e","modified":1607928396149},{"_id":"themes/shoka/example/package.json","hash":"4744a2d23b4558be8932df77989c2ba133f0388e","modified":1607925116821},{"_id":"themes/shoka/languages/README.md","hash":"d40601b23836327a36b0d75361f57e95413c50b3","modified":1607925116852},{"_id":"themes/shoka/languages/default.yml","hash":"da38f00bb45a318f118db0d74df24a137351777e","modified":1607925116852},{"_id":"themes/shoka/languages/en.yml","hash":"df65e54bb944d4f843b3e831b7ea80ff0d77b30a","modified":1607925116853},{"_id":"themes/shoka/languages/ja.yml","hash":"a70aa26e721df2e7d0b6423e6ab45a3ff77a6df1","modified":1607925116853},{"_id":"themes/shoka/languages/zh-CN.yml","hash":"1ca6271a1056ec563b3132994053b7f3c7da0140","modified":1608267304840},{"_id":"themes/shoka/languages/zh-HK.yml","hash":"b3c2bcfd2e205d7aeb7c542c6f937a0a782405b8","modified":1607925116854},{"_id":"themes/shoka/languages/zh-TW.yml","hash":"953813cdb47c3ade33f1e046bf7bef13469810e1","modified":1607925116855},{"_id":"themes/shoka/layout/archive.njk","hash":"01847f527849426aab8fcad795597a7076d761fd","modified":1607925116871},{"_id":"themes/shoka/layout/category.njk","hash":"11a604e3285262d34368b1eb1bf6ff8349c3345f","modified":1607925116871},{"_id":"themes/shoka/layout/index.njk","hash":"229003c5180e9076ab8f5e7dfc5d4967149ad37c","modified":1608710946192},{"_id":"themes/shoka/layout/page.njk","hash":"2dac7be8699c8ad6364831eac2ab0167dba7c689","modified":1608276307211},{"_id":"themes/shoka/layout/post.njk","hash":"6b26f4be8dbb34c5f98d74621cae3af588f7d419","modified":1608290250810},{"_id":"themes/shoka/layout/tag.njk","hash":"f1e9539c178db724961e04bcc08fa94279aae4b1","modified":1607925116874},{"_id":"themes/shoka/layout/_alternate/atom.ejs","hash":"4b40589945713ab19eea69902b0768fc69ec1027","modified":1607925116857},{"_id":"themes/shoka/layout/_alternate/json.ejs","hash":"74975fb6d1ca1099cd843c180ce49353b2061c53","modified":1607925116857},{"_id":"themes/shoka/layout/_alternate/rss.ejs","hash":"bd8df7a85959df3231b0bb617d7b5d05a98c48de","modified":1607925116857},{"_id":"themes/shoka/layout/_macro/breadcrumb.njk","hash":"1dc8ee1de2c20d514c251145d00536d9b0170335","modified":1607925116858},{"_id":"themes/shoka/layout/_macro/card.njk","hash":"0dfd6a2e21119131566f03d7bebedda15d4261b0","modified":1607925116859},{"_id":"themes/shoka/layout/_macro/comment.njk","hash":"fc91ceb0b2c86a38839cef84f50487f119367cd7","modified":1607925116859},{"_id":"themes/shoka/layout/_macro/postmeta.njk","hash":"99d2ba308cb5a33bdad193e2fed08055d4756ff0","modified":1608348989340},{"_id":"themes/shoka/layout/_macro/segment.njk","hash":"c8e21eeea552c7c685e50252d1983785edc6a29a","modified":1607925116860},{"_id":"themes/shoka/layout/_macro/sidebar.njk","hash":"7f170b2649f09e88933de4121803990baf5d4022","modified":1607925116860},{"_id":"themes/shoka/layout/_macro/widgets.njk","hash":"2da14eac8bf5518a5f51e70e2d0beefa1b2d5382","modified":1608273647721},{"_id":"themes/shoka/layout/_partials/footer.njk","hash":"85498981b1feeed2ba5c8b2c0a6cf782a286f775","modified":1608882388232},{"_id":"themes/shoka/layout/_partials/header.njk","hash":"370b4ae76844b6659ad4dc506a37d6ac9bcead20","modified":1608268656684},{"_id":"themes/shoka/layout/_partials/layout.njk","hash":"1dae2a87e06ab7ac3478b2d4864ee1f6380ea7de","modified":1608292681833},{"_id":"themes/shoka/layout/_partials/pagination.njk","hash":"676ef88ab76d735696f6e8c04338eb3887fb63cc","modified":1607925116866},{"_id":"themes/shoka/scripts/filters/locals.js","hash":"63ada9722d96f021f1cd398bbe7bb4991dde1231","modified":1607925116877},{"_id":"themes/shoka/scripts/filters/post.js","hash":"f2f04a66a1dbd4f2e61a60bfb196224ed062cc1a","modified":1608275479357},{"_id":"themes/shoka/scripts/generaters/archive.js","hash":"a6f87b628f6125cc2614f7214e2ef2995a084663","modified":1607925116879},{"_id":"themes/shoka/scripts/generaters/config.js","hash":"75e620fdab0ca2ee4d6c269f14606216c1dcf42b","modified":1607925116879},{"_id":"themes/shoka/scripts/generaters/images.js","hash":"be73244e52e628e5b0c2760af60f2fc68c7c2ecc","modified":1608019947729},{"_id":"themes/shoka/scripts/generaters/index.js","hash":"db4fd19f48cc00a66d7c4be857e5a0e643ddff80","modified":1608274495109},{"_id":"themes/shoka/scripts/generaters/pages.js","hash":"dd8bb4adec63efa8efc282febd4da989e1523262","modified":1608274453383},{"_id":"themes/shoka/scripts/generaters/script.js","hash":"243e11786081d8d7d5d3b52338925a71c8da8e2c","modified":1607925116881},{"_id":"themes/shoka/scripts/helpers/asset.js","hash":"df236860cd91a1c6ffc78ffb4156730d6a59c5d1","modified":1607925116881},{"_id":"themes/shoka/scripts/helpers/engine.js","hash":"392f70d610751057bc8ea5c0f6b14b49d220676a","modified":1607925116882},{"_id":"themes/shoka/scripts/helpers/list_categories.js","hash":"84507e35a428179bd5838fe80d527a9433916391","modified":1607925116882},{"_id":"themes/shoka/scripts/renderer/njk.js","hash":"480f25325494e4caa04794cd496912f628ae2691","modified":1607925116883},{"_id":"themes/shoka/scripts/tags/links.js","hash":"634a01168270d09ed1025ec62b520452b5c371c3","modified":1607925116884},{"_id":"themes/shoka/source/css/_colors.styl","hash":"6cb23f12441e7517cc614336d867cfa2f35284d7","modified":1607925116885},{"_id":"themes/shoka/scripts/tags/media.js","hash":"ef1dd169c438825258398a5d929c72a5b87eb401","modified":1607925116884},{"_id":"themes/shoka/source/css/_iconfont.styl","hash":"b3c284f5bf48ae84d4f016779cf43b67c87e0b87","modified":1607925116923},{"_id":"themes/shoka/source/css/_mixins.styl","hash":"68c4bfee20cc6ee477548ce3e4e28e19697d8af3","modified":1607925116923},{"_id":"themes/shoka/source/css/_variables.styl","hash":"c939f1af34a0a8a6a37e6439a8b609a26c9e09d2","modified":1607925116924},{"_id":"themes/shoka/source/css/app.styl","hash":"572d20c4c574b87a2fc49290206c90c8baa7133d","modified":1607925116924},{"_id":"themes/shoka/source/css/comment.styl","hash":"7502a76342c8d84e4a476b35a91fcec22a15cbed","modified":1607925116925},{"_id":"themes/shoka/source/css/mermaid.styl","hash":"ec821a3f997691b92b0926ba4534c94a795ef587","modified":1607925116925},{"_id":"themes/shoka/source/images/404.png","hash":"b7b18f6689d0a14041d87bab6c4e4ce567249d01","modified":1607925116926},{"_id":"themes/shoka/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1607925116927},{"_id":"themes/shoka/source/images/avatar.jpg","hash":"18217a9cc3280d5554bb4590fc67ccee679738d7","modified":1608004803016},{"_id":"themes/shoka/source/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1607925116929},{"_id":"themes/shoka/source/images/logo.svg","hash":"830dfbd6dff2986130819f747b25db230b05ca84","modified":1607925116930},{"_id":"themes/shoka/source/images/paypal.png","hash":"872d4b6d3cacee4845246fbf29817f1ee98bb037","modified":1607925116931},{"_id":"themes/shoka/source/images/play_disc.png","hash":"3cfa8dd2e12424c52d1f5e34e9502e446fecde9c","modified":1607925116931},{"_id":"themes/shoka/source/images/play_needle.png","hash":"e0998828ab50ce37617f9f4d46b74648206ac852","modified":1607925116932},{"_id":"themes/shoka/source/images/search.png","hash":"08c4f6a7a92eff3548aec94b267a23a25e6bd215","modified":1607925116932},{"_id":"themes/shoka/source/images/wechatpay.png","hash":"df179e8dea7d07ee4acb1e33426ac21d28d446b4","modified":1608029755887},{"_id":"themes/shoka/example/source/_data/colors.styl","hash":"00b06d9366f6a477d02e94eea16bd07aafb7ff2f","modified":1607925116822},{"_id":"themes/shoka/example/source/_data/custom.styl","hash":"d90bc10047d824d73d4f0ba10f81dfe1628558a0","modified":1607925116823},{"_id":"themes/shoka/example/source/_data/iconfont.styl","hash":"b3c284f5bf48ae84d4f016779cf43b67c87e0b87","modified":1607925116823},{"_id":"themes/shoka/example/source/_data/images.yml","hash":"bca089255d50638a65fe91b58cd94aff42d9f49c","modified":1607925116823},{"_id":"themes/shoka/example/source/_data/languages.yml","hash":"79b49c2d38c14e29274ebf461fbb3f83ea018fbb","modified":1607925116824},{"_id":"themes/shoka/example/source/_posts/categories.md","hash":"c1ca20b94100a77efc569f43986951a2551f6b64","modified":1607925116825},{"_id":"themes/shoka/example/source/_posts/code-highlight.md","hash":"607f8cf393ad1082398c7f5246e229405bda4de3","modified":1607925116825},{"_id":"themes/shoka/example/source/_posts/elements.md","hash":"66dde9f7cef1c9a90a15776b633c8ab4272ed826","modified":1607925116832},{"_id":"themes/shoka/example/source/_posts/excerpts.md","hash":"9f51babe45d9f45a04d1e6c52eb8a96b58478029","modified":1607925116832},{"_id":"themes/shoka/example/source/_posts/gallery-post.md","hash":"ae577f5171f0354fb0a3702da5bb8ba14372dc28","modified":1607925116833},{"_id":"themes/shoka/example/source/_posts/hello-world.md","hash":"ceb583413b760182a3c2463bf7f15c03328a37bc","modified":1607925116834},{"_id":"themes/shoka/example/source/_posts/images.md","hash":"f09b4339b8334584ec311be7e2a2e7e839bcfa04","modified":1607925116834},{"_id":"themes/shoka/example/source/_posts/link-post-without-title.md","hash":"811e7ec6f4ed747388e8255b27e482d04b304c51","modified":1607925116835},{"_id":"themes/shoka/example/source/_posts/link-post.md","hash":"ac9a280178ba63ccc3acc7540aa96db4d08b5b21","modified":1607925116835},{"_id":"themes/shoka/example/source/_posts/long-title.md","hash":"e11f04c88e453b6b265d634458a69d0124edc684","modified":1607925116836},{"_id":"themes/shoka/example/source/_posts/markdown.md","hash":"7b03cdab8abff7010603ad0e66ef611564e08694","modified":1607925116836},{"_id":"themes/shoka/example/source/_posts/no-title.md","hash":"24536a15b2a9633d0a4dfad66c0ab51a683d78b5","modified":1607925116837},{"_id":"themes/shoka/example/source/_posts/tag-plugins.md","hash":"35e8c2ca9e48d5653f8d69ef05a0221c1b207e4e","modified":1607925116837},{"_id":"themes/shoka/example/source/_posts/tags.md","hash":"788411e01f179f65bc6ea61c73601a0a4a1072d0","modified":1607925116837},{"_id":"themes/shoka/example/source/_posts/videos.md","hash":"32735a9b9f0370d49e0f4311c8bc1fbcfba98445","modified":1607925116838},{"_id":"themes/shoka/example/source/_posts/中文測試.md","hash":"0dd7c0e2e2242939b69dd6d66fe28f56b69ff65a","modified":1607925116838},{"_id":"themes/shoka/example/source/_posts/日本語テスト.md","hash":"5ae9b45f038baa96bd179b4ad0b03409e9a76bdb","modified":1607925116839},{"_id":"themes/shoka/example/source/friends/_data.yml","hash":"1b090bd2f25f4d00471f31c4136141d4ad1ae19a","modified":1607925116851},{"_id":"themes/shoka/example/source/friends/index.md","hash":"c44fdf47aae95588c686a15fa2046ab9a4c09b9b","modified":1607925116851},{"_id":"themes/shoka/layout/_partials/head/baiduAmount.njk","hash":"9b2d1d1d323f83bc3300f8fd20fa62b2ee13cb42","modified":1608712051047},{"_id":"themes/shoka/layout/_partials/head/head.njk","hash":"a1e0903757e895b32c48a93d3e6aa11922ff7b62","modified":1608711538172},{"_id":"themes/shoka/layout/_partials/head/head_unique.njk","hash":"afb09eeda0de5dd4df67ba80b58b9ace9eaf5e0d","modified":1607925116864},{"_id":"themes/shoka/layout/_partials/post/copyright.njk","hash":"d03b297bfa1c92a47cfea5bf5c2cf6bc04dbbd25","modified":1608882097836},{"_id":"themes/shoka/layout/_partials/post/footer.njk","hash":"8e7cae0c45bbc2cf3e91eac10ab319caa6b27d2e","modified":1607925116867},{"_id":"themes/shoka/layout/_partials/post/leancloud-analytics.njk","hash":"ae5d923b62f24ac0839c31eca3e68caa54165029","modified":1608294795389},{"_id":"themes/shoka/layout/_partials/post/nav.njk","hash":"01e49cc56aa8722f0eb2739ce2e55080429e576e","modified":1607925116867},{"_id":"themes/shoka/layout/_partials/post/post.njk","hash":"d62e1d4b8a7b26f81b2bfd30649694139dc4a960","modified":1608711557741},{"_id":"themes/shoka/layout/_partials/post/reward.njk","hash":"f7185a561288a754beae1323a19c200b99dccd08","modified":1607925116868},{"_id":"themes/shoka/layout/_partials/sidebar/menu.njk","hash":"14192d78b637ca07ec4a0505268bfaecca2f0680","modified":1607925116869},{"_id":"themes/shoka/layout/_partials/sidebar/overview.njk","hash":"3c12aa376662f15366177792a35873f2344152b8","modified":1607925116870},{"_id":"themes/shoka/layout/_partials/third-party/baidu-analytics.njk","hash":"9f4568ede657e6844fe54e3cdf9635ecd94b2bf9","modified":1607925116871},{"_id":"themes/shoka/source/js/_app/dom.js","hash":"1bd152fc94f33793e71cada5ec8bbfd71e531d6c","modified":1607925116934},{"_id":"themes/shoka/source/js/_app/fireworks.js","hash":"e4bf5a9955618bb43020e175e59e497b28c78131","modified":1607925116934},{"_id":"themes/shoka/source/js/_app/page.js","hash":"fd866d02388a6094455a72ce094cfd794b54168d","modified":1607925116935},{"_id":"themes/shoka/source/js/_app/global.js","hash":"d19501d8f14a4efa492e1dbc76172f9a8d080c20","modified":1608710743584},{"_id":"themes/shoka/source/js/_app/pjax.js","hash":"b8af0f6ebc489f0e97fa52f6de4478c264edff0a","modified":1608186984368},{"_id":"themes/shoka/source/js/_app/player.js","hash":"d49cc563b239659d554c838f784af8244023f886","modified":1607925116936},{"_id":"themes/shoka/source/js/_app/sidebar.js","hash":"5ada7b5fc4611eca3635fcc71945a66759ad5a0c","modified":1607925116937},{"_id":"themes/shoka/source/js/_app/utils.js","hash":"6e123d054bf003deb4fc5eb80cfec233e4941851","modified":1607925116938},{"_id":"themes/shoka/source/css/_common/components/components.styl","hash":"3677ba4471475026d232e3af00d5e6de027151e6","modified":1607925116886},{"_id":"themes/shoka/source/css/_common/outline/mobile.styl","hash":"15c7be9e4e1b3c6b55e7beef5685898ae4f846ab","modified":1607925116912},{"_id":"themes/shoka/source/css/_common/outline/outline.styl","hash":"e107c799b88278db84a2d5a8819d17f48511f73e","modified":1607925116913},{"_id":"themes/shoka/source/css/_common/scaffolding/animate.styl","hash":"dda625de5efb0e5b53e81c9da053850e9767da22","modified":1607925116918},{"_id":"themes/shoka/source/css/_common/scaffolding/base.styl","hash":"415635fa6f145a53a10fa7f0b72247747530f9e7","modified":1607925116918},{"_id":"themes/shoka/source/css/_common/scaffolding/buttons.styl","hash":"555c4b09c9970931e73abe544ae6356cf870670e","modified":1607925116918},{"_id":"themes/shoka/source/css/_common/scaffolding/divider.styl","hash":"faa2e60cafdb0379f66a9ff7f9bd8e4d53551882","modified":1607925116919},{"_id":"themes/shoka/source/css/_common/scaffolding/iconfont.styl","hash":"b3c284f5bf48ae84d4f016779cf43b67c87e0b87","modified":1607925116919},{"_id":"themes/shoka/source/css/_common/scaffolding/normalize.styl","hash":"eea39861e6cb0cdc0e26d2f7878c2059991d3d40","modified":1607925116920},{"_id":"themes/shoka/source/css/_common/scaffolding/pagination.styl","hash":"80bb3542fb6c7245f9f559c97938a65d29a61784","modified":1607925116920},{"_id":"themes/shoka/source/css/_common/scaffolding/ribbon.styl","hash":"e9c99fbd15cb9b118091d6e9add6aaf2abd8ab7d","modified":1607925116921},{"_id":"themes/shoka/source/css/_common/scaffolding/scaffolding.styl","hash":"14295140c2e5e50545a9b8404839589d486d78c9","modified":1607925116921},{"_id":"themes/shoka/source/css/_common/scaffolding/scrollbar.styl","hash":"f34503ae1dce5bfc964d52f3f22601058fc7a907","modified":1607925116921},{"_id":"themes/shoka/source/css/_common/scaffolding/tip.styl","hash":"ffdfdc91b9d29060a36bfdf92b746596fd05afd9","modified":1607925116922},{"_id":"themes/shoka/source/css/_common/scaffolding/tables.styl","hash":"a67472f2b36047f5f1c2d85e398afe5003e06087","modified":1607925116922},{"_id":"themes/shoka/source/css/_common/scaffolding/toggles.styl","hash":"a71d609401001c9b15608d5276636180d49cf844","modified":1607925116923},{"_id":"themes/shoka/example/source/_posts/computer-science/note/cover.jpg","hash":"6d077a7330284d0fb2b79e96d7e5b56121395df3","modified":1607925116829},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc.md","hash":"a087562fb3bbac308a1bb8ca4111cad32b331afc","modified":1607925116829},{"_id":"themes/shoka/source/css/_common/components/highlight/highlight.styl","hash":"18be598f5f1d75cb4869adcd1ae47bd19456b2c5","modified":1607925116887},{"_id":"themes/shoka/source/css/_common/components/highlight/operation.styl","hash":"f2ac0660d8f9e4d4582a4a8c4f97bd6d80162a6d","modified":1607925116888},{"_id":"themes/shoka/source/css/_common/components/pages/collapse.styl","hash":"a0ecc9afe8c03eae06075fc53c39057e05d22b1e","modified":1607925116888},{"_id":"themes/shoka/source/css/_common/components/pages/home.styl","hash":"e34f9bc115b0213f0b6fa5169b86ce20652437af","modified":1607925116889},{"_id":"themes/shoka/source/css/_common/components/pages/pages.styl","hash":"e2af0d359247a82dab6f8d6ce90d6b0d5fca4dc9","modified":1607925116889},{"_id":"themes/shoka/source/css/_common/components/pages/tag-cloud.styl","hash":"2ebc481064dae0b593e8caff838044f92a5e2ef7","modified":1607925116890},{"_id":"themes/shoka/source/css/_common/components/post/breadcrumb.styl","hash":"43f7a0d6c7f7bde6a4e521acb67a5b0543a12b77","modified":1607925116890},{"_id":"themes/shoka/source/css/_common/components/post/copyright.styl","hash":"0a3991a291b53301c6a3f5a86532ea75b8acf355","modified":1607925116891},{"_id":"themes/shoka/source/css/_common/components/post/expand.styl","hash":"59c85663ca6169262da4c68540a9203fe7a474f2","modified":1607925116891},{"_id":"themes/shoka/source/css/_common/components/post/footer.styl","hash":"256f45905d0d1b17d74b6cbfebdc5ef7a107ed83","modified":1607925116891},{"_id":"themes/shoka/source/css/_common/components/post/header.styl","hash":"b1b13db6e10a9b46fbd052dc4db1aa1cfb97ab97","modified":1607925116892},{"_id":"themes/shoka/source/css/_common/components/post/nav.styl","hash":"7c8f1bf2c755b8c3d1a41eaf1aa6f59d3c23a4a2","modified":1607925116892},{"_id":"themes/shoka/source/css/_common/components/post/post.styl","hash":"510d1f7457c2191f8a7bd84ce79cc3c0aade44a8","modified":1607925116893},{"_id":"themes/shoka/source/css/_common/components/post/reward.styl","hash":"db0dfe82c27793cf5c36bc8439ba9f7a21965bf8","modified":1608881999071},{"_id":"themes/shoka/source/css/_common/components/post/rtl.styl","hash":"4a431ec0b382ae6693f1aee54599da18eddc6a59","modified":1607925116895},{"_id":"themes/shoka/source/css/_common/components/post/tags.styl","hash":"e3348bf77b141068b91181655945277d6270312b","modified":1607925116895},{"_id":"themes/shoka/source/css/_common/components/tags/collapse.styl","hash":"aa663a0fcee4138be9a3272172cd30b8118261df","modified":1607925116896},{"_id":"themes/shoka/source/css/_common/components/tags/container.styl","hash":"177878423da429294670acf6510d6e3ab85114e0","modified":1607925116896},{"_id":"themes/shoka/source/css/_common/components/tags/label.styl","hash":"dff26da9be9a7304780941b95d144d03e6b7b19b","modified":1607925116897},{"_id":"themes/shoka/source/css/_common/components/tags/links.styl","hash":"2732062ecaf3a5fec24442bf2fc25de7f4279ff9","modified":1607925116897},{"_id":"themes/shoka/source/css/_common/components/tags/list.styl","hash":"13aea62f93d4469e6c59bc4e470c6528f418ac0e","modified":1607925116897},{"_id":"themes/shoka/source/css/_common/components/tags/note.styl","hash":"0eb5410344a0e4506b641689d6835ea8929553e8","modified":1607925116898},{"_id":"themes/shoka/source/css/_common/components/tags/player.styl","hash":"f182dad19b6cc575a1631713a00fd7f0d4516c19","modified":1607925116898},{"_id":"themes/shoka/source/css/_common/components/tags/quiz.styl","hash":"203ee34a4232e3e5490460c6621dba9f4354f951","modified":1607925116899},{"_id":"themes/shoka/source/css/_common/components/tags/tabs.styl","hash":"950cb00307208fbb332119796c4a1ac850f19941","modified":1607925116899},{"_id":"themes/shoka/source/css/_common/components/tags/tags.styl","hash":"b353f2dfc373508d0e0c798bd22107f63591054f","modified":1607925116900},{"_id":"themes/shoka/source/css/_common/components/third-party/loading.styl","hash":"9a122e8a0160f04138039e7cb1dcb9d55444f5da","modified":1608016934274},{"_id":"themes/shoka/source/css/_common/components/third-party/pace.styl","hash":"c93cb3a4715394f8a35db9bb65e03aea8bda45da","modified":1607925116905},{"_id":"themes/shoka/source/css/_common/components/third-party/search.styl","hash":"33b29d3782f058f2b8b89deb3f738fda2517ca4c","modified":1607925116905},{"_id":"themes/shoka/source/css/_common/components/third-party/theme.styl","hash":"2d112448cc435b58c57ebd9b31e016e6ae8af5d0","modified":1607925116906},{"_id":"themes/shoka/source/css/_common/components/third-party/third-party.styl","hash":"68ee764bfb8bb0bb478cd41c78895dd341600d26","modified":1607925116906},{"_id":"themes/shoka/source/css/_common/components/third-party/valine.styl","hash":"59c69ea7817c0348872f865d406b9650814279ce","modified":1607925116907},{"_id":"themes/shoka/source/css/_common/components/third-party/widgets.styl","hash":"71fe298ba9de676ebc3c00febe10784aa7dc119a","modified":1607925116907},{"_id":"themes/shoka/source/css/_common/outline/footer/footer.styl","hash":"66592076afe7b86b7962aac5451e0b5248d7172e","modified":1607925116908},{"_id":"themes/shoka/source/css/_common/outline/header/brand.styl","hash":"6335d84443326d19fff8e17f364d4cace8f19445","modified":1607925116909},{"_id":"themes/shoka/source/css/_common/outline/header/header.styl","hash":"ca7f94ebb0f3090405aab79889b81d4e708a6ab6","modified":1607925116909},{"_id":"themes/shoka/source/css/_common/outline/header/image.styl","hash":"0777d91cbc7e228426c46ee97627a32054526013","modified":1607925116910},{"_id":"themes/shoka/source/css/_common/outline/header/menu.styl","hash":"3b309ade55860b4d8c693b336a33e470436a32b7","modified":1607925116910},{"_id":"themes/shoka/source/css/_common/outline/header/nav.styl","hash":"14b99c6f21a66ee6760f5406879dab7f41f5a38f","modified":1607925116910},{"_id":"themes/shoka/source/css/_common/outline/header/right.styl","hash":"d9a7f9923ea7ad2b3aeda9ce7140697f9d094054","modified":1607925116911},{"_id":"themes/shoka/source/css/_common/outline/header/tool.styl","hash":"1fa043670ba8cc2a4c86081e5dd88e9ed4b1f978","modified":1607925116911},{"_id":"themes/shoka/source/css/_common/outline/header/waves.styl","hash":"f9e6ae9e36429568c0323a112f39d6ea2baaefd6","modified":1607925116912},{"_id":"themes/shoka/source/css/_common/outline/sidebar/author.styl","hash":"a09b34b35d31a4b8e275bfbb92efa48fe6608d2f","modified":1607925116913},{"_id":"themes/shoka/source/css/_common/outline/sidebar/dimmer.styl","hash":"66f159f21cafe1dc71570f7018678a0a3862c175","modified":1607925116914},{"_id":"themes/shoka/source/css/_common/outline/sidebar/menu.styl","hash":"e399dae9c42f0413fca783002b5bb8ec2b501885","modified":1607925116914},{"_id":"themes/shoka/source/css/_common/outline/sidebar/quick.styl","hash":"01b34ce24ad3dde1147c8f3a6babd70e3d45b461","modified":1607925116914},{"_id":"themes/shoka/source/css/_common/outline/sidebar/related.styl","hash":"e300d2ec33fb7bfbc9310578b8891eb6cd137e86","modified":1607925116915},{"_id":"themes/shoka/source/css/_common/outline/sidebar/sidebar.styl","hash":"6a1a13ecc6de3ceba1957f95aa852d440abaae9b","modified":1607925116915},{"_id":"themes/shoka/source/css/_common/outline/sidebar/social.styl","hash":"33f6459f44e15ef3320e3b208e5345ff1d0cee5f","modified":1607925116916},{"_id":"themes/shoka/source/css/_common/outline/sidebar/state.styl","hash":"c2eaaba4c35df5253ae236318b5e6f76861d37f8","modified":1607925116916},{"_id":"themes/shoka/source/css/_common/outline/sidebar/tab.styl","hash":"b6f604f7293230d0113dabe5deeb61b809fdf035","modified":1607925116917},{"_id":"themes/shoka/source/css/_common/outline/sidebar/toc.styl","hash":"5836be92d4d153bd44ff86fe05e0ce83b11ae569","modified":1607925116917},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/cover.jpg","hash":"57341ddf90eeb71d0b9a3fef8cf1f094f9c299b3","modified":1607925116827},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/config.md","hash":"721ddd7f9bf3787e70878944cf095edc21be1337","modified":1607925116830},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/dependents.md","hash":"5048e40092f39f776060e083c822698e5842a3ea","modified":1607925116831},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/display.md","hash":"752d109ec93ccda28db5419f3ed596540d794eb4","modified":1607925116831},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/special.md","hash":"3083f7eb982cb89a9775f712d88dbd268ecdadc3","modified":1607925116832},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/class.styl","hash":"0d9b0d1d2ecf981b881e9416fc770d47f679a50f","modified":1607925116901},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/flowchart.styl","hash":"83296761c85b8e82d0757b1a4792a74d50509d2d","modified":1607925116902},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/gantt.styl","hash":"bae6617a32026891f510483aa6d25c70a82c5945","modified":1607925116902},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/git.styl","hash":"a7e5f3bb9378b1a4fb0f710e28a02fd4fd1b3040","modified":1607925116902},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/mermaid.styl","hash":"e54378b88ce839626bdbcb00676d79dbe70a742c","modified":1607925116903},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/pie.styl","hash":"bce4029a87d60ba40ff4faadb9d95c76b824141a","modified":1607925116903},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/week-1.md","hash":"8284465659be7a4b7568244264bc236c01a6d1cb","modified":1607925116827},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/week-2.md","hash":"5efffda6c8abc24a1d4671c54928cfe7fb838ce5","modified":1607925116828},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/sequence.styl","hash":"7e91e07c39e1c1343626c8d5b9fecfebc6c086f6","modified":1607925116904},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/state.styl","hash":"83d21d840bd2bc4249e2dced49efe8cef2281f05","modified":1607925116904},{"_id":"source/assets/algorithm.assets/selectionSort.gif","hash":"8e3b36259e7aeaf6a479aaef6165c247658b11e3","modified":1606970953044},{"_id":"themes/shoka/source/images/alipay.png","hash":"c9269f18dec99b80f08a8a723e41e3741de7bdb8","modified":1608029821452},{"_id":"themes/shoka/source/images/apple-touch-icon.png","hash":"e80deea02f1c7b9c7bb7268f5921b5c8786200ec","modified":1602732812594},{"_id":"themes/shoka/source/images/favicon.ico","hash":"e80deea02f1c7b9c7bb7268f5921b5c8786200ec","modified":1608028606384},{"_id":"themes/shoka/example/source/assets/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1607925116845},{"_id":"source/assets/algorithm.assets/shellSort.gif","hash":"4a361ea188e4484d96f73d6155f822ef131e513f","modified":1607147649098},{"_id":"themes/shoka/screenshot.png","hash":"676ab8bfe3fa106e5b88617ab377cd6b438cc0d9","modified":1607925116876},{"_id":"themes/shoka/example/source/assets/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1607925116850},{"_id":"themes/shoka/example/source/assets/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1607925116843},{"_id":"source/assets/algorithm.assets/heapSort.gif","hash":"ab035888029355dd0e6b8de927d913fa0523f4f1","modified":1607403583881},{"_id":"public/rss.xml","hash":"8dccbc0e099a0f2db630ffd143816697dea23824","modified":1608882440657},{"_id":"public/tag/hexo/rss.xml","hash":"9b26057f37450b780a00062d401c5fce15fb53ce","modified":1608711679447},{"_id":"public/tag/算法/rss.xml","hash":"1bc5d76066be66b6068ed809f2f0d9e446365855","modified":1608711679447},{"_id":"public/tag/linux/rss.xml","hash":"3c139d73f60213099e090e193bb2620509c404c2","modified":1608711679447},{"_id":"public/tag/mysql/rss.xml","hash":"c088127b6400ea03f5eeaa48c133fedf276592ec","modified":1608711679447},{"_id":"public/tag/git/rss.xml","hash":"5d20ac2a855c05f66927a090081bef2193bbd4b8","modified":1608711679447},{"_id":"public/tag/idea/rss.xml","hash":"167681290bb8e4ac65d77d839cd0f5ebfe4222c0","modified":1608711679447},{"_id":"public/tag/typora/rss.xml","hash":"12de9dc3865754ce404c4b91aeb98e985164d056","modified":1608711679447},{"_id":"public/tag/mongodb/rss.xml","hash":"6eae51f52b50dd5f06b52065f60e37a46fe8a6f0","modified":1608882440657},{"_id":"public/tag/rabbitmq/rss.xml","hash":"1606ee1d29dc76321f368863eb534505c0b01e91","modified":1608882440657},{"_id":"public/tag/redis/rss.xml","hash":"2762ebac8b21a06d219fc6e4a622576d47cfdc7f","modified":1608711679447},{"_id":"public/tag/java/rss.xml","hash":"3730ec2f79d19c5825953be5b455364e18806b2a","modified":1608882440657},{"_id":"public/tag/面试题/rss.xml","hash":"d80354dadfcbb51297eff4f1552f7b49fa35971b","modified":1608711679447},{"_id":"public/tag/设计模式/rss.xml","hash":"ad57e926553b0e90264c2319c610266b6a5ca21c","modified":1608711679447},{"_id":"public/tag/shiro/rss.xml","hash":"d22bc8cacdc4b76b753614e3ed9adb41aceac561","modified":1608711679447},{"_id":"public/category/计算机/rss.xml","hash":"cb2752b008fe32d222126cd4643178c2bfbb8007","modified":1608882440657},{"_id":"public/category/框架/rss.xml","hash":"49ddc12cb83b087b789e60a986e6d267821ff9a7","modified":1608882440657},{"_id":"public/category/工具/rss.xml","hash":"4e022ddd2f93bae93da60190d6eb6e56333d687e","modified":1608711679447},{"_id":"public/category/计算机语言/rss.xml","hash":"33c9ef4de0c6edb8259e95853809ac804c25c3d9","modified":1608882440657},{"_id":"public/category/面试/rss.xml","hash":"8f5d9bf0b996bc7da359588deb05fb52c8baa692","modified":1608711679447},{"_id":"public/category/java/rss.xml","hash":"30d04bb6fe583a158c38fdab46b9b3a0b9d3ac3e","modified":1608882440657},{"_id":"public/category/面试题/rss.xml","hash":"7be99d190f6d6d7544e484a1084250d33d91ec94","modified":1608711679447},{"_id":"public/category/设计模式/rss.xml","hash":"662fb23104d703ec546bfeb22f0339aa015c1ff2","modified":1608711679447},{"_id":"public/atom.xml","hash":"0ac85eb3c21d21281945d16ccd1b77de39ab49db","modified":1608882440657},{"_id":"public/tag/hexo/atom.xml","hash":"e85317f22b049c161b5eecbc4fd30f8e1657d3fa","modified":1608711679447},{"_id":"public/tag/算法/atom.xml","hash":"48dfde7a380069def8fd7293ecf8e029afba3e6d","modified":1608711679447},{"_id":"public/tag/linux/atom.xml","hash":"99be118fe2954938ef118b24ac2c147330c8f29a","modified":1608711679447},{"_id":"public/tag/mysql/atom.xml","hash":"d68bdd5feffffc9f3e077b04938a623e65c9b281","modified":1608711679447},{"_id":"public/tag/git/atom.xml","hash":"7bd7b07aafb9f1f9a4ae0b06b45e624e3eb4fdf3","modified":1608711679447},{"_id":"public/tag/idea/atom.xml","hash":"ffbffb1115122f9593eb93d7ac36704dac51c424","modified":1608711679447},{"_id":"public/tag/typora/atom.xml","hash":"b046a9dad705a95f93fe46808ee9b2cde815d590","modified":1608711679447},{"_id":"public/tag/mongodb/atom.xml","hash":"2ee2ca0bd39eb3746861c5970ca22e1ecbd65098","modified":1608882440657},{"_id":"public/tag/rabbitmq/atom.xml","hash":"dfb33a8c7e6df4f97ada02f161e37c3325eb2ee6","modified":1608882440657},{"_id":"public/tag/redis/atom.xml","hash":"6f07a0eddfecacb188cea565cdb6b450af66b8e9","modified":1608711679447},{"_id":"public/tag/java/atom.xml","hash":"f1e5f97a0969c052e2324d2f431bf8959bbd99e0","modified":1608882440657},{"_id":"public/tag/面试题/atom.xml","hash":"7e92fc9f9e1709dee22a94bd6c8eb199acd88ee5","modified":1608711679447},{"_id":"public/tag/设计模式/atom.xml","hash":"e32ed1c5965e1017156544e110169866326f918a","modified":1608711679447},{"_id":"public/tag/shiro/atom.xml","hash":"f9d3a1689e6132a85f11aa647f6d4ee164db9cf5","modified":1608711679447},{"_id":"public/category/计算机/atom.xml","hash":"395a1eea40fdea74ebb9a9d8d8bde65ae91b0d1d","modified":1608882440657},{"_id":"public/category/框架/atom.xml","hash":"6e030cbaf79b5f413e70b9c2d60380ad6ff4210b","modified":1608882440657},{"_id":"public/category/工具/atom.xml","hash":"beba099d123a019a3be016d8071c53339579fca6","modified":1608711679447},{"_id":"public/category/计算机语言/atom.xml","hash":"3483cc6f8c38ecbe9dcac3a834a3a4a62fdb0899","modified":1608882440657},{"_id":"public/category/面试/atom.xml","hash":"482d9d4892e65755051064deefad6ff0bcbb5c95","modified":1608711679447},{"_id":"public/category/java/atom.xml","hash":"765af4c24a7b23d35eedd596fbadcf4e6281ca7c","modified":1608882440657},{"_id":"public/category/面试题/atom.xml","hash":"4dce49676d2985d233eb0b43b4841d05c83dac45","modified":1608711679447},{"_id":"public/category/设计模式/atom.xml","hash":"50077538788102d5f0106d8003f1b0ce80b61790","modified":1608711679447},{"_id":"public/feed.json","hash":"8a3e2714ec933ae874e8b1eb45f9ba95816f98ec","modified":1608882440657},{"_id":"public/tag/hexo/feed.json","hash":"65460b01c129362918913263be67b798df087bb3","modified":1608711679447},{"_id":"public/tag/算法/feed.json","hash":"46576ddd42460e071198cef226e9f1bfa94945d0","modified":1608711679447},{"_id":"public/tag/linux/feed.json","hash":"ec4c287e49958ba859aa8bcc4175fcfce7dd2cf6","modified":1608711679447},{"_id":"public/tag/mysql/feed.json","hash":"ee315b760d6ef5635b40645ec15663fb812ac3bb","modified":1608711679447},{"_id":"public/tag/git/feed.json","hash":"9d8fe3baee8bd8e1232e7abb713a0af3bdc16e14","modified":1608711679447},{"_id":"public/tag/idea/feed.json","hash":"e0ff1d24870c022ac47696bb01f9b6e0201d9234","modified":1608711679447},{"_id":"public/tag/typora/feed.json","hash":"baf928362860d58e59e5206d4804b7df7c875dd9","modified":1608711679447},{"_id":"public/tag/mongodb/feed.json","hash":"353750de23052406c240e808eb4ac4f1021f15d8","modified":1608882440657},{"_id":"public/tag/rabbitmq/feed.json","hash":"28274e7c97f13dc40668dc5e4f0ebeac9d28770d","modified":1608882440657},{"_id":"public/tag/redis/feed.json","hash":"e1395dc058dba909d96ceb55ed46b106648983a8","modified":1608711679447},{"_id":"public/tag/java/feed.json","hash":"dc09b985a01c7ebdcafa3a84a01f8499068e2535","modified":1608882440657},{"_id":"public/tag/面试题/feed.json","hash":"0c4facc663d51099975ff4e6e93d69037c12a99c","modified":1608711679447},{"_id":"public/tag/设计模式/feed.json","hash":"a337e73a20c76aeb9d43aeffa06f74493150a25e","modified":1608711679447},{"_id":"public/tag/shiro/feed.json","hash":"45f68cc54b2f1ada2bd70275015fa4e65037eb90","modified":1608711679447},{"_id":"public/category/计算机/feed.json","hash":"4880367bf2e13340ea9e2e4c3127309efa17d8fe","modified":1608882440657},{"_id":"public/category/框架/feed.json","hash":"ff5cfaf46bb4dfc7ae0cdde16a1e6ccb56526ad1","modified":1608882440657},{"_id":"public/category/工具/feed.json","hash":"11e493714fcd9090e3493c4ebc15b9d98f7c3ff9","modified":1608711679447},{"_id":"public/category/计算机语言/feed.json","hash":"7e1decc0eed966d7e742e98e846afc1d8c9b7b90","modified":1608882440657},{"_id":"public/category/面试/feed.json","hash":"004de958bd602131c3ac9cfcef6d14b2720c7604","modified":1608711679447},{"_id":"public/category/java/feed.json","hash":"c965b1638c19556f70455b25ef8f2a774f092a7b","modified":1608882440657},{"_id":"public/category/面试题/feed.json","hash":"e6d3cb614c7623cf58ecd3bde77e4e78710f8334","modified":1608711679447},{"_id":"public/category/设计模式/feed.json","hash":"0fe9a07914e52388f6e878335c6fd5f6086a8b0b","modified":1608711679447},{"_id":"public/archives/index.html","hash":"2eae46d60a20ca3940cc4fe8d08fcb8692d7cb33","modified":1608882440657},{"_id":"public/archives/2020/page/3/index.html","hash":"28df2d801fe69340e8ff61a8ee5706682c51c153","modified":1608882440657},{"_id":"public/archives/2020/08/index.html","hash":"a9c4676dac6249b128233daa7745f4e4c48331d4","modified":1608882440657},{"_id":"public/archives/2020/10/index.html","hash":"535d3bda1847f8ddd6109c9206f423890abc8915","modified":1608882440657},{"_id":"public/archives/2020/11/index.html","hash":"dae81525047f64acbcf379b369257e47050314da","modified":1608882440657},{"_id":"public/archives/2020/12/page/3/index.html","hash":"044bbbebc284220b64106605b4f5a00e92f69de6","modified":1608882440657},{"_id":"public/categories/computer/index.html","hash":"bb587880beaa7bccf84aa2c38c050b0354a482d2","modified":1608882440657},{"_id":"public/categories/computer/page/2/index.html","hash":"00a6ff929326a8f42d92e9917252a4a124966237","modified":1608882440657},{"_id":"public/categories/computer/course-1/index.html","hash":"73bf99420d36ea3ffe5c7046b3cc0a581d362615","modified":1608882440657},{"_id":"public/categories/computer/course-2/index.html","hash":"e1f7d1671b05618de741520401eb480a5cc39e4e","modified":1608882440657},{"_id":"public/categories/computer/Java/index.html","hash":"870cbe04b3fc375afed58d76d60b98c264a0515b","modified":1608882440657},{"_id":"public/categories/computer/questions/index.html","hash":"4189a9ef8db79b271113243d89f94e346f2f56b9","modified":1608882440657},{"_id":"public/categories/computer/Java/course-1/index.html","hash":"6f72ee7a69620a6123909e14b5efb111410004cf","modified":1608882440657},{"_id":"public/categories/computer/questions/course-1/index.html","hash":"2d4684fd2e31d772be299056a2b76ecd52f8586c","modified":1608882440657},{"_id":"public/categories/computer/course-3/index.html","hash":"3e21da757fa5264b5fd10c278472c33800178cd6","modified":1608882440657},{"_id":"public/page/3/index.html","hash":"be0b4cb6ef84ab950cbb99d893a6ce4a39c5030c","modified":1608882440657},{"_id":"public/tags/hexo/index.html","hash":"3a895bbee8d99f2ab7537bf819a2e87e4507581a","modified":1608882440657},{"_id":"public/tags/算法/index.html","hash":"61c4066ec687a1c6908f557d6f7c04eb31f0e171","modified":1608882440657},{"_id":"public/tags/Linux/index.html","hash":"0f959b57362dc4979b7e2b5866cf51853b82c668","modified":1608882440657},{"_id":"public/tags/MySQL/index.html","hash":"809112477897c3596b8bbf7c68ce38af9c0c0eaf","modified":1608882440657},{"_id":"public/tags/git/index.html","hash":"d1e07839c7343588740da7f37918ff86b3664948","modified":1608882440657},{"_id":"public/tags/Idea/index.html","hash":"465bff95fe772ef055e2d6f4b0f7f53efe3eb541","modified":1608882440657},{"_id":"public/tags/Typora/index.html","hash":"07c42b8e9fac66632b3136512c80d26d0a97bc18","modified":1608882440657},{"_id":"public/tags/MongoDB/index.html","hash":"5ea988ed1dd397a1375f77f51d47e9727c3af003","modified":1608882440657},{"_id":"public/tags/RabbitMQ/index.html","hash":"2164d55257d7c983e6440b622cd1688581e306f4","modified":1608882440657},{"_id":"public/tags/Redis/index.html","hash":"2b5e30f2b203b95fab890ed5dfa34e19c8a0db9f","modified":1608882440657},{"_id":"public/tags/Java/index.html","hash":"a7cc7d084d371a972851aff8aeed23ce0a65da14","modified":1608882440657},{"_id":"public/tags/面试题/index.html","hash":"23ddb73185643409c40215f3b91c9d87672dd6bd","modified":1608882440657},{"_id":"public/tags/设计模式/index.html","hash":"e4db60a66c406da485e307a231e8436c7a5e4246","modified":1608882440657},{"_id":"public/tags/Shiro/index.html","hash":"ffc0d9c38121521923c2815c513dbf0c91c09e5c","modified":1608882440657},{"_id":"public/categories/index.html","hash":"88691a6671b7ce55e6bb830d55b761cadc7d1da5","modified":1608882440657},{"_id":"public/tags/index.html","hash":"0b412420d341a1a195d5bb45f94bed1f10aeadfd","modified":1608882440657},{"_id":"public/404.html","hash":"774625de234ce1aedbe4cb39882eeebcf41951fe","modified":1608882440657},{"_id":"public/js/app.js","hash":"b9de662f770d6b16f953d84a3beba2ffac721863","modified":1608882440657},{"_id":"public/computer/course-1/MongoDB/index.html","hash":"65779a88b38cf28ece15a2aa2f041ec3aca52aa8","modified":1608882440657},{"_id":"public/computer/course-1/RabbitMQ/index.html","hash":"0eea9e0bc897280fa89c0c331496575643a00076","modified":1608882440657},{"_id":"public/computer/course-3/behavioral_pattern/index.html","hash":"b2767a4abf998c9e29be97a637fd4236edfbabf8","modified":1608882440657},{"_id":"public/computer/course-3/structural_pattern/index.html","hash":"dd14dfff16691832ca2db7890e6bd1eff4a90181","modified":1608882440657},{"_id":"public/computer/course-3/create_pattern/index.html","hash":"e1dc19fb879da0edca31ce32ecf8a1be311ce643","modified":1608882440657},{"_id":"public/computer/course-2/typora/index.html","hash":"786347db3ace16603b8461794b7b8da7af33cc93","modified":1608882440657},{"_id":"public/computer/course-2/idea/index.html","hash":"1afb0a098a0a2f93c9544d5f0fc30ddabdfb36c0","modified":1608882440657},{"_id":"public/computer/course-2/git/index.html","hash":"cea421f060e1bb673f701f320c09ba8bb034da49","modified":1608882440657},{"_id":"public/computer/questions/course-1/web_questions/index.html","hash":"05961bd2f4c579d0e7618ce7daa0668ca15e82de","modified":1608882440657},{"_id":"public/computer/questions/course-1/mysql/index.html","hash":"0137120383c7e859ba475519dd4f696c841d4ee4","modified":1608882440657},{"_id":"public/computer/questions/course-1/mybatis/index.html","hash":"b64a48ea0297d7d0e016bcf9d068ca3463d840b3","modified":1608882440657},{"_id":"public/computer/questions/course-1/springmvc_questions/index.html","hash":"39771c26c7ccfb26895d97d570533bb3e20d58cb","modified":1608882440657},{"_id":"public/computer/Hexo/index.html","hash":"ff52e99a54aeab254b6d0d9b74afba66d7cd15ed","modified":1608882440657},{"_id":"public/computer/algorithm/index.html","hash":"2fc847466d975856b263a48e7f13e695bc2ddd1c","modified":1608882440657},{"_id":"public/computer/Java/course-1/Java/index.html","hash":"2363ce1bbcb1039e55d6e33f27ac051442f00ba5","modified":1608882440657},{"_id":"public/computer/Java/course-1/collection/index.html","hash":"2b7ee3c9b5f0b5e90801a63cbc2e2cb34dec946c","modified":1608882440657},{"_id":"public/computer/Java/course-1/file/index.html","hash":"ab89754f658397fc0801292c102d98d6cf768b66","modified":1608882440657},{"_id":"public/computer/Java/course-1/io/index.html","hash":"444ca8ef62d2fed7c630096dc4e95d8a59143500","modified":1608882440657},{"_id":"public/computer/questions/course-1/java_quetsions/index.html","hash":"f0aae7712736398f5d14bbe7a4e34097e1d97cac","modified":1608882440657},{"_id":"public/computer/questions/course-1/spring_questions/index.html","hash":"806ff27fc73a6e9f40ee2e61a4a60e1fa1dd117f","modified":1608882440657},{"_id":"public/computer/course-1/Shiro/index.html","hash":"1a3fbf4a9e7152e8a28d1a90e8a6798e55039710","modified":1608882440657},{"_id":"public/computer/mysql/index.html","hash":"21ebb6d60b03565a76813812bb0941bff13d993b","modified":1608882440657},{"_id":"public/computer/linux/index.html","hash":"a376c4f0554d73af580be3bb1e5c6601c6e387ac","modified":1608882440657},{"_id":"public/computer/course-1/redis/index.html","hash":"893a80a9e8a856db3c29b6cf489e3a2f48bd871f","modified":1608882440657},{"_id":"public/archives/2020/index.html","hash":"aa026dc0ce79c4b50418783222511a2cfc209187","modified":1608882440657},{"_id":"public/archives/2020/page/2/index.html","hash":"dd795b3b27aabbf76f28bae4f902c342d19b3bca","modified":1608882440657},{"_id":"public/archives/2020/12/index.html","hash":"bb1193c8647c560309b819e7622efa43b238a2ef","modified":1608882440657},{"_id":"public/archives/2020/12/page/2/index.html","hash":"1157d68ffb0fde0f0622dd656fb3e8536dd12993","modified":1608882440657},{"_id":"public/index.html","hash":"960492001d0128395f2705e3511437916fe8f1c2","modified":1608882440657},{"_id":"public/page/2/index.html","hash":"ea37192241e90c9c66f0e1a642783cf003967705","modified":1608882440657},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1608711679447},{"_id":"public/images/avatar.jpg","hash":"18217a9cc3280d5554bb4590fc67ccee679738d7","modified":1608711679447},{"_id":"public/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1608711679447},{"_id":"public/images/paypal.png","hash":"872d4b6d3cacee4845246fbf29817f1ee98bb037","modified":1608711679447},{"_id":"public/images/logo.svg","hash":"830dfbd6dff2986130819f747b25db230b05ca84","modified":1608711679447},{"_id":"public/images/play_disc.png","hash":"3cfa8dd2e12424c52d1f5e34e9502e446fecde9c","modified":1608711679447},{"_id":"public/images/play_needle.png","hash":"e0998828ab50ce37617f9f4d46b74648206ac852","modified":1608711679447},{"_id":"public/assets/algorithm.assets/Bucket_sort_1.svg.png","hash":"4b8de36b672bc205af7c34817d113be9739b09e0","modified":1608711679447},{"_id":"public/assets/algorithm.assets/Bucket_sort_2.svg.png","hash":"43e502f25ee9f7a2b9a81b511f88943fc2879b24","modified":1608711679447},{"_id":"public/images/wechatpay.png","hash":"df179e8dea7d07ee4acb1e33426ac21d28d446b4","modified":1608711679447},{"_id":"public/images/search.png","hash":"08c4f6a7a92eff3548aec94b267a23a25e6bd215","modified":1608711679447},{"_id":"public/computer/course-1/cover.jpg","hash":"d6622d7c0107faa8a228ed0c6e9dea91dfdc3846","modified":1608711679447},{"_id":"public/computer/course-2/cover.jpg","hash":"ebae55f16102e07e507e4e536d5c75ffb33da846","modified":1608711679447},{"_id":"public/computer/Java/course-1/cover.jpg","hash":"7d67b4d7ecd571fad613ea95ce15c0acee824d6f","modified":1608711679447},{"_id":"public/computer/questions/course-1/cover.jpg","hash":"5e0a1bd44de0a67d3c222e0b53ca5762bee48778","modified":1608711679447},{"_id":"public/computer/course-3/cover.jpg","hash":"b1a02e809bf4e9e68762a82516b6b9e6fc842086","modified":1608711679447},{"_id":"public/images/404.png","hash":"b7b18f6689d0a14041d87bab6c4e4ce567249d01","modified":1608711679447},{"_id":"public/images/alipay.png","hash":"c9269f18dec99b80f08a8a723e41e3741de7bdb8","modified":1608711679447},{"_id":"public/images/apple-touch-icon.png","hash":"e80deea02f1c7b9c7bb7268f5921b5c8786200ec","modified":1608711679447},{"_id":"public/images/favicon.ico","hash":"e80deea02f1c7b9c7bb7268f5921b5c8786200ec","modified":1608711679447},{"_id":"public/assets/algorithm.assets/radixSort.gif","hash":"b0c0244dc01eda00d0b92572b6c0eaf088ae3dee","modified":1608711679447},{"_id":"public/assets/algorithm.assets/countingSort.gif","hash":"dda8c95e868f3ffa28663140a5fac5fa3bc746b2","modified":1608711679447},{"_id":"public/css/comment.css","hash":"4a59e85dfcc1b8b1f456bf2b9bee42194ed22899","modified":1608711679447},{"_id":"public/css/mermaid.css","hash":"c113b0fd0c43195a175bc2531fa49e616028ff22","modified":1608711679447},{"_id":"public/css/app.css","hash":"4886c252af2fc9e899c25e28c1299e7ee803afce","modified":1608711679447},{"_id":"public/assets/algorithm.assets/quickSort.gif","hash":"9d0e7c1b3d02e77e41dfbba78ae9c02daec2744f","modified":1608711679447},{"_id":"public/assets/algorithm.assets/Sorting_heapsort_anim.gif","hash":"d70822274ca52ebc2c925fb94e81dc6a11591afa","modified":1608711679447},{"_id":"public/assets/algorithm.assets/bubbleSort.gif","hash":"e3316329fee9b7906fa857af53e2dcd053a039cd","modified":1608711679447},{"_id":"public/assets/algorithm.assets/insertionSort.gif","hash":"29e9d8b18a7bac20f4e642968598fa48eb9f6199","modified":1608711679447},{"_id":"public/assets/algorithm.assets/mergeSort.gif","hash":"0fb0ff4cc92da6d0a0f3d3a0742bbedac7c16c2a","modified":1608711679447},{"_id":"public/assets/algorithm.assets/selectionSort.gif","hash":"8e3b36259e7aeaf6a479aaef6165c247658b11e3","modified":1608711679447},{"_id":"public/assets/algorithm.assets/shellSort.gif","hash":"4a361ea188e4484d96f73d6155f822ef131e513f","modified":1608711679447},{"_id":"public/assets/algorithm.assets/heapSort.gif","hash":"ab035888029355dd0e6b8de927d913fa0523f4f1","modified":1608711679447},{"_id":"themes/shoka/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1608786836279},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1608787216689},{"_id":"source/assets/RabbitMQ.assets/1.png","hash":"79a75bb43614dfa6fd655ac631ab5960bbed7640","modified":1608877412212},{"_id":"source/assets/RabbitMQ.assets/2.png","hash":"96d22f4b0b5bfb6cf2a39239fb32960d2556b83a","modified":1608877953817},{"_id":"source/assets/RabbitMQ.assets/3.png","hash":"6ff386395a133a6c6b7c6da64ef342bf7ce7f94d","modified":1608877739237},{"_id":"source/assets/RabbitMQ.assets/4.png","hash":"21802660f90093c43544b5210d838da2883b08e1","modified":1608877803207},{"_id":"source/assets/RabbitMQ.assets/5.png","hash":"47cdd0e4f6aebc7722f078b6c2a7f135a083fa91","modified":1608878321008},{"_id":"source/assets/RabbitMQ.assets/6.png","hash":"51416ce200ead825d1944d7867302025ee4e74bb","modified":1608878423336},{"_id":"source/assets/RabbitMQ.assets/direct.png","hash":"68a3c78b6fc5a2c575c3e280d486114158b565d9","modified":1608881020512},{"_id":"source/assets/RabbitMQ.assets/fanout.png","hash":"2563b6b47ca13700763dbf5f0e4ecb9d0ae48d51","modified":1608881005335},{"_id":"source/assets/RabbitMQ.assets/helloworld.png","hash":"e161407bf178b690170fe85e058102cae9187520","modified":1608880981596},{"_id":"source/assets/RabbitMQ.assets/topic.png","hash":"b217ea3fe5ce89fcdc9ba1f82aa13380a7a732e1","modified":1608881050561},{"_id":"source/assets/RabbitMQ.assets/work.png","hash":"a4fcd9042e8ac9e06eb9928e6722c8a530d3d2b0","modified":1608880995925}],"Category":[{"name":"计算机","_id":"ckj15eg6t000ab0ut1hhy07ga"},{"name":"框架","parent":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg7g000pb0ut51jfc5f6"},{"name":"工具","parent":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg7i000ub0ut5imc57ak"},{"name":"计算机语言","parent":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg7w001fb0ut9o7y2l1a"},{"name":"面试","parent":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg870020b0utcvdpe3px"},{"name":"Java","parent":"ckj15eg7w001fb0ut9o7y2l1a","_id":"ckj15eg8d002eb0ut16otfp28"},{"name":"面试题","parent":"ckj15eg870020b0utcvdpe3px","_id":"ckj15eg8f002nb0ut6sv0ffmm"},{"name":"设计模式","parent":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8x003kb0ut114fbe6c"}],"Data":[],"Page":[],"Post":[{"title":"hexo的使用","sticky":true,"date":"2020-12-15T16:00:00.000Z","comment":true,"_content":"\n## 安装Hexo\n\n### 第一步安装Nodejs\n\n1. 下载\n\n   > wget https://nodejs.org/dist/v12.18.1/node-v12.18.1-linux-x64.tar.xz\n\n2. 解压\n\n   > tar xf node-v12.18.1-linux-x64.tar.xz\n\n3. 进入解压目录\n\n   > cd node-v12.18.1-linux-x64 \n\n4. 执行node命令，查看版本\n\n   > ./bin/node -v \n\n5. 修改文件的名字\n\n   > mv node-v12.18.1-linux-x64 nodejs\n\n6. 映射配置全局node\n\n   > ln -s /node的路径/bin/node /usr/local/bin/\n   >\n   > ln -s /node的路径/bin/npm /usr/local/bin/\n\n7. 配置环境变量\n\n   > vi /etc/profile\n   >\n   > 在最后一行添加\n   >\n   > export NODE_HOME=node的路径\n   >\n   > export PATH=$PATH:$NODE_HOME/bin \n   >\n   > export NODE_PATH=$NODE_HOME/lib/node_modules\n\n8. 执行命令 source /etc/profile 及在当前控制台更新\n\n### 第二部安装Git\n\n> yum install git\n\n### 第三步安装hexo\n\n> ```\n> npm install -g hexo-cli\n> ```\n\n## 基本操作\n\n新建一个文件，用来写博客的，在该文件下初始化\n\n> hexo init\n\n初始化模板\n\n> hexo generate\n\n运行该模板\n\n> hexo server\n\n## 基于宝塔面板一键部署hexo博客\n\n### 创建git用户\n\n1. 创建git用户\n\n   > adduser git\n\n2. 获取权限\n\n   > chmod 740 /etc/sudoers\n   >\n   > vim /etc/sudoers\n\n3. 按 `i` 键进入文件的编辑模式，按向下键找到如下字段\n\n   > root    ALL=(ALL)       ALL\n\n4. 在其后面增加一句\n\n   > git     ALL=(ALL)       ALL\n\n5. 按 `Esc` 键退出编辑模式，输入`:wq` 保存退出。（先输入`:`，然后输入`wq`回车）\n\n   > chmod 400 /etc/sudoers\n\n### 配置密钥\n\n1. 创建密钥\n\n   > 一般存放在`c/用户/.ssh`下。\n\n2. 将`id_rsa.pub`里面的密钥复制,在服务器运行下面命令，创建.ssh文件夹\n\n   > su git\n   >\n   > mkdir ~/.ssh\n\n3. 创建`.ssh/authorized_keys`文件，打开`authorized_keys`文件并将刚才在本地机器复制的内容拷贝其中并保存\n\n   > vim ~/.ssh/authorized_keys\n\n4. 按`i`进入编辑模式粘贴完按 `Esc` 键退出编辑模式，输入`:wq` 保存退出。（先输入`:`，然后输入`wq`回车）\n\n   * 修改权限\n\n     >chmod 755 ~ \n     >\n     >chmod 700 ~/.ssh\n     >\n     >chmod 600 ~/.ssh/authorized_keys\n   \n   * 测试本地连接服务器（在本地电脑git bash here）\n   \n     > //yourIp为远程服务器的ip地址\n     >\n     > ssh -v git@yourIp     //yourIp为你的服务器ip\n   \n   * 如果出现Welcome to xxx则表示连接成功\n\n### 创建git仓库\n\n- 切换到root用户，创建一个目录用于存储网站的根目录\n\n  > su root\n\n- 创建网站的根目录\n\n  > mkdir /home/hexo\n\n- 给予权限\n\n  > chown git:git -R /home/hexo\n\n### 自动化部署\n\n* 获取root权限\n\n  > su root\n\n* 建立git仓库\n\n  > cd /home/git\n  >\n  > git init --bare blog.git\n\n* 修改blog.git权限\n\n  > chown git:git -R blog.git\n\n* 在 `/home/hexo/blog.git` 下，有一个自动生成的 `hooks` 文件夹，我们创建一个新的 `git` 钩子 `post-receive`，用于自动部署。\n\n  > vim blog.git/hooks/post-receive\n\n* 按 `i` 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录\n\n  >  *#!/bin/bash*\n  >\n  >  git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f \n\n* 按 `Esc` 键退出编辑模式，输入`:wq` 保存退出。（先输入`：`，然后输入`wq`回车）\n\n* 修改文件权限，使得其可执行\n\n  > chmod +x /home/git/blog.git/hooks/post-receive\n\n### 添加网站\n\n点击添加网站**→**添加站点\n\n> 输入域名+根目录（/home/hexo）\n\n### 配置本地Hexo\n\n* 博客根目录_config下增加\n\n  > deploy:\n  >\n  > ​\ttype: git\n  >\n  > ​    repo: root@***(服务器ip,内网外网都行):/home/git/blog.git    #仓库地址\n  >\n  > ​    branch: master    #分支\n\n* 部署\n\n  > hexo clean\n  >\n  > hexo g\n  >\n  > hexo d\n\n- 输入`hexo d`的时候，如果出现ERROR Deployer not found: git，输入以下命令\n\n  > npm install --save hexo-deployer-git\n\n- 如果出现`bash: git-receive-pack: command not found`\n\n  > sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-receive-pack\n\n* 访问服务器ip，看有没有成功","source":"_posts/computer/Hexo.md","raw":"---\ntitle: hexo的使用\nsticky: true\ndate: 2020/12/16\ntags: hexo\ncomment:\n\ttrue\n---\n\n## 安装Hexo\n\n### 第一步安装Nodejs\n\n1. 下载\n\n   > wget https://nodejs.org/dist/v12.18.1/node-v12.18.1-linux-x64.tar.xz\n\n2. 解压\n\n   > tar xf node-v12.18.1-linux-x64.tar.xz\n\n3. 进入解压目录\n\n   > cd node-v12.18.1-linux-x64 \n\n4. 执行node命令，查看版本\n\n   > ./bin/node -v \n\n5. 修改文件的名字\n\n   > mv node-v12.18.1-linux-x64 nodejs\n\n6. 映射配置全局node\n\n   > ln -s /node的路径/bin/node /usr/local/bin/\n   >\n   > ln -s /node的路径/bin/npm /usr/local/bin/\n\n7. 配置环境变量\n\n   > vi /etc/profile\n   >\n   > 在最后一行添加\n   >\n   > export NODE_HOME=node的路径\n   >\n   > export PATH=$PATH:$NODE_HOME/bin \n   >\n   > export NODE_PATH=$NODE_HOME/lib/node_modules\n\n8. 执行命令 source /etc/profile 及在当前控制台更新\n\n### 第二部安装Git\n\n> yum install git\n\n### 第三步安装hexo\n\n> ```\n> npm install -g hexo-cli\n> ```\n\n## 基本操作\n\n新建一个文件，用来写博客的，在该文件下初始化\n\n> hexo init\n\n初始化模板\n\n> hexo generate\n\n运行该模板\n\n> hexo server\n\n## 基于宝塔面板一键部署hexo博客\n\n### 创建git用户\n\n1. 创建git用户\n\n   > adduser git\n\n2. 获取权限\n\n   > chmod 740 /etc/sudoers\n   >\n   > vim /etc/sudoers\n\n3. 按 `i` 键进入文件的编辑模式，按向下键找到如下字段\n\n   > root    ALL=(ALL)       ALL\n\n4. 在其后面增加一句\n\n   > git     ALL=(ALL)       ALL\n\n5. 按 `Esc` 键退出编辑模式，输入`:wq` 保存退出。（先输入`:`，然后输入`wq`回车）\n\n   > chmod 400 /etc/sudoers\n\n### 配置密钥\n\n1. 创建密钥\n\n   > 一般存放在`c/用户/.ssh`下。\n\n2. 将`id_rsa.pub`里面的密钥复制,在服务器运行下面命令，创建.ssh文件夹\n\n   > su git\n   >\n   > mkdir ~/.ssh\n\n3. 创建`.ssh/authorized_keys`文件，打开`authorized_keys`文件并将刚才在本地机器复制的内容拷贝其中并保存\n\n   > vim ~/.ssh/authorized_keys\n\n4. 按`i`进入编辑模式粘贴完按 `Esc` 键退出编辑模式，输入`:wq` 保存退出。（先输入`:`，然后输入`wq`回车）\n\n   * 修改权限\n\n     >chmod 755 ~ \n     >\n     >chmod 700 ~/.ssh\n     >\n     >chmod 600 ~/.ssh/authorized_keys\n   \n   * 测试本地连接服务器（在本地电脑git bash here）\n   \n     > //yourIp为远程服务器的ip地址\n     >\n     > ssh -v git@yourIp     //yourIp为你的服务器ip\n   \n   * 如果出现Welcome to xxx则表示连接成功\n\n### 创建git仓库\n\n- 切换到root用户，创建一个目录用于存储网站的根目录\n\n  > su root\n\n- 创建网站的根目录\n\n  > mkdir /home/hexo\n\n- 给予权限\n\n  > chown git:git -R /home/hexo\n\n### 自动化部署\n\n* 获取root权限\n\n  > su root\n\n* 建立git仓库\n\n  > cd /home/git\n  >\n  > git init --bare blog.git\n\n* 修改blog.git权限\n\n  > chown git:git -R blog.git\n\n* 在 `/home/hexo/blog.git` 下，有一个自动生成的 `hooks` 文件夹，我们创建一个新的 `git` 钩子 `post-receive`，用于自动部署。\n\n  > vim blog.git/hooks/post-receive\n\n* 按 `i` 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录\n\n  >  *#!/bin/bash*\n  >\n  >  git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f \n\n* 按 `Esc` 键退出编辑模式，输入`:wq` 保存退出。（先输入`：`，然后输入`wq`回车）\n\n* 修改文件权限，使得其可执行\n\n  > chmod +x /home/git/blog.git/hooks/post-receive\n\n### 添加网站\n\n点击添加网站**→**添加站点\n\n> 输入域名+根目录（/home/hexo）\n\n### 配置本地Hexo\n\n* 博客根目录_config下增加\n\n  > deploy:\n  >\n  > ​\ttype: git\n  >\n  > ​    repo: root@***(服务器ip,内网外网都行):/home/git/blog.git    #仓库地址\n  >\n  > ​    branch: master    #分支\n\n* 部署\n\n  > hexo clean\n  >\n  > hexo g\n  >\n  > hexo d\n\n- 输入`hexo d`的时候，如果出现ERROR Deployer not found: git，输入以下命令\n\n  > npm install --save hexo-deployer-git\n\n- 如果出现`bash: git-receive-pack: command not found`\n\n  > sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-receive-pack\n\n* 访问服务器ip，看有没有成功","slug":"computer/Hexo","published":1,"updated":"2020-12-25T07:54:22.471Z","_id":"ckj15eg5d0000b0ut6qsa36ar","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"安装hexo\"><a class=\"anchor\" href=\"#安装hexo\">#</a> 安装 Hexo</h2>\n<h3 id=\"第一步安装nodejs\"><a class=\"anchor\" href=\"#第一步安装nodejs\">#</a> 第一步安装 Nodejs</h3>\n<ol>\n<li>\n<p>下载</p>\n<blockquote>\n<p>wget <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvdjEyLjE4LjEvbm9kZS12MTIuMTguMS1saW51eC14NjQudGFyLnh6\">https://nodejs.org/dist/v12.18.1/node-v12.18.1-linux-x64.tar.xz</span></p>\n</blockquote>\n</li>\n<li>\n<p>解压</p>\n<blockquote>\n<p>tar xf node-v12.18.1-linux-x64.tar.xz</p>\n</blockquote>\n</li>\n<li>\n<p>进入解压目录</p>\n<blockquote>\n<p>cd node-v12.18.1-linux-x64</p>\n</blockquote>\n</li>\n<li>\n<p>执行 node 命令，查看版本</p>\n<blockquote>\n<p>./bin/node -v</p>\n</blockquote>\n</li>\n<li>\n<p>修改文件的名字</p>\n<blockquote>\n<p>mv node-v12.18.1-linux-x64 nodejs</p>\n</blockquote>\n</li>\n<li>\n<p>映射配置全局 node</p>\n<blockquote>\n<p>ln -s /node 的路径 /bin/node/usr/local/bin/</p>\n<p>ln -s /node 的路径 /bin/npm/usr/local/bin/</p>\n</blockquote>\n</li>\n<li>\n<p>配置环境变量</p>\n<blockquote>\n<p>vi /etc/profile</p>\n<p>在最后一行添加</p>\n<p>export NODE_HOME=node 的路径</p>\n<p>export PATH=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">PATH:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span></span></span>NODE_HOME/bin</p>\n<p>export NODE_PATH=$NODE_HOME/lib/node_modules</p>\n</blockquote>\n</li>\n<li>\n<p>执行命令 source /etc/profile 及在当前控制台更新</p>\n</li>\n</ol>\n<h3 id=\"第二部安装git\"><a class=\"anchor\" href=\"#第二部安装git\">#</a> 第二部安装 Git</h3>\n<blockquote>\n<p>yum install git</p>\n</blockquote>\n<h3 id=\"第三步安装hexo\"><a class=\"anchor\" href=\"#第三步安装hexo\">#</a> 第三步安装 hexo</h3>\n<blockquote>\n<pre><code>npm install -g hexo-cli\n</code></pre>\n</blockquote>\n<h2 id=\"基本操作\"><a class=\"anchor\" href=\"#基本操作\">#</a> 基本操作</h2>\n<p>新建一个文件，用来写博客的，在该文件下初始化</p>\n<blockquote>\n<p>hexo init</p>\n</blockquote>\n<p>初始化模板</p>\n<blockquote>\n<p>hexo generate</p>\n</blockquote>\n<p>运行该模板</p>\n<blockquote>\n<p>hexo server</p>\n</blockquote>\n<h2 id=\"基于宝塔面板一键部署hexo博客\"><a class=\"anchor\" href=\"#基于宝塔面板一键部署hexo博客\">#</a> 基于宝塔面板一键部署 hexo 博客</h2>\n<h3 id=\"创建git用户\"><a class=\"anchor\" href=\"#创建git用户\">#</a> 创建 git 用户</h3>\n<ol>\n<li>\n<p>创建 git 用户</p>\n<blockquote>\n<p>adduser git</p>\n</blockquote>\n</li>\n<li>\n<p>获取权限</p>\n<blockquote>\n<p>chmod 740 /etc/sudoers</p>\n<p>vim /etc/sudoers</p>\n</blockquote>\n</li>\n<li>\n<p>按  <code>i</code>  键进入文件的编辑模式，按向下键找到如下字段</p>\n<blockquote>\n<p>root    ALL=(ALL)       ALL</p>\n</blockquote>\n</li>\n<li>\n<p>在其后面增加一句</p>\n<blockquote>\n<p>git     ALL=(ALL)       ALL</p>\n</blockquote>\n</li>\n<li>\n<p>按  <code>Esc</code>  键退出编辑模式，输入 <code>:wq</code>  保存退出。（先输入 <code>:</code> ，然后输入 <code>wq</code>  回车）</p>\n<blockquote>\n<p>chmod 400 /etc/sudoers</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"配置密钥\"><a class=\"anchor\" href=\"#配置密钥\">#</a> 配置密钥</h3>\n<ol>\n<li>\n<p>创建密钥</p>\n<blockquote>\n<p>一般存放在 <code>c/用户/.ssh</code>  下。</p>\n</blockquote>\n</li>\n<li>\n<p>将 <code>id_rsa.pub</code>  里面的密钥复制，在服务器运行下面命令，创建.ssh 文件夹</p>\n<blockquote>\n<p>su git</p>\n<p>mkdir ~/.ssh</p>\n</blockquote>\n</li>\n<li>\n<p>创建 <code>.ssh/authorized_keys</code>  文件，打开 <code>authorized_keys</code>  文件并将刚才在本地机器复制的内容拷贝其中并保存</p>\n<blockquote>\n<p>vim ~/.ssh/authorized_keys</p>\n</blockquote>\n</li>\n<li>\n<p>按 <code>i</code>  进入编辑模式粘贴完按  <code>Esc</code>  键退出编辑模式，输入 <code>:wq</code>  保存退出。（先输入 <code>:</code> ，然后输入 <code>wq</code>  回车）</p>\n<ul>\n<li>\n<p>修改权限</p>\n<blockquote>\n<p>chmod 755 ~</p>\n<p>chmod 700 ~/.ssh</p>\n<p>chmod 600 ~/.ssh/authorized_keys</p>\n</blockquote>\n</li>\n<li>\n<p>测试本地连接服务器（在本地电脑 git bash here）</p>\n<blockquote>\n<p>//yourIp 为远程服务器的 ip 地址</p>\n<p>ssh -v git@yourIp     //yourIp 为你的服务器 ip</p>\n</blockquote>\n</li>\n<li>\n<p>如果出现 Welcome to xxx 则表示连接成功</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"创建git仓库\"><a class=\"anchor\" href=\"#创建git仓库\">#</a> 创建 git 仓库</h3>\n<ul>\n<li>\n<p>切换到 root 用户，创建一个目录用于存储网站的根目录</p>\n<blockquote>\n<p>su root</p>\n</blockquote>\n</li>\n<li>\n<p>创建网站的根目录</p>\n<blockquote>\n<p>mkdir /home/hexo</p>\n</blockquote>\n</li>\n<li>\n<p>给予权限</p>\n<blockquote>\n<p>chown git:git -R /home/hexo</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"自动化部署\"><a class=\"anchor\" href=\"#自动化部署\">#</a> 自动化部署</h3>\n<ul>\n<li>\n<p>获取 root 权限</p>\n<blockquote>\n<p>su root</p>\n</blockquote>\n</li>\n<li>\n<p>建立 git 仓库</p>\n<blockquote>\n<p>cd /home/git</p>\n<p>git init --bare blog.git</p>\n</blockquote>\n</li>\n<li>\n<p>修改 blog.git 权限</p>\n<blockquote>\n<p>chown git:git -R blog.git</p>\n</blockquote>\n</li>\n<li>\n<p>在  <code>/home/hexo/blog.git</code>  下，有一个自动生成的  <code>hooks</code>  文件夹，我们创建一个新的  <code>git</code>  钩子  <code>post-receive</code> ，用于自动部署。</p>\n<blockquote>\n<p>vim blog.git/hooks/post-receive</p>\n</blockquote>\n</li>\n<li>\n<p>按  <code>i</code>  键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录</p>\n<blockquote>\n<p><em>#!/bin/bash</em></p>\n<p>git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f</p>\n</blockquote>\n</li>\n<li>\n<p>按  <code>Esc</code>  键退出编辑模式，输入 <code>:wq</code>  保存退出。（先输入 <code>：</code> ，然后输入 <code>wq</code>  回车）</p>\n</li>\n<li>\n<p>修改文件权限，使得其可执行</p>\n<blockquote>\n<p>chmod +x /home/git/blog.git/hooks/post-receive</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"添加网站\"><a class=\"anchor\" href=\"#添加网站\">#</a> 添加网站</h3>\n<p>点击添加网站<strong>→</strong>添加站点</p>\n<blockquote>\n<p>输入域名 + 根目录（/home/hexo）</p>\n</blockquote>\n<h3 id=\"配置本地hexo\"><a class=\"anchor\" href=\"#配置本地hexo\">#</a> 配置本地 Hexo</h3>\n<ul>\n<li>\n<p>博客根目录_config 下增加</p>\n<blockquote>\n<p>deploy:</p>\n<p>​\ttype: git</p>\n<p>​    repo: root@***(服务器 ip, 内网外网都行):/home/git/blog.git    #仓库地址</p>\n<p>​    branch: master    #分支</p>\n</blockquote>\n</li>\n<li>\n<p>部署</p>\n<blockquote>\n<p>hexo clean</p>\n<p>hexo g</p>\n<p>hexo d</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>\n<p>输入 <code>hexo d</code>  的时候，如果出现 ERROR Deployer not found: git，输入以下命令</p>\n<blockquote>\n<p>npm install --save hexo-deployer-git</p>\n</blockquote>\n</li>\n<li>\n<p>如果出现 <code>bash: git-receive-pack: command not found</code></p>\n<blockquote>\n<p>sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-receive-pack</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>访问服务器 ip，看有没有成功</li>\n</ul>\n","site":{"data":{}},"length":2037,"excerpt":"","more":"<h2 id=\"安装hexo\"><a class=\"anchor\" href=\"#安装hexo\">#</a> 安装 Hexo</h2>\n<h3 id=\"第一步安装nodejs\"><a class=\"anchor\" href=\"#第一步安装nodejs\">#</a> 第一步安装 Nodejs</h3>\n<ol>\n<li>\n<p>下载</p>\n<blockquote>\n<p>wget <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvdjEyLjE4LjEvbm9kZS12MTIuMTguMS1saW51eC14NjQudGFyLnh6\">https://nodejs.org/dist/v12.18.1/node-v12.18.1-linux-x64.tar.xz</span></p>\n</blockquote>\n</li>\n<li>\n<p>解压</p>\n<blockquote>\n<p>tar xf node-v12.18.1-linux-x64.tar.xz</p>\n</blockquote>\n</li>\n<li>\n<p>进入解压目录</p>\n<blockquote>\n<p>cd node-v12.18.1-linux-x64</p>\n</blockquote>\n</li>\n<li>\n<p>执行 node 命令，查看版本</p>\n<blockquote>\n<p>./bin/node -v</p>\n</blockquote>\n</li>\n<li>\n<p>修改文件的名字</p>\n<blockquote>\n<p>mv node-v12.18.1-linux-x64 nodejs</p>\n</blockquote>\n</li>\n<li>\n<p>映射配置全局 node</p>\n<blockquote>\n<p>ln -s /node 的路径 /bin/node/usr/local/bin/</p>\n<p>ln -s /node 的路径 /bin/npm/usr/local/bin/</p>\n</blockquote>\n</li>\n<li>\n<p>配置环境变量</p>\n<blockquote>\n<p>vi /etc/profile</p>\n<p>在最后一行添加</p>\n<p>export NODE_HOME=node 的路径</p>\n<p>export PATH=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">PATH:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span></span></span></span>NODE_HOME/bin</p>\n<p>export NODE_PATH=$NODE_HOME/lib/node_modules</p>\n</blockquote>\n</li>\n<li>\n<p>执行命令 source /etc/profile 及在当前控制台更新</p>\n</li>\n</ol>\n<h3 id=\"第二部安装git\"><a class=\"anchor\" href=\"#第二部安装git\">#</a> 第二部安装 Git</h3>\n<blockquote>\n<p>yum install git</p>\n</blockquote>\n<h3 id=\"第三步安装hexo\"><a class=\"anchor\" href=\"#第三步安装hexo\">#</a> 第三步安装 hexo</h3>\n<blockquote>\n<pre><code>npm install -g hexo-cli\n</code></pre>\n</blockquote>\n<h2 id=\"基本操作\"><a class=\"anchor\" href=\"#基本操作\">#</a> 基本操作</h2>\n<p>新建一个文件，用来写博客的，在该文件下初始化</p>\n<blockquote>\n<p>hexo init</p>\n</blockquote>\n<p>初始化模板</p>\n<blockquote>\n<p>hexo generate</p>\n</blockquote>\n<p>运行该模板</p>\n<blockquote>\n<p>hexo server</p>\n</blockquote>\n<h2 id=\"基于宝塔面板一键部署hexo博客\"><a class=\"anchor\" href=\"#基于宝塔面板一键部署hexo博客\">#</a> 基于宝塔面板一键部署 hexo 博客</h2>\n<h3 id=\"创建git用户\"><a class=\"anchor\" href=\"#创建git用户\">#</a> 创建 git 用户</h3>\n<ol>\n<li>\n<p>创建 git 用户</p>\n<blockquote>\n<p>adduser git</p>\n</blockquote>\n</li>\n<li>\n<p>获取权限</p>\n<blockquote>\n<p>chmod 740 /etc/sudoers</p>\n<p>vim /etc/sudoers</p>\n</blockquote>\n</li>\n<li>\n<p>按  <code>i</code>  键进入文件的编辑模式，按向下键找到如下字段</p>\n<blockquote>\n<p>root    ALL=(ALL)       ALL</p>\n</blockquote>\n</li>\n<li>\n<p>在其后面增加一句</p>\n<blockquote>\n<p>git     ALL=(ALL)       ALL</p>\n</blockquote>\n</li>\n<li>\n<p>按  <code>Esc</code>  键退出编辑模式，输入 <code>:wq</code>  保存退出。（先输入 <code>:</code> ，然后输入 <code>wq</code>  回车）</p>\n<blockquote>\n<p>chmod 400 /etc/sudoers</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"配置密钥\"><a class=\"anchor\" href=\"#配置密钥\">#</a> 配置密钥</h3>\n<ol>\n<li>\n<p>创建密钥</p>\n<blockquote>\n<p>一般存放在 <code>c/用户/.ssh</code>  下。</p>\n</blockquote>\n</li>\n<li>\n<p>将 <code>id_rsa.pub</code>  里面的密钥复制，在服务器运行下面命令，创建.ssh 文件夹</p>\n<blockquote>\n<p>su git</p>\n<p>mkdir ~/.ssh</p>\n</blockquote>\n</li>\n<li>\n<p>创建 <code>.ssh/authorized_keys</code>  文件，打开 <code>authorized_keys</code>  文件并将刚才在本地机器复制的内容拷贝其中并保存</p>\n<blockquote>\n<p>vim ~/.ssh/authorized_keys</p>\n</blockquote>\n</li>\n<li>\n<p>按 <code>i</code>  进入编辑模式粘贴完按  <code>Esc</code>  键退出编辑模式，输入 <code>:wq</code>  保存退出。（先输入 <code>:</code> ，然后输入 <code>wq</code>  回车）</p>\n<ul>\n<li>\n<p>修改权限</p>\n<blockquote>\n<p>chmod 755 ~</p>\n<p>chmod 700 ~/.ssh</p>\n<p>chmod 600 ~/.ssh/authorized_keys</p>\n</blockquote>\n</li>\n<li>\n<p>测试本地连接服务器（在本地电脑 git bash here）</p>\n<blockquote>\n<p>//yourIp 为远程服务器的 ip 地址</p>\n<p>ssh -v git@yourIp     //yourIp 为你的服务器 ip</p>\n</blockquote>\n</li>\n<li>\n<p>如果出现 Welcome to xxx 则表示连接成功</p>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"创建git仓库\"><a class=\"anchor\" href=\"#创建git仓库\">#</a> 创建 git 仓库</h3>\n<ul>\n<li>\n<p>切换到 root 用户，创建一个目录用于存储网站的根目录</p>\n<blockquote>\n<p>su root</p>\n</blockquote>\n</li>\n<li>\n<p>创建网站的根目录</p>\n<blockquote>\n<p>mkdir /home/hexo</p>\n</blockquote>\n</li>\n<li>\n<p>给予权限</p>\n<blockquote>\n<p>chown git:git -R /home/hexo</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"自动化部署\"><a class=\"anchor\" href=\"#自动化部署\">#</a> 自动化部署</h3>\n<ul>\n<li>\n<p>获取 root 权限</p>\n<blockquote>\n<p>su root</p>\n</blockquote>\n</li>\n<li>\n<p>建立 git 仓库</p>\n<blockquote>\n<p>cd /home/git</p>\n<p>git init --bare blog.git</p>\n</blockquote>\n</li>\n<li>\n<p>修改 blog.git 权限</p>\n<blockquote>\n<p>chown git:git -R blog.git</p>\n</blockquote>\n</li>\n<li>\n<p>在  <code>/home/hexo/blog.git</code>  下，有一个自动生成的  <code>hooks</code>  文件夹，我们创建一个新的  <code>git</code>  钩子  <code>post-receive</code> ，用于自动部署。</p>\n<blockquote>\n<p>vim blog.git/hooks/post-receive</p>\n</blockquote>\n</li>\n<li>\n<p>按  <code>i</code>  键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录</p>\n<blockquote>\n<p><em>#!/bin/bash</em></p>\n<p>git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f</p>\n</blockquote>\n</li>\n<li>\n<p>按  <code>Esc</code>  键退出编辑模式，输入 <code>:wq</code>  保存退出。（先输入 <code>：</code> ，然后输入 <code>wq</code>  回车）</p>\n</li>\n<li>\n<p>修改文件权限，使得其可执行</p>\n<blockquote>\n<p>chmod +x /home/git/blog.git/hooks/post-receive</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"添加网站\"><a class=\"anchor\" href=\"#添加网站\">#</a> 添加网站</h3>\n<p>点击添加网站<strong>→</strong>添加站点</p>\n<blockquote>\n<p>输入域名 + 根目录（/home/hexo）</p>\n</blockquote>\n<h3 id=\"配置本地hexo\"><a class=\"anchor\" href=\"#配置本地hexo\">#</a> 配置本地 Hexo</h3>\n<ul>\n<li>\n<p>博客根目录_config 下增加</p>\n<blockquote>\n<p>deploy:</p>\n<p>​\ttype: git</p>\n<p>​    repo: root@***(服务器 ip, 内网外网都行):/home/git/blog.git    #仓库地址</p>\n<p>​    branch: master    #分支</p>\n</blockquote>\n</li>\n<li>\n<p>部署</p>\n<blockquote>\n<p>hexo clean</p>\n<p>hexo g</p>\n<p>hexo d</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>\n<p>输入 <code>hexo d</code>  的时候，如果出现 ERROR Deployer not found: git，输入以下命令</p>\n<blockquote>\n<p>npm install --save hexo-deployer-git</p>\n</blockquote>\n</li>\n<li>\n<p>如果出现 <code>bash: git-receive-pack: command not found</code></p>\n<blockquote>\n<p>sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-receive-pack</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>访问服务器 ip，看有没有成功</li>\n</ul>\n"},{"title":"排序算法","sticky":true,"date":"2020-12-15T16:00:00.000Z","_content":"\n### 冒泡排序\n\n1. 算法思路\n\n   > 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n   > 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n   > 针对所有的元素重复以上的步骤，除了最后一个。\n   > 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n2. 动图演示\n\n   ![bubbleSort](/assets/algorithm.assets/bubbleSort.gif)\n\n3. java代码\n\n   ```java\n   public int[] sort(int array[]){\n   int length = array.length;\n       int[] arr = Arrays.copyOf(array, length);\n       for (int i = 1; i < length; i++) {\n          //定一个标记，若为true，说明此次循环没有进行交换，则说明已经有序，排序已完成\n          boolean flag = true;\n          for (int j = 0; j < length-i; j++) {\n              if (arr[j] > arr[j+1]){\n                  int temp = arr[j+1];\n                  arr[j+1] = arr[j];\n                  arr[j] = temp;\n                  flag = false;\n              }\n          }\n          if (flag){\n              break;\n          }\n       }\n       return arr;\n   } \n   ```\n\n### 选择排序\n\n1. 算法思路\n\n   > 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n   > 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n   > 重复第二步，直到所有元素均排序完毕。\n\n\n2. 动图演示\n\n   ![selectionSort](/assets/algorithm.assets/selectionSort.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n       int length = array.length;\n       int arr[] = Arrays.copyOf(array,length);\n       //经过n-1轮比较\n       for (int i = 0; i < length - 1; i++) {\n          int min = i;\n          //每轮需要比较n-i次\n          for (int j = i + 1; j < length; j++) {\n              if (arr[j] < arr[min]) {\n                  //记录目前能找到最小值元素的下标\n                  min = j;\n              }\n          }\n          //找到最小值和i的位置进行交换\n          if (i != min) {\n              int temp = arr[i];\n              arr[i] = arr[min];\n              arr[min] = temp;\n          }\n       }\n       return arr;\n   }\n   ```\n\n### 插入排序\n\n1. 算法思路\n\n   > 将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。\n   >\n   > 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）\n\n2. 动图演示\n\n   ![insertionSort](/assets/algorithm.assets/insertionSort.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n       int length = array.length;\n       int[] arr = Arrays.copyOf(array,length);\n       // 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的\n       for (int i = 1;i < length ;i++){\n           // 记录要插入的数据\n           int temp = arr[i];\n           // 从已经排序的序列最右边的开始比较，找到比其小的数\n           int j = i;\n           while (j > 0 && arr[j - 1] > temp){\n               arr[j] = arr[j - 1];\n               j--;\n           }\n           // 存在比其小的数，插入\n           if ( j != i){\n               arr[j] = temp;\n           }\n       }\n       return arr;\n   }\n   ```\n\n### 希尔排序\n\n1. 算法思路\n\n   > 希尔排序（Shell Sort）又叫做**缩小增量排序**（diminishing increment sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n2. 动图演示\n\n   ![shellSort](/assets/algorithm.assets/shellSort.gif)\n\n3. 代码实现\n\n   ```java\n   public static int[] sort(int[] array){\n       int length = array.length;\n       int[] arr = Arrays.copyOf(array,length);\n       int temp;\n       for (int step = length / 2;step >= 1;step /= 2){\n          for (int i = step;i < length;i++){\n              temp = arr[i];\n              int j = i - step;\n              while (j >= 0 && arr[j] > temp){\n                  arr[j+step] = arr[j];\n                  j -= step;\n              }\n              arr[j+step] = temp;\n          }\n       }\n       return arr;\n   }\n   ```\n\n### 归并算法\n\n1. 算法思路\n\n   > 1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；\n   > 2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置；\n   > 3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；\n   > 4. 重复步骤 3 直到某一指针达到序列尾；\n   > 5. 将另一序列剩下的所有元素直接复制到合并序列尾。\n\n2. 动图演示\n\n   ![mergeSort](/assets/algorithm.assets/mergeSort.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n      int length = array.length;\n      int[] arr = Arrays.copyOf(array,length);\n      if (arr.length < 2){\n          return arr;\n      }\n      int middle = (int) Math.floor(length / 2);\n      int left[] = Arrays.copyOfRange(arr,0,middle);\n      int right[] = Arrays.copyOfRange(arr,middle,length);\n      return merge(sort(left),sort(right));\n   }\n   \n   private int[] merge(int[] left, int[] right) {\n      int[] arr = new int[left.length+right.length];\n      int i = 0;\n      while (left.length > 0 && right.length > 0){\n          if (left[0] <= right[0]){\n              arr[i++] = left[0];\n              left = Arrays.copyOfRange(left,1,left.length);\n          }else {\n              arr[i++] = right[0];\n              right = Arrays.copyOfRange(right,1,right.length);\n          }\n      }\n      while (left.length > 0){\n          arr[i++] = left[0];\n          left = Arrays.copyOfRange(left,1,left.length);\n      }\n      while (right.length > 0){\n          arr[i++] = right[0];\n          right = Arrays.copyOfRange(right,1,right.length);\n      }\n      return arr;\n   }\n   ```\n\n### 快速排序\n\n1. 算法思路\n\n   > 1. 从数列中挑出一个元素，称为 \"基准\"（pivot）;\n   > 2. 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n   > 3. 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；\n\n   2. 动图演示\n\n2. ![quickSort](/assets/algorithm.assets/quickSort.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n       int[] arr = Arrays.copyOf(array,array.length);\n       return quickSort(arr,0,arr.length -1);\n   }\n   \n   private int[] quickSort(int[] arr, int left, int right) {\n       if (left < right){\n          int partitionIndex = partition(arr,left,right);\n          quickSort(arr,left,partitionIndex - 1);\n          quickSort(arr,partitionIndex + 1,right);\n       }\n       return arr;\n   }\n   \n   private int partition(int[] arr, int left, int right) {\n       //设定基准值pivot\n       int pivot = left;\n       int index = pivot + 1;\n       for (int i = index;i <= right;i++){\n          if (arr[i] < arr[pivot]) {\n              swap(arr,i,index);\n              index++;\n          }\n       }\n       swap(arr,pivot,index - 1);\n       return index - 1;\n   }\n   \n   private void swap(int[] arr, int i, int j) {\n       int temp = arr[i];\n       arr[i] = arr[j];\n       arr[j] = temp;\n   }\n   ```\n\n### 堆排序\n\n1. 算法思路\n\n   > 1. 创建一个堆 H[0……n-1]；\n   > 2. 把堆首（最大值）和堆尾互换；\n   > 3. 把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；\n   > 4. 重复步骤 2，直到堆的尺寸为 1。\n\n2. 动图演示\n\n   ![heapSort](/assets/algorithm.assets/heapSort.gif)\n\n   ![Sorting_heapsort_anim](/assets/algorithm.assets/Sorting_heapsort_anim.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n      int length = array.length;\n      int[] arr = Arrays.copyOf(array,length);\n      buildMaxHeap(arr,length);\n      for (int i = length - 1;i > 0;i--){\n          swap(arr,0,i);\n          length--;\n          heapify(arr,0,length);\n      }\n      return arr;\n   }\n   \n   private void buildMaxHeap(int[] arr, int length) {\n      for (int i = (int) Math.floor(length / 2);i >= 0 ; i--) {\n          heapify(arr,i,length);\n      }\n   }\n   \n   private void heapify(int[] arr, int i, int length) {\n      int left = 2 * i + 1;\n      int right = 2 * i + 2;\n      int largest = i;\n   \n      if (left < length && arr[left] > arr[largest]){\n          largest = left;\n      }\n   \n      if (right < length && arr[right] > arr[largest]){\n          largest = right;\n      }\n   \n      if (largest != i){\n          swap(arr,i,largest);\n          heapify(arr,largest,length);\n      }\n   }\n   \n   private void swap(int[] arr, int i, int j) {\n      int temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n   }\n   ```\n\n### 计数排序\n\n1. 算法思路\n\n   > 1. 找出待排序的数组中最大和最小的元素\n   >\n   > 2. 统计数组中每个值为i的元素出现的次数，存入数组C的第i项\n   >\n   > 3. 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）\n   >\n   > 4. 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1\n\n2. 动图演示\n\n   ![countingSort](/assets/algorithm.assets/countingSort.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n    int[] arr = Arrays.copyOf(array,array.length);\n    int maxLength  = getMaxLength(arr);\n    return countingSort(arr,maxLength);\n   }\n   \n   private int[] countingSort(int[] arr, int maxLength) {\n    int count[] = new int[maxLength+1];\n    for (int value : arr){\n        count[value]++;\n    }\n    int index = 0;\n    for (int i = 0; i <= maxLength;i++){\n        while (count[i] > 0){\n            arr[index++] = i;\n            count[i]--;\n        }\n    }\n    return arr;\n   }\n   \n   private int getMaxLength(int[] arr) {\n    int max = arr[0];\n    for (int value : arr){\n        if (value > max){\n            max = value;\n        }\n    }\n    return max;\n   }\n   ```\n\n   \n\n### 桶排序\n\n1. 算法思路\n\n   > 1. 在额外空间充足的情况下，尽量增大桶的数量\n   > 2. 使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中\n\n2. 动图演示\n\n   > 将元素分布于桶中\n\n   ![Bucket_sort_1.svg_](/assets/algorithm.assets/Bucket_sort_1.svg.png)\n\n   > 在桶内进行排序\n\n   ![Bucket_sort_2.svg_](/assets/algorithm.assets/Bucket_sort_2.svg.png)\n\n3. 代码实现\n\n   ```java\n   import java.util.Arrays;\n   \n   public class BucketSort {\n    private static InsertionSort insertSort = new InsertionSort();\n   \n    public int[] sort(int[] array){\n        int[] arr = Arrays.copyOf(array,array.length);\n        return bucketSort(arr,5);\n    }\n   \n    private int[] bucketSort(int[] arr, int backetSize) {\n        if(arr.length == 0){\n            return arr;\n        }\n        int max = arr[0];\n        int min = arr[0];\n        for (int value : arr){\n            if (value > max){\n                max = value;\n            }\n            else if (value < min){\n                min = value;\n            }\n        }\n        int bucketCount = (int) Math.floor((max - min) / backetSize) + 1;\n        int[][] buckets = new int[bucketCount][0];\n   \n        //利用映射将数据分配到各个桶中\n        for (int i = 0;i < arr.length;i++){\n            int index = (int) Math.floor((arr[i] - min) /backetSize);\n            buckets[index] = arrAppend(buckets[index],arr[i]);\n        }\n        int arrIndex = 0;\n        for (int[] bakcet : buckets){\n            if (bakcet.length <= 0){\n                continue;\n            }\n            //对每个桶进行排序，这里采用了插入排序\n            bakcet = insertSort.sort(bakcet);\n            for (int value : bakcet){\n                arr[arrIndex++] = value;\n            }\n        }\n        return arr;\n    }\n   \n    /**\n        * 自动扩容，并保存数据\n        * @param arr\n        * @param value\n        * @return\n        */\n       private int[] arrAppend(int[] arr, int value) {\n           arr = Arrays.copyOf(arr,arr.length+1);\n           arr[arr.length - 1] = value;\n           return arr;\n       }\n   }\n   ```\n\n### 基数排序\n\n1. 算法思路\n\n   根据键值的每位数字来分配桶；\n\n2. 动图演示\n\n   ![radixSort](/assets/algorithm.assets/radixSort.gif)\n\n3. 代码实现\n\n   ```java\n   import java.util.Arrays;\n   \n   public class RadixSort {\n        public int[] sort(int[] array){\n            int[] arr = Arrays.copyOf(array,array.length);\n            int maxDigit = getMaxDigit(arr);\n            return radixSort(arr,maxDigit);\n        }\n   \n        /**\n            * 获得最高位\n            * @param arr\n            * @return\n        */\n       private int getMaxDigit(int[] arr) {\n           int maxValue = getMaxValue(arr);\n           return getNumLength(maxValue);\n       }\n   \n       private int getMaxValue(int[] arr) {\n           int maxValue = arr[0];\n           for (int value : arr){\n               if (maxValue < value){\n                   maxValue = value;\n               }\n           }\n           return maxValue;\n       }\n       private int getNumLength(long maxValue) {\n           if (maxValue == 0){\n               return 1;\n           }\n           int length = 0;\n           for (long temp = maxValue;temp != 0;temp /= 10){\n               length++;\n           }\n           return length;\n       }\n   \n       private int[] radixSort(int[] arr, int maxDigit) {\n           int mod = 10;\n           int dev = 1;\n           for (int i = 0; i < maxDigit;i++,dev *= 10,mod *= 10){\n               // 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)\n               int[][] counter = new int[mod * 2][0];\n   \n               for (int j = 0;j < arr.length;j++) {\n                   int bucket = ((arr[j] % mod) / dev) + mod;\n                   counter[bucket] = arrAppend(counter[bucket], arr[j]);\n               }\n               int pos = 0;\n               for (int[] bucket : counter){\n                   for (int value : bucket){\n                       arr[pos++] = value;\n                   }\n               }\n           }\n           return arr;\n       }\n   \n       /**\n        * 自动扩容，并保存数据\n        *\n        * @param arr\n        * @param value\n        * @return\n        */\n       private int[] arrAppend(int[] arr, int value) {\n           arr = Arrays.copyOf(arr,arr.length+1);\n           arr[arr.length - 1] = value;\n           return arr;\n       }\n   \n   }\n   ```\n\n   ","source":"_posts/computer/algorithm.md","raw":"---\ntitle: 排序算法\nsticky: true\ndate: 2020/12/16\ntags: 算法\n---\n\n### 冒泡排序\n\n1. 算法思路\n\n   > 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n   > 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n   > 针对所有的元素重复以上的步骤，除了最后一个。\n   > 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n2. 动图演示\n\n   ![bubbleSort](/assets/algorithm.assets/bubbleSort.gif)\n\n3. java代码\n\n   ```java\n   public int[] sort(int array[]){\n   int length = array.length;\n       int[] arr = Arrays.copyOf(array, length);\n       for (int i = 1; i < length; i++) {\n          //定一个标记，若为true，说明此次循环没有进行交换，则说明已经有序，排序已完成\n          boolean flag = true;\n          for (int j = 0; j < length-i; j++) {\n              if (arr[j] > arr[j+1]){\n                  int temp = arr[j+1];\n                  arr[j+1] = arr[j];\n                  arr[j] = temp;\n                  flag = false;\n              }\n          }\n          if (flag){\n              break;\n          }\n       }\n       return arr;\n   } \n   ```\n\n### 选择排序\n\n1. 算法思路\n\n   > 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n   > 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n   > 重复第二步，直到所有元素均排序完毕。\n\n\n2. 动图演示\n\n   ![selectionSort](/assets/algorithm.assets/selectionSort.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n       int length = array.length;\n       int arr[] = Arrays.copyOf(array,length);\n       //经过n-1轮比较\n       for (int i = 0; i < length - 1; i++) {\n          int min = i;\n          //每轮需要比较n-i次\n          for (int j = i + 1; j < length; j++) {\n              if (arr[j] < arr[min]) {\n                  //记录目前能找到最小值元素的下标\n                  min = j;\n              }\n          }\n          //找到最小值和i的位置进行交换\n          if (i != min) {\n              int temp = arr[i];\n              arr[i] = arr[min];\n              arr[min] = temp;\n          }\n       }\n       return arr;\n   }\n   ```\n\n### 插入排序\n\n1. 算法思路\n\n   > 将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。\n   >\n   > 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）\n\n2. 动图演示\n\n   ![insertionSort](/assets/algorithm.assets/insertionSort.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n       int length = array.length;\n       int[] arr = Arrays.copyOf(array,length);\n       // 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的\n       for (int i = 1;i < length ;i++){\n           // 记录要插入的数据\n           int temp = arr[i];\n           // 从已经排序的序列最右边的开始比较，找到比其小的数\n           int j = i;\n           while (j > 0 && arr[j - 1] > temp){\n               arr[j] = arr[j - 1];\n               j--;\n           }\n           // 存在比其小的数，插入\n           if ( j != i){\n               arr[j] = temp;\n           }\n       }\n       return arr;\n   }\n   ```\n\n### 希尔排序\n\n1. 算法思路\n\n   > 希尔排序（Shell Sort）又叫做**缩小增量排序**（diminishing increment sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n2. 动图演示\n\n   ![shellSort](/assets/algorithm.assets/shellSort.gif)\n\n3. 代码实现\n\n   ```java\n   public static int[] sort(int[] array){\n       int length = array.length;\n       int[] arr = Arrays.copyOf(array,length);\n       int temp;\n       for (int step = length / 2;step >= 1;step /= 2){\n          for (int i = step;i < length;i++){\n              temp = arr[i];\n              int j = i - step;\n              while (j >= 0 && arr[j] > temp){\n                  arr[j+step] = arr[j];\n                  j -= step;\n              }\n              arr[j+step] = temp;\n          }\n       }\n       return arr;\n   }\n   ```\n\n### 归并算法\n\n1. 算法思路\n\n   > 1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；\n   > 2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置；\n   > 3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；\n   > 4. 重复步骤 3 直到某一指针达到序列尾；\n   > 5. 将另一序列剩下的所有元素直接复制到合并序列尾。\n\n2. 动图演示\n\n   ![mergeSort](/assets/algorithm.assets/mergeSort.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n      int length = array.length;\n      int[] arr = Arrays.copyOf(array,length);\n      if (arr.length < 2){\n          return arr;\n      }\n      int middle = (int) Math.floor(length / 2);\n      int left[] = Arrays.copyOfRange(arr,0,middle);\n      int right[] = Arrays.copyOfRange(arr,middle,length);\n      return merge(sort(left),sort(right));\n   }\n   \n   private int[] merge(int[] left, int[] right) {\n      int[] arr = new int[left.length+right.length];\n      int i = 0;\n      while (left.length > 0 && right.length > 0){\n          if (left[0] <= right[0]){\n              arr[i++] = left[0];\n              left = Arrays.copyOfRange(left,1,left.length);\n          }else {\n              arr[i++] = right[0];\n              right = Arrays.copyOfRange(right,1,right.length);\n          }\n      }\n      while (left.length > 0){\n          arr[i++] = left[0];\n          left = Arrays.copyOfRange(left,1,left.length);\n      }\n      while (right.length > 0){\n          arr[i++] = right[0];\n          right = Arrays.copyOfRange(right,1,right.length);\n      }\n      return arr;\n   }\n   ```\n\n### 快速排序\n\n1. 算法思路\n\n   > 1. 从数列中挑出一个元素，称为 \"基准\"（pivot）;\n   > 2. 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n   > 3. 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；\n\n   2. 动图演示\n\n2. ![quickSort](/assets/algorithm.assets/quickSort.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n       int[] arr = Arrays.copyOf(array,array.length);\n       return quickSort(arr,0,arr.length -1);\n   }\n   \n   private int[] quickSort(int[] arr, int left, int right) {\n       if (left < right){\n          int partitionIndex = partition(arr,left,right);\n          quickSort(arr,left,partitionIndex - 1);\n          quickSort(arr,partitionIndex + 1,right);\n       }\n       return arr;\n   }\n   \n   private int partition(int[] arr, int left, int right) {\n       //设定基准值pivot\n       int pivot = left;\n       int index = pivot + 1;\n       for (int i = index;i <= right;i++){\n          if (arr[i] < arr[pivot]) {\n              swap(arr,i,index);\n              index++;\n          }\n       }\n       swap(arr,pivot,index - 1);\n       return index - 1;\n   }\n   \n   private void swap(int[] arr, int i, int j) {\n       int temp = arr[i];\n       arr[i] = arr[j];\n       arr[j] = temp;\n   }\n   ```\n\n### 堆排序\n\n1. 算法思路\n\n   > 1. 创建一个堆 H[0……n-1]；\n   > 2. 把堆首（最大值）和堆尾互换；\n   > 3. 把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；\n   > 4. 重复步骤 2，直到堆的尺寸为 1。\n\n2. 动图演示\n\n   ![heapSort](/assets/algorithm.assets/heapSort.gif)\n\n   ![Sorting_heapsort_anim](/assets/algorithm.assets/Sorting_heapsort_anim.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n      int length = array.length;\n      int[] arr = Arrays.copyOf(array,length);\n      buildMaxHeap(arr,length);\n      for (int i = length - 1;i > 0;i--){\n          swap(arr,0,i);\n          length--;\n          heapify(arr,0,length);\n      }\n      return arr;\n   }\n   \n   private void buildMaxHeap(int[] arr, int length) {\n      for (int i = (int) Math.floor(length / 2);i >= 0 ; i--) {\n          heapify(arr,i,length);\n      }\n   }\n   \n   private void heapify(int[] arr, int i, int length) {\n      int left = 2 * i + 1;\n      int right = 2 * i + 2;\n      int largest = i;\n   \n      if (left < length && arr[left] > arr[largest]){\n          largest = left;\n      }\n   \n      if (right < length && arr[right] > arr[largest]){\n          largest = right;\n      }\n   \n      if (largest != i){\n          swap(arr,i,largest);\n          heapify(arr,largest,length);\n      }\n   }\n   \n   private void swap(int[] arr, int i, int j) {\n      int temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n   }\n   ```\n\n### 计数排序\n\n1. 算法思路\n\n   > 1. 找出待排序的数组中最大和最小的元素\n   >\n   > 2. 统计数组中每个值为i的元素出现的次数，存入数组C的第i项\n   >\n   > 3. 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）\n   >\n   > 4. 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1\n\n2. 动图演示\n\n   ![countingSort](/assets/algorithm.assets/countingSort.gif)\n\n3. 代码实现\n\n   ```java\n   public int[] sort(int[] array){\n    int[] arr = Arrays.copyOf(array,array.length);\n    int maxLength  = getMaxLength(arr);\n    return countingSort(arr,maxLength);\n   }\n   \n   private int[] countingSort(int[] arr, int maxLength) {\n    int count[] = new int[maxLength+1];\n    for (int value : arr){\n        count[value]++;\n    }\n    int index = 0;\n    for (int i = 0; i <= maxLength;i++){\n        while (count[i] > 0){\n            arr[index++] = i;\n            count[i]--;\n        }\n    }\n    return arr;\n   }\n   \n   private int getMaxLength(int[] arr) {\n    int max = arr[0];\n    for (int value : arr){\n        if (value > max){\n            max = value;\n        }\n    }\n    return max;\n   }\n   ```\n\n   \n\n### 桶排序\n\n1. 算法思路\n\n   > 1. 在额外空间充足的情况下，尽量增大桶的数量\n   > 2. 使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中\n\n2. 动图演示\n\n   > 将元素分布于桶中\n\n   ![Bucket_sort_1.svg_](/assets/algorithm.assets/Bucket_sort_1.svg.png)\n\n   > 在桶内进行排序\n\n   ![Bucket_sort_2.svg_](/assets/algorithm.assets/Bucket_sort_2.svg.png)\n\n3. 代码实现\n\n   ```java\n   import java.util.Arrays;\n   \n   public class BucketSort {\n    private static InsertionSort insertSort = new InsertionSort();\n   \n    public int[] sort(int[] array){\n        int[] arr = Arrays.copyOf(array,array.length);\n        return bucketSort(arr,5);\n    }\n   \n    private int[] bucketSort(int[] arr, int backetSize) {\n        if(arr.length == 0){\n            return arr;\n        }\n        int max = arr[0];\n        int min = arr[0];\n        for (int value : arr){\n            if (value > max){\n                max = value;\n            }\n            else if (value < min){\n                min = value;\n            }\n        }\n        int bucketCount = (int) Math.floor((max - min) / backetSize) + 1;\n        int[][] buckets = new int[bucketCount][0];\n   \n        //利用映射将数据分配到各个桶中\n        for (int i = 0;i < arr.length;i++){\n            int index = (int) Math.floor((arr[i] - min) /backetSize);\n            buckets[index] = arrAppend(buckets[index],arr[i]);\n        }\n        int arrIndex = 0;\n        for (int[] bakcet : buckets){\n            if (bakcet.length <= 0){\n                continue;\n            }\n            //对每个桶进行排序，这里采用了插入排序\n            bakcet = insertSort.sort(bakcet);\n            for (int value : bakcet){\n                arr[arrIndex++] = value;\n            }\n        }\n        return arr;\n    }\n   \n    /**\n        * 自动扩容，并保存数据\n        * @param arr\n        * @param value\n        * @return\n        */\n       private int[] arrAppend(int[] arr, int value) {\n           arr = Arrays.copyOf(arr,arr.length+1);\n           arr[arr.length - 1] = value;\n           return arr;\n       }\n   }\n   ```\n\n### 基数排序\n\n1. 算法思路\n\n   根据键值的每位数字来分配桶；\n\n2. 动图演示\n\n   ![radixSort](/assets/algorithm.assets/radixSort.gif)\n\n3. 代码实现\n\n   ```java\n   import java.util.Arrays;\n   \n   public class RadixSort {\n        public int[] sort(int[] array){\n            int[] arr = Arrays.copyOf(array,array.length);\n            int maxDigit = getMaxDigit(arr);\n            return radixSort(arr,maxDigit);\n        }\n   \n        /**\n            * 获得最高位\n            * @param arr\n            * @return\n        */\n       private int getMaxDigit(int[] arr) {\n           int maxValue = getMaxValue(arr);\n           return getNumLength(maxValue);\n       }\n   \n       private int getMaxValue(int[] arr) {\n           int maxValue = arr[0];\n           for (int value : arr){\n               if (maxValue < value){\n                   maxValue = value;\n               }\n           }\n           return maxValue;\n       }\n       private int getNumLength(long maxValue) {\n           if (maxValue == 0){\n               return 1;\n           }\n           int length = 0;\n           for (long temp = maxValue;temp != 0;temp /= 10){\n               length++;\n           }\n           return length;\n       }\n   \n       private int[] radixSort(int[] arr, int maxDigit) {\n           int mod = 10;\n           int dev = 1;\n           for (int i = 0; i < maxDigit;i++,dev *= 10,mod *= 10){\n               // 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)\n               int[][] counter = new int[mod * 2][0];\n   \n               for (int j = 0;j < arr.length;j++) {\n                   int bucket = ((arr[j] % mod) / dev) + mod;\n                   counter[bucket] = arrAppend(counter[bucket], arr[j]);\n               }\n               int pos = 0;\n               for (int[] bucket : counter){\n                   for (int value : bucket){\n                       arr[pos++] = value;\n                   }\n               }\n           }\n           return arr;\n       }\n   \n       /**\n        * 自动扩容，并保存数据\n        *\n        * @param arr\n        * @param value\n        * @return\n        */\n       private int[] arrAppend(int[] arr, int value) {\n           arr = Arrays.copyOf(arr,arr.length+1);\n           arr[arr.length - 1] = value;\n           return arr;\n       }\n   \n   }\n   ```\n\n   ","slug":"computer/algorithm","published":1,"updated":"2020-12-17T06:56:11.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg5p0001b0ut9xfqd97o","content":"<h3 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br />\n对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。<br />\n针对所有的元素重复以上的步骤，除了最后一个。<br />\n持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/bubbleSort.gif\" alt=\"bubbleSort\" /></p>\n</li>\n<li>\n<p>java 代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token comment\">// 定一个标记，若为 true，说明此次循环没有进行交换，则说明已经有序，排序已完成</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>               <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>               arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>               flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。<br />\n再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br />\n重复第二步，直到所有元素均排序完毕。</p>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/selectionSort.gif\" alt=\"selectionSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 经过 n-1 轮比较</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token comment\">// 每轮需要比较 n-i 次</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>               <span class=\"token comment\">// 记录目前能找到最小值元素的下标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               min <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token comment\">// 找到最小值和 i 的位置进行交换</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>           arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>           arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p>\n<p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/insertionSort.gif\" alt=\"insertionSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 从下标为 1 的元素开始选择合适的位置插入，因为下标为 0 的只有一个元素，默认是有序的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 记录要插入的数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 从已经排序的序列最右边的开始比较，找到比其小的数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 存在比其小的数，插入</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> j <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"希尔排序\"><a class=\"anchor\" href=\"#希尔排序\">#</a> 希尔排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<p>希尔排序（Shell Sort）又叫做<strong>缩小增量排序</strong>（diminishing increment sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止。</p>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/shellSort.gif\" alt=\"shellSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> step <span class=\"token operator\">=</span> length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>step <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>step <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> step<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>               arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>step<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               j <span class=\"token operator\">-=</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>step<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"归并算法\"><a class=\"anchor\" href=\"#归并算法\">#</a> 归并算法</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/mergeSort.gif\" alt=\"mergeSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>middle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>middle<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span>right<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>           arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           left <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>           arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           right <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       left <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       right <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<ol>\n<li>从数列中挑出一个元素，称为 &quot;基准&quot;（pivot）;</li>\n<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>\n<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li>动图演示</li>\n</ol>\n</li>\n<li>\n<p><img data-src=\"/assets/algorithm.assets/quickSort.gif\" alt=\"quickSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">int</span> partitionIndex <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>partitionIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>partitionIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 设定基准值 pivot</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> pivot <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> pivot <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>           <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>pivot<span class=\"token punctuation\">,</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<ol>\n<li>创建一个堆 H [0……n-1]；</li>\n<li>把堆首（最大值）和堆尾互换；</li>\n<li>把堆的尺寸缩小 1，并调用 shift_down (0)，目的是把新的数组顶端数据调整到相应位置；</li>\n<li>重复步骤 2，直到堆的尺寸为 1。</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/heapSort.gif\" alt=\"heapSort\" /></p>\n<p><img data-src=\"/assets/algorithm.assets/Sorting_heapsort_anim.gif\" alt=\"Sorting_heapsort_anim\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token function\">buildMaxHeap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildMaxHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">int</span> largest <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>largest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       largest <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>largest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       largest <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>largest <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>largest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>largest<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"计数排序\"><a class=\"anchor\" href=\"#计数排序\">#</a> 计数排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<ol>\n<li>\n<p>找出待排序的数组中最大和最小的元素</p>\n</li>\n<li>\n<p>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项</p>\n</li>\n<li>\n<p>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）</p>\n</li>\n<li>\n<p>反向填充目标数组：将每个元素 i 放在新数组的第 C (i) 项，每放一个元素就将 C (i) 减去 1</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/countingSort.gif\" alt=\"countingSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">int</span> maxLength  <span class=\"token operator\">=</span> <span class=\"token function\">getMaxLength</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token function\">countingSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>maxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countingSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>maxLength<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     count<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxLength<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         arr<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         max <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"桶排序\"><a class=\"anchor\" href=\"#桶排序\">#</a> 桶排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<ol>\n<li>在额外空间充足的情况下，尽量增大桶的数量</li>\n<li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<blockquote>\n<p>将元素分布于桶中</p>\n</blockquote>\n<p><img data-src=\"/assets/algorithm.assets/Bucket_sort_1.svg.png\" alt=\"Bucket_sort_1.svg_\" /></p>\n<blockquote>\n<p>在桶内进行排序</p>\n</blockquote>\n<p><img data-src=\"/assets/algorithm.assets/Bucket_sort_2.svg.png\" alt=\"Bucket_sort_2.svg_\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BucketSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">InsertionSort</span> insertSort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InsertionSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> backetSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>             max <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             min <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     <span class=\"token keyword\">int</span> bucketCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> backetSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buckets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>bucketCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     <span class=\"token comment\">// 利用映射将数据分配到各个桶中</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>backetSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">arrAppend</span><span class=\"token punctuation\">(</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     <span class=\"token keyword\">int</span> arrIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bakcet <span class=\"token operator\">:</span> buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bakcet<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>             <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token comment\">// 对每个桶进行排序，这里采用了插入排序</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         bakcet <span class=\"token operator\">=</span> insertSort<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>bakcet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> bakcet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>             arr<span class=\"token punctuation\">[</span>arrIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * 自动扩容，并保存数据</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * @param arr</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">arrAppend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"基数排序\"><a class=\"anchor\" href=\"#基数排序\">#</a> 基数排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<p>根据键值的每位数字来分配桶；</p>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/radixSort.gif\" alt=\"radixSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RadixSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token keyword\">int</span> maxDigit <span class=\"token operator\">=</span> <span class=\"token function\">getMaxDigit</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>maxDigit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         * 获得最高位</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         * @param arr</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         * @return</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> <span class=\"token function\">getMaxValue</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getNumLength</span><span class=\"token punctuation\">(</span>maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                maxValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> maxValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> maxValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> temp <span class=\"token operator\">=</span> maxValue<span class=\"token punctuation\">;</span>temp <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>temp <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxDigit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">int</span> dev <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxDigit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>dev <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>mod <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 考虑负数的情况，这里扩展一倍队列数，其中 [0-9] 对应负数，[10-19] 对应正数 (bucket + 10)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> counter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>mod <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">int</span> bucket <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> dev<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                counter<span class=\"token punctuation\">[</span>bucket<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">arrAppend</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">[</span>bucket<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bucket <span class=\"token operator\">:</span> counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> bucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>pos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     * 自动扩容，并保存数据</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>     * @param arr</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">arrAppend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":7824,"excerpt":"","more":"<h3 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br />\n对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。<br />\n针对所有的元素重复以上的步骤，除了最后一个。<br />\n持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/bubbleSort.gif\" alt=\"bubbleSort\" /></p>\n</li>\n<li>\n<p>java 代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token comment\">// 定一个标记，若为 true，说明此次循环没有进行交换，则说明已经有序，排序已完成</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>               <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>               arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>               flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。<br />\n再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br />\n重复第二步，直到所有元素均排序完毕。</p>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/selectionSort.gif\" alt=\"selectionSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 经过 n-1 轮比较</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token comment\">// 每轮需要比较 n-i 次</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>               <span class=\"token comment\">// 记录目前能找到最小值元素的下标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               min <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token comment\">// 找到最小值和 i 的位置进行交换</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>           arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>           arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p>\n<p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/insertionSort.gif\" alt=\"insertionSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 从下标为 1 的元素开始选择合适的位置插入，因为下标为 0 的只有一个元素，默认是有序的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 记录要插入的数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 从已经排序的序列最右边的开始比较，找到比其小的数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 存在比其小的数，插入</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> j <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"希尔排序\"><a class=\"anchor\" href=\"#希尔排序\">#</a> 希尔排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<p>希尔排序（Shell Sort）又叫做<strong>缩小增量排序</strong>（diminishing increment sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止。</p>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/shellSort.gif\" alt=\"shellSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> step <span class=\"token operator\">=</span> length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>step <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>step <span class=\"token operator\">/=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> step<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>               arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>step<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>               j <span class=\"token operator\">-=</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>step<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"归并算法\"><a class=\"anchor\" href=\"#归并算法\">#</a> 归并算法</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/mergeSort.gif\" alt=\"mergeSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>middle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>middle<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span>right<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>           arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           left <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>           arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           right <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       left <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> right<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       right <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<ol>\n<li>从数列中挑出一个元素，称为 &quot;基准&quot;（pivot）;</li>\n<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>\n<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li>动图演示</li>\n</ol>\n</li>\n<li>\n<p><img data-src=\"/assets/algorithm.assets/quickSort.gif\" alt=\"quickSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">int</span> partitionIndex <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>partitionIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>partitionIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 设定基准值 pivot</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> pivot <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> pivot <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>           <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>pivot<span class=\"token punctuation\">,</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<ol>\n<li>创建一个堆 H [0……n-1]；</li>\n<li>把堆首（最大值）和堆尾互换；</li>\n<li>把堆的尺寸缩小 1，并调用 shift_down (0)，目的是把新的数组顶端数据调整到相应位置；</li>\n<li>重复步骤 2，直到堆的尺寸为 1。</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/heapSort.gif\" alt=\"heapSort\" /></p>\n<p><img data-src=\"/assets/algorithm.assets/Sorting_heapsort_anim.gif\" alt=\"Sorting_heapsort_anim\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token function\">buildMaxHeap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildMaxHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">int</span> largest <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>largest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       largest <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>largest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       largest <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>largest <span class=\"token operator\">!=</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>largest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>largest<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"计数排序\"><a class=\"anchor\" href=\"#计数排序\">#</a> 计数排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<ol>\n<li>\n<p>找出待排序的数组中最大和最小的元素</p>\n</li>\n<li>\n<p>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项</p>\n</li>\n<li>\n<p>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）</p>\n</li>\n<li>\n<p>反向填充目标数组：将每个元素 i 放在新数组的第 C (i) 项，每放一个元素就将 C (i) 减去 1</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/countingSort.gif\" alt=\"countingSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">int</span> maxLength  <span class=\"token operator\">=</span> <span class=\"token function\">getMaxLength</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token function\">countingSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>maxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">countingSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>maxLength<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     count<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxLength<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         arr<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         max <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"桶排序\"><a class=\"anchor\" href=\"#桶排序\">#</a> 桶排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<blockquote>\n<ol>\n<li>在额外空间充足的情况下，尽量增大桶的数量</li>\n<li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>动图演示</p>\n<blockquote>\n<p>将元素分布于桶中</p>\n</blockquote>\n<p><img data-src=\"/assets/algorithm.assets/Bucket_sort_1.svg.png\" alt=\"Bucket_sort_1.svg_\" /></p>\n<blockquote>\n<p>在桶内进行排序</p>\n</blockquote>\n<p><img data-src=\"/assets/algorithm.assets/Bucket_sort_2.svg.png\" alt=\"Bucket_sort_2.svg_\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BucketSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">InsertionSort</span> insertSort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InsertionSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> backetSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>             max <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             min <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     <span class=\"token keyword\">int</span> bucketCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> backetSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buckets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>bucketCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     <span class=\"token comment\">// 利用映射将数据分配到各个桶中</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>backetSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">arrAppend</span><span class=\"token punctuation\">(</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     <span class=\"token keyword\">int</span> arrIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bakcet <span class=\"token operator\">:</span> buckets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bakcet<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>             <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token comment\">// 对每个桶进行排序，这里采用了插入排序</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         bakcet <span class=\"token operator\">=</span> insertSort<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>bakcet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> bakcet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>             arr<span class=\"token punctuation\">[</span>arrIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * 自动扩容，并保存数据</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * @param arr</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">arrAppend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"基数排序\"><a class=\"anchor\" href=\"#基数排序\">#</a> 基数排序</h3>\n<ol>\n<li>\n<p>算法思路</p>\n<p>根据键值的每位数字来分配桶；</p>\n</li>\n<li>\n<p>动图演示</p>\n<p><img data-src=\"/assets/algorithm.assets/radixSort.gif\" alt=\"radixSort\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RadixSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token keyword\">int</span> maxDigit <span class=\"token operator\">=</span> <span class=\"token function\">getMaxDigit</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>maxDigit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         * 获得最高位</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         * @param arr</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         * @return</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> <span class=\"token function\">getMaxValue</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getNumLength</span><span class=\"token punctuation\">(</span>maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMaxValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                maxValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> maxValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> maxValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxValue <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> temp <span class=\"token operator\">=</span> maxValue<span class=\"token punctuation\">;</span>temp <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>temp <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxDigit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">int</span> dev <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxDigit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>dev <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>mod <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 考虑负数的情况，这里扩展一倍队列数，其中 [0-9] 对应负数，[10-19] 对应正数 (bucket + 10)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> counter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>mod <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">int</span> bucket <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> dev<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                counter<span class=\"token punctuation\">[</span>bucket<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">arrAppend</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">[</span>bucket<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bucket <span class=\"token operator\">:</span> counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> bucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>pos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     * 自动扩容，并保存数据</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>     * @param arr</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">arrAppend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        arr <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Linux","date":"2020-10-01T04:47:00.000Z","_content":"\n\n\n\n# 常用命令\n\n## 查看当前下的路径\n\n> pwd\n\n## 列出所有文件\n\nls\n\n>**-l\t以列表的样式列出所有文件**\n>\n>**-a\t显示隐藏文件**\n>\n>**-l -h或者-lh\t显示文件大小**\n>\n>***.txt\t查找以txt结尾的文件**\n>\n>**a.*\t查找以a开头的文件**\n\n​\t*\t0个或任意多个字符\n\n​\t？\t一个字符\n\n​\t[abcd]\tabcd中的一个字符\n\n​\t[a-z]\ta到z中的一个字符\n\n## 进入文件\n\ncd\n\n> ​\t**..\t返回上一级**\n>\n> ​\t**-\t在两个目录来回切换**\n>\n> ​\t**~\t返回根目录**\n\n## 自动补全\n\ntab\n\n## 上下键\n\n获取上次的命令，获取下次的命令\n\n## 清屏\n\n> **clear**\n\n## 查看IP地址\n\n> **ip addr**\n\n## 端口号\n\n### 查询被占用的端口号\n\n> **ps aux**\n\n### 查询某个应用占用的端口号\n\n> **ps -ef | grep 应用名**\n\n# 文件操作\n\n## 创建文件\n\n**touch**\n\n> **文件名\t创建文件**\t\n>\n> **.文件名\t创建隐藏文件**\n\n## 创建文件夹\n\n**mkdir**\n\n## 删除\n\n**rm**\n\n> **-d或-r 文件夹名\t删除文件夹**\n\n## 移动\n\n**mv**\n\n> **mv a b\t将a文件移动到b文件夹下**\n>\n> **mv a ./b\t将a文件移动到当前目录并改名**\n\n## **复制**\n\n**cp**\n\n>**cp a b\t将a文件复制到b文件夹下**\n\n## 编辑\n\n**vi**\n\n> **i\t进行编辑**\n>\n> **q\t推出程序**\n>\n> **w\t保存文件**\n>\n> **按下ESC，输入:wq保存**\n\n## 查看文件\n\ntail/cat\n\n## 设置为可执行文件\n\n以ch为后缀的文件\n\n> chmod +x 文件\n\n# 管理员操作\n\n> **su\t切换到超级用户**\n>\n> **reboot\t重启**\n>\n> **halt\t关机**\n\n## 修改密码\n\n> passwd\n\n# 下载命令\n\n## 下载vim编辑器\n\n> **yum -y install vim***\n\n## 下载jdk1.8\n\n> **yum install java-1.8.0-openjdk* -y**\n\n## 下载Git\n\n>**yum install git**\n\n# 虚拟机\n\n## 共享文件\n\n创建一个共享文件夹，该文件在虚拟机上mnt/hgfs文件夹下\n\n如果/mnt目录下有hgfs，但hgfs下没有共享文件，输入**vmware-hgfsclient**时却能看到共享文件夹名称，那下载工具\n\n> **yum install -y open-vm-tools-devel**\n\n然后执行以下命令就ok了\n\n> **vmhgfs-fuse .host:/ /mnt/hgfs**\n\n# 云服务器\n\n## 持久运行springboot项目\n\n命令\n\n> nohup java -jar xxx.jar > system.log 2>&1 &\n\nnohub一般形式为如下:\n\n> nohub command &\n>\n> 但是当你退出账户时，仍然会停止对应的进程。\n>\n> 所以这就需要你在后面添加 2>&1 &(相当于正常退出，仍保持命令在后台运行)\n>\n> 上面这个command正好对上java -jar blog.jar > system.log\n>\n> “>” 输出重定向，通常用于输出日志\n\nps -a可以查看Java程序运行的进程号，使用kill -9 进程号可以杀死进程。\n","source":"_posts/computer/linux.md","raw":"---\ntitle: Linux\ndate: 2020/10/1 12:47\ntags:\n\t- Linux\n---\n\n\n\n\n# 常用命令\n\n## 查看当前下的路径\n\n> pwd\n\n## 列出所有文件\n\nls\n\n>**-l\t以列表的样式列出所有文件**\n>\n>**-a\t显示隐藏文件**\n>\n>**-l -h或者-lh\t显示文件大小**\n>\n>***.txt\t查找以txt结尾的文件**\n>\n>**a.*\t查找以a开头的文件**\n\n​\t*\t0个或任意多个字符\n\n​\t？\t一个字符\n\n​\t[abcd]\tabcd中的一个字符\n\n​\t[a-z]\ta到z中的一个字符\n\n## 进入文件\n\ncd\n\n> ​\t**..\t返回上一级**\n>\n> ​\t**-\t在两个目录来回切换**\n>\n> ​\t**~\t返回根目录**\n\n## 自动补全\n\ntab\n\n## 上下键\n\n获取上次的命令，获取下次的命令\n\n## 清屏\n\n> **clear**\n\n## 查看IP地址\n\n> **ip addr**\n\n## 端口号\n\n### 查询被占用的端口号\n\n> **ps aux**\n\n### 查询某个应用占用的端口号\n\n> **ps -ef | grep 应用名**\n\n# 文件操作\n\n## 创建文件\n\n**touch**\n\n> **文件名\t创建文件**\t\n>\n> **.文件名\t创建隐藏文件**\n\n## 创建文件夹\n\n**mkdir**\n\n## 删除\n\n**rm**\n\n> **-d或-r 文件夹名\t删除文件夹**\n\n## 移动\n\n**mv**\n\n> **mv a b\t将a文件移动到b文件夹下**\n>\n> **mv a ./b\t将a文件移动到当前目录并改名**\n\n## **复制**\n\n**cp**\n\n>**cp a b\t将a文件复制到b文件夹下**\n\n## 编辑\n\n**vi**\n\n> **i\t进行编辑**\n>\n> **q\t推出程序**\n>\n> **w\t保存文件**\n>\n> **按下ESC，输入:wq保存**\n\n## 查看文件\n\ntail/cat\n\n## 设置为可执行文件\n\n以ch为后缀的文件\n\n> chmod +x 文件\n\n# 管理员操作\n\n> **su\t切换到超级用户**\n>\n> **reboot\t重启**\n>\n> **halt\t关机**\n\n## 修改密码\n\n> passwd\n\n# 下载命令\n\n## 下载vim编辑器\n\n> **yum -y install vim***\n\n## 下载jdk1.8\n\n> **yum install java-1.8.0-openjdk* -y**\n\n## 下载Git\n\n>**yum install git**\n\n# 虚拟机\n\n## 共享文件\n\n创建一个共享文件夹，该文件在虚拟机上mnt/hgfs文件夹下\n\n如果/mnt目录下有hgfs，但hgfs下没有共享文件，输入**vmware-hgfsclient**时却能看到共享文件夹名称，那下载工具\n\n> **yum install -y open-vm-tools-devel**\n\n然后执行以下命令就ok了\n\n> **vmhgfs-fuse .host:/ /mnt/hgfs**\n\n# 云服务器\n\n## 持久运行springboot项目\n\n命令\n\n> nohup java -jar xxx.jar > system.log 2>&1 &\n\nnohub一般形式为如下:\n\n> nohub command &\n>\n> 但是当你退出账户时，仍然会停止对应的进程。\n>\n> 所以这就需要你在后面添加 2>&1 &(相当于正常退出，仍保持命令在后台运行)\n>\n> 上面这个command正好对上java -jar blog.jar > system.log\n>\n> “>” 输出重定向，通常用于输出日志\n\nps -a可以查看Java程序运行的进程号，使用kill -9 进程号可以杀死进程。\n","slug":"computer/linux","published":1,"updated":"2020-12-17T04:51:25.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg610003b0utd3bz9mqa","content":"<h1 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h1>\n<h2 id=\"查看当前下的路径\"><a class=\"anchor\" href=\"#查看当前下的路径\">#</a> 查看当前下的路径</h2>\n<blockquote>\n<p>pwd</p>\n</blockquote>\n<h2 id=\"列出所有文件\"><a class=\"anchor\" href=\"#列出所有文件\">#</a> 列出所有文件</h2>\n<p>ls</p>\n<blockquote>\n<p><strong>-l\t以列表的样式列出所有文件</strong></p>\n<p><strong>-a\t显示隐藏文件</strong></p>\n<p><strong>-l -h 或者 - lh\t显示文件大小</strong></p>\n<p>*<strong>.txt\t查找以 txt 结尾的文件</strong></p>\n<p><em><em>a.</em>\t查找以 a 开头的文件</em> *</p>\n</blockquote>\n<p>​\t*\t0 个或任意多个字符</p>\n<p>​\t？\t一个字符</p>\n<p>​\t[abcd]\tabcd 中的一个字符</p>\n<p>​\t[a-z]\ta 到 z 中的一个字符</p>\n<h2 id=\"进入文件\"><a class=\"anchor\" href=\"#进入文件\">#</a> 进入文件</h2>\n<p>cd</p>\n<blockquote>\n<p>​\t<strong>..\t返回上一级</strong></p>\n<p>​\t<strong>-\t在两个目录来回切换</strong></p>\n<p>​\t<strong>~\t返回根目录</strong></p>\n</blockquote>\n<h2 id=\"自动补全\"><a class=\"anchor\" href=\"#自动补全\">#</a> 自动补全</h2>\n<p>tab</p>\n<h2 id=\"上下键\"><a class=\"anchor\" href=\"#上下键\">#</a> 上下键</h2>\n<p>获取上次的命令，获取下次的命令</p>\n<h2 id=\"清屏\"><a class=\"anchor\" href=\"#清屏\">#</a> 清屏</h2>\n<blockquote>\n<p><strong>clear</strong></p>\n</blockquote>\n<h2 id=\"查看ip地址\"><a class=\"anchor\" href=\"#查看ip地址\">#</a> 查看 IP 地址</h2>\n<blockquote>\n<p><strong>ip addr</strong></p>\n</blockquote>\n<h2 id=\"端口号\"><a class=\"anchor\" href=\"#端口号\">#</a> 端口号</h2>\n<h3 id=\"查询被占用的端口号\"><a class=\"anchor\" href=\"#查询被占用的端口号\">#</a> 查询被占用的端口号</h3>\n<blockquote>\n<p><strong>ps aux</strong></p>\n</blockquote>\n<h3 id=\"查询某个应用占用的端口号\"><a class=\"anchor\" href=\"#查询某个应用占用的端口号\">#</a> 查询某个应用占用的端口号</h3>\n<blockquote>\n<p><strong>ps -ef | grep 应用名</strong></p>\n</blockquote>\n<h1 id=\"文件操作\"><a class=\"anchor\" href=\"#文件操作\">#</a> 文件操作</h1>\n<h2 id=\"创建文件\"><a class=\"anchor\" href=\"#创建文件\">#</a> 创建文件</h2>\n<p><strong>touch</strong></p>\n<blockquote>\n<p><strong>文件名\t创建文件</strong></p>\n<p><strong>. 文件名\t创建隐藏文件</strong></p>\n</blockquote>\n<h2 id=\"创建文件夹\"><a class=\"anchor\" href=\"#创建文件夹\">#</a> 创建文件夹</h2>\n<p><strong>mkdir</strong></p>\n<h2 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h2>\n<p><strong>rm</strong></p>\n<blockquote>\n<p><strong>-d 或 - r 文件夹名\t删除文件夹</strong></p>\n</blockquote>\n<h2 id=\"移动\"><a class=\"anchor\" href=\"#移动\">#</a> 移动</h2>\n<p><strong>mv</strong></p>\n<blockquote>\n<p><strong>mv a b\t将 a 文件移动到 b 文件夹下</strong></p>\n<p><strong>mv a ./b\t将 a 文件移动到当前目录并改名</strong></p>\n</blockquote>\n<h2 id=\"复制\"><a class=\"anchor\" href=\"#复制\">#</a> <strong>复制</strong></h2>\n<p><strong>cp</strong></p>\n<blockquote>\n<p><strong>cp a b\t将 a 文件复制到 b 文件夹下</strong></p>\n</blockquote>\n<h2 id=\"编辑\"><a class=\"anchor\" href=\"#编辑\">#</a> 编辑</h2>\n<p><strong>vi</strong></p>\n<blockquote>\n<p><strong>i\t进行编辑</strong></p>\n<p><strong>q\t推出程序</strong></p>\n<p><strong>w\t保存文件</strong></p>\n<p><strong>按下 ESC，输入:wq 保存</strong></p>\n</blockquote>\n<h2 id=\"查看文件\"><a class=\"anchor\" href=\"#查看文件\">#</a> 查看文件</h2>\n<p>tail/cat</p>\n<h2 id=\"设置为可执行文件\"><a class=\"anchor\" href=\"#设置为可执行文件\">#</a> 设置为可执行文件</h2>\n<p>以 ch 为后缀的文件</p>\n<blockquote>\n<p>chmod +x 文件</p>\n</blockquote>\n<h1 id=\"管理员操作\"><a class=\"anchor\" href=\"#管理员操作\">#</a> 管理员操作</h1>\n<blockquote>\n<p><strong>su\t切换到超级用户</strong></p>\n<p><strong>reboot\t重启</strong></p>\n<p><strong>halt\t关机</strong></p>\n</blockquote>\n<h2 id=\"修改密码\"><a class=\"anchor\" href=\"#修改密码\">#</a> 修改密码</h2>\n<blockquote>\n<p>passwd</p>\n</blockquote>\n<h1 id=\"下载命令\"><a class=\"anchor\" href=\"#下载命令\">#</a> 下载命令</h1>\n<h2 id=\"下载vim编辑器\"><a class=\"anchor\" href=\"#下载vim编辑器\">#</a> 下载 vim 编辑器</h2>\n<blockquote>\n<p><strong>yum -y install vim</strong>*</p>\n</blockquote>\n<h2 id=\"下载jdk18\"><a class=\"anchor\" href=\"#下载jdk18\">#</a> 下载 jdk1.8</h2>\n<blockquote>\n<p><em><em>yum install java-1.8.0-openjdk</em> -y</em>*</p>\n</blockquote>\n<h2 id=\"下载git\"><a class=\"anchor\" href=\"#下载git\">#</a> 下载 Git</h2>\n<blockquote>\n<p><strong>yum install git</strong></p>\n</blockquote>\n<h1 id=\"虚拟机\"><a class=\"anchor\" href=\"#虚拟机\">#</a> 虚拟机</h1>\n<h2 id=\"共享文件\"><a class=\"anchor\" href=\"#共享文件\">#</a> 共享文件</h2>\n<p>创建一个共享文件夹，该文件在虚拟机上 mnt/hgfs 文件夹下</p>\n<p>如果 /mnt 目录下有 hgfs，但 hgfs 下没有共享文件，输入<strong> vmware-hgfsclient</strong> 时却能看到共享文件夹名称，那下载工具</p>\n<blockquote>\n<p><strong>yum install -y open-vm-tools-devel</strong></p>\n</blockquote>\n<p>然后执行以下命令就 ok 了</p>\n<blockquote>\n<p><strong>vmhgfs-fuse .host:/ /mnt/hgfs</strong></p>\n</blockquote>\n<h1 id=\"云服务器\"><a class=\"anchor\" href=\"#云服务器\">#</a> 云服务器</h1>\n<h2 id=\"持久运行springboot项目\"><a class=\"anchor\" href=\"#持久运行springboot项目\">#</a> 持久运行 springboot 项目</h2>\n<p>命令</p>\n<blockquote>\n<p>nohup java -jar xxx.jar &gt; system.log 2&gt;&amp;1 &amp;</p>\n</blockquote>\n<p>nohub 一般形式为如下:</p>\n<blockquote>\n<p>nohub command &amp;</p>\n<p>但是当你退出账户时，仍然会停止对应的进程。</p>\n<p>所以这就需要你在后面添加 2&gt;&amp;1 &amp;(相当于正常退出，仍保持命令在后台运行)</p>\n<p>上面这个 command 正好对上 java -jar blog.jar &gt; system.log</p>\n<p>“&gt;” 输出重定向，通常用于输出日志</p>\n</blockquote>\n<p>ps -a 可以查看 Java 程序运行的进程号，使用 kill -9 进程号可以杀死进程。</p>\n","site":{"data":{}},"length":1043,"excerpt":"","more":"<h1 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h1>\n<h2 id=\"查看当前下的路径\"><a class=\"anchor\" href=\"#查看当前下的路径\">#</a> 查看当前下的路径</h2>\n<blockquote>\n<p>pwd</p>\n</blockquote>\n<h2 id=\"列出所有文件\"><a class=\"anchor\" href=\"#列出所有文件\">#</a> 列出所有文件</h2>\n<p>ls</p>\n<blockquote>\n<p><strong>-l\t以列表的样式列出所有文件</strong></p>\n<p><strong>-a\t显示隐藏文件</strong></p>\n<p><strong>-l -h 或者 - lh\t显示文件大小</strong></p>\n<p>*<strong>.txt\t查找以 txt 结尾的文件</strong></p>\n<p><em><em>a.</em>\t查找以 a 开头的文件</em> *</p>\n</blockquote>\n<p>​\t*\t0 个或任意多个字符</p>\n<p>​\t？\t一个字符</p>\n<p>​\t[abcd]\tabcd 中的一个字符</p>\n<p>​\t[a-z]\ta 到 z 中的一个字符</p>\n<h2 id=\"进入文件\"><a class=\"anchor\" href=\"#进入文件\">#</a> 进入文件</h2>\n<p>cd</p>\n<blockquote>\n<p>​\t<strong>..\t返回上一级</strong></p>\n<p>​\t<strong>-\t在两个目录来回切换</strong></p>\n<p>​\t<strong>~\t返回根目录</strong></p>\n</blockquote>\n<h2 id=\"自动补全\"><a class=\"anchor\" href=\"#自动补全\">#</a> 自动补全</h2>\n<p>tab</p>\n<h2 id=\"上下键\"><a class=\"anchor\" href=\"#上下键\">#</a> 上下键</h2>\n<p>获取上次的命令，获取下次的命令</p>\n<h2 id=\"清屏\"><a class=\"anchor\" href=\"#清屏\">#</a> 清屏</h2>\n<blockquote>\n<p><strong>clear</strong></p>\n</blockquote>\n<h2 id=\"查看ip地址\"><a class=\"anchor\" href=\"#查看ip地址\">#</a> 查看 IP 地址</h2>\n<blockquote>\n<p><strong>ip addr</strong></p>\n</blockquote>\n<h2 id=\"端口号\"><a class=\"anchor\" href=\"#端口号\">#</a> 端口号</h2>\n<h3 id=\"查询被占用的端口号\"><a class=\"anchor\" href=\"#查询被占用的端口号\">#</a> 查询被占用的端口号</h3>\n<blockquote>\n<p><strong>ps aux</strong></p>\n</blockquote>\n<h3 id=\"查询某个应用占用的端口号\"><a class=\"anchor\" href=\"#查询某个应用占用的端口号\">#</a> 查询某个应用占用的端口号</h3>\n<blockquote>\n<p><strong>ps -ef | grep 应用名</strong></p>\n</blockquote>\n<h1 id=\"文件操作\"><a class=\"anchor\" href=\"#文件操作\">#</a> 文件操作</h1>\n<h2 id=\"创建文件\"><a class=\"anchor\" href=\"#创建文件\">#</a> 创建文件</h2>\n<p><strong>touch</strong></p>\n<blockquote>\n<p><strong>文件名\t创建文件</strong></p>\n<p><strong>. 文件名\t创建隐藏文件</strong></p>\n</blockquote>\n<h2 id=\"创建文件夹\"><a class=\"anchor\" href=\"#创建文件夹\">#</a> 创建文件夹</h2>\n<p><strong>mkdir</strong></p>\n<h2 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h2>\n<p><strong>rm</strong></p>\n<blockquote>\n<p><strong>-d 或 - r 文件夹名\t删除文件夹</strong></p>\n</blockquote>\n<h2 id=\"移动\"><a class=\"anchor\" href=\"#移动\">#</a> 移动</h2>\n<p><strong>mv</strong></p>\n<blockquote>\n<p><strong>mv a b\t将 a 文件移动到 b 文件夹下</strong></p>\n<p><strong>mv a ./b\t将 a 文件移动到当前目录并改名</strong></p>\n</blockquote>\n<h2 id=\"复制\"><a class=\"anchor\" href=\"#复制\">#</a> <strong>复制</strong></h2>\n<p><strong>cp</strong></p>\n<blockquote>\n<p><strong>cp a b\t将 a 文件复制到 b 文件夹下</strong></p>\n</blockquote>\n<h2 id=\"编辑\"><a class=\"anchor\" href=\"#编辑\">#</a> 编辑</h2>\n<p><strong>vi</strong></p>\n<blockquote>\n<p><strong>i\t进行编辑</strong></p>\n<p><strong>q\t推出程序</strong></p>\n<p><strong>w\t保存文件</strong></p>\n<p><strong>按下 ESC，输入:wq 保存</strong></p>\n</blockquote>\n<h2 id=\"查看文件\"><a class=\"anchor\" href=\"#查看文件\">#</a> 查看文件</h2>\n<p>tail/cat</p>\n<h2 id=\"设置为可执行文件\"><a class=\"anchor\" href=\"#设置为可执行文件\">#</a> 设置为可执行文件</h2>\n<p>以 ch 为后缀的文件</p>\n<blockquote>\n<p>chmod +x 文件</p>\n</blockquote>\n<h1 id=\"管理员操作\"><a class=\"anchor\" href=\"#管理员操作\">#</a> 管理员操作</h1>\n<blockquote>\n<p><strong>su\t切换到超级用户</strong></p>\n<p><strong>reboot\t重启</strong></p>\n<p><strong>halt\t关机</strong></p>\n</blockquote>\n<h2 id=\"修改密码\"><a class=\"anchor\" href=\"#修改密码\">#</a> 修改密码</h2>\n<blockquote>\n<p>passwd</p>\n</blockquote>\n<h1 id=\"下载命令\"><a class=\"anchor\" href=\"#下载命令\">#</a> 下载命令</h1>\n<h2 id=\"下载vim编辑器\"><a class=\"anchor\" href=\"#下载vim编辑器\">#</a> 下载 vim 编辑器</h2>\n<blockquote>\n<p><strong>yum -y install vim</strong>*</p>\n</blockquote>\n<h2 id=\"下载jdk18\"><a class=\"anchor\" href=\"#下载jdk18\">#</a> 下载 jdk1.8</h2>\n<blockquote>\n<p><em><em>yum install java-1.8.0-openjdk</em> -y</em>*</p>\n</blockquote>\n<h2 id=\"下载git\"><a class=\"anchor\" href=\"#下载git\">#</a> 下载 Git</h2>\n<blockquote>\n<p><strong>yum install git</strong></p>\n</blockquote>\n<h1 id=\"虚拟机\"><a class=\"anchor\" href=\"#虚拟机\">#</a> 虚拟机</h1>\n<h2 id=\"共享文件\"><a class=\"anchor\" href=\"#共享文件\">#</a> 共享文件</h2>\n<p>创建一个共享文件夹，该文件在虚拟机上 mnt/hgfs 文件夹下</p>\n<p>如果 /mnt 目录下有 hgfs，但 hgfs 下没有共享文件，输入<strong> vmware-hgfsclient</strong> 时却能看到共享文件夹名称，那下载工具</p>\n<blockquote>\n<p><strong>yum install -y open-vm-tools-devel</strong></p>\n</blockquote>\n<p>然后执行以下命令就 ok 了</p>\n<blockquote>\n<p><strong>vmhgfs-fuse .host:/ /mnt/hgfs</strong></p>\n</blockquote>\n<h1 id=\"云服务器\"><a class=\"anchor\" href=\"#云服务器\">#</a> 云服务器</h1>\n<h2 id=\"持久运行springboot项目\"><a class=\"anchor\" href=\"#持久运行springboot项目\">#</a> 持久运行 springboot 项目</h2>\n<p>命令</p>\n<blockquote>\n<p>nohup java -jar xxx.jar &gt; system.log 2&gt;&amp;1 &amp;</p>\n</blockquote>\n<p>nohub 一般形式为如下:</p>\n<blockquote>\n<p>nohub command &amp;</p>\n<p>但是当你退出账户时，仍然会停止对应的进程。</p>\n<p>所以这就需要你在后面添加 2&gt;&amp;1 &amp;(相当于正常退出，仍保持命令在后台运行)</p>\n<p>上面这个 command 正好对上 java -jar blog.jar &gt; system.log</p>\n<p>“&gt;” 输出重定向，通常用于输出日志</p>\n</blockquote>\n<p>ps -a 可以查看 Java 程序运行的进程号，使用 kill -9 进程号可以杀死进程。</p>\n"},{"title":"MySQL","date":"2020-10-31T16:00:00.000Z","_content":"\n\n\n# 创建数据表\n\n## 通用命令\n\n>**CREATE TABLE table_name (column_name column_type);**\n\n## 例子\n\n>  创建一个user表，字段为id,name,date\n\n```sql\ncreate table if not exists `user`(\n`id` int unsigned auto_increment,\n`name` varchar(10) not null,\n`date` date,\nprimary key(`id`)\n)engine=InnoDB default charset = utf8;\n```\n\n>**字段可为空设置为null，不能为空not null**\n>\n>    **AUTO_INCREMENT：设置为自增，一般用于主键**\n>    \n>    **PRIMARY KEY：用于定义列为主键**\n>    \n>**ENGINE 设置存储引擎，CHARSET 设置编码**\n\n\n\n# 单表操作\n\n## 查询语句\n\n> **select * from  table_name**\n\n## 插入语句\n\n### 插入所有字段的数据\n\n> **insert into table_name values()**\n\n### 插入某些字段的数据\n\n> **insert into table_name(field1,field2) values(value1,value2)**\n\n## 更新语句\n\n> **update table_name set field = value [,field1=value1]...**\n\n## 条件语句\n\n### 限制字段\n\n> **where field = value**\n\n### 限制条数\n\n> **limit m,n**\n>\n> **m\t从第几条数据开始**\n>\n> **n\t限制条数**\n\n### 升序排序\n\n> **order by field**\n\n### 降序排序\n\n> **order by field desc**\n\n### 查询条数\n\n> **select count(*)**\n\n### 分组查询\n\n> **group by field**\n\n## 模糊查询\n\n```sql\nselect * from table_name WHERE field LIKE '%value';\n```\n\n> %：匹配零个或多个\n> \n> %value，匹配以value结尾的所有值\n>\n> value%，匹配以value开头的所有值\n\n## UNION查询\n\n```sql\nselect * from table_name1\nunion select from table_name2\n```\n\n\n\n## CASE查询\n\n### 用法\n\n```sql\nCASE case_value\n\tWHEN when_value THEN\n\t\tstatement_list\n\tELSE\n\t\tstatement_list\nEND name;\n```\n\n### 例子\n\n1. 建表sex\n\n   |  id  | sex  |\n   | :--: | :--: |\n   |  1   |  1   |\n   |  2   |  0   |\n   |  3   |  1   |\n\n2. 执行语句\n\n   ```sql\n   SELECT id,\n   CASE sex\n   \tWHEN 0 THEN\n   \t\t'男'\n   \tWHEN 1 THEN\n   \t\t'女'\n   \tELSE ''\n   END sex\n   FROM sex\n   ```\n\n3. 结果\n\n   |  id  | sex  |\n   | :--: | :--: |\n   |  1   |  男  |\n   |  2   |  女  |\n   |  3   |  男  |\n\n## 排序查询\n\n> 使用order by语句进行排序，其中升序用asc，降序用desc，默认是升序。\n\n### 例子\n\n### 建表\n\n> **student(id,name)**\n\n### 查询学生表中姓名、学号，并以学号降序排序\n\n```sql\nselect id,name from student order by id desc\n```\n\n### 查询学生表中前5名学生的姓名，学号，并以学号升序排列\n\n```sql\nselect top 5 name,id from student order by id\n```\n\n# 多表操作\n\n## 显示连接\n\n### 内连接\n\n**只查询在连接的表中能够有对应的记录**\n\n> **select * from table_name1 as A inner join table_name2 as B on A.id = B.id**\n>\n> **as：将表设置为一个别名，也可不写**\n\n### 外连接\n\n#### 左连接\n\n**table_name1，也就是基准表，用基准表的数据去匹配右表的数据，所以左表的记录是全部会查询出来的，如果右表没有记录对应的话就显示null**\n\n>**select * from table_name1 as A left join table_name2 as B on A.id = B.id**\n\n#### 右连接\n\n**只是把left修改成了right，但是基准表变化了，是以右表的数据去匹配左表，所以左外连接能做到的查询，右外连接也能做到**\n\n> **select * from table_name1 as A right join table_name2 as B on A.id = B.id**\n\n### 例子\n\n#### 建表\n\n**user表**\n\n| uid  | uname | iid  |\n| :--: | :---: | :--: |\n|  1   | 张三  |  1   |\n|  2   | 李四  |  2   |\n|  3   | 王五  |  3   |\n\n**info表**\n\n| iid  |    info    |\n| :--: | :--------: |\n|  1   | 张三的信息 |\n|  2   | 李四的信息 |\n|  4   | 某某的信息 |\n\n#### 内连接\n\n**执行语句**\n\n```sql\nSELECT A.uid,A.uname,B.info FROM user A\ninner JOIN info B\nON A.iid = B.iid\n```\n\n**结果**\n\n| uid  | uname |    info    |\n| :--: | :---: | :--------: |\n|  1   | 张三  | 张三的信息 |\n|  2   | 李四  | 李四的信息 |\n\n#### 左外连接\n\n**执行语句**\n\n```sql\nSELECT A.uid,A.uname,B.info FROM user A\nLEFT JOIN info B\nON A.iid = B.iid\n```\n\n**结果**\n\n| uid  | uname |    info    |\n| :--: | :---: | :--------: |\n|  1   | 张三  | 张三的信息 |\n|  2   | 李四  | 李四的信息 |\n|  3   | 王五  |    null    |\n\n#### 右外连接\n\n**执行语句**\n\n```mysql\nSELECT A.uid,A.uname,B.info FROM user A\nRIGHT JOIN info B\nON A.iid = B.iid\n```\n\n**结果**\n\n| uid  | uname |    info    |\n| :--: | :---: | :--------: |\n|  1   | 张三  | 张三的信息 |\n|  2   | 李四  | 李四的信息 |\n| null | null  | 某某的信息 |\n\n## 隐式内连接\n\n> **select * from table_name1,table_name2 where table_name1.id = table_name2.id**\n\n# 函数\n\n## 字符串函数\n\n### CONCAT\n\n1. **概念**\n\n   >  **合并多个字符串**\n\n2. **用法**\n\n   > **CONCAT**(s1,s2...sn)\n\n3. **例子**\n\n   >**在user表中搜索名字为zhangsan的数据**\n   \n   ```sql\n   SELECT * FROM user WHERE name =  CONCAT(\"zhang\",\"san\")\n   ```\n\n### CONCAT_WS\n\n1. **概念**\n\n   > **合并多个字符串，并添加分隔符**\n\n2. **用法**\n\n   > **CONCAT_WS(x, s1,s2...sn)**\n\n3. **例子**\n\n   >**查询user表中用户生日为2020-11-5**\n   \n   ```sql\n   SELECT * FROM user WHERE birth= CONCAT_WS(\"-\",2020,11,5)\n   ```\n\n## 数字函数\n\n## 日期函数\n\n### ADDDATE\n\n1. **概念**\n\n   >**计算起始日期 d 加上 n 天的日期**\n\n2. **用法**\n\n   > **ADDDATE(d,n)**\n\n3. **例子**\n\n   >**查询未过期的商品(creatTime：生产时间，time：保质期)**\n   \n   ```sql\n   SELECT * FROM goods WHERE ADDDATE(createTime, INTERVAL time DAY)>NOW()\n   ```\n\n### ADDTIME\n\n1. **概念**\n\n   > **n 是一个时间表达式，时间 t 加上时间表达式 n**\n\n2. **用法**\n\n   > **ADDTIME(t,n)**\n\n3. **例子**\n\n   加5秒\n\n   ```sql\n   SELECT ADDTIME('2020-11-11 11:11:11', 5);\n   ```\n   \n   >2020-11-11 11:11:16 (秒)\n\n   添加 2 小时, 10 分钟, 5 秒\n\n   ```sql\n   SELECT ADDTIME(\"2020-11-11 09:34:21\", \"2:10:5\"); \n   ```\n   \n   >2020-11-11 11:44:26\n\n### NOW\n\n1. **概念**\n\n   >**返回当前日期和时间**\n\n2. **用法**\n\n   > NOW()\n\n## 高级函数\n\n### IFNULL\n\n1. **概念**\n\n   >**如果 v1 的值不为 NULL，则返回 v1，否则返回 v2**\n\n2. **用法**\n\n   >**IFNULL(v1,v2)**\n\n3. **例子**\n\n   **查询user表中年龄，如果为null，则输出0**\n\n   ```sql\n   SELECT IFNULL(age,0) FROM user\n   ```\n\n### ISNULL\n\n1. **概念**\n\n   >**判断表达式是否为 NULL**\n\n2. **用法**\n\n   >  **ISNULL(expression)**\n\n### GROUP_CONCAT\n\n1. **概念**\n\n   >**返回带有来自一个组的连接的非NULL值的字符串结果**\n   >\n   >**就是会计算哪些行属于同一组，将属于同一组的列显示出来**\n\n2. **用法**\n\n   > **GROUP_CONCAT()**\n\n3. **例子**\n\n   >student(sid,sname,tid),teacher(tid,tname)\n   >\n   >每一行tid对应所有的sname(默认是用，分隔)\n   \n   ```sql\n   SELECT t.tname,GROUP_CONCAT(s.sid) from student s\n   LEFT JOIN teacher t\n   on s.tid = t.tid\n   GROUP BY t.tid\n   ```\n\n# 例子\n\n## 准备数据\n\n> 1. 学生表\n>\n>    Student(sid,sname,sage,ssex)\n>\n>    sid：学生编号，sname：学生姓名，sage：学生年龄，ssex：学生性别\n>\n> 2. 课程表\n>\n>    Course(cid,cname,tid)\n>\n>    cid：课程编号，cname：课程名称，tid：教师编号\n>\n> 3. 教师表\n>\n>    Teacher(tid,tname)\n>\n>    tid：教师编号，tname：教师姓名\n>\n> 4. 成绩表\n>\n>    SC(sid,cid,score)\n>\n>    sid：学生编号，cid：课程编号，score：分数\n\n创建测试数据\n\n学生表Student\n\n```sql\ncreate table Student(sid varchar(10),sname varchar(10),sage datetime,ssex varchar(10))\ninsert into Student values('01' , '张三' , '1990-01-01 00:00:00.0000' , '男');\ninsert into Student values('02' , '李四' , '1990-12-21 00:00:00.0000' , '男');\ninsert into Student values('03' , '王五' , '1990-05-20 00:00:00.0000' , '男');\ninsert into Student values('04' , '赵六' , '1990-08-06 00:00:00.0000' , '男');\ninsert into Student values('05' , '李七' , '1991-12-01 00:00:00.0000' , '女');\ninsert into Student values('06' , '吴八' , '1992-03-01 00:00:00.0000' , '女');\ninsert into Student values('07' , '孙九' , '1989-07-01 00:00:00.0000' , '女');\ninsert into Student values('08' , '邓十' , '1990-01-20 00:00:00.0000' , '女');\n```\n\n课程表Course\n\n```sql\ncreate table Course(cid varchar(10),cname varchar(10),tid varchar(10));\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n教师表Teacher\n\n```sql\ncreate table Teacher(tid varchar(10),tname varchar(10));\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n成绩表SC\n\n```sql\ncreate table SC(sid varchar(10),cid varchar(10),score decimal(18,1));\ninsert into SC values('01' , '01' , 80);\ninsert into SC values('01' , '02' , 90);\ninsert into SC values('02' , '01' , 70);\ninsert into SC values('02' , '02' , 60);\ninsert into SC values('02' , '03' , 80);\ninsert into SC values('03' , '01' , 80);\ninsert into SC values('03' , '02' , 80);\ninsert into SC values('03' , '03' , 80);\ninsert into SC values('04' , '01' , 50);\ninsert into SC values('04' , '02' , 30);\ninsert into SC values('04' , '03' , 20);\ninsert into SC values('05' , '01' , 76);\ninsert into SC values('05' , '02' , 87);\ninsert into SC values('06' , '01' , 31);\ninsert into SC values('06' , '03' , 34);\ninsert into SC values('07' , '02' , 89);\ninsert into SC values('07' , '03' , 98);\n```\n\n## 例子\n\n### 查询\" 01 \"课程比\" 02 \"课程成绩高的学生的信息及课程分数\n\n```sql\nSELECT S.*,A.score score_01,B.score score_02 FROM \n((SELECT * FROM SC WHERE cid = '01') A\nLEFT JOIN (SELECT * FROM SC WHERE cid = '02') B\nON A.sid = B.sid\nLEFT JOIN Student S\nON A.sid = S.sid)\nWHERE A.score > B.score\n```\n\n### 查询同时存在\" 01 \"课程和\" 02 \"课程的情况\n\n```sql\nSELECT * FROM (SELECT * FROM SC WHERE cid = '01') A\nLEFT JOIN (SELECT * FROM SC WHERE cid = '02') B\nON A.sid = B.sid\nWHERE B.cid IS NOT NULL\n```\n\n### 询存在\" 01 \"课程但可能不存在\" 02 \"课程的情况(不存在时显示为null)\n\n```sql\nSELECT * FROM (SELECT * FROM SC WHERE cid = '01') A\nLEFT JOIN (SELECT * FROM SC WHERE cid = '02') B\nON A.sid = B.sid\n```\n\n### 查询不存在\" 01 \"课程但存在\" 02 \"课程的情况\n\n```sql\nSELECT * FROM SC WHERE cid = '02' and sid NOT IN (SELECT sid FROM SC WHERE cid = '01')\n```\n\n### 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩\n\n```sql\nSELECT A.sid,B.sname,A.score FROM\n (SELECT sid,AVG(score) score FROM SC GROUP BY sid) A\n LEFT JOIN Student B\n ON A.sid = B.sid\n WHERE A.score > 60\n```\n\n### 查询在 SC 表在成绩的学生信息\n\n> **DISTINCT：去重**\n\n```sql\nSELECT * FROM student WHERE sid in (SELECT DISTINCT sid FROM SC)\n```\n\n### 查询所有同学学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为null)\n\n```sql\nSELECT B.sid,B.sname,A.count,A.total_score FROM \n(SELECT sid,COUNT(score) count,SUM(score) total_score FROM SC GROUP BY sid) A\nRIGHT JOIN student B\nON A.sid = B.sid\n```\n\n### 查询「李」姓老师的数量\n\n```sql\nSELECT count(*) count FROM teacher WHERE tname like \"李%\"\n```\n\n### 查询学过「张三」老师授课的同学的信息\n\n```sql\nSELECT D.* FROM teacher A\nLEFT JOIN course B\nON A.tid = B.tid\nLEFT JOIN SC C\nON B.cid = C.cid\nLEFT JOIN student D\non C.sid = D.sid\nWHERE A.tname = '张三'\n```\n\n> 或者\n\n```sql\nSELECT * FROM student\nWHERE sid in (SELECT DISTINCT sid FROM SC\nWHERE cid = (SELECT cid FROM course\nWHERE tid = (SELECT tid FROM teacher WHERE tname = \"张三\")))\n```\n\n### 查询没有学全所有课程的同学的信息\n\n```sql\nSELECT * FROM student WHERE sid in(\nSELECT sid FROM SC GROUP BY sid HAVING COUNT(cid) < (\nSELECT COUNT(*) FROM course))\n```\n\n### 待更新...\n\n","source":"_posts/computer/mysql.md","raw":"---\ntitle: MySQL\ndate: 2020/11/1\ntags:\n\t- MySQL\n---\n\n\n\n# 创建数据表\n\n## 通用命令\n\n>**CREATE TABLE table_name (column_name column_type);**\n\n## 例子\n\n>  创建一个user表，字段为id,name,date\n\n```sql\ncreate table if not exists `user`(\n`id` int unsigned auto_increment,\n`name` varchar(10) not null,\n`date` date,\nprimary key(`id`)\n)engine=InnoDB default charset = utf8;\n```\n\n>**字段可为空设置为null，不能为空not null**\n>\n>    **AUTO_INCREMENT：设置为自增，一般用于主键**\n>    \n>    **PRIMARY KEY：用于定义列为主键**\n>    \n>**ENGINE 设置存储引擎，CHARSET 设置编码**\n\n\n\n# 单表操作\n\n## 查询语句\n\n> **select * from  table_name**\n\n## 插入语句\n\n### 插入所有字段的数据\n\n> **insert into table_name values()**\n\n### 插入某些字段的数据\n\n> **insert into table_name(field1,field2) values(value1,value2)**\n\n## 更新语句\n\n> **update table_name set field = value [,field1=value1]...**\n\n## 条件语句\n\n### 限制字段\n\n> **where field = value**\n\n### 限制条数\n\n> **limit m,n**\n>\n> **m\t从第几条数据开始**\n>\n> **n\t限制条数**\n\n### 升序排序\n\n> **order by field**\n\n### 降序排序\n\n> **order by field desc**\n\n### 查询条数\n\n> **select count(*)**\n\n### 分组查询\n\n> **group by field**\n\n## 模糊查询\n\n```sql\nselect * from table_name WHERE field LIKE '%value';\n```\n\n> %：匹配零个或多个\n> \n> %value，匹配以value结尾的所有值\n>\n> value%，匹配以value开头的所有值\n\n## UNION查询\n\n```sql\nselect * from table_name1\nunion select from table_name2\n```\n\n\n\n## CASE查询\n\n### 用法\n\n```sql\nCASE case_value\n\tWHEN when_value THEN\n\t\tstatement_list\n\tELSE\n\t\tstatement_list\nEND name;\n```\n\n### 例子\n\n1. 建表sex\n\n   |  id  | sex  |\n   | :--: | :--: |\n   |  1   |  1   |\n   |  2   |  0   |\n   |  3   |  1   |\n\n2. 执行语句\n\n   ```sql\n   SELECT id,\n   CASE sex\n   \tWHEN 0 THEN\n   \t\t'男'\n   \tWHEN 1 THEN\n   \t\t'女'\n   \tELSE ''\n   END sex\n   FROM sex\n   ```\n\n3. 结果\n\n   |  id  | sex  |\n   | :--: | :--: |\n   |  1   |  男  |\n   |  2   |  女  |\n   |  3   |  男  |\n\n## 排序查询\n\n> 使用order by语句进行排序，其中升序用asc，降序用desc，默认是升序。\n\n### 例子\n\n### 建表\n\n> **student(id,name)**\n\n### 查询学生表中姓名、学号，并以学号降序排序\n\n```sql\nselect id,name from student order by id desc\n```\n\n### 查询学生表中前5名学生的姓名，学号，并以学号升序排列\n\n```sql\nselect top 5 name,id from student order by id\n```\n\n# 多表操作\n\n## 显示连接\n\n### 内连接\n\n**只查询在连接的表中能够有对应的记录**\n\n> **select * from table_name1 as A inner join table_name2 as B on A.id = B.id**\n>\n> **as：将表设置为一个别名，也可不写**\n\n### 外连接\n\n#### 左连接\n\n**table_name1，也就是基准表，用基准表的数据去匹配右表的数据，所以左表的记录是全部会查询出来的，如果右表没有记录对应的话就显示null**\n\n>**select * from table_name1 as A left join table_name2 as B on A.id = B.id**\n\n#### 右连接\n\n**只是把left修改成了right，但是基准表变化了，是以右表的数据去匹配左表，所以左外连接能做到的查询，右外连接也能做到**\n\n> **select * from table_name1 as A right join table_name2 as B on A.id = B.id**\n\n### 例子\n\n#### 建表\n\n**user表**\n\n| uid  | uname | iid  |\n| :--: | :---: | :--: |\n|  1   | 张三  |  1   |\n|  2   | 李四  |  2   |\n|  3   | 王五  |  3   |\n\n**info表**\n\n| iid  |    info    |\n| :--: | :--------: |\n|  1   | 张三的信息 |\n|  2   | 李四的信息 |\n|  4   | 某某的信息 |\n\n#### 内连接\n\n**执行语句**\n\n```sql\nSELECT A.uid,A.uname,B.info FROM user A\ninner JOIN info B\nON A.iid = B.iid\n```\n\n**结果**\n\n| uid  | uname |    info    |\n| :--: | :---: | :--------: |\n|  1   | 张三  | 张三的信息 |\n|  2   | 李四  | 李四的信息 |\n\n#### 左外连接\n\n**执行语句**\n\n```sql\nSELECT A.uid,A.uname,B.info FROM user A\nLEFT JOIN info B\nON A.iid = B.iid\n```\n\n**结果**\n\n| uid  | uname |    info    |\n| :--: | :---: | :--------: |\n|  1   | 张三  | 张三的信息 |\n|  2   | 李四  | 李四的信息 |\n|  3   | 王五  |    null    |\n\n#### 右外连接\n\n**执行语句**\n\n```mysql\nSELECT A.uid,A.uname,B.info FROM user A\nRIGHT JOIN info B\nON A.iid = B.iid\n```\n\n**结果**\n\n| uid  | uname |    info    |\n| :--: | :---: | :--------: |\n|  1   | 张三  | 张三的信息 |\n|  2   | 李四  | 李四的信息 |\n| null | null  | 某某的信息 |\n\n## 隐式内连接\n\n> **select * from table_name1,table_name2 where table_name1.id = table_name2.id**\n\n# 函数\n\n## 字符串函数\n\n### CONCAT\n\n1. **概念**\n\n   >  **合并多个字符串**\n\n2. **用法**\n\n   > **CONCAT**(s1,s2...sn)\n\n3. **例子**\n\n   >**在user表中搜索名字为zhangsan的数据**\n   \n   ```sql\n   SELECT * FROM user WHERE name =  CONCAT(\"zhang\",\"san\")\n   ```\n\n### CONCAT_WS\n\n1. **概念**\n\n   > **合并多个字符串，并添加分隔符**\n\n2. **用法**\n\n   > **CONCAT_WS(x, s1,s2...sn)**\n\n3. **例子**\n\n   >**查询user表中用户生日为2020-11-5**\n   \n   ```sql\n   SELECT * FROM user WHERE birth= CONCAT_WS(\"-\",2020,11,5)\n   ```\n\n## 数字函数\n\n## 日期函数\n\n### ADDDATE\n\n1. **概念**\n\n   >**计算起始日期 d 加上 n 天的日期**\n\n2. **用法**\n\n   > **ADDDATE(d,n)**\n\n3. **例子**\n\n   >**查询未过期的商品(creatTime：生产时间，time：保质期)**\n   \n   ```sql\n   SELECT * FROM goods WHERE ADDDATE(createTime, INTERVAL time DAY)>NOW()\n   ```\n\n### ADDTIME\n\n1. **概念**\n\n   > **n 是一个时间表达式，时间 t 加上时间表达式 n**\n\n2. **用法**\n\n   > **ADDTIME(t,n)**\n\n3. **例子**\n\n   加5秒\n\n   ```sql\n   SELECT ADDTIME('2020-11-11 11:11:11', 5);\n   ```\n   \n   >2020-11-11 11:11:16 (秒)\n\n   添加 2 小时, 10 分钟, 5 秒\n\n   ```sql\n   SELECT ADDTIME(\"2020-11-11 09:34:21\", \"2:10:5\"); \n   ```\n   \n   >2020-11-11 11:44:26\n\n### NOW\n\n1. **概念**\n\n   >**返回当前日期和时间**\n\n2. **用法**\n\n   > NOW()\n\n## 高级函数\n\n### IFNULL\n\n1. **概念**\n\n   >**如果 v1 的值不为 NULL，则返回 v1，否则返回 v2**\n\n2. **用法**\n\n   >**IFNULL(v1,v2)**\n\n3. **例子**\n\n   **查询user表中年龄，如果为null，则输出0**\n\n   ```sql\n   SELECT IFNULL(age,0) FROM user\n   ```\n\n### ISNULL\n\n1. **概念**\n\n   >**判断表达式是否为 NULL**\n\n2. **用法**\n\n   >  **ISNULL(expression)**\n\n### GROUP_CONCAT\n\n1. **概念**\n\n   >**返回带有来自一个组的连接的非NULL值的字符串结果**\n   >\n   >**就是会计算哪些行属于同一组，将属于同一组的列显示出来**\n\n2. **用法**\n\n   > **GROUP_CONCAT()**\n\n3. **例子**\n\n   >student(sid,sname,tid),teacher(tid,tname)\n   >\n   >每一行tid对应所有的sname(默认是用，分隔)\n   \n   ```sql\n   SELECT t.tname,GROUP_CONCAT(s.sid) from student s\n   LEFT JOIN teacher t\n   on s.tid = t.tid\n   GROUP BY t.tid\n   ```\n\n# 例子\n\n## 准备数据\n\n> 1. 学生表\n>\n>    Student(sid,sname,sage,ssex)\n>\n>    sid：学生编号，sname：学生姓名，sage：学生年龄，ssex：学生性别\n>\n> 2. 课程表\n>\n>    Course(cid,cname,tid)\n>\n>    cid：课程编号，cname：课程名称，tid：教师编号\n>\n> 3. 教师表\n>\n>    Teacher(tid,tname)\n>\n>    tid：教师编号，tname：教师姓名\n>\n> 4. 成绩表\n>\n>    SC(sid,cid,score)\n>\n>    sid：学生编号，cid：课程编号，score：分数\n\n创建测试数据\n\n学生表Student\n\n```sql\ncreate table Student(sid varchar(10),sname varchar(10),sage datetime,ssex varchar(10))\ninsert into Student values('01' , '张三' , '1990-01-01 00:00:00.0000' , '男');\ninsert into Student values('02' , '李四' , '1990-12-21 00:00:00.0000' , '男');\ninsert into Student values('03' , '王五' , '1990-05-20 00:00:00.0000' , '男');\ninsert into Student values('04' , '赵六' , '1990-08-06 00:00:00.0000' , '男');\ninsert into Student values('05' , '李七' , '1991-12-01 00:00:00.0000' , '女');\ninsert into Student values('06' , '吴八' , '1992-03-01 00:00:00.0000' , '女');\ninsert into Student values('07' , '孙九' , '1989-07-01 00:00:00.0000' , '女');\ninsert into Student values('08' , '邓十' , '1990-01-20 00:00:00.0000' , '女');\n```\n\n课程表Course\n\n```sql\ncreate table Course(cid varchar(10),cname varchar(10),tid varchar(10));\ninsert into Course values('01' , '语文' , '02');\ninsert into Course values('02' , '数学' , '01');\ninsert into Course values('03' , '英语' , '03');\n```\n\n教师表Teacher\n\n```sql\ncreate table Teacher(tid varchar(10),tname varchar(10));\ninsert into Teacher values('01' , '张三');\ninsert into Teacher values('02' , '李四');\ninsert into Teacher values('03' , '王五');\n```\n\n成绩表SC\n\n```sql\ncreate table SC(sid varchar(10),cid varchar(10),score decimal(18,1));\ninsert into SC values('01' , '01' , 80);\ninsert into SC values('01' , '02' , 90);\ninsert into SC values('02' , '01' , 70);\ninsert into SC values('02' , '02' , 60);\ninsert into SC values('02' , '03' , 80);\ninsert into SC values('03' , '01' , 80);\ninsert into SC values('03' , '02' , 80);\ninsert into SC values('03' , '03' , 80);\ninsert into SC values('04' , '01' , 50);\ninsert into SC values('04' , '02' , 30);\ninsert into SC values('04' , '03' , 20);\ninsert into SC values('05' , '01' , 76);\ninsert into SC values('05' , '02' , 87);\ninsert into SC values('06' , '01' , 31);\ninsert into SC values('06' , '03' , 34);\ninsert into SC values('07' , '02' , 89);\ninsert into SC values('07' , '03' , 98);\n```\n\n## 例子\n\n### 查询\" 01 \"课程比\" 02 \"课程成绩高的学生的信息及课程分数\n\n```sql\nSELECT S.*,A.score score_01,B.score score_02 FROM \n((SELECT * FROM SC WHERE cid = '01') A\nLEFT JOIN (SELECT * FROM SC WHERE cid = '02') B\nON A.sid = B.sid\nLEFT JOIN Student S\nON A.sid = S.sid)\nWHERE A.score > B.score\n```\n\n### 查询同时存在\" 01 \"课程和\" 02 \"课程的情况\n\n```sql\nSELECT * FROM (SELECT * FROM SC WHERE cid = '01') A\nLEFT JOIN (SELECT * FROM SC WHERE cid = '02') B\nON A.sid = B.sid\nWHERE B.cid IS NOT NULL\n```\n\n### 询存在\" 01 \"课程但可能不存在\" 02 \"课程的情况(不存在时显示为null)\n\n```sql\nSELECT * FROM (SELECT * FROM SC WHERE cid = '01') A\nLEFT JOIN (SELECT * FROM SC WHERE cid = '02') B\nON A.sid = B.sid\n```\n\n### 查询不存在\" 01 \"课程但存在\" 02 \"课程的情况\n\n```sql\nSELECT * FROM SC WHERE cid = '02' and sid NOT IN (SELECT sid FROM SC WHERE cid = '01')\n```\n\n### 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩\n\n```sql\nSELECT A.sid,B.sname,A.score FROM\n (SELECT sid,AVG(score) score FROM SC GROUP BY sid) A\n LEFT JOIN Student B\n ON A.sid = B.sid\n WHERE A.score > 60\n```\n\n### 查询在 SC 表在成绩的学生信息\n\n> **DISTINCT：去重**\n\n```sql\nSELECT * FROM student WHERE sid in (SELECT DISTINCT sid FROM SC)\n```\n\n### 查询所有同学学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为null)\n\n```sql\nSELECT B.sid,B.sname,A.count,A.total_score FROM \n(SELECT sid,COUNT(score) count,SUM(score) total_score FROM SC GROUP BY sid) A\nRIGHT JOIN student B\nON A.sid = B.sid\n```\n\n### 查询「李」姓老师的数量\n\n```sql\nSELECT count(*) count FROM teacher WHERE tname like \"李%\"\n```\n\n### 查询学过「张三」老师授课的同学的信息\n\n```sql\nSELECT D.* FROM teacher A\nLEFT JOIN course B\nON A.tid = B.tid\nLEFT JOIN SC C\nON B.cid = C.cid\nLEFT JOIN student D\non C.sid = D.sid\nWHERE A.tname = '张三'\n```\n\n> 或者\n\n```sql\nSELECT * FROM student\nWHERE sid in (SELECT DISTINCT sid FROM SC\nWHERE cid = (SELECT cid FROM course\nWHERE tid = (SELECT tid FROM teacher WHERE tname = \"张三\")))\n```\n\n### 查询没有学全所有课程的同学的信息\n\n```sql\nSELECT * FROM student WHERE sid in(\nSELECT sid FROM SC GROUP BY sid HAVING COUNT(cid) < (\nSELECT COUNT(*) FROM course))\n```\n\n### 待更新...\n\n","slug":"computer/mysql","published":1,"updated":"2020-12-17T07:16:05.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg660004b0ut3suf6gxo","content":"<h1 id=\"创建数据表\"><a class=\"anchor\" href=\"#创建数据表\">#</a> 创建数据表</h1>\n<h2 id=\"通用命令\"><a class=\"anchor\" href=\"#通用命令\">#</a> 通用命令</h2>\n<blockquote>\n<p><strong>CREATE TABLE table_name (column_name column_type);</strong></p>\n</blockquote>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<blockquote>\n<p>创建一个 user 表，字段为 id,name,date</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> <span class=\"token punctuation\">`</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">`</span><span class=\"token keyword\">date</span><span class=\"token punctuation\">`</span> <span class=\"token keyword\">date</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token keyword\">engine</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">charset</span> <span class=\"token operator\">=</span> utf8<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>字段可为空设置为 null，不能为空 not null</strong></p>\n<p><strong>AUTO_INCREMENT：设置为自增，一般用于主键</strong></p>\n<p><strong>PRIMARY KEY：用于定义列为主键</strong></p>\n<p><strong>ENGINE 设置存储引擎，CHARSET 设置编码</strong></p>\n</blockquote>\n<h1 id=\"单表操作\"><a class=\"anchor\" href=\"#单表操作\">#</a> 单表操作</h1>\n<h2 id=\"查询语句\"><a class=\"anchor\" href=\"#查询语句\">#</a> 查询语句</h2>\n<blockquote>\n<p><strong>select * from  table_name</strong></p>\n</blockquote>\n<h2 id=\"插入语句\"><a class=\"anchor\" href=\"#插入语句\">#</a> 插入语句</h2>\n<h3 id=\"插入所有字段的数据\"><a class=\"anchor\" href=\"#插入所有字段的数据\">#</a> 插入所有字段的数据</h3>\n<blockquote>\n<p><strong>insert into table_name values()</strong></p>\n</blockquote>\n<h3 id=\"插入某些字段的数据\"><a class=\"anchor\" href=\"#插入某些字段的数据\">#</a> 插入某些字段的数据</h3>\n<blockquote>\n<p><strong>insert into table_name(field1,field2) values(value1,value2)</strong></p>\n</blockquote>\n<h2 id=\"更新语句\"><a class=\"anchor\" href=\"#更新语句\">#</a> 更新语句</h2>\n<blockquote>\n<p><strong>update table_name set field = value [,field1=value1]...</strong></p>\n</blockquote>\n<h2 id=\"条件语句\"><a class=\"anchor\" href=\"#条件语句\">#</a> 条件语句</h2>\n<h3 id=\"限制字段\"><a class=\"anchor\" href=\"#限制字段\">#</a> 限制字段</h3>\n<blockquote>\n<p><strong>where field = value</strong></p>\n</blockquote>\n<h3 id=\"限制条数\"><a class=\"anchor\" href=\"#限制条数\">#</a> 限制条数</h3>\n<blockquote>\n<p><strong>limit m,n</strong></p>\n<p><strong>m\t从第几条数据开始</strong></p>\n<p><strong>n\t限制条数</strong></p>\n</blockquote>\n<h3 id=\"升序排序\"><a class=\"anchor\" href=\"#升序排序\">#</a> 升序排序</h3>\n<blockquote>\n<p><strong>order by field</strong></p>\n</blockquote>\n<h3 id=\"降序排序\"><a class=\"anchor\" href=\"#降序排序\">#</a> 降序排序</h3>\n<blockquote>\n<p><strong>order by field desc</strong></p>\n</blockquote>\n<h3 id=\"查询条数\"><a class=\"anchor\" href=\"#查询条数\">#</a> 查询条数</h3>\n<blockquote>\n<p><strong>select count(*)</strong></p>\n</blockquote>\n<h3 id=\"分组查询\"><a class=\"anchor\" href=\"#分组查询\">#</a> 分组查询</h3>\n<blockquote>\n<p><strong>group by field</strong></p>\n</blockquote>\n<h2 id=\"模糊查询\"><a class=\"anchor\" href=\"#模糊查询\">#</a> 模糊查询</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> table_name <span class=\"token keyword\">WHERE</span> field <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%value'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>%：匹配零个或多个</p>\n<p>% value，匹配以 value 结尾的所有值</p>\n<p>value%，匹配以 value 开头的所有值</p>\n</blockquote>\n<h2 id=\"union查询\"><a class=\"anchor\" href=\"#union查询\">#</a> UNION 查询</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> table_name1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token keyword\">from</span> table_name2</pre></td></tr></table></figure><h2 id=\"case查询\"><a class=\"anchor\" href=\"#case查询\">#</a> CASE 查询</h2>\n<h3 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> 用法</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CASE</span> case_value</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">WHEN</span> when_value <span class=\"token keyword\">THEN</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tstatement_list</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">ELSE</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tstatement_list</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">END</span> name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子</h3>\n<ol>\n<li>\n<p>建表 sex</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">sex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>执行语句</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CASE</span> sex</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">WHEN</span> <span class=\"token number\">0</span> <span class=\"token keyword\">THEN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token string\">'男'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">WHEN</span> <span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">ELSE</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">END</span> sex</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">FROM</span> sex</pre></td></tr></table></figure></li>\n<li>\n<p>结果</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">sex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">男</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">女</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">男</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h2 id=\"排序查询\"><a class=\"anchor\" href=\"#排序查询\">#</a> 排序查询</h2>\n<blockquote>\n<p>使用 order by 语句进行排序，其中升序用 asc，降序用 desc，默认是升序。</p>\n</blockquote>\n<h3 id=\"例子-3\"><a class=\"anchor\" href=\"#例子-3\">#</a> 例子</h3>\n<h3 id=\"建表\"><a class=\"anchor\" href=\"#建表\">#</a> 建表</h3>\n<blockquote>\n<p><strong>student(id,name)</strong></p>\n</blockquote>\n<h3 id=\"查询学生表中姓名-学号并以学号降序排序\"><a class=\"anchor\" href=\"#查询学生表中姓名-学号并以学号降序排序\">#</a> 查询学生表中姓名、学号，并以学号降序排序</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>name <span class=\"token keyword\">from</span> student <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> id <span class=\"token keyword\">desc</span></pre></td></tr></table></figure><h3 id=\"查询学生表中前5名学生的姓名学号并以学号升序排列\"><a class=\"anchor\" href=\"#查询学生表中前5名学生的姓名学号并以学号升序排列\">#</a> 查询学生表中前 5 名学生的姓名，学号，并以学号升序排列</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token keyword\">top</span> <span class=\"token number\">5</span> name<span class=\"token punctuation\">,</span>id <span class=\"token keyword\">from</span> student <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> id</pre></td></tr></table></figure><h1 id=\"多表操作\"><a class=\"anchor\" href=\"#多表操作\">#</a> 多表操作</h1>\n<h2 id=\"显示连接\"><a class=\"anchor\" href=\"#显示连接\">#</a> 显示连接</h2>\n<h3 id=\"内连接\"><a class=\"anchor\" href=\"#内连接\">#</a> 内连接</h3>\n<p><strong>只查询在连接的表中能够有对应的记录</strong></p>\n<blockquote>\n<p><strong>select * from table_name1 as A inner join table_name2 as B on <span class=\"exturl\" data-url=\"aHR0cDovL0EuaWQ=\">A.id</span> = <span class=\"exturl\" data-url=\"aHR0cDovL0IuaWQ=\">B.id</span></strong></p>\n<p><strong>as：将表设置为一个别名，也可不写</strong></p>\n</blockquote>\n<h3 id=\"外连接\"><a class=\"anchor\" href=\"#外连接\">#</a> 外连接</h3>\n<h4 id=\"左连接\"><a class=\"anchor\" href=\"#左连接\">#</a> 左连接</h4>\n<p><strong>table_name1，也就是基准表，用基准表的数据去匹配右表的数据，所以左表的记录是全部会查询出来的，如果右表没有记录对应的话就显示 null</strong></p>\n<blockquote>\n<p><strong>select * from table_name1 as A left join table_name2 as B on <span class=\"exturl\" data-url=\"aHR0cDovL0EuaWQ=\">A.id</span> = <span class=\"exturl\" data-url=\"aHR0cDovL0IuaWQ=\">B.id</span></strong></p>\n</blockquote>\n<h4 id=\"右连接\"><a class=\"anchor\" href=\"#右连接\">#</a> 右连接</h4>\n<p><strong>只是把 left 修改成了 right，但是基准表变化了，是以右表的数据去匹配左表，所以左外连接能做到的查询，右外连接也能做到</strong></p>\n<blockquote>\n<p><strong>select * from table_name1 as A right join table_name2 as B on <span class=\"exturl\" data-url=\"aHR0cDovL0EuaWQ=\">A.id</span> = <span class=\"exturl\" data-url=\"aHR0cDovL0IuaWQ=\">B.id</span></strong></p>\n</blockquote>\n<h3 id=\"例子-4\"><a class=\"anchor\" href=\"#例子-4\">#</a> 例子</h3>\n<h4 id=\"建表-2\"><a class=\"anchor\" href=\"#建表-2\">#</a> 建表</h4>\n<p><strong>user 表</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">uid</th>\n<th style=\"text-align:center\">uname</th>\n<th style=\"text-align:center\">iid</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">王五</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n</tbody>\n</table>\n<p><strong>info 表</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">iid</th>\n<th style=\"text-align:center\">info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">张三的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">李四的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">某某的信息</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"内连接-2\"><a class=\"anchor\" href=\"#内连接-2\">#</a> 内连接</h4>\n<p><strong>执行语句</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span>info <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">inner</span> <span class=\"token keyword\">JOIN</span> info B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>iid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>iid</pre></td></tr></table></figure><p><strong>结果</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">uid</th>\n<th style=\"text-align:center\">uname</th>\n<th style=\"text-align:center\">info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:center\">张三的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:center\">李四的信息</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"左外连接\"><a class=\"anchor\" href=\"#左外连接\">#</a> 左外连接</h4>\n<p><strong>执行语句</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span>info <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> info B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>iid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>iid</pre></td></tr></table></figure><p><strong>结果</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">uid</th>\n<th style=\"text-align:center\">uname</th>\n<th style=\"text-align:center\">info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:center\">张三的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:center\">李四的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">王五</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"右外连接\"><a class=\"anchor\" href=\"#右外连接\">#</a> 右外连接</h4>\n<p><strong>执行语句</strong></p>\n<pre><code class=\"language-mysql\">SELECT A.uid,A.uname,B.info FROM user A\nRIGHT JOIN info B\nON A.iid = B.iid\n</code></pre>\n<p><strong>结果</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">uid</th>\n<th style=\"text-align:center\">uname</th>\n<th style=\"text-align:center\">info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:center\">张三的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:center\">李四的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">某某的信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"隐式内连接\"><a class=\"anchor\" href=\"#隐式内连接\">#</a> 隐式内连接</h2>\n<blockquote>\n<p><strong>select * from table_name1,table_name2 where table_name1.id = table_name2.id</strong></p>\n</blockquote>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<h2 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h2>\n<h3 id=\"concat\"><a class=\"anchor\" href=\"#concat\">#</a> CONCAT</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>合并多个字符串</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>CONCAT</strong>(s1,s2...sn)</p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<blockquote>\n<p><strong>在 user 表中搜索名字为 zhangsan 的数据</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span>  CONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">\"zhang\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"san\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"concat_ws\"><a class=\"anchor\" href=\"#concat_ws\">#</a> CONCAT_WS</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>合并多个字符串，并添加分隔符</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>CONCAT_WS(x, s1,s2...sn)</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<blockquote>\n<p><strong>查询 user 表中用户生日为 2020-11-5</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> birth<span class=\"token operator\">=</span> CONCAT_WS<span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"数字函数\"><a class=\"anchor\" href=\"#数字函数\">#</a> 数字函数</h2>\n<h2 id=\"日期函数\"><a class=\"anchor\" href=\"#日期函数\">#</a> 日期函数</h2>\n<h3 id=\"adddate\"><a class=\"anchor\" href=\"#adddate\">#</a> ADDDATE</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>计算起始日期 d 加上 n 天的日期</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>ADDDATE(d,n)</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<blockquote>\n<p><strong>查询未过期的商品 (creatTime：生产时间，time：保质期)</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> goods <span class=\"token keyword\">WHERE</span> ADDDATE<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token keyword\">time</span> <span class=\"token keyword\">DAY</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"addtime\"><a class=\"anchor\" href=\"#addtime\">#</a> ADDTIME</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>n 是一个时间表达式，时间 t 加上时间表达式 n</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>ADDTIME(t,n)</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<p>加 5 秒</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> ADDTIME<span class=\"token punctuation\">(</span><span class=\"token string\">'2020-11-11 11:11:11'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>2020-11-11 11:11:16 (秒)</p>\n</blockquote>\n<p>添加 2 小时，10 分钟，5 秒</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> ADDTIME<span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-11-11 09:34:21\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2:10:5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>2020-11-11 11:44:26</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"now\"><a class=\"anchor\" href=\"#now\">#</a> NOW</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>返回当前日期和时间</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p>NOW()</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"高级函数\"><a class=\"anchor\" href=\"#高级函数\">#</a> 高级函数</h2>\n<h3 id=\"ifnull\"><a class=\"anchor\" href=\"#ifnull\">#</a> IFNULL</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>如果 v1 的值不为 NULL，则返回 v1，否则返回 v2</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>IFNULL(v1,v2)</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<p><strong>查询 user 表中年龄，如果为 null，则输出 0</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> IFNULL<span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"isnull\"><a class=\"anchor\" href=\"#isnull\">#</a> ISNULL</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>判断表达式是否为 NULL</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>ISNULL(expression)</strong></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"group_concat\"><a class=\"anchor\" href=\"#group_concat\">#</a> GROUP_CONCAT</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>返回带有来自一个组的连接的非 NULL 值的字符串结果</strong></p>\n<p><strong>就是会计算哪些行属于同一组，将属于同一组的列显示出来</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>GROUP_CONCAT()</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<blockquote>\n<p>student(sid,sname,tid),teacher(tid,tname)</p>\n<p>每一行 tid 对应所有的 sname (默认是用，分隔)</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> t<span class=\"token punctuation\">.</span>tname<span class=\"token punctuation\">,</span>GROUP_CONCAT<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> student s</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> teacher t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">on</span> s<span class=\"token punctuation\">.</span>tid <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>tid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> t<span class=\"token punctuation\">.</span>tid</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"例子-5\"><a class=\"anchor\" href=\"#例子-5\">#</a> 例子</h1>\n<h2 id=\"准备数据\"><a class=\"anchor\" href=\"#准备数据\">#</a> 准备数据</h2>\n<blockquote>\n<ol>\n<li>\n<p>学生表</p>\n<p>Student(sid,sname,sage,ssex)</p>\n<p>sid：学生编号，sname：学生姓名，sage：学生年龄，ssex：学生性别</p>\n</li>\n<li>\n<p>课程表</p>\n<p>Course(cid,cname,tid)</p>\n<p>cid：课程编号，cname：课程名称，tid：教师编号</p>\n</li>\n<li>\n<p>教师表</p>\n<p>Teacher(tid,tname)</p>\n<p>tid：教师编号，tname：教师姓名</p>\n</li>\n<li>\n<p>成绩表</p>\n<p>SC(sid,cid,score)</p>\n<p>sid：学生编号，cid：课程编号，score：分数</p>\n</li>\n</ol>\n</blockquote>\n<p>创建测试数据</p>\n<p>学生表 Student</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> Student<span class=\"token punctuation\">(</span>sid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>sname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>sage <span class=\"token keyword\">datetime</span><span class=\"token punctuation\">,</span>ssex <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-01-01 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-12-21 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-05-20 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'赵六'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-08-06 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'05'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'李七'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1991-12-01 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'吴八'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1992-03-01 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'07'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'孙九'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1989-07-01 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'08'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'邓十'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-01-20 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>课程表 Course</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> Course<span class=\"token punctuation\">(</span>cid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>tid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Course <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'语文'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Course <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'数学'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Course <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'英语'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>教师表 Teacher</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> Teacher<span class=\"token punctuation\">(</span>tid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>tname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Teacher <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Teacher <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Teacher <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>成绩表 SC</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> SC<span class=\"token punctuation\">(</span>sid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>score <span class=\"token keyword\">decimal</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'05'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">76</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'05'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'07'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'07'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"例子-6\"><a class=\"anchor\" href=\"#例子-6\">#</a> 例子</h2>\n<h3 id=\"查询-01-课程比-02-课程成绩高的学生的信息及课程分数\"><a class=\"anchor\" href=\"#查询-01-课程比-02-课程成绩高的学生的信息及课程分数\">#</a> 查询 &quot;01&quot; 课程比 &quot;02&quot; 课程成绩高的学生的信息及课程分数</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> S<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>score score_01<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span>score score_02 <span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> A</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>sid</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> Student S</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> S<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">WHERE</span> A<span class=\"token punctuation\">.</span>score <span class=\"token operator\">></span> B<span class=\"token punctuation\">.</span>score</pre></td></tr></table></figure><h3 id=\"查询同时存在-01-课程和-02-课程的情况\"><a class=\"anchor\" href=\"#查询同时存在-01-课程和-02-课程的情况\">#</a> 查询同时存在 &quot;01&quot; 课程和 &quot;02&quot; 课程的情况</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>sid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> B<span class=\"token punctuation\">.</span>cid <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr></table></figure><h3 id=\"询存在-01-课程但可能不存在-02-课程的情况不存在时显示为null\"><a class=\"anchor\" href=\"#询存在-01-课程但可能不存在-02-课程的情况不存在时显示为null\">#</a> 询存在 &quot;01&quot; 课程但可能不存在 &quot;02&quot; 课程的情况 (不存在时显示为 null)</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>sid</pre></td></tr></table></figure><h3 id=\"查询不存在-01-课程但存在-02-课程的情况\"><a class=\"anchor\" href=\"#查询不存在-01-课程但存在-02-课程的情况\">#</a> 查询不存在 &quot;01&quot; 课程但存在 &quot;02&quot; 课程的情况</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span> <span class=\"token operator\">and</span> sid <span class=\"token operator\">NOT</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> sid <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"查询平均成绩大于等于-60-分的同学的学生编号和学生姓名和平均成绩\"><a class=\"anchor\" href=\"#查询平均成绩大于等于-60-分的同学的学生编号和学生姓名和平均成绩\">#</a> 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span>sname<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> sid<span class=\"token punctuation\">,</span><span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> score <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sid<span class=\"token punctuation\">)</span> A</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> Student B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>sid</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">WHERE</span> A<span class=\"token punctuation\">.</span>score <span class=\"token operator\">></span> <span class=\"token number\">60</span></pre></td></tr></table></figure><h3 id=\"查询在-sc-表在成绩的学生信息\"><a class=\"anchor\" href=\"#查询在-sc-表在成绩的学生信息\">#</a> 查询在 SC 表在成绩的学生信息</h3>\n<blockquote>\n<p><strong>DISTINCT：去重</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> sid <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> sid <span class=\"token keyword\">FROM</span> SC<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"查询所有同学学生编号-学生姓名-选课总数-所有课程的总成绩没成绩的显示为null\"><a class=\"anchor\" href=\"#查询所有同学学生编号-学生姓名-选课总数-所有课程的总成绩没成绩的显示为null\">#</a> 查询所有同学学生编号、学生姓名、选课总数、所有课程的总成绩 (没成绩的显示为 null)</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> B<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span>sname<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>total_score <span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> sid<span class=\"token punctuation\">,</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> count<span class=\"token punctuation\">,</span><span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> total_score <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sid<span class=\"token punctuation\">)</span> A</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> student B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>sid</pre></td></tr></table></figure><h3 id=\"查询李姓老师的数量\"><a class=\"anchor\" href=\"#查询李姓老师的数量\">#</a> 查询「李」姓老师的数量</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> count <span class=\"token keyword\">FROM</span> teacher <span class=\"token keyword\">WHERE</span> tname <span class=\"token operator\">like</span> <span class=\"token string\">\"李%\"</span></pre></td></tr></table></figure><h3 id=\"查询学过张三老师授课的同学的信息\"><a class=\"anchor\" href=\"#查询学过张三老师授课的同学的信息\">#</a> 查询学过「张三」老师授课的同学的信息</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> D<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> teacher A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> course B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>tid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>tid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> SC C</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">ON</span> B<span class=\"token punctuation\">.</span>cid <span class=\"token operator\">=</span> C<span class=\"token punctuation\">.</span>cid</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> student D</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">on</span> C<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> D<span class=\"token punctuation\">.</span>sid</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">WHERE</span> A<span class=\"token punctuation\">.</span>tname <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span></pre></td></tr></table></figure><blockquote>\n<p>或者</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">WHERE</span> sid <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> sid <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> cid <span class=\"token keyword\">FROM</span> course</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> tid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> tid <span class=\"token keyword\">FROM</span> teacher <span class=\"token keyword\">WHERE</span> tname <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"查询没有学全所有课程的同学的信息\"><a class=\"anchor\" href=\"#查询没有学全所有课程的同学的信息\">#</a> 查询没有学全所有课程的同学的信息</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> sid <span class=\"token operator\">in</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> sid <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sid <span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>cid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> course<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"待更新\"><a class=\"anchor\" href=\"#待更新\">#</a> 待更新...</h3>\n","site":{"data":{}},"length":6298,"excerpt":"","more":"<h1 id=\"创建数据表\"><a class=\"anchor\" href=\"#创建数据表\">#</a> 创建数据表</h1>\n<h2 id=\"通用命令\"><a class=\"anchor\" href=\"#通用命令\">#</a> 通用命令</h2>\n<blockquote>\n<p><strong>CREATE TABLE table_name (column_name column_type);</strong></p>\n</blockquote>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<blockquote>\n<p>创建一个 user 表，字段为 id,name,date</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> <span class=\"token punctuation\">`</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">`</span><span class=\"token keyword\">date</span><span class=\"token punctuation\">`</span> <span class=\"token keyword\">date</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token keyword\">engine</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">charset</span> <span class=\"token operator\">=</span> utf8<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>字段可为空设置为 null，不能为空 not null</strong></p>\n<p><strong>AUTO_INCREMENT：设置为自增，一般用于主键</strong></p>\n<p><strong>PRIMARY KEY：用于定义列为主键</strong></p>\n<p><strong>ENGINE 设置存储引擎，CHARSET 设置编码</strong></p>\n</blockquote>\n<h1 id=\"单表操作\"><a class=\"anchor\" href=\"#单表操作\">#</a> 单表操作</h1>\n<h2 id=\"查询语句\"><a class=\"anchor\" href=\"#查询语句\">#</a> 查询语句</h2>\n<blockquote>\n<p><strong>select * from  table_name</strong></p>\n</blockquote>\n<h2 id=\"插入语句\"><a class=\"anchor\" href=\"#插入语句\">#</a> 插入语句</h2>\n<h3 id=\"插入所有字段的数据\"><a class=\"anchor\" href=\"#插入所有字段的数据\">#</a> 插入所有字段的数据</h3>\n<blockquote>\n<p><strong>insert into table_name values()</strong></p>\n</blockquote>\n<h3 id=\"插入某些字段的数据\"><a class=\"anchor\" href=\"#插入某些字段的数据\">#</a> 插入某些字段的数据</h3>\n<blockquote>\n<p><strong>insert into table_name(field1,field2) values(value1,value2)</strong></p>\n</blockquote>\n<h2 id=\"更新语句\"><a class=\"anchor\" href=\"#更新语句\">#</a> 更新语句</h2>\n<blockquote>\n<p><strong>update table_name set field = value [,field1=value1]...</strong></p>\n</blockquote>\n<h2 id=\"条件语句\"><a class=\"anchor\" href=\"#条件语句\">#</a> 条件语句</h2>\n<h3 id=\"限制字段\"><a class=\"anchor\" href=\"#限制字段\">#</a> 限制字段</h3>\n<blockquote>\n<p><strong>where field = value</strong></p>\n</blockquote>\n<h3 id=\"限制条数\"><a class=\"anchor\" href=\"#限制条数\">#</a> 限制条数</h3>\n<blockquote>\n<p><strong>limit m,n</strong></p>\n<p><strong>m\t从第几条数据开始</strong></p>\n<p><strong>n\t限制条数</strong></p>\n</blockquote>\n<h3 id=\"升序排序\"><a class=\"anchor\" href=\"#升序排序\">#</a> 升序排序</h3>\n<blockquote>\n<p><strong>order by field</strong></p>\n</blockquote>\n<h3 id=\"降序排序\"><a class=\"anchor\" href=\"#降序排序\">#</a> 降序排序</h3>\n<blockquote>\n<p><strong>order by field desc</strong></p>\n</blockquote>\n<h3 id=\"查询条数\"><a class=\"anchor\" href=\"#查询条数\">#</a> 查询条数</h3>\n<blockquote>\n<p><strong>select count(*)</strong></p>\n</blockquote>\n<h3 id=\"分组查询\"><a class=\"anchor\" href=\"#分组查询\">#</a> 分组查询</h3>\n<blockquote>\n<p><strong>group by field</strong></p>\n</blockquote>\n<h2 id=\"模糊查询\"><a class=\"anchor\" href=\"#模糊查询\">#</a> 模糊查询</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> table_name <span class=\"token keyword\">WHERE</span> field <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%value'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>%：匹配零个或多个</p>\n<p>% value，匹配以 value 结尾的所有值</p>\n<p>value%，匹配以 value 开头的所有值</p>\n</blockquote>\n<h2 id=\"union查询\"><a class=\"anchor\" href=\"#union查询\">#</a> UNION 查询</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> table_name1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token keyword\">from</span> table_name2</pre></td></tr></table></figure><h2 id=\"case查询\"><a class=\"anchor\" href=\"#case查询\">#</a> CASE 查询</h2>\n<h3 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> 用法</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CASE</span> case_value</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">WHEN</span> when_value <span class=\"token keyword\">THEN</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tstatement_list</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">ELSE</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tstatement_list</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">END</span> name<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子</h3>\n<ol>\n<li>\n<p>建表 sex</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">sex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>执行语句</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CASE</span> sex</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">WHEN</span> <span class=\"token number\">0</span> <span class=\"token keyword\">THEN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token string\">'男'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">WHEN</span> <span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">ELSE</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">END</span> sex</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">FROM</span> sex</pre></td></tr></table></figure></li>\n<li>\n<p>结果</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">sex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">男</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">女</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">男</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h2 id=\"排序查询\"><a class=\"anchor\" href=\"#排序查询\">#</a> 排序查询</h2>\n<blockquote>\n<p>使用 order by 语句进行排序，其中升序用 asc，降序用 desc，默认是升序。</p>\n</blockquote>\n<h3 id=\"例子-3\"><a class=\"anchor\" href=\"#例子-3\">#</a> 例子</h3>\n<h3 id=\"建表\"><a class=\"anchor\" href=\"#建表\">#</a> 建表</h3>\n<blockquote>\n<p><strong>student(id,name)</strong></p>\n</blockquote>\n<h3 id=\"查询学生表中姓名-学号并以学号降序排序\"><a class=\"anchor\" href=\"#查询学生表中姓名-学号并以学号降序排序\">#</a> 查询学生表中姓名、学号，并以学号降序排序</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>name <span class=\"token keyword\">from</span> student <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> id <span class=\"token keyword\">desc</span></pre></td></tr></table></figure><h3 id=\"查询学生表中前5名学生的姓名学号并以学号升序排列\"><a class=\"anchor\" href=\"#查询学生表中前5名学生的姓名学号并以学号升序排列\">#</a> 查询学生表中前 5 名学生的姓名，学号，并以学号升序排列</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token keyword\">top</span> <span class=\"token number\">5</span> name<span class=\"token punctuation\">,</span>id <span class=\"token keyword\">from</span> student <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> id</pre></td></tr></table></figure><h1 id=\"多表操作\"><a class=\"anchor\" href=\"#多表操作\">#</a> 多表操作</h1>\n<h2 id=\"显示连接\"><a class=\"anchor\" href=\"#显示连接\">#</a> 显示连接</h2>\n<h3 id=\"内连接\"><a class=\"anchor\" href=\"#内连接\">#</a> 内连接</h3>\n<p><strong>只查询在连接的表中能够有对应的记录</strong></p>\n<blockquote>\n<p><strong>select * from table_name1 as A inner join table_name2 as B on <span class=\"exturl\" data-url=\"aHR0cDovL0EuaWQ=\">A.id</span> = <span class=\"exturl\" data-url=\"aHR0cDovL0IuaWQ=\">B.id</span></strong></p>\n<p><strong>as：将表设置为一个别名，也可不写</strong></p>\n</blockquote>\n<h3 id=\"外连接\"><a class=\"anchor\" href=\"#外连接\">#</a> 外连接</h3>\n<h4 id=\"左连接\"><a class=\"anchor\" href=\"#左连接\">#</a> 左连接</h4>\n<p><strong>table_name1，也就是基准表，用基准表的数据去匹配右表的数据，所以左表的记录是全部会查询出来的，如果右表没有记录对应的话就显示 null</strong></p>\n<blockquote>\n<p><strong>select * from table_name1 as A left join table_name2 as B on <span class=\"exturl\" data-url=\"aHR0cDovL0EuaWQ=\">A.id</span> = <span class=\"exturl\" data-url=\"aHR0cDovL0IuaWQ=\">B.id</span></strong></p>\n</blockquote>\n<h4 id=\"右连接\"><a class=\"anchor\" href=\"#右连接\">#</a> 右连接</h4>\n<p><strong>只是把 left 修改成了 right，但是基准表变化了，是以右表的数据去匹配左表，所以左外连接能做到的查询，右外连接也能做到</strong></p>\n<blockquote>\n<p><strong>select * from table_name1 as A right join table_name2 as B on <span class=\"exturl\" data-url=\"aHR0cDovL0EuaWQ=\">A.id</span> = <span class=\"exturl\" data-url=\"aHR0cDovL0IuaWQ=\">B.id</span></strong></p>\n</blockquote>\n<h3 id=\"例子-4\"><a class=\"anchor\" href=\"#例子-4\">#</a> 例子</h3>\n<h4 id=\"建表-2\"><a class=\"anchor\" href=\"#建表-2\">#</a> 建表</h4>\n<p><strong>user 表</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">uid</th>\n<th style=\"text-align:center\">uname</th>\n<th style=\"text-align:center\">iid</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">王五</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n</tbody>\n</table>\n<p><strong>info 表</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">iid</th>\n<th style=\"text-align:center\">info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">张三的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">李四的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">某某的信息</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"内连接-2\"><a class=\"anchor\" href=\"#内连接-2\">#</a> 内连接</h4>\n<p><strong>执行语句</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span>info <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">inner</span> <span class=\"token keyword\">JOIN</span> info B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>iid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>iid</pre></td></tr></table></figure><p><strong>结果</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">uid</th>\n<th style=\"text-align:center\">uname</th>\n<th style=\"text-align:center\">info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:center\">张三的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:center\">李四的信息</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"左外连接\"><a class=\"anchor\" href=\"#左外连接\">#</a> 左外连接</h4>\n<p><strong>执行语句</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span>info <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> info B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>iid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>iid</pre></td></tr></table></figure><p><strong>结果</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">uid</th>\n<th style=\"text-align:center\">uname</th>\n<th style=\"text-align:center\">info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:center\">张三的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:center\">李四的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">王五</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"右外连接\"><a class=\"anchor\" href=\"#右外连接\">#</a> 右外连接</h4>\n<p><strong>执行语句</strong></p>\n<pre><code class=\"language-mysql\">SELECT A.uid,A.uname,B.info FROM user A\nRIGHT JOIN info B\nON A.iid = B.iid\n</code></pre>\n<p><strong>结果</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">uid</th>\n<th style=\"text-align:center\">uname</th>\n<th style=\"text-align:center\">info</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">张三</td>\n<td style=\"text-align:center\">张三的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">李四</td>\n<td style=\"text-align:center\">李四的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">某某的信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"隐式内连接\"><a class=\"anchor\" href=\"#隐式内连接\">#</a> 隐式内连接</h2>\n<blockquote>\n<p><strong>select * from table_name1,table_name2 where table_name1.id = table_name2.id</strong></p>\n</blockquote>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<h2 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h2>\n<h3 id=\"concat\"><a class=\"anchor\" href=\"#concat\">#</a> CONCAT</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>合并多个字符串</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>CONCAT</strong>(s1,s2...sn)</p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<blockquote>\n<p><strong>在 user 表中搜索名字为 zhangsan 的数据</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span>  CONCAT<span class=\"token punctuation\">(</span><span class=\"token string\">\"zhang\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"san\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"concat_ws\"><a class=\"anchor\" href=\"#concat_ws\">#</a> CONCAT_WS</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>合并多个字符串，并添加分隔符</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>CONCAT_WS(x, s1,s2...sn)</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<blockquote>\n<p><strong>查询 user 表中用户生日为 2020-11-5</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">WHERE</span> birth<span class=\"token operator\">=</span> CONCAT_WS<span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"数字函数\"><a class=\"anchor\" href=\"#数字函数\">#</a> 数字函数</h2>\n<h2 id=\"日期函数\"><a class=\"anchor\" href=\"#日期函数\">#</a> 日期函数</h2>\n<h3 id=\"adddate\"><a class=\"anchor\" href=\"#adddate\">#</a> ADDDATE</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>计算起始日期 d 加上 n 天的日期</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>ADDDATE(d,n)</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<blockquote>\n<p><strong>查询未过期的商品 (creatTime：生产时间，time：保质期)</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> goods <span class=\"token keyword\">WHERE</span> ADDDATE<span class=\"token punctuation\">(</span>createTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">INTERVAL</span> <span class=\"token keyword\">time</span> <span class=\"token keyword\">DAY</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"addtime\"><a class=\"anchor\" href=\"#addtime\">#</a> ADDTIME</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>n 是一个时间表达式，时间 t 加上时间表达式 n</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>ADDTIME(t,n)</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<p>加 5 秒</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> ADDTIME<span class=\"token punctuation\">(</span><span class=\"token string\">'2020-11-11 11:11:11'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>2020-11-11 11:11:16 (秒)</p>\n</blockquote>\n<p>添加 2 小时，10 分钟，5 秒</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> ADDTIME<span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-11-11 09:34:21\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2:10:5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>2020-11-11 11:44:26</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"now\"><a class=\"anchor\" href=\"#now\">#</a> NOW</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>返回当前日期和时间</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p>NOW()</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"高级函数\"><a class=\"anchor\" href=\"#高级函数\">#</a> 高级函数</h2>\n<h3 id=\"ifnull\"><a class=\"anchor\" href=\"#ifnull\">#</a> IFNULL</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>如果 v1 的值不为 NULL，则返回 v1，否则返回 v2</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>IFNULL(v1,v2)</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<p><strong>查询 user 表中年龄，如果为 null，则输出 0</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> IFNULL<span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">user</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"isnull\"><a class=\"anchor\" href=\"#isnull\">#</a> ISNULL</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>判断表达式是否为 NULL</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>ISNULL(expression)</strong></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"group_concat\"><a class=\"anchor\" href=\"#group_concat\">#</a> GROUP_CONCAT</h3>\n<ol>\n<li>\n<p><strong>概念</strong></p>\n<blockquote>\n<p><strong>返回带有来自一个组的连接的非 NULL 值的字符串结果</strong></p>\n<p><strong>就是会计算哪些行属于同一组，将属于同一组的列显示出来</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>用法</strong></p>\n<blockquote>\n<p><strong>GROUP_CONCAT()</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>例子</strong></p>\n<blockquote>\n<p>student(sid,sname,tid),teacher(tid,tname)</p>\n<p>每一行 tid 对应所有的 sname (默认是用，分隔)</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> t<span class=\"token punctuation\">.</span>tname<span class=\"token punctuation\">,</span>GROUP_CONCAT<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> student s</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> teacher t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">on</span> s<span class=\"token punctuation\">.</span>tid <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>tid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> t<span class=\"token punctuation\">.</span>tid</pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"例子-5\"><a class=\"anchor\" href=\"#例子-5\">#</a> 例子</h1>\n<h2 id=\"准备数据\"><a class=\"anchor\" href=\"#准备数据\">#</a> 准备数据</h2>\n<blockquote>\n<ol>\n<li>\n<p>学生表</p>\n<p>Student(sid,sname,sage,ssex)</p>\n<p>sid：学生编号，sname：学生姓名，sage：学生年龄，ssex：学生性别</p>\n</li>\n<li>\n<p>课程表</p>\n<p>Course(cid,cname,tid)</p>\n<p>cid：课程编号，cname：课程名称，tid：教师编号</p>\n</li>\n<li>\n<p>教师表</p>\n<p>Teacher(tid,tname)</p>\n<p>tid：教师编号，tname：教师姓名</p>\n</li>\n<li>\n<p>成绩表</p>\n<p>SC(sid,cid,score)</p>\n<p>sid：学生编号，cid：课程编号，score：分数</p>\n</li>\n</ol>\n</blockquote>\n<p>创建测试数据</p>\n<p>学生表 Student</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> Student<span class=\"token punctuation\">(</span>sid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>sname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>sage <span class=\"token keyword\">datetime</span><span class=\"token punctuation\">,</span>ssex <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-01-01 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-12-21 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-05-20 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'赵六'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-08-06 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'05'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'李七'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1991-12-01 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'吴八'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1992-03-01 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'07'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'孙九'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1989-07-01 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'08'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'邓十'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'1990-01-20 00:00:00.0000'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>课程表 Course</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> Course<span class=\"token punctuation\">(</span>cid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>tid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Course <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'语文'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Course <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'数学'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Course <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'英语'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>教师表 Teacher</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> Teacher<span class=\"token punctuation\">(</span>tid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>tname <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Teacher <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Teacher <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> Teacher <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'王五'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>成绩表 SC</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> SC<span class=\"token punctuation\">(</span>sid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cid <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>score <span class=\"token keyword\">decimal</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'04'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'05'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">76</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'05'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'06'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'07'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'02'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> SC <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'07'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'03'</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"例子-6\"><a class=\"anchor\" href=\"#例子-6\">#</a> 例子</h2>\n<h3 id=\"查询-01-课程比-02-课程成绩高的学生的信息及课程分数\"><a class=\"anchor\" href=\"#查询-01-课程比-02-课程成绩高的学生的信息及课程分数\">#</a> 查询 &quot;01&quot; 课程比 &quot;02&quot; 课程成绩高的学生的信息及课程分数</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> S<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>score score_01<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span>score score_02 <span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> A</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>sid</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> Student S</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> S<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">WHERE</span> A<span class=\"token punctuation\">.</span>score <span class=\"token operator\">></span> B<span class=\"token punctuation\">.</span>score</pre></td></tr></table></figure><h3 id=\"查询同时存在-01-课程和-02-课程的情况\"><a class=\"anchor\" href=\"#查询同时存在-01-课程和-02-课程的情况\">#</a> 查询同时存在 &quot;01&quot; 课程和 &quot;02&quot; 课程的情况</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>sid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> B<span class=\"token punctuation\">.</span>cid <span class=\"token operator\">IS</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr></table></figure><h3 id=\"询存在-01-课程但可能不存在-02-课程的情况不存在时显示为null\"><a class=\"anchor\" href=\"#询存在-01-课程但可能不存在-02-课程的情况不存在时显示为null\">#</a> 询存在 &quot;01&quot; 课程但可能不存在 &quot;02&quot; 课程的情况 (不存在时显示为 null)</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span> A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span><span class=\"token punctuation\">)</span> B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>sid</pre></td></tr></table></figure><h3 id=\"查询不存在-01-课程但存在-02-课程的情况\"><a class=\"anchor\" href=\"#查询不存在-01-课程但存在-02-课程的情况\">#</a> 查询不存在 &quot;01&quot; 课程但存在 &quot;02&quot; 课程的情况</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'02'</span> <span class=\"token operator\">and</span> sid <span class=\"token operator\">NOT</span> <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> sid <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"查询平均成绩大于等于-60-分的同学的学生编号和学生姓名和平均成绩\"><a class=\"anchor\" href=\"#查询平均成绩大于等于-60-分的同学的学生编号和学生姓名和平均成绩\">#</a> 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> A<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span>sname<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>score <span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> sid<span class=\"token punctuation\">,</span><span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> score <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sid<span class=\"token punctuation\">)</span> A</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> Student B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>sid</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">WHERE</span> A<span class=\"token punctuation\">.</span>score <span class=\"token operator\">></span> <span class=\"token number\">60</span></pre></td></tr></table></figure><h3 id=\"查询在-sc-表在成绩的学生信息\"><a class=\"anchor\" href=\"#查询在-sc-表在成绩的学生信息\">#</a> 查询在 SC 表在成绩的学生信息</h3>\n<blockquote>\n<p><strong>DISTINCT：去重</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> sid <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> sid <span class=\"token keyword\">FROM</span> SC<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"查询所有同学学生编号-学生姓名-选课总数-所有课程的总成绩没成绩的显示为null\"><a class=\"anchor\" href=\"#查询所有同学学生编号-学生姓名-选课总数-所有课程的总成绩没成绩的显示为null\">#</a> 查询所有同学学生编号、学生姓名、选课总数、所有课程的总成绩 (没成绩的显示为 null)</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> B<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span>sname<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span>total_score <span class=\"token keyword\">FROM</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> sid<span class=\"token punctuation\">,</span><span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> count<span class=\"token punctuation\">,</span><span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> total_score <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sid<span class=\"token punctuation\">)</span> A</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">RIGHT</span> <span class=\"token keyword\">JOIN</span> student B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>sid</pre></td></tr></table></figure><h3 id=\"查询李姓老师的数量\"><a class=\"anchor\" href=\"#查询李姓老师的数量\">#</a> 查询「李」姓老师的数量</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> count <span class=\"token keyword\">FROM</span> teacher <span class=\"token keyword\">WHERE</span> tname <span class=\"token operator\">like</span> <span class=\"token string\">\"李%\"</span></pre></td></tr></table></figure><h3 id=\"查询学过张三老师授课的同学的信息\"><a class=\"anchor\" href=\"#查询学过张三老师授课的同学的信息\">#</a> 查询学过「张三」老师授课的同学的信息</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> D<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> teacher A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> course B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ON</span> A<span class=\"token punctuation\">.</span>tid <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>tid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> SC C</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">ON</span> B<span class=\"token punctuation\">.</span>cid <span class=\"token operator\">=</span> C<span class=\"token punctuation\">.</span>cid</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> student D</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">on</span> C<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> D<span class=\"token punctuation\">.</span>sid</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">WHERE</span> A<span class=\"token punctuation\">.</span>tname <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span></pre></td></tr></table></figure><blockquote>\n<p>或者</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">WHERE</span> sid <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> sid <span class=\"token keyword\">FROM</span> SC</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHERE</span> cid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> cid <span class=\"token keyword\">FROM</span> course</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHERE</span> tid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> tid <span class=\"token keyword\">FROM</span> teacher <span class=\"token keyword\">WHERE</span> tname <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"查询没有学全所有课程的同学的信息\"><a class=\"anchor\" href=\"#查询没有学全所有课程的同学的信息\">#</a> 查询没有学全所有课程的同学的信息</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> sid <span class=\"token operator\">in</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> sid <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> sid <span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>cid<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> course<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"待更新\"><a class=\"anchor\" href=\"#待更新\">#</a> 待更新...</h3>\n"},{"title":"Git","date":"2020-12-17T04:36:00.000Z","_content":"\n\n\n# 创建仓库\n\n## 初始化仓库\n\n使用当前目录作为仓库，进行初始化\n\n> **git init**\n\n执行完之后，当前目录会生成一个.git目录\n\n## 拷贝\n\n从git仓库拷贝项目\n\n> **git clone <repo>**\n\n克隆到指定的目录\n\n> **git clone <repo> <directory>**\n\n**repo：Git仓库**\n\n**directory：本地目录**\n\n## 配置\n\n### 语法\n\n> **git config**\n\n### 显示当前的 git 配置信息\n\n>**git config --list**\n>\n>**credential.helper=osxkeychain**\n>**core.repositoryformatversion=0**\n>**core.filemode=true**\n>**core.bare=false**\n>**core.logallrefupdates=true**\n>**core.ignorecase=true**\n>**core.precomposeunicode=true**\n\n### 编辑 git 配置文件\n\n> **git config -e    # 针对当前仓库** \n>\n> **git config -e --global   # 针对系统上所有仓库**\n\n### 设置提交代码时的用户信息\n\n>**git config --global user.name \"用户名\"**\n>**git config --global user.email  邮箱**\n\n**如果去掉 --global 参数只对当前仓库有效**\n\n# 基本指令\n\n## 添加文件\n\n### 添加一个或多个文件到暂存区\n\n> **git add [file1] [file2] ...**\n\n### 添加指定目录到暂存区，包括子目录\n\n> **git add [dir]**\n\n### 添加当前目录下的所有文件到暂存区\n\n> **git add ***\n\n## 查看添加文件状态\n\n**查看在你上次提交之后是否有对文件进行再次修改。**\n\n> **git status**\n\n**通常使用 -s 参数来获得简短的输出结果**\n\n> **git status -s**\n\n## 提交文件\n\n### 提交暂存区到本地仓库中\n\n> **git commit -m \"提交信息\"**\n\n### 提交暂存区的指定文件到仓库区\n\n> **git commit [file1] [file2] ... -m \"提交信息\"**\n\n## 删除文件\n\n### 将文件从暂存区和工作区中删除\n\n> **git rm <file>**\n\n### 强制删除\n\n**如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f，强行从暂存区和工作区中删除修改后的文件**\n\n> **git rm -f <file>**\n\n**如果想把文件从暂存区域移除，但仍然希望保留在当前工作目录，换句话说，仅是从跟踪清单中删除**\n\n> **git rm --cached <file>**\n\n### 递归删除\n\n**如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件**\n\n>**git rm -r ***\n\n## 移动文件\n\n用于移动或重命名一个文件、目录或软连接。\n\n> **git mv [file] [newfile]**\n\n如果新但文件名已经存在，但还是要重命名它\n\n> **git mv -f [file] [newfile]**\n\n## 远程操作\n\n### 下载远程代码并合并\n\n> **git pull**\n\n### 上传远程代码并合并\n\n> **git push**\n\n## 解决冲突\n\n> **shift+!\t输入:wq保存**\n\n# 配置密钥\n\n## 创建新的ssh key\n\n> 输入 ssh-keygen -t rsa -C \"youremail@youremail.com\" \n>\n> 执行这条命令会如上图提示文件保存路径，可以直接按Enter，\n>\n> 然后提示输入 passphrase（密码），输入两次（可以不输直接两次Enter），\n>\n> 然后会在 .ssh 目录生产两个文件：id_rsa和id_rsa.pub\n>\n> 用记事本打开.ssh目录下的id_rsa.pub文件，复制里面的内容，或者直接执行命令查看\n\n## 查看密钥\n\n> $ cat ~/.ssh/id_rsa.pub\n\n或者之间点开文件查看\n\n## 复制ssh key到github\n\n> On the GitHub site Click “Settings” \n>\n> Click “SSH and GPG Keys” \n>\n> Click “New SSH key”\n\n## 测试 ssh 链接 github\n\n> 输入 ssh -T git@github.com\n>\n> 出现Successfully就表示可以了\n","source":"_posts/computer/course-2/git.md","raw":"---\ntitle: Git\ndate: 2020/12/17 12:36\ncategories:\n\t- [计算机, 工具]\ntags:\n\t- git\n---\n\n\n\n# 创建仓库\n\n## 初始化仓库\n\n使用当前目录作为仓库，进行初始化\n\n> **git init**\n\n执行完之后，当前目录会生成一个.git目录\n\n## 拷贝\n\n从git仓库拷贝项目\n\n> **git clone <repo>**\n\n克隆到指定的目录\n\n> **git clone <repo> <directory>**\n\n**repo：Git仓库**\n\n**directory：本地目录**\n\n## 配置\n\n### 语法\n\n> **git config**\n\n### 显示当前的 git 配置信息\n\n>**git config --list**\n>\n>**credential.helper=osxkeychain**\n>**core.repositoryformatversion=0**\n>**core.filemode=true**\n>**core.bare=false**\n>**core.logallrefupdates=true**\n>**core.ignorecase=true**\n>**core.precomposeunicode=true**\n\n### 编辑 git 配置文件\n\n> **git config -e    # 针对当前仓库** \n>\n> **git config -e --global   # 针对系统上所有仓库**\n\n### 设置提交代码时的用户信息\n\n>**git config --global user.name \"用户名\"**\n>**git config --global user.email  邮箱**\n\n**如果去掉 --global 参数只对当前仓库有效**\n\n# 基本指令\n\n## 添加文件\n\n### 添加一个或多个文件到暂存区\n\n> **git add [file1] [file2] ...**\n\n### 添加指定目录到暂存区，包括子目录\n\n> **git add [dir]**\n\n### 添加当前目录下的所有文件到暂存区\n\n> **git add ***\n\n## 查看添加文件状态\n\n**查看在你上次提交之后是否有对文件进行再次修改。**\n\n> **git status**\n\n**通常使用 -s 参数来获得简短的输出结果**\n\n> **git status -s**\n\n## 提交文件\n\n### 提交暂存区到本地仓库中\n\n> **git commit -m \"提交信息\"**\n\n### 提交暂存区的指定文件到仓库区\n\n> **git commit [file1] [file2] ... -m \"提交信息\"**\n\n## 删除文件\n\n### 将文件从暂存区和工作区中删除\n\n> **git rm <file>**\n\n### 强制删除\n\n**如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f，强行从暂存区和工作区中删除修改后的文件**\n\n> **git rm -f <file>**\n\n**如果想把文件从暂存区域移除，但仍然希望保留在当前工作目录，换句话说，仅是从跟踪清单中删除**\n\n> **git rm --cached <file>**\n\n### 递归删除\n\n**如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件**\n\n>**git rm -r ***\n\n## 移动文件\n\n用于移动或重命名一个文件、目录或软连接。\n\n> **git mv [file] [newfile]**\n\n如果新但文件名已经存在，但还是要重命名它\n\n> **git mv -f [file] [newfile]**\n\n## 远程操作\n\n### 下载远程代码并合并\n\n> **git pull**\n\n### 上传远程代码并合并\n\n> **git push**\n\n## 解决冲突\n\n> **shift+!\t输入:wq保存**\n\n# 配置密钥\n\n## 创建新的ssh key\n\n> 输入 ssh-keygen -t rsa -C \"youremail@youremail.com\" \n>\n> 执行这条命令会如上图提示文件保存路径，可以直接按Enter，\n>\n> 然后提示输入 passphrase（密码），输入两次（可以不输直接两次Enter），\n>\n> 然后会在 .ssh 目录生产两个文件：id_rsa和id_rsa.pub\n>\n> 用记事本打开.ssh目录下的id_rsa.pub文件，复制里面的内容，或者直接执行命令查看\n\n## 查看密钥\n\n> $ cat ~/.ssh/id_rsa.pub\n\n或者之间点开文件查看\n\n## 复制ssh key到github\n\n> On the GitHub site Click “Settings” \n>\n> Click “SSH and GPG Keys” \n>\n> Click “New SSH key”\n\n## 测试 ssh 链接 github\n\n> 输入 ssh -T git@github.com\n>\n> 出现Successfully就表示可以了\n","slug":"computer/course-2/git","published":1,"updated":"2020-12-17T04:41:09.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg6h0005b0utdpzdfj6i","content":"<h1 id=\"创建仓库\"><a class=\"anchor\" href=\"#创建仓库\">#</a> 创建仓库</h1>\n<h2 id=\"初始化仓库\"><a class=\"anchor\" href=\"#初始化仓库\">#</a> 初始化仓库</h2>\n<p>使用当前目录作为仓库，进行初始化</p>\n<blockquote>\n<p><strong>git init</strong></p>\n</blockquote>\n<p>执行完之后，当前目录会生成一个.git 目录</p>\n<h2 id=\"拷贝\"><a class=\"anchor\" href=\"#拷贝\">#</a> 拷贝</h2>\n<p>从 git 仓库拷贝项目</p>\n<blockquote>\n<p><strong>git clone &lt;repo&gt;</strong></p>\n</blockquote>\n<p>克隆到指定的目录</p>\n<blockquote>\n<p><strong>git clone &lt;repo&gt; &lt;directory&gt;</strong></p>\n</blockquote>\n<p><strong>repo：Git 仓库</strong></p>\n<p><strong>directory：本地目录</strong></p>\n<h2 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h2>\n<h3 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h3>\n<blockquote>\n<p><strong>git config</strong></p>\n</blockquote>\n<h3 id=\"显示当前的-git-配置信息\"><a class=\"anchor\" href=\"#显示当前的-git-配置信息\">#</a> 显示当前的 git 配置信息</h3>\n<blockquote>\n<p><strong>git config --list</strong></p>\n<p><strong>credential.helper=osxkeychain</strong><br />\n<strong>core.repositoryformatversion=0</strong><br />\n<strong>core.filemode=true</strong><br />\n<strong>core.bare=false</strong><br />\n<strong>core.logallrefupdates=true</strong><br />\n<strong>core.ignorecase=true</strong><br />\n<strong>core.precomposeunicode=true</strong></p>\n</blockquote>\n<h3 id=\"编辑-git-配置文件\"><a class=\"anchor\" href=\"#编辑-git-配置文件\">#</a> 编辑 git 配置文件</h3>\n<blockquote>\n<p><strong>git config -e    # 针对当前仓库</strong></p>\n<p><strong>git config -e --global   # 针对系统上所有仓库</strong></p>\n</blockquote>\n<h3 id=\"设置提交代码时的用户信息\"><a class=\"anchor\" href=\"#设置提交代码时的用户信息\">#</a> 设置提交代码时的用户信息</h3>\n<blockquote>\n<p><strong>git config --global <span class=\"exturl\" data-url=\"aHR0cDovL3VzZXIubmFtZQ==\">user.name</span> &quot;用户名&quot;</strong><br />\n<strong>git config --global user.email  邮箱</strong></p>\n</blockquote>\n<p><strong>如果去掉 --global 参数只对当前仓库有效</strong></p>\n<h1 id=\"基本指令\"><a class=\"anchor\" href=\"#基本指令\">#</a> 基本指令</h1>\n<h2 id=\"添加文件\"><a class=\"anchor\" href=\"#添加文件\">#</a> 添加文件</h2>\n<h3 id=\"添加一个或多个文件到暂存区\"><a class=\"anchor\" href=\"#添加一个或多个文件到暂存区\">#</a> 添加一个或多个文件到暂存区</h3>\n<blockquote>\n<p><strong>git add [file1] [file2] ...</strong></p>\n</blockquote>\n<h3 id=\"添加指定目录到暂存区包括子目录\"><a class=\"anchor\" href=\"#添加指定目录到暂存区包括子目录\">#</a> 添加指定目录到暂存区，包括子目录</h3>\n<blockquote>\n<p><strong>git add [dir]</strong></p>\n</blockquote>\n<h3 id=\"添加当前目录下的所有文件到暂存区\"><a class=\"anchor\" href=\"#添加当前目录下的所有文件到暂存区\">#</a> 添加当前目录下的所有文件到暂存区</h3>\n<blockquote>\n<p>**git add ***</p>\n</blockquote>\n<h2 id=\"查看添加文件状态\"><a class=\"anchor\" href=\"#查看添加文件状态\">#</a> 查看添加文件状态</h2>\n<p><strong>查看在你上次提交之后是否有对文件进行再次修改。</strong></p>\n<blockquote>\n<p><strong>git status</strong></p>\n</blockquote>\n<p><strong>通常使用 -s 参数来获得简短的输出结果</strong></p>\n<blockquote>\n<p><strong>git status -s</strong></p>\n</blockquote>\n<h2 id=\"提交文件\"><a class=\"anchor\" href=\"#提交文件\">#</a> 提交文件</h2>\n<h3 id=\"提交暂存区到本地仓库中\"><a class=\"anchor\" href=\"#提交暂存区到本地仓库中\">#</a> 提交暂存区到本地仓库中</h3>\n<blockquote>\n<p><strong>git commit -m &quot;提交信息&quot;</strong></p>\n</blockquote>\n<h3 id=\"提交暂存区的指定文件到仓库区\"><a class=\"anchor\" href=\"#提交暂存区的指定文件到仓库区\">#</a> 提交暂存区的指定文件到仓库区</h3>\n<blockquote>\n<p><strong>git commit [file1] [file2] ... -m &quot;提交信息&quot;</strong></p>\n</blockquote>\n<h2 id=\"删除文件\"><a class=\"anchor\" href=\"#删除文件\">#</a> 删除文件</h2>\n<h3 id=\"将文件从暂存区和工作区中删除\"><a class=\"anchor\" href=\"#将文件从暂存区和工作区中删除\">#</a> 将文件从暂存区和工作区中删除</h3>\n<blockquote>\n<p><strong>git rm &lt;file&gt;</strong></p>\n</blockquote>\n<h3 id=\"强制删除\"><a class=\"anchor\" href=\"#强制删除\">#</a> 强制删除</h3>\n<p><strong>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f，强行从暂存区和工作区中删除修改后的文件</strong></p>\n<blockquote>\n<p><strong>git rm -f &lt;file&gt;</strong></p>\n</blockquote>\n<p><strong>如果想把文件从暂存区域移除，但仍然希望保留在当前工作目录，换句话说，仅是从跟踪清单中删除</strong></p>\n<blockquote>\n<p><strong>git rm --cached &lt;file&gt;</strong></p>\n</blockquote>\n<h3 id=\"递归删除\"><a class=\"anchor\" href=\"#递归删除\">#</a> 递归删除</h3>\n<p><strong>如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件</strong></p>\n<blockquote>\n<p>**git rm -r ***</p>\n</blockquote>\n<h2 id=\"移动文件\"><a class=\"anchor\" href=\"#移动文件\">#</a> 移动文件</h2>\n<p>用于移动或重命名一个文件、目录或软连接。</p>\n<blockquote>\n<p><strong>git mv [file] [newfile]</strong></p>\n</blockquote>\n<p>如果新但文件名已经存在，但还是要重命名它</p>\n<blockquote>\n<p><strong>git mv -f [file] [newfile]</strong></p>\n</blockquote>\n<h2 id=\"远程操作\"><a class=\"anchor\" href=\"#远程操作\">#</a> 远程操作</h2>\n<h3 id=\"下载远程代码并合并\"><a class=\"anchor\" href=\"#下载远程代码并合并\">#</a> 下载远程代码并合并</h3>\n<blockquote>\n<p><strong>git pull</strong></p>\n</blockquote>\n<h3 id=\"上传远程代码并合并\"><a class=\"anchor\" href=\"#上传远程代码并合并\">#</a> 上传远程代码并合并</h3>\n<blockquote>\n<p><strong>git push</strong></p>\n</blockquote>\n<h2 id=\"解决冲突\"><a class=\"anchor\" href=\"#解决冲突\">#</a> 解决冲突</h2>\n<blockquote>\n<p><strong>shift+!\t输入:wq 保存</strong></p>\n</blockquote>\n<h1 id=\"配置密钥\"><a class=\"anchor\" href=\"#配置密钥\">#</a> 配置密钥</h1>\n<h2 id=\"创建新的ssh-key\"><a class=\"anchor\" href=\"#创建新的ssh-key\">#</a> 创建新的 ssh key</h2>\n<blockquote>\n<p>输入 ssh-keygen -t rsa -C &quot;<span class=\"exturl\" data-url=\"bWFpbHRvOnlvdXJlbWFpbEB5b3VyZW1haWwuY29t\">youremail@youremail.com</span>&quot;</p>\n<p>执行这条命令会如上图提示文件保存路径，可以直接按 Enter，</p>\n<p>然后提示输入 passphrase（密码），输入两次（可以不输直接两次 Enter），</p>\n<p>然后会在 .ssh 目录生产两个文件：id_rsa 和 id_rsa.pub</p>\n<p>用记事本打开.ssh 目录下的 id_rsa.pub 文件，复制里面的内容，或者直接执行命令查看</p>\n</blockquote>\n<h2 id=\"查看密钥\"><a class=\"anchor\" href=\"#查看密钥\">#</a> 查看密钥</h2>\n<blockquote>\n<p>$ cat ~/.ssh/id_rsa.pub</p>\n</blockquote>\n<p>或者之间点开文件查看</p>\n<h2 id=\"复制ssh-key到github\"><a class=\"anchor\" href=\"#复制ssh-key到github\">#</a> 复制 ssh key 到 github</h2>\n<blockquote>\n<p>On the GitHub site Click “Settings”</p>\n<p>Click “SSH and GPG Keys”</p>\n<p>Click “New SSH key”</p>\n</blockquote>\n<h2 id=\"测试-ssh-链接-github\"><a class=\"anchor\" href=\"#测试-ssh-链接-github\">#</a> 测试 ssh 链接 github</h2>\n<blockquote>\n<p>输入 ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span></p>\n<p>出现 Successfully 就表示可以了</p>\n</blockquote>\n","site":{"data":{}},"length":1579,"excerpt":"","more":"<h1 id=\"创建仓库\"><a class=\"anchor\" href=\"#创建仓库\">#</a> 创建仓库</h1>\n<h2 id=\"初始化仓库\"><a class=\"anchor\" href=\"#初始化仓库\">#</a> 初始化仓库</h2>\n<p>使用当前目录作为仓库，进行初始化</p>\n<blockquote>\n<p><strong>git init</strong></p>\n</blockquote>\n<p>执行完之后，当前目录会生成一个.git 目录</p>\n<h2 id=\"拷贝\"><a class=\"anchor\" href=\"#拷贝\">#</a> 拷贝</h2>\n<p>从 git 仓库拷贝项目</p>\n<blockquote>\n<p><strong>git clone &lt;repo&gt;</strong></p>\n</blockquote>\n<p>克隆到指定的目录</p>\n<blockquote>\n<p><strong>git clone &lt;repo&gt; &lt;directory&gt;</strong></p>\n</blockquote>\n<p><strong>repo：Git 仓库</strong></p>\n<p><strong>directory：本地目录</strong></p>\n<h2 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h2>\n<h3 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h3>\n<blockquote>\n<p><strong>git config</strong></p>\n</blockquote>\n<h3 id=\"显示当前的-git-配置信息\"><a class=\"anchor\" href=\"#显示当前的-git-配置信息\">#</a> 显示当前的 git 配置信息</h3>\n<blockquote>\n<p><strong>git config --list</strong></p>\n<p><strong>credential.helper=osxkeychain</strong><br />\n<strong>core.repositoryformatversion=0</strong><br />\n<strong>core.filemode=true</strong><br />\n<strong>core.bare=false</strong><br />\n<strong>core.logallrefupdates=true</strong><br />\n<strong>core.ignorecase=true</strong><br />\n<strong>core.precomposeunicode=true</strong></p>\n</blockquote>\n<h3 id=\"编辑-git-配置文件\"><a class=\"anchor\" href=\"#编辑-git-配置文件\">#</a> 编辑 git 配置文件</h3>\n<blockquote>\n<p><strong>git config -e    # 针对当前仓库</strong></p>\n<p><strong>git config -e --global   # 针对系统上所有仓库</strong></p>\n</blockquote>\n<h3 id=\"设置提交代码时的用户信息\"><a class=\"anchor\" href=\"#设置提交代码时的用户信息\">#</a> 设置提交代码时的用户信息</h3>\n<blockquote>\n<p><strong>git config --global <span class=\"exturl\" data-url=\"aHR0cDovL3VzZXIubmFtZQ==\">user.name</span> &quot;用户名&quot;</strong><br />\n<strong>git config --global user.email  邮箱</strong></p>\n</blockquote>\n<p><strong>如果去掉 --global 参数只对当前仓库有效</strong></p>\n<h1 id=\"基本指令\"><a class=\"anchor\" href=\"#基本指令\">#</a> 基本指令</h1>\n<h2 id=\"添加文件\"><a class=\"anchor\" href=\"#添加文件\">#</a> 添加文件</h2>\n<h3 id=\"添加一个或多个文件到暂存区\"><a class=\"anchor\" href=\"#添加一个或多个文件到暂存区\">#</a> 添加一个或多个文件到暂存区</h3>\n<blockquote>\n<p><strong>git add [file1] [file2] ...</strong></p>\n</blockquote>\n<h3 id=\"添加指定目录到暂存区包括子目录\"><a class=\"anchor\" href=\"#添加指定目录到暂存区包括子目录\">#</a> 添加指定目录到暂存区，包括子目录</h3>\n<blockquote>\n<p><strong>git add [dir]</strong></p>\n</blockquote>\n<h3 id=\"添加当前目录下的所有文件到暂存区\"><a class=\"anchor\" href=\"#添加当前目录下的所有文件到暂存区\">#</a> 添加当前目录下的所有文件到暂存区</h3>\n<blockquote>\n<p>**git add ***</p>\n</blockquote>\n<h2 id=\"查看添加文件状态\"><a class=\"anchor\" href=\"#查看添加文件状态\">#</a> 查看添加文件状态</h2>\n<p><strong>查看在你上次提交之后是否有对文件进行再次修改。</strong></p>\n<blockquote>\n<p><strong>git status</strong></p>\n</blockquote>\n<p><strong>通常使用 -s 参数来获得简短的输出结果</strong></p>\n<blockquote>\n<p><strong>git status -s</strong></p>\n</blockquote>\n<h2 id=\"提交文件\"><a class=\"anchor\" href=\"#提交文件\">#</a> 提交文件</h2>\n<h3 id=\"提交暂存区到本地仓库中\"><a class=\"anchor\" href=\"#提交暂存区到本地仓库中\">#</a> 提交暂存区到本地仓库中</h3>\n<blockquote>\n<p><strong>git commit -m &quot;提交信息&quot;</strong></p>\n</blockquote>\n<h3 id=\"提交暂存区的指定文件到仓库区\"><a class=\"anchor\" href=\"#提交暂存区的指定文件到仓库区\">#</a> 提交暂存区的指定文件到仓库区</h3>\n<blockquote>\n<p><strong>git commit [file1] [file2] ... -m &quot;提交信息&quot;</strong></p>\n</blockquote>\n<h2 id=\"删除文件\"><a class=\"anchor\" href=\"#删除文件\">#</a> 删除文件</h2>\n<h3 id=\"将文件从暂存区和工作区中删除\"><a class=\"anchor\" href=\"#将文件从暂存区和工作区中删除\">#</a> 将文件从暂存区和工作区中删除</h3>\n<blockquote>\n<p><strong>git rm &lt;file&gt;</strong></p>\n</blockquote>\n<h3 id=\"强制删除\"><a class=\"anchor\" href=\"#强制删除\">#</a> 强制删除</h3>\n<p><strong>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f，强行从暂存区和工作区中删除修改后的文件</strong></p>\n<blockquote>\n<p><strong>git rm -f &lt;file&gt;</strong></p>\n</blockquote>\n<p><strong>如果想把文件从暂存区域移除，但仍然希望保留在当前工作目录，换句话说，仅是从跟踪清单中删除</strong></p>\n<blockquote>\n<p><strong>git rm --cached &lt;file&gt;</strong></p>\n</blockquote>\n<h3 id=\"递归删除\"><a class=\"anchor\" href=\"#递归删除\">#</a> 递归删除</h3>\n<p><strong>如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件</strong></p>\n<blockquote>\n<p>**git rm -r ***</p>\n</blockquote>\n<h2 id=\"移动文件\"><a class=\"anchor\" href=\"#移动文件\">#</a> 移动文件</h2>\n<p>用于移动或重命名一个文件、目录或软连接。</p>\n<blockquote>\n<p><strong>git mv [file] [newfile]</strong></p>\n</blockquote>\n<p>如果新但文件名已经存在，但还是要重命名它</p>\n<blockquote>\n<p><strong>git mv -f [file] [newfile]</strong></p>\n</blockquote>\n<h2 id=\"远程操作\"><a class=\"anchor\" href=\"#远程操作\">#</a> 远程操作</h2>\n<h3 id=\"下载远程代码并合并\"><a class=\"anchor\" href=\"#下载远程代码并合并\">#</a> 下载远程代码并合并</h3>\n<blockquote>\n<p><strong>git pull</strong></p>\n</blockquote>\n<h3 id=\"上传远程代码并合并\"><a class=\"anchor\" href=\"#上传远程代码并合并\">#</a> 上传远程代码并合并</h3>\n<blockquote>\n<p><strong>git push</strong></p>\n</blockquote>\n<h2 id=\"解决冲突\"><a class=\"anchor\" href=\"#解决冲突\">#</a> 解决冲突</h2>\n<blockquote>\n<p><strong>shift+!\t输入:wq 保存</strong></p>\n</blockquote>\n<h1 id=\"配置密钥\"><a class=\"anchor\" href=\"#配置密钥\">#</a> 配置密钥</h1>\n<h2 id=\"创建新的ssh-key\"><a class=\"anchor\" href=\"#创建新的ssh-key\">#</a> 创建新的 ssh key</h2>\n<blockquote>\n<p>输入 ssh-keygen -t rsa -C &quot;<span class=\"exturl\" data-url=\"bWFpbHRvOnlvdXJlbWFpbEB5b3VyZW1haWwuY29t\">youremail@youremail.com</span>&quot;</p>\n<p>执行这条命令会如上图提示文件保存路径，可以直接按 Enter，</p>\n<p>然后提示输入 passphrase（密码），输入两次（可以不输直接两次 Enter），</p>\n<p>然后会在 .ssh 目录生产两个文件：id_rsa 和 id_rsa.pub</p>\n<p>用记事本打开.ssh 目录下的 id_rsa.pub 文件，复制里面的内容，或者直接执行命令查看</p>\n</blockquote>\n<h2 id=\"查看密钥\"><a class=\"anchor\" href=\"#查看密钥\">#</a> 查看密钥</h2>\n<blockquote>\n<p>$ cat ~/.ssh/id_rsa.pub</p>\n</blockquote>\n<p>或者之间点开文件查看</p>\n<h2 id=\"复制ssh-key到github\"><a class=\"anchor\" href=\"#复制ssh-key到github\">#</a> 复制 ssh key 到 github</h2>\n<blockquote>\n<p>On the GitHub site Click “Settings”</p>\n<p>Click “SSH and GPG Keys”</p>\n<p>Click “New SSH key”</p>\n</blockquote>\n<h2 id=\"测试-ssh-链接-github\"><a class=\"anchor\" href=\"#测试-ssh-链接-github\">#</a> 测试 ssh 链接 github</h2>\n<blockquote>\n<p>输入 ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span></p>\n<p>出现 Successfully 就表示可以了</p>\n</blockquote>\n"},{"title":"Idea","date":"2020-12-17T04:38:00.000Z","_content":"\n\n\n\n# 快捷方法\n\n## 补全for循环\n\n>length.for\n>for(int i=0;i<length;i++){}\n\n## 补全返回类型及变量\n\n> **方法().var**\n\n## 输出\n\n> **sout**\n>\n> **System.out.println();**\n\n## main方法\n\n> **psvm 或 main**\n\n## 方法注释\n\n> 在方法上面一行输入/**回车，就会出现以下注释\n>\n> ```java\n>   /**\n>      * \n>      * @param \n>      * @param \n>      * @return\n>      */\n> ```\n\n# 快捷键\n\n## 代码快捷键\n\n### 重写方法\n\n> **Ctrl+O**\n\n### 构造函数\n\n> **ALT+INSERT**\n\n### 自动导入变量定义\n\n> **Ctrl+Alt+V**\n\n### 大小写转化\n\n> **Ctrl+Shift+U**\n\n### 查看源码\n\n> **Ctrl+B**\n\n### 纠错，导包，提示\n\n> **Alt+Enter**\n\n## 功能快捷键\n\n### 格式化代码\n\n>**Ctrl+Shift+L**\n\n### 删除一行\n\n>**Ctrl+y**\n\n### 注释多行\n\n>  **Ctrl+Shift+/**\n\n### 注释单行\n\n> **Ctrl+/**\n\n### 复制到下一行\n\n> **Ctrl+D**\n\n### 全局搜索\n\n> **CTRL+SHIFT +F**\n\n### 上/下移一行\n\n> **Alt+Shift+Up/Down**\n\n### 替换文本\n\n> **Ctrl+R**\n\n### 方法展开、折叠\n\n**当前方法**\n\n> **Ctrl+\"+/-\"**\n\n**全部**\n\n> **Ctrl+Shift+\"+/-\"**\n\n# 其他快捷键\n\n## 复制路径\n\n> **Ctrl+Shift+C**\n\n# 其他操作\n\n## 设置作者注释\n\n1. **准备好模板**\n\n   ```java\n   /**\n    * @Author 张三\n    * @Description \n    * @Date $date$ $time$\n    **/\n   ```\n\n2. **添加模板**\n\n   点击File → settings→Editor→live Templates\n\n   1. 点击“+”，先添加一个群组,点击Template Group，取名为MyTemplate\n\n   2. 添加一个模板名称，点击Live Template\n\n   3. Abbreviation框填入“*”，Description框填入“注释模板”，Template text框填入刚才的模板\n\n   4. 点击Define，选择Java→Declaration\n\n   5. 点击Edit variables进行如下配置，点击OK\n\n      | Name | Expression |\n      | :--: | :--------: |\n      | date |   date()   |\n      | time |   time()   |\n\n3. 测试\n\n   在类名前输入*再按下Tab键，如下便成功\n\n   ```java\n   /**\n    * @Author 张三\n    * @Description \n    * @Date 2020/10/27 16:06\n    **/\n   ```\n\n   在方法名前面输入@Param跟@return就会有值\n\n## 设置方法注释\n\n此操作在方法外也能获取参数\n\n1. 准备好模板\n\n   ```java\n   *\n   $params$\n   * @return \n   * @Author zhangsan \n   * @Date $date$       \n   **/\n   ```\n\n2. 添加模板\n\n   >Abbreviation框填入 \"method\"(自定义)\n   >\n   >Options下面的Expand with设置为Enter\n   \n   |  Name  |     Expression     |\n   | :----: | :----------------: |\n   | params |                    |\n   | return | methodReturnType() |\n   \n   > params中Expression填入以下脚本\n   \n   ```java\n   groovyScript(\"def result=''; def params=\\\"${_1}\\\".replaceAll('[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]', '').split(',').toList(); for(i = 0; i < params.size(); i++) {result+=' * @param ' + params[i] + ((i < params.size() - 1) ? '\\\\n' : '')}; return result\", methodParameters())\n   ```\n\n3. 测试\n\n   >idea默认的生成注释方式为 /*+模板名+快捷键\n   >\n   >在方法名上输入/*method+enter\n   \n   ```java\n   /**\n   * @param 参数\n   * @return 结果\n   * @Author zhangsan\n   * @Date 2020/11/18\n   **/\n   ```\n","source":"_posts/computer/course-2/idea.md","raw":"---\ntitle: Idea\ndate: 2020/12/17 12:38\ncategories:\n\t- [计算机, 工具]\ntags:\n\t- Idea\n---\n\n\n\n\n# 快捷方法\n\n## 补全for循环\n\n>length.for\n>for(int i=0;i<length;i++){}\n\n## 补全返回类型及变量\n\n> **方法().var**\n\n## 输出\n\n> **sout**\n>\n> **System.out.println();**\n\n## main方法\n\n> **psvm 或 main**\n\n## 方法注释\n\n> 在方法上面一行输入/**回车，就会出现以下注释\n>\n> ```java\n>   /**\n>      * \n>      * @param \n>      * @param \n>      * @return\n>      */\n> ```\n\n# 快捷键\n\n## 代码快捷键\n\n### 重写方法\n\n> **Ctrl+O**\n\n### 构造函数\n\n> **ALT+INSERT**\n\n### 自动导入变量定义\n\n> **Ctrl+Alt+V**\n\n### 大小写转化\n\n> **Ctrl+Shift+U**\n\n### 查看源码\n\n> **Ctrl+B**\n\n### 纠错，导包，提示\n\n> **Alt+Enter**\n\n## 功能快捷键\n\n### 格式化代码\n\n>**Ctrl+Shift+L**\n\n### 删除一行\n\n>**Ctrl+y**\n\n### 注释多行\n\n>  **Ctrl+Shift+/**\n\n### 注释单行\n\n> **Ctrl+/**\n\n### 复制到下一行\n\n> **Ctrl+D**\n\n### 全局搜索\n\n> **CTRL+SHIFT +F**\n\n### 上/下移一行\n\n> **Alt+Shift+Up/Down**\n\n### 替换文本\n\n> **Ctrl+R**\n\n### 方法展开、折叠\n\n**当前方法**\n\n> **Ctrl+\"+/-\"**\n\n**全部**\n\n> **Ctrl+Shift+\"+/-\"**\n\n# 其他快捷键\n\n## 复制路径\n\n> **Ctrl+Shift+C**\n\n# 其他操作\n\n## 设置作者注释\n\n1. **准备好模板**\n\n   ```java\n   /**\n    * @Author 张三\n    * @Description \n    * @Date $date$ $time$\n    **/\n   ```\n\n2. **添加模板**\n\n   点击File → settings→Editor→live Templates\n\n   1. 点击“+”，先添加一个群组,点击Template Group，取名为MyTemplate\n\n   2. 添加一个模板名称，点击Live Template\n\n   3. Abbreviation框填入“*”，Description框填入“注释模板”，Template text框填入刚才的模板\n\n   4. 点击Define，选择Java→Declaration\n\n   5. 点击Edit variables进行如下配置，点击OK\n\n      | Name | Expression |\n      | :--: | :--------: |\n      | date |   date()   |\n      | time |   time()   |\n\n3. 测试\n\n   在类名前输入*再按下Tab键，如下便成功\n\n   ```java\n   /**\n    * @Author 张三\n    * @Description \n    * @Date 2020/10/27 16:06\n    **/\n   ```\n\n   在方法名前面输入@Param跟@return就会有值\n\n## 设置方法注释\n\n此操作在方法外也能获取参数\n\n1. 准备好模板\n\n   ```java\n   *\n   $params$\n   * @return \n   * @Author zhangsan \n   * @Date $date$       \n   **/\n   ```\n\n2. 添加模板\n\n   >Abbreviation框填入 \"method\"(自定义)\n   >\n   >Options下面的Expand with设置为Enter\n   \n   |  Name  |     Expression     |\n   | :----: | :----------------: |\n   | params |                    |\n   | return | methodReturnType() |\n   \n   > params中Expression填入以下脚本\n   \n   ```java\n   groovyScript(\"def result=''; def params=\\\"${_1}\\\".replaceAll('[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]', '').split(',').toList(); for(i = 0; i < params.size(); i++) {result+=' * @param ' + params[i] + ((i < params.size() - 1) ? '\\\\n' : '')}; return result\", methodParameters())\n   ```\n\n3. 测试\n\n   >idea默认的生成注释方式为 /*+模板名+快捷键\n   >\n   >在方法名上输入/*method+enter\n   \n   ```java\n   /**\n   * @param 参数\n   * @return 结果\n   * @Author zhangsan\n   * @Date 2020/11/18\n   **/\n   ```\n","slug":"computer/course-2/idea","published":1,"updated":"2020-12-17T09:54:47.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg6k0008b0ut15bpfdah","content":"<h1 id=\"快捷方法\"><a class=\"anchor\" href=\"#快捷方法\">#</a> 快捷方法</h1>\n<h2 id=\"补全for循环\"><a class=\"anchor\" href=\"#补全for循环\">#</a> 补全 for 循环</h2>\n<blockquote>\n<p>length.for<br />\nfor(int i=0;i&lt;length;i++){}</p>\n</blockquote>\n<h2 id=\"补全返回类型及变量\"><a class=\"anchor\" href=\"#补全返回类型及变量\">#</a> 补全返回类型及变量</h2>\n<blockquote>\n<p><strong>方法 ().var</strong></p>\n</blockquote>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<blockquote>\n<p><strong>sout</strong></p>\n<p><strong>System.out.println();</strong></p>\n</blockquote>\n<h2 id=\"main方法\"><a class=\"anchor\" href=\"#main方法\">#</a> main 方法</h2>\n<blockquote>\n<p><strong>psvm 或 main</strong></p>\n</blockquote>\n<h2 id=\"方法注释\"><a class=\"anchor\" href=\"#方法注释\">#</a> 方法注释</h2>\n<blockquote>\n<p>在方法上面一行输入 /** 回车，就会出现以下注释</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"快捷键\"><a class=\"anchor\" href=\"#快捷键\">#</a> 快捷键</h1>\n<h2 id=\"代码快捷键\"><a class=\"anchor\" href=\"#代码快捷键\">#</a> 代码快捷键</h2>\n<h3 id=\"重写方法\"><a class=\"anchor\" href=\"#重写方法\">#</a> 重写方法</h3>\n<blockquote>\n<p><strong>Ctrl+O</strong></p>\n</blockquote>\n<h3 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h3>\n<blockquote>\n<p><strong>ALT+INSERT</strong></p>\n</blockquote>\n<h3 id=\"自动导入变量定义\"><a class=\"anchor\" href=\"#自动导入变量定义\">#</a> 自动导入变量定义</h3>\n<blockquote>\n<p><strong>Ctrl+Alt+V</strong></p>\n</blockquote>\n<h3 id=\"大小写转化\"><a class=\"anchor\" href=\"#大小写转化\">#</a> 大小写转化</h3>\n<blockquote>\n<p><strong>Ctrl+Shift+U</strong></p>\n</blockquote>\n<h3 id=\"查看源码\"><a class=\"anchor\" href=\"#查看源码\">#</a> 查看源码</h3>\n<blockquote>\n<p><strong>Ctrl+B</strong></p>\n</blockquote>\n<h3 id=\"纠错导包提示\"><a class=\"anchor\" href=\"#纠错导包提示\">#</a> 纠错，导包，提示</h3>\n<blockquote>\n<p><strong>Alt+Enter</strong></p>\n</blockquote>\n<h2 id=\"功能快捷键\"><a class=\"anchor\" href=\"#功能快捷键\">#</a> 功能快捷键</h2>\n<h3 id=\"格式化代码\"><a class=\"anchor\" href=\"#格式化代码\">#</a> 格式化代码</h3>\n<blockquote>\n<p><strong>Ctrl+Shift+L</strong></p>\n</blockquote>\n<h3 id=\"删除一行\"><a class=\"anchor\" href=\"#删除一行\">#</a> 删除一行</h3>\n<blockquote>\n<p><strong>Ctrl+y</strong></p>\n</blockquote>\n<h3 id=\"注释多行\"><a class=\"anchor\" href=\"#注释多行\">#</a> 注释多行</h3>\n<blockquote>\n<p><strong>Ctrl+Shift+/</strong></p>\n</blockquote>\n<h3 id=\"注释单行\"><a class=\"anchor\" href=\"#注释单行\">#</a> 注释单行</h3>\n<blockquote>\n<p><strong>Ctrl+/</strong></p>\n</blockquote>\n<h3 id=\"复制到下一行\"><a class=\"anchor\" href=\"#复制到下一行\">#</a> 复制到下一行</h3>\n<blockquote>\n<p><strong>Ctrl+D</strong></p>\n</blockquote>\n<h3 id=\"全局搜索\"><a class=\"anchor\" href=\"#全局搜索\">#</a> 全局搜索</h3>\n<blockquote>\n<p><strong>CTRL+SHIFT +F</strong></p>\n</blockquote>\n<h3 id=\"上下移一行\"><a class=\"anchor\" href=\"#上下移一行\">#</a> 上 / 下移一行</h3>\n<blockquote>\n<p><strong>Alt+Shift+Up/Down</strong></p>\n</blockquote>\n<h3 id=\"替换文本\"><a class=\"anchor\" href=\"#替换文本\">#</a> 替换文本</h3>\n<blockquote>\n<p><strong>Ctrl+R</strong></p>\n</blockquote>\n<h3 id=\"方法展开-折叠\"><a class=\"anchor\" href=\"#方法展开-折叠\">#</a> 方法展开、折叠</h3>\n<p><strong>当前方法</strong></p>\n<blockquote>\n<p><strong>Ctrl+&quot;+/-&quot;</strong></p>\n</blockquote>\n<p><strong>全部</strong></p>\n<blockquote>\n<p><strong>Ctrl+Shift+&quot;+/-&quot;</strong></p>\n</blockquote>\n<h1 id=\"其他快捷键\"><a class=\"anchor\" href=\"#其他快捷键\">#</a> 其他快捷键</h1>\n<h2 id=\"复制路径\"><a class=\"anchor\" href=\"#复制路径\">#</a> 复制路径</h2>\n<blockquote>\n<p><strong>Ctrl+Shift+C</strong></p>\n</blockquote>\n<h1 id=\"其他操作\"><a class=\"anchor\" href=\"#其他操作\">#</a> 其他操作</h1>\n<h2 id=\"设置作者注释\"><a class=\"anchor\" href=\"#设置作者注释\">#</a> 设置作者注释</h2>\n<ol>\n<li>\n<p><strong>准备好模板</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Author 张三</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Date $date$ $time$</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> **/</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>添加模板</strong></p>\n<p>点击 File → settings→Editor→live Templates</p>\n<ol>\n<li>\n<p>点击 “+”，先添加一个群组，点击 Template Group，取名为 MyTemplate</p>\n</li>\n<li>\n<p>添加一个模板名称，点击 Live Template</p>\n</li>\n<li>\n<p>Abbreviation 框填入 “*”，Description 框填入 “注释模板”，Template text 框填入刚才的模板</p>\n</li>\n<li>\n<p>点击 Define，选择 Java→Declaration</p>\n</li>\n<li>\n<p>点击 Edit variables 进行如下配置，点击 OK</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Expression</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">date()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">time</td>\n<td style=\"text-align:center\">time()</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n</li>\n<li>\n<p>测试</p>\n<p>在类名前输入 * 再按下 Tab 键，如下便成功</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Author 张三</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Date 2020/10/27 16:06</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> **/</span></pre></td></tr></table></figure><p>在方法名前面输入 @Param 跟 @return 就会有值</p>\n</li>\n</ol>\n<h2 id=\"设置方法注释\"><a class=\"anchor\" href=\"#设置方法注释\">#</a> 设置方法注释</h2>\n<p>此操作在方法外也能获取参数</p>\n<ol>\n<li>\n<p>准备好模板</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$params$</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@return</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@Author</span> zhangsan </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@Date</span> $date$       </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">/</span></pre></td></tr></table></figure></li>\n<li>\n<p>添加模板</p>\n<blockquote>\n<p>Abbreviation 框填入 &quot;method&quot;(自定义)</p>\n<p>Options 下面的 Expand with 设置为 Enter</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Expression</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">params</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">return</td>\n<td style=\"text-align:center\">methodReturnType()</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>params 中 Expression 填入以下脚本</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">groovyScript</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"def result=''; def params=\\\"$&#123;_1&#125;\\\".replaceAll('[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]', '').split(',').toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=' * @param ' + params[i] + ((i &lt; params.size() - 1) ? '\\\\n' : '')&#125;; return result\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">methodParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n<blockquote>\n<p>idea 默认的生成注释方式为 /*+ 模板名 + 快捷键</p>\n<p>在方法名上输入 /*method+enter</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* @param 参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @return 结果</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* @Author zhangsan</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* @Date 2020/11/18</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>**/</span></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":1464,"excerpt":"","more":"<h1 id=\"快捷方法\"><a class=\"anchor\" href=\"#快捷方法\">#</a> 快捷方法</h1>\n<h2 id=\"补全for循环\"><a class=\"anchor\" href=\"#补全for循环\">#</a> 补全 for 循环</h2>\n<blockquote>\n<p>length.for<br />\nfor(int i=0;i&lt;length;i++){}</p>\n</blockquote>\n<h2 id=\"补全返回类型及变量\"><a class=\"anchor\" href=\"#补全返回类型及变量\">#</a> 补全返回类型及变量</h2>\n<blockquote>\n<p><strong>方法 ().var</strong></p>\n</blockquote>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<blockquote>\n<p><strong>sout</strong></p>\n<p><strong>System.out.println();</strong></p>\n</blockquote>\n<h2 id=\"main方法\"><a class=\"anchor\" href=\"#main方法\">#</a> main 方法</h2>\n<blockquote>\n<p><strong>psvm 或 main</strong></p>\n</blockquote>\n<h2 id=\"方法注释\"><a class=\"anchor\" href=\"#方法注释\">#</a> 方法注释</h2>\n<blockquote>\n<p>在方法上面一行输入 /** 回车，就会出现以下注释</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"快捷键\"><a class=\"anchor\" href=\"#快捷键\">#</a> 快捷键</h1>\n<h2 id=\"代码快捷键\"><a class=\"anchor\" href=\"#代码快捷键\">#</a> 代码快捷键</h2>\n<h3 id=\"重写方法\"><a class=\"anchor\" href=\"#重写方法\">#</a> 重写方法</h3>\n<blockquote>\n<p><strong>Ctrl+O</strong></p>\n</blockquote>\n<h3 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h3>\n<blockquote>\n<p><strong>ALT+INSERT</strong></p>\n</blockquote>\n<h3 id=\"自动导入变量定义\"><a class=\"anchor\" href=\"#自动导入变量定义\">#</a> 自动导入变量定义</h3>\n<blockquote>\n<p><strong>Ctrl+Alt+V</strong></p>\n</blockquote>\n<h3 id=\"大小写转化\"><a class=\"anchor\" href=\"#大小写转化\">#</a> 大小写转化</h3>\n<blockquote>\n<p><strong>Ctrl+Shift+U</strong></p>\n</blockquote>\n<h3 id=\"查看源码\"><a class=\"anchor\" href=\"#查看源码\">#</a> 查看源码</h3>\n<blockquote>\n<p><strong>Ctrl+B</strong></p>\n</blockquote>\n<h3 id=\"纠错导包提示\"><a class=\"anchor\" href=\"#纠错导包提示\">#</a> 纠错，导包，提示</h3>\n<blockquote>\n<p><strong>Alt+Enter</strong></p>\n</blockquote>\n<h2 id=\"功能快捷键\"><a class=\"anchor\" href=\"#功能快捷键\">#</a> 功能快捷键</h2>\n<h3 id=\"格式化代码\"><a class=\"anchor\" href=\"#格式化代码\">#</a> 格式化代码</h3>\n<blockquote>\n<p><strong>Ctrl+Shift+L</strong></p>\n</blockquote>\n<h3 id=\"删除一行\"><a class=\"anchor\" href=\"#删除一行\">#</a> 删除一行</h3>\n<blockquote>\n<p><strong>Ctrl+y</strong></p>\n</blockquote>\n<h3 id=\"注释多行\"><a class=\"anchor\" href=\"#注释多行\">#</a> 注释多行</h3>\n<blockquote>\n<p><strong>Ctrl+Shift+/</strong></p>\n</blockquote>\n<h3 id=\"注释单行\"><a class=\"anchor\" href=\"#注释单行\">#</a> 注释单行</h3>\n<blockquote>\n<p><strong>Ctrl+/</strong></p>\n</blockquote>\n<h3 id=\"复制到下一行\"><a class=\"anchor\" href=\"#复制到下一行\">#</a> 复制到下一行</h3>\n<blockquote>\n<p><strong>Ctrl+D</strong></p>\n</blockquote>\n<h3 id=\"全局搜索\"><a class=\"anchor\" href=\"#全局搜索\">#</a> 全局搜索</h3>\n<blockquote>\n<p><strong>CTRL+SHIFT +F</strong></p>\n</blockquote>\n<h3 id=\"上下移一行\"><a class=\"anchor\" href=\"#上下移一行\">#</a> 上 / 下移一行</h3>\n<blockquote>\n<p><strong>Alt+Shift+Up/Down</strong></p>\n</blockquote>\n<h3 id=\"替换文本\"><a class=\"anchor\" href=\"#替换文本\">#</a> 替换文本</h3>\n<blockquote>\n<p><strong>Ctrl+R</strong></p>\n</blockquote>\n<h3 id=\"方法展开-折叠\"><a class=\"anchor\" href=\"#方法展开-折叠\">#</a> 方法展开、折叠</h3>\n<p><strong>当前方法</strong></p>\n<blockquote>\n<p><strong>Ctrl+&quot;+/-&quot;</strong></p>\n</blockquote>\n<p><strong>全部</strong></p>\n<blockquote>\n<p><strong>Ctrl+Shift+&quot;+/-&quot;</strong></p>\n</blockquote>\n<h1 id=\"其他快捷键\"><a class=\"anchor\" href=\"#其他快捷键\">#</a> 其他快捷键</h1>\n<h2 id=\"复制路径\"><a class=\"anchor\" href=\"#复制路径\">#</a> 复制路径</h2>\n<blockquote>\n<p><strong>Ctrl+Shift+C</strong></p>\n</blockquote>\n<h1 id=\"其他操作\"><a class=\"anchor\" href=\"#其他操作\">#</a> 其他操作</h1>\n<h2 id=\"设置作者注释\"><a class=\"anchor\" href=\"#设置作者注释\">#</a> 设置作者注释</h2>\n<ol>\n<li>\n<p><strong>准备好模板</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Author 张三</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Date $date$ $time$</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> **/</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>添加模板</strong></p>\n<p>点击 File → settings→Editor→live Templates</p>\n<ol>\n<li>\n<p>点击 “+”，先添加一个群组，点击 Template Group，取名为 MyTemplate</p>\n</li>\n<li>\n<p>添加一个模板名称，点击 Live Template</p>\n</li>\n<li>\n<p>Abbreviation 框填入 “*”，Description 框填入 “注释模板”，Template text 框填入刚才的模板</p>\n</li>\n<li>\n<p>点击 Define，选择 Java→Declaration</p>\n</li>\n<li>\n<p>点击 Edit variables 进行如下配置，点击 OK</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Expression</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">date()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">time</td>\n<td style=\"text-align:center\">time()</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n</li>\n<li>\n<p>测试</p>\n<p>在类名前输入 * 再按下 Tab 键，如下便成功</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Author 张三</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Date 2020/10/27 16:06</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> **/</span></pre></td></tr></table></figure><p>在方法名前面输入 @Param 跟 @return 就会有值</p>\n</li>\n</ol>\n<h2 id=\"设置方法注释\"><a class=\"anchor\" href=\"#设置方法注释\">#</a> 设置方法注释</h2>\n<p>此操作在方法外也能获取参数</p>\n<ol>\n<li>\n<p>准备好模板</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$params$</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@return</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@Author</span> zhangsan </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@Date</span> $date$       </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">/</span></pre></td></tr></table></figure></li>\n<li>\n<p>添加模板</p>\n<blockquote>\n<p>Abbreviation 框填入 &quot;method&quot;(自定义)</p>\n<p>Options 下面的 Expand with 设置为 Enter</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Expression</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">params</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">return</td>\n<td style=\"text-align:center\">methodReturnType()</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>params 中 Expression 填入以下脚本</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">groovyScript</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"def result=''; def params=\\\"$&#123;_1&#125;\\\".replaceAll('[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]', '').split(',').toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=' * @param ' + params[i] + ((i &lt; params.size() - 1) ? '\\\\n' : '')&#125;; return result\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">methodParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n<blockquote>\n<p>idea 默认的生成注释方式为 /*+ 模板名 + 快捷键</p>\n<p>在方法名上输入 /*method+enter</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* @param 参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @return 结果</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* @Author zhangsan</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* @Date 2020/11/18</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>**/</span></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Typora","date":"2020-12-17T04:40:00.000Z","_content":"\n\n\n\n# 标题\n\n使用 # 号标记\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n# 段落\n\n## 字体\n\n```\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n显示结果\n\n>*斜体文本*\n>**粗体文本**\n>***粗斜体文本***\n\n## 分割线\n\n```\n***\n* * *\n*****\n- - -\n----------\n```\n\n显示结果\n\n***\n\n## 删除线\n\n```\n删除线\n~~删除线~~\n```\n\n显示结果\n\n> ~~删除线~~\n\n## 下划线\n\n```\n<u>带下划线文本</u>\n```\n\n> <u>下划线文本</u>\n\n## 脚注\n\n```\n格式 [^test]\n\n[^test]: 测试\n```\n\n显示结果\n\n>  [^test]\n>\n> [^test]: 测试\n\n# 列表\n\n## 无序列表\n\n```\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n```\n\n显示结果\n\n>* 第一项\n>* 第二项\n>* 第三项\n\n## 有序列表\n\n```\n1. 第一项\n2. 第二项\n3. 第三项\n```\n\n显示结果\n\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项\n\n## 嵌套列表\n\n```\n1. 第一项：\n    - 嵌套第一项\n    - 嵌套第二项\n2. 第二项：\n    - 嵌套第一项\n    - 嵌套第二个项\n```\n\n显示结果\n\n> 1. 第一项：\n>     - 嵌套第一项\n>     - 嵌套第二项\n> 2. 第二项：\n>     - 嵌套第一项\n>     - 嵌套第二个项\n\n# 区块\n\n```\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n\n显示结果\n\n> 最外层\n> > 第一层嵌套\n> >\n> > > 第二层嵌套\n\n# 代码\n\n用```包裹一段代码，并指定一种语言（也可以不指定）\n\n```\n​```java\nSystem.out.println(\"HelloWorld\");\n​```\n```\n\n显示结果\n\n```java\nSystem.out.println(\"HelloWorld\");\n```\n\n# 链接\n\n使用方法\n\n```\n[链接名称](链接地址)\n<链接地址>\n```\n\n例子一\n\n```\n百度连接 [百度](https://www.baidu.com)\n```\n\n显示结果\n\n> 百度连接 [百度](https://www.baidu.com)\n\n例子二\n\n```\n<https://www.baidu.com>\n```\n\n显示结果\n\n> <https://www.baidu.com>\n\n# 图片\n\n用法\n\n```\n无法指定长度和宽度\n![alt 属性文本](图片地址)\n![alt 属性文本](图片地址 \"可选标题\")\n使用普通的<img>标签指定长度和宽度\n```\n\n例子\n\n> <img src=\"..\\qiyin\\img\\cat.jpg\" alt=\"timg\" style=\"zoom:10%;\" />\n\n# 表格\n\n## 标准样式\n\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n\n显示结果\n\n| 表头   | 表头   |\n| ------ | ------ |\n| 单元格 | 单元格 |\n| 单元格 | 单元格 |\n\n## 对齐方式\n\n**我们可以设置表格的对齐方式：**\n\n- **-:** 设置内容和标题栏居右对齐。\n- **:-** 设置内容和标题栏居左对齐。\n- **:-:** 设置内容和标题栏居中对齐。\n\n```\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n\n显示结果\n\n| 左对齐 | 右对齐 | 居中对齐 |\n| :----- | -----: | :------: |\n| 单元格 | 单元格 |  单元格  |\n| 单元格 | 单元格 |  单元格  |\n","source":"_posts/computer/course-2/typora.md","raw":"---\ntitle: Typora\ndate: 2020/12/17 12:40\ncategories:\n\t- [计算机, 工具]\ntags:\n\t- Typora\n---\n\n\n\n\n# 标题\n\n使用 # 号标记\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n# 段落\n\n## 字体\n\n```\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n```\n\n显示结果\n\n>*斜体文本*\n>**粗体文本**\n>***粗斜体文本***\n\n## 分割线\n\n```\n***\n* * *\n*****\n- - -\n----------\n```\n\n显示结果\n\n***\n\n## 删除线\n\n```\n删除线\n~~删除线~~\n```\n\n显示结果\n\n> ~~删除线~~\n\n## 下划线\n\n```\n<u>带下划线文本</u>\n```\n\n> <u>下划线文本</u>\n\n## 脚注\n\n```\n格式 [^test]\n\n[^test]: 测试\n```\n\n显示结果\n\n>  [^test]\n>\n> [^test]: 测试\n\n# 列表\n\n## 无序列表\n\n```\n* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n```\n\n显示结果\n\n>* 第一项\n>* 第二项\n>* 第三项\n\n## 有序列表\n\n```\n1. 第一项\n2. 第二项\n3. 第三项\n```\n\n显示结果\n\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项\n\n## 嵌套列表\n\n```\n1. 第一项：\n    - 嵌套第一项\n    - 嵌套第二项\n2. 第二项：\n    - 嵌套第一项\n    - 嵌套第二个项\n```\n\n显示结果\n\n> 1. 第一项：\n>     - 嵌套第一项\n>     - 嵌套第二项\n> 2. 第二项：\n>     - 嵌套第一项\n>     - 嵌套第二个项\n\n# 区块\n\n```\n> 最外层\n> > 第一层嵌套\n> > > 第二层嵌套\n```\n\n显示结果\n\n> 最外层\n> > 第一层嵌套\n> >\n> > > 第二层嵌套\n\n# 代码\n\n用```包裹一段代码，并指定一种语言（也可以不指定）\n\n```\n​```java\nSystem.out.println(\"HelloWorld\");\n​```\n```\n\n显示结果\n\n```java\nSystem.out.println(\"HelloWorld\");\n```\n\n# 链接\n\n使用方法\n\n```\n[链接名称](链接地址)\n<链接地址>\n```\n\n例子一\n\n```\n百度连接 [百度](https://www.baidu.com)\n```\n\n显示结果\n\n> 百度连接 [百度](https://www.baidu.com)\n\n例子二\n\n```\n<https://www.baidu.com>\n```\n\n显示结果\n\n> <https://www.baidu.com>\n\n# 图片\n\n用法\n\n```\n无法指定长度和宽度\n![alt 属性文本](图片地址)\n![alt 属性文本](图片地址 \"可选标题\")\n使用普通的<img>标签指定长度和宽度\n```\n\n例子\n\n> <img src=\"..\\qiyin\\img\\cat.jpg\" alt=\"timg\" style=\"zoom:10%;\" />\n\n# 表格\n\n## 标准样式\n\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n\n显示结果\n\n| 表头   | 表头   |\n| ------ | ------ |\n| 单元格 | 单元格 |\n| 单元格 | 单元格 |\n\n## 对齐方式\n\n**我们可以设置表格的对齐方式：**\n\n- **-:** 设置内容和标题栏居右对齐。\n- **:-** 设置内容和标题栏居左对齐。\n- **:-:** 设置内容和标题栏居中对齐。\n\n```\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n```\n\n显示结果\n\n| 左对齐 | 右对齐 | 居中对齐 |\n| :----- | -----: | :------: |\n| 单元格 | 单元格 |  单元格  |\n| 单元格 | 单元格 |  单元格  |\n","slug":"computer/course-2/typora","published":1,"updated":"2020-12-17T04:41:07.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg6n0009b0utfru54486","content":"<h1 id=\"标题\"><a class=\"anchor\" href=\"#标题\">#</a> 标题</h1>\n<p>使用 # 号标记</p>\n<pre><code># 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n</code></pre>\n<h1 id=\"段落\"><a class=\"anchor\" href=\"#段落\">#</a> 段落</h1>\n<h2 id=\"字体\"><a class=\"anchor\" href=\"#字体\">#</a> 字体</h2>\n<pre><code>*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p><em>斜体文本</em><br />\n<strong>粗体文本</strong><br />\n<em><strong>粗斜体文本</strong></em></p>\n</blockquote>\n<h2 id=\"分割线\"><a class=\"anchor\" href=\"#分割线\">#</a> 分割线</h2>\n<pre><code>***\n* * *\n*****\n- - -\n----------\n</code></pre>\n<p>显示结果</p>\n<hr />\n<h2 id=\"删除线\"><a class=\"anchor\" href=\"#删除线\">#</a> 删除线</h2>\n<pre><code>删除线\n~~删除线~~\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p><s>删除线</s></p>\n</blockquote>\n<h2 id=\"下划线\"><a class=\"anchor\" href=\"#下划线\">#</a> 下划线</h2>\n<pre><code>&lt;u&gt;带下划线文本&lt;/u&gt;\n</code></pre>\n<blockquote>\n<p>&lt;u&gt; 下划线文本 &lt;/u&gt;</p>\n</blockquote>\n<h2 id=\"脚注\"><a class=\"anchor\" href=\"#脚注\">#</a> 脚注</h2>\n<pre><code>格式 [^test]\n\n[^test]: 测试\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n</blockquote>\n<h1 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h1>\n<h2 id=\"无序列表\"><a class=\"anchor\" href=\"#无序列表\">#</a> 无序列表</h2>\n<pre><code>* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<h2 id=\"有序列表\"><a class=\"anchor\" href=\"#有序列表\">#</a> 有序列表</h2>\n<pre><code>1. 第一项\n2. 第二项\n3. 第三项\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n</blockquote>\n<h2 id=\"嵌套列表\"><a class=\"anchor\" href=\"#嵌套列表\">#</a> 嵌套列表</h2>\n<pre><code>1. 第一项：\n    - 嵌套第一项\n    - 嵌套第二项\n2. 第二项：\n    - 嵌套第一项\n    - 嵌套第二个项\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<ol>\n<li>第一项：\n<ul>\n<li>嵌套第一项</li>\n<li>嵌套第二项</li>\n</ul>\n</li>\n<li>第二项：\n<ul>\n<li>嵌套第一项</li>\n<li>嵌套第二个项</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"区块\"><a class=\"anchor\" href=\"#区块\">#</a> 区块</h1>\n<pre><code>&gt; 最外层\n&gt; &gt; 第一层嵌套\n&gt; &gt; &gt; 第二层嵌套\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<p>用 ``` 包裹一段代码，并指定一种语言（也可以不指定）</p>\n<pre><code>​```java\nSystem.out.println(&quot;HelloWorld&quot;);\n​```\n</code></pre>\n<p>显示结果</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h1>\n<p>使用方法</p>\n<pre><code>[链接名称](链接地址)\n&lt;链接地址&gt;\n</code></pre>\n<p>例子一</p>\n<pre><code>百度连接 [百度](https://www.baidu.com)\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p>百度连接 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFpZHUuY29t\">百度</span></p>\n</blockquote>\n<p>例子二</p>\n<pre><code>&lt;https://www.baidu.com&gt;\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFpZHUuY29t\">https://www.baidu.com</span></p>\n</blockquote>\n<h1 id=\"图片\"><a class=\"anchor\" href=\"#图片\">#</a> 图片</h1>\n<p>用法</p>\n<pre><code>无法指定长度和宽度\n![alt 属性文本](图片地址)\n![alt 属性文本](图片地址 &quot;可选标题&quot;)\n使用普通的&lt;img&gt;标签指定长度和宽度\n</code></pre>\n<p>例子</p>\n<blockquote>\n<p>&lt;img src=&quot;..\\qiyin\\img\\cat.jpg&quot; alt=&quot;timg&quot; style=&quot;zoom:10%;&quot; /&gt;</p>\n</blockquote>\n<h1 id=\"表格\"><a class=\"anchor\" href=\"#表格\">#</a> 表格</h1>\n<h2 id=\"标准样式\"><a class=\"anchor\" href=\"#标准样式\">#</a> 标准样式</h2>\n<pre><code>|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n</code></pre>\n<p>显示结果</p>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"对齐方式\"><a class=\"anchor\" href=\"#对齐方式\">#</a> 对齐方式</h2>\n<p><strong>我们可以设置表格的对齐方式：</strong></p>\n<ul>\n<li><strong>-:</strong> 设置内容和标题栏居右对齐。</li>\n<li><strong>:-</strong> 设置内容和标题栏居左对齐。</li>\n<li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li>\n</ul>\n<pre><code>| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n</code></pre>\n<p>显示结果</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n</tbody>\n</table>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>测试 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","site":{"data":{}},"length":1147,"excerpt":"","more":"<h1 id=\"标题\"><a class=\"anchor\" href=\"#标题\">#</a> 标题</h1>\n<p>使用 # 号标记</p>\n<pre><code># 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n</code></pre>\n<h1 id=\"段落\"><a class=\"anchor\" href=\"#段落\">#</a> 段落</h1>\n<h2 id=\"字体\"><a class=\"anchor\" href=\"#字体\">#</a> 字体</h2>\n<pre><code>*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p><em>斜体文本</em><br />\n<strong>粗体文本</strong><br />\n<em><strong>粗斜体文本</strong></em></p>\n</blockquote>\n<h2 id=\"分割线\"><a class=\"anchor\" href=\"#分割线\">#</a> 分割线</h2>\n<pre><code>***\n* * *\n*****\n- - -\n----------\n</code></pre>\n<p>显示结果</p>\n<hr />\n<h2 id=\"删除线\"><a class=\"anchor\" href=\"#删除线\">#</a> 删除线</h2>\n<pre><code>删除线\n~~删除线~~\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p><s>删除线</s></p>\n</blockquote>\n<h2 id=\"下划线\"><a class=\"anchor\" href=\"#下划线\">#</a> 下划线</h2>\n<pre><code>&lt;u&gt;带下划线文本&lt;/u&gt;\n</code></pre>\n<blockquote>\n<p>&lt;u&gt; 下划线文本 &lt;/u&gt;</p>\n</blockquote>\n<h2 id=\"脚注\"><a class=\"anchor\" href=\"#脚注\">#</a> 脚注</h2>\n<pre><code>格式 [^test]\n\n[^test]: 测试\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n</blockquote>\n<h1 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h1>\n<h2 id=\"无序列表\"><a class=\"anchor\" href=\"#无序列表\">#</a> 无序列表</h2>\n<pre><code>* 第一项\n* 第二项\n* 第三项\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n\n- 第一项\n- 第二项\n- 第三项\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<h2 id=\"有序列表\"><a class=\"anchor\" href=\"#有序列表\">#</a> 有序列表</h2>\n<pre><code>1. 第一项\n2. 第二项\n3. 第三项\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n</blockquote>\n<h2 id=\"嵌套列表\"><a class=\"anchor\" href=\"#嵌套列表\">#</a> 嵌套列表</h2>\n<pre><code>1. 第一项：\n    - 嵌套第一项\n    - 嵌套第二项\n2. 第二项：\n    - 嵌套第一项\n    - 嵌套第二个项\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<ol>\n<li>第一项：\n<ul>\n<li>嵌套第一项</li>\n<li>嵌套第二项</li>\n</ul>\n</li>\n<li>第二项：\n<ul>\n<li>嵌套第一项</li>\n<li>嵌套第二个项</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h1 id=\"区块\"><a class=\"anchor\" href=\"#区块\">#</a> 区块</h1>\n<pre><code>&gt; 最外层\n&gt; &gt; 第一层嵌套\n&gt; &gt; &gt; 第二层嵌套\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p>最外层</p>\n<blockquote>\n<p>第一层嵌套</p>\n<blockquote>\n<p>第二层嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<p>用 ``` 包裹一段代码，并指定一种语言（也可以不指定）</p>\n<pre><code>​```java\nSystem.out.println(&quot;HelloWorld&quot;);\n​```\n</code></pre>\n<p>显示结果</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"链接\"><a class=\"anchor\" href=\"#链接\">#</a> 链接</h1>\n<p>使用方法</p>\n<pre><code>[链接名称](链接地址)\n&lt;链接地址&gt;\n</code></pre>\n<p>例子一</p>\n<pre><code>百度连接 [百度](https://www.baidu.com)\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p>百度连接 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFpZHUuY29t\">百度</span></p>\n</blockquote>\n<p>例子二</p>\n<pre><code>&lt;https://www.baidu.com&gt;\n</code></pre>\n<p>显示结果</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFpZHUuY29t\">https://www.baidu.com</span></p>\n</blockquote>\n<h1 id=\"图片\"><a class=\"anchor\" href=\"#图片\">#</a> 图片</h1>\n<p>用法</p>\n<pre><code>无法指定长度和宽度\n![alt 属性文本](图片地址)\n![alt 属性文本](图片地址 &quot;可选标题&quot;)\n使用普通的&lt;img&gt;标签指定长度和宽度\n</code></pre>\n<p>例子</p>\n<blockquote>\n<p>&lt;img src=&quot;..\\qiyin\\img\\cat.jpg&quot; alt=&quot;timg&quot; style=&quot;zoom:10%;&quot; /&gt;</p>\n</blockquote>\n<h1 id=\"表格\"><a class=\"anchor\" href=\"#表格\">#</a> 表格</h1>\n<h2 id=\"标准样式\"><a class=\"anchor\" href=\"#标准样式\">#</a> 标准样式</h2>\n<pre><code>|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n</code></pre>\n<p>显示结果</p>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"对齐方式\"><a class=\"anchor\" href=\"#对齐方式\">#</a> 对齐方式</h2>\n<p><strong>我们可以设置表格的对齐方式：</strong></p>\n<ul>\n<li><strong>-:</strong> 设置内容和标题栏居右对齐。</li>\n<li><strong>:-</strong> 设置内容和标题栏居左对齐。</li>\n<li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li>\n</ul>\n<pre><code>| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n</code></pre>\n<p>显示结果</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">左对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单元格</td>\n<td style=\"text-align:right\">单元格</td>\n<td style=\"text-align:center\">单元格</td>\n</tr>\n</tbody>\n</table>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>测试 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n"},{"title":"MongoDB","date":"2020-12-22T16:00:00.000Z","_content":"\n# 简介\n\n* Mongodb 文档数据库，存储的是文档(Bson>json的二进制化)\n\n> 特点：内部执行引擎为JS解释器，把文档存储成bson结构，在查询时，转化为就、JS对象，并可以通过熟悉的JS语法来操作\n\n* Mongodb和传统数据库相比最大的不同\n\n> 传统型数据库：结构化数据，定好了表结构后，每一行的内容必是符合表结构的，就是说-列的个数，类型都一样\n>\n> Mongodb文档型数据库：表下的每篇文档都可以有自己独特的结构(json对象都可以有自己独特的属性和值)\n\n* 下载地址\n\n> [**https://www.mongodb.com/download-center/community**](https://www.mongodb.com/download-center/community)\n\n# Linux安装mongodb\n\n1. 下载\n\n> wget  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-4.4.1.tgz \n\n2. 解压\n\n> tar -zxvf mongodb-linux-x86_64-rhel80-4.4.1.tgz\n\n3. 将解压包拷贝至指定目录\n\n> mv mongodb-linux-x86_64-rhel80-4.4.1 /usr/local/mongodb\n\n4. 创建数据存放目录与日志存放目录\n\n> mkdir -p /usr/local/mongodb/data /usr/local/mongodb/logs\n\n5. 启动mongodb服务\n\n> /usr/local/mongodb/bin/mongod –dbpath=/usr/local/mongodb/data –logpath=/usr/local/mongodb/logs/mongodb.log –logappend –port=27017 --fork\n\n6. 登录\n\n> /usr/local/mongodb/bin/mongo\n\n# 基本操作\n\n## 通用操作\n\n1. 查看数据库\n\n> Show databases\n\n2. 选择数据库\n\n> Use 数据库名\n>\n> 隐式创建：在mongodb选择不存在的数据库不会报错，后期当该数据库有数据时，系统会自动创建\n\n3. 查看集合\n\n> Show collections\n\n4. 创建集合\n\n> db.createCollection(‘集合名’)\n\n5. 删除集合\n\n> db.集合名.drop()\n\n## C增\n\n> db.集合名.insert(JSON数据)\n>\n> 集合存在-则直接插入数据，集合不存在-隐式创建，创建时会有默认id，如需自定义，给插入的JSON数据增加_id键即可覆盖\n\n增加多条数据\n\n> (JSON数据)变为([JSON数据，JSON数据]）\n\n快速插入多条数据\n\n> 由于mongodb底层是JS引擎，所以支持部分JS语法\n>\n>  for(var i = 1; i < n; i++){\n>\n> ​\tdb.集合名.insert({name:\"a\"+i,age:i})\n>\n> }\n\n## R查\n\n1. 查询全部数据\n\n> Db.集合名.find()\n\n2. 只看name列\n\n> db.集合名.find({},{name:1})\n\n3. 除了name列\n\n> db.集合名.find({},{name:0})\n>\n> 第一个{}不填表示查询所有\n\n4. 查询固定数据\n\n> db.集合名.find({name:\"张三\"})\n\n5. 查询年龄大于5岁的数据\n\n> db.集合名.find({age:{$gt:5}})\n\n6. 查询5,8,10岁的数据\n\n> db.集合名.find({age:{$in:[5,8,10]}})\n\n7. 运算符\n\n> $gt：大于\n>\n> $gte：大于等于\n>\n> $lt：小于\n>\n> $lte：小于等于\n>\n> $ne：不等于\n>\n> $in：in\n>\n> $nin：not in\n\n## U改\n\n> Db.集合名.update(条件，新数据，[是否新增，是否修改多条])\n\n* 是否新增\n\n> 指条件匹配不到数据则插入(true是插入，false否不插入默认)\n\n* 是否修改多条\n\n> 指将匹配成功的数据都修改(true是，false否默认)\n\n* 修改张三的数据\n\n> db.集合名.update({name:\"zs1\"},{$set:{name:\"zs2\"}})，不加set默认是替换而不是修改\n\n* 将张三的年龄加1\n\n> db.集合名.update({name:\"zs1\"},{$inc:{age:1}})\n\n* 修改器\n\n> $set：修改列值\n>\n> $inc：递增\n>\n> $rename：重命名列\n>\n> $unset：删除列\n\n## D删\n\n> db.集合名.remove({},[是否删除一条])\n>\n> ture：删除一条，默认false：全删除\n\n# 拓展操作\n\n1. 格式化数据pretty()\n\n> db.集合名.find().pretty()\n\n2. 排序\n\n> db.集合名.find().sort(JSON数据)\n>\n> 键-就是要排序的字段的列/字段、值：1升序   -1降序\n\n3. 分页\n\n> db.集合名.find().skip(数字).limit(数字)\n>\n> skip跳过指定条数(可选)，limit限制查询的条数\n\n4. 总结\n\n> db.集合名.find()\n>\n> .pretty()格式化数据\n>\n> .sort({列:1/-1})排序\n>\n> .skip(数字)跳过指定条数\n>\n> .limit(数字)限制查询条数\n>\n> .count()统计总条数\n\n# 聚合查询\n\n```\nDb.集合名.aggregate([\n    {管道：{表达式}}\n    ……\n])\n```\n\n## 常用管道：\n\n* $group\n\n> 将集合中的文档进行分组，用于统计结果\n\n* $match\n\n> 过滤数据，只要输出符合条件的文档\n\n* $sort\n\n> 聚合数据进一步排序\n\n* $skip\n\n> 跳过指定文档数\n\n* $limit\n\n> 限制集合数据返回文档数\n\n## 常用表达式\n\n* $sum\n\n> 总和  $sum：1同count表示统计\n\n* $avg\n\n> 平均\n\n* $min\n\n> 最小值\n\n* $max\n\n> 最大值\n\n## 例子\n\n1. 统计男生女生的总年龄：\n\n```\ndb.集合名.aggregate([\n    {\n        $group:{\n            _id:\"$sex\".\n            result:{$sum:\"$age\"}\n    \t}\n    }\n])\n```\n\n2. 统计男生女生的总人数\n\n```\ndb.集合名.aggregate([\n    {\n        $group:{\n            _id:\"$sex\",\n            num:{$sum:1}\n        }\n    }\n])\n```\n\n3. 求学生总数和平均年龄\n\n```\ndb.集合名.aggregate([\n    {\n        $group:{\n            _id:null,\n            Total_num:{$sum:1},\n            Avg_age:{$avg:\"age\"}\n        }\n    }\n])\n```\n\n3. 查询男生女生人数，按人数排序\n\n\n```\ndb.集合名.aggregate([\n    {\n        $group:{\n            _id:\"$sex\",\n            num:{$sum:1}\n        }\n    },\n    {\n        $sort:{\n            num:1//升序\n        }\n    }\n])\n```\n\n#  索引\n\n## 创建索引\n\n> Db.集合名.createIndex(待创建索引的列，[额外选项])\n>\n> 待创建索引的列：{键：1，…，键：-1}\n>\n> 说明：1升序-1降序      例：{age：1}表示创建age索引并按照升序的方式存储\n>\n> 额外选项：设置索引的名称或唯一索引\n\n## 删除索引\n\n* 全部删除\n\n> db.集合名.dropIndexes()\n\n* 删除指定\n\n> db.集合名.dropIndex(索引名)\n\n## 查看索引\n\n> Db.集合名.getIndexes()\n>\n> 显示出来的key：给哪个列设置了索引\n>\n> 显示出来的name：表示索引名称，默认系统生成，也可以自定义\n\n## 给索引取名\n\n> Db.集合名.createIndex({“键\"：“值\"}，{键：“名称\"})\n\n## 添加唯一索引\n\n> Db.集合名.createIndex({“键\"：“值\"}，{unique：“键\"})\n\n## 分析索引\n\n> Db.集合名.find().explain(“executionStats\")\n\n# 权限机制\n\n## 创建账号\n\n   ```\nUse admin\ndb.createUser({\n    \"user\":\"admin\",\n    \"pwd\":\"admin\",\n    \"roles\":[{\n        role:\"root\",\n        db:\"admin\"\n    }]\n}) \n\n   ```\n\n## 角色\n\n* 角色种类\n\n> 超级用户角色：root\n>\n> 数据库用户角色：read、readwrite；\n>\n> 数据库管理角色：dbAdmin、userAdmin；\n>\n> 集群管理角色：clusterAdmin、clusterManager、ClusterMonitor、hostManager；\n>\n> 备份恢复角色：backup、restore；\n>\n> 所有数据库角色：readAnyDatabase、readWriterAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase；\n\n* 角色说明\n\n> root：只在admin数据库中可用。超级账号、超级权限；\n>\n> read：允许用户读取指定数据库；\n>\n> readWriter：允许用户读写指定数据库\n\n## 开启验证模式\n\n### 概念\n\n> 指用户需要输入账号密码才能登录使用\n\n### 操作步骤\n\n1. 添加超级管理员\n\n```sql\nUse admin\ndb.createUser({\n    \"user\":\"admin\",\n    \"pwd\":\"admin\",\n    \"roles\":[{\n        role:\"root\",\n        db:\"admin\"\n    }]\n}) \n```\n\n2. 退出卸载服务\n\n> Linux：mongod --shutdown\n>\n> Window：Mongod --remove\n\n3. 重新安装需要输入账号密码的服务(注：在原安装命令基础上加上—auth即可)\n\n> Linux：bin目录下\n>\n> ./mongod --dbpath=/usr/local/mongodb/data --logpath= /usr/local/mongodb/logs/mongodb.log --auth --logappend --port=27017 –fork\n>\n> Window：bin目录下\n>\n> mongod --install --dbpath (data路径) --logpath (log路径) –auth\n\n4. 启动服务->登录测试\n\n> Linux：bin目录下./mongo\n>\n> Windows：net start mongodb再输入mongo启动\n>\n> 直接启动show dbs看不到任何东西\n>\n> 方法1：mongo服务ip地址：端口号/数据库 -u 用户名 -p密码\n>\n> 方法2：先登录，选择数据库，输入db.auth(用户名，密码)\n\n### 例子\n\n> 添加用户shop1可以读shop数据库\n>\n> 添加用户shop2可以读写shop数据库\n>\n> 注意：必须在对应数据库创建用户\n\n1. 准备测试数据\n\n```\nuse shop\nfor(var i = 1 ;i <= 10;i++){\n\tdb.goods.insert({\n        \"name\":\"goodsName\"+i,\n        \"price\":i\n\t})\n}\n```\n\n2. 查看添加的数据\n\n>db.goods.find()\n\n3. 添加用户并设置权限\n\n```\nuse shop\ndb.createUser({\n    \"user\":\"shop1\",\n    \"pwd\":\"shop1\",\n    \"roles\":[{\n    \trole:\"read\",\n    \tdb:\"shop\"\n    }]\n})\ndb.createUser({\n    \"user\":\"shop2\",\n    \"pwd\":\"shop2\",\n    \"roles\":[{\n    \trole:\"readWrite\",\n    \tdb:\"shop\"\n    }]\n})\n```\n\n4. 查看添加的用户\n\n>use admin\n>\n>db.system.users.find().pretty()\n\n5. 登入shop1账号\n\n> mongo localhost:27017/shop -u shop1 -p shop1\n\n6. 查看数据\n\n> db.goods.find()\n\n7. 尝试插入数据（会报错就对了）\n\n```\ndb.goods.insert({\n\t\"name\":\"goodsName11\",\n\t\"price\":11\n})\n```\n\n8. 登入shop2账号\n\n> mongo localhost:27017/shop -u shop2 -p shop2\n\n9. 查看数据\n\n> db.goods.find()\n\n10. 尝试插入数据（插入成功）\n\n```\ndb.goods.insert({\n\t\"name\":\"goodsName11\",\n\t\"price\":11\n})\n```\n\n# 备份还原\n\n> 备份与还原都在bin目录下执行命令\n\n## 备份语法\n\n> mongodump -h -port -u -p -d -o\n>\n> -h：host 服务器IP地址(一般不写，默认本机)\n>\n> -port：   端口(一般不写，默认27017)\n>\n> -u：user  账号\n>\n> -p：pwd  密码\n>\n> -d：databse 数据库(数据库不写则导出全部)\n>\n> -o：open 备份到指定目录下\n\n## 例子\n\n* 备份所有数据\n\n> mongodump -u admin -p admin -o 备份目录\n\n* 备份指定数据\n\n> mongodump -u shop1 -p shop1 -d shop -o 备份目录\n\n## 还原语法\n\n> mongorestore -h -port -u -p -d --drop 备份数据目录\n>\n> -d 不写则还原全部数据\n>\n> --drop 先删除数据库再导入\n\n## 例子\n\n* 还原所有数据\n\n> 先删除两个数据库\n>\n> use test1，db.dropDatabse()，use test2()，db.dropDatabase()\n>\n> 查看剩下的数据库show dbs\n>\n> 还原数据mongorestore -u admin -p admin --drop\n>\n> 备份数据目录，重新登录查看效果\n\n* 还原指定数据\n\n> mongorestore -u shop2 -p shop2 -d shop –drop 备份目录\n\n# Java连接mongodb\n\n1. 查看mongodb占用的端口\n\n> ps -ef | grep mongodb\n\n2. 关掉mongodb\n\n> kill -9 端口\n\n3. 开启mongodb服务\n\n> 传教mongo-start.sh文件并编辑\n>\n> ./mongod --dbpath=/usr/local/mongodb/data --logpath= /usr/local/mongodb/logs/mongodb.log --auth --logappend --port=27017 --bind_ip=0.0.0.0(设置为所有人可访问) --fork\n>\n> 将该文件设置为可执行文件,chmod +x mongo-start.sh\n>\n> 执行./mongo-start开启服务\n\n4. 在java端连接测试\n\n* 导入pom依赖\n\n```xml\n<dependency>\n    <groupId>org.mongodb</groupId>\n    <artifactId>mongodb-driver</artifactId>\n    <version>3.8.2</version>\n</dependency>\n```\n\n* 未设置账号密码\n\n```java\n//创建连接\nMongoClient client = new MongoClient(IP地址);\n\n//获取操作的数据库\nMongoDatabase test1 = client.getDatabase(数据库名);\n\n//获取集合\nMongoCollection<Document> collection = test1.getCollection(集合名);\n\n//获取文档的内容\nFindIterable<Document> documents = collection.find();\n\nfor (Document document : documents){\n    System.out.println(document.get(字段));\n}\nclient.close();\n```\n\n* 设置账号密码\n\n```java\n//设置服务器地址和端口号\nServerAddress serverAddress = new ServerAddress(IP地址, 端口号);\n\n//设置用户名、数据库名称、密码\nMongoCredential credential = MongoCredential.createCredential(\"admin\", \"admin\", \"admin\".toCharArray());\n\n//通过连接认证获取连接\nMongoClientOptions build = MongoClientOptions.builder().build();\n\nMongoClient client = new MongoClient(serverAddress, credential, build);\n\n//获取操作的数据库\nMongoDatabase test1 = client.getDatabase(数据库名);\n\n//获取集合\nMongoCollection<Document> collection = test1.getCollection(集合名);\n\n//获取文档的内容\nFindIterable<Document> documents = collection.find();\n\nfor (Document document : documents){\n    System.out.println(document.get(字段));\n}\nclient.close();\n```\n\n# SpringBoot连接MongoDB\n\n## application.yml\n\n* 不带密码\n\n```yml\nspring:\n  data:\n    mongodb:\n      database: 数据库\n      host: IP地址\n```\n\n* 密码访问\n\n```yml\nspring:\n  data:\n    mongodb:\n      database: 数据库\n      host: IP地址\n      username: 用户名\n      password: 密码\n      authentication-database: 用户名绑定的数据库(admin)\n```","source":"_posts/computer/course-1/MongoDB.md","raw":"---\ntitle: MongoDB\ndate: 2020/12/23\ncategories:\n\t- [计算机,框架]\ntags:\n\t- MongoDB\n---\n\n# 简介\n\n* Mongodb 文档数据库，存储的是文档(Bson>json的二进制化)\n\n> 特点：内部执行引擎为JS解释器，把文档存储成bson结构，在查询时，转化为就、JS对象，并可以通过熟悉的JS语法来操作\n\n* Mongodb和传统数据库相比最大的不同\n\n> 传统型数据库：结构化数据，定好了表结构后，每一行的内容必是符合表结构的，就是说-列的个数，类型都一样\n>\n> Mongodb文档型数据库：表下的每篇文档都可以有自己独特的结构(json对象都可以有自己独特的属性和值)\n\n* 下载地址\n\n> [**https://www.mongodb.com/download-center/community**](https://www.mongodb.com/download-center/community)\n\n# Linux安装mongodb\n\n1. 下载\n\n> wget  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-4.4.1.tgz \n\n2. 解压\n\n> tar -zxvf mongodb-linux-x86_64-rhel80-4.4.1.tgz\n\n3. 将解压包拷贝至指定目录\n\n> mv mongodb-linux-x86_64-rhel80-4.4.1 /usr/local/mongodb\n\n4. 创建数据存放目录与日志存放目录\n\n> mkdir -p /usr/local/mongodb/data /usr/local/mongodb/logs\n\n5. 启动mongodb服务\n\n> /usr/local/mongodb/bin/mongod –dbpath=/usr/local/mongodb/data –logpath=/usr/local/mongodb/logs/mongodb.log –logappend –port=27017 --fork\n\n6. 登录\n\n> /usr/local/mongodb/bin/mongo\n\n# 基本操作\n\n## 通用操作\n\n1. 查看数据库\n\n> Show databases\n\n2. 选择数据库\n\n> Use 数据库名\n>\n> 隐式创建：在mongodb选择不存在的数据库不会报错，后期当该数据库有数据时，系统会自动创建\n\n3. 查看集合\n\n> Show collections\n\n4. 创建集合\n\n> db.createCollection(‘集合名’)\n\n5. 删除集合\n\n> db.集合名.drop()\n\n## C增\n\n> db.集合名.insert(JSON数据)\n>\n> 集合存在-则直接插入数据，集合不存在-隐式创建，创建时会有默认id，如需自定义，给插入的JSON数据增加_id键即可覆盖\n\n增加多条数据\n\n> (JSON数据)变为([JSON数据，JSON数据]）\n\n快速插入多条数据\n\n> 由于mongodb底层是JS引擎，所以支持部分JS语法\n>\n>  for(var i = 1; i < n; i++){\n>\n> ​\tdb.集合名.insert({name:\"a\"+i,age:i})\n>\n> }\n\n## R查\n\n1. 查询全部数据\n\n> Db.集合名.find()\n\n2. 只看name列\n\n> db.集合名.find({},{name:1})\n\n3. 除了name列\n\n> db.集合名.find({},{name:0})\n>\n> 第一个{}不填表示查询所有\n\n4. 查询固定数据\n\n> db.集合名.find({name:\"张三\"})\n\n5. 查询年龄大于5岁的数据\n\n> db.集合名.find({age:{$gt:5}})\n\n6. 查询5,8,10岁的数据\n\n> db.集合名.find({age:{$in:[5,8,10]}})\n\n7. 运算符\n\n> $gt：大于\n>\n> $gte：大于等于\n>\n> $lt：小于\n>\n> $lte：小于等于\n>\n> $ne：不等于\n>\n> $in：in\n>\n> $nin：not in\n\n## U改\n\n> Db.集合名.update(条件，新数据，[是否新增，是否修改多条])\n\n* 是否新增\n\n> 指条件匹配不到数据则插入(true是插入，false否不插入默认)\n\n* 是否修改多条\n\n> 指将匹配成功的数据都修改(true是，false否默认)\n\n* 修改张三的数据\n\n> db.集合名.update({name:\"zs1\"},{$set:{name:\"zs2\"}})，不加set默认是替换而不是修改\n\n* 将张三的年龄加1\n\n> db.集合名.update({name:\"zs1\"},{$inc:{age:1}})\n\n* 修改器\n\n> $set：修改列值\n>\n> $inc：递增\n>\n> $rename：重命名列\n>\n> $unset：删除列\n\n## D删\n\n> db.集合名.remove({},[是否删除一条])\n>\n> ture：删除一条，默认false：全删除\n\n# 拓展操作\n\n1. 格式化数据pretty()\n\n> db.集合名.find().pretty()\n\n2. 排序\n\n> db.集合名.find().sort(JSON数据)\n>\n> 键-就是要排序的字段的列/字段、值：1升序   -1降序\n\n3. 分页\n\n> db.集合名.find().skip(数字).limit(数字)\n>\n> skip跳过指定条数(可选)，limit限制查询的条数\n\n4. 总结\n\n> db.集合名.find()\n>\n> .pretty()格式化数据\n>\n> .sort({列:1/-1})排序\n>\n> .skip(数字)跳过指定条数\n>\n> .limit(数字)限制查询条数\n>\n> .count()统计总条数\n\n# 聚合查询\n\n```\nDb.集合名.aggregate([\n    {管道：{表达式}}\n    ……\n])\n```\n\n## 常用管道：\n\n* $group\n\n> 将集合中的文档进行分组，用于统计结果\n\n* $match\n\n> 过滤数据，只要输出符合条件的文档\n\n* $sort\n\n> 聚合数据进一步排序\n\n* $skip\n\n> 跳过指定文档数\n\n* $limit\n\n> 限制集合数据返回文档数\n\n## 常用表达式\n\n* $sum\n\n> 总和  $sum：1同count表示统计\n\n* $avg\n\n> 平均\n\n* $min\n\n> 最小值\n\n* $max\n\n> 最大值\n\n## 例子\n\n1. 统计男生女生的总年龄：\n\n```\ndb.集合名.aggregate([\n    {\n        $group:{\n            _id:\"$sex\".\n            result:{$sum:\"$age\"}\n    \t}\n    }\n])\n```\n\n2. 统计男生女生的总人数\n\n```\ndb.集合名.aggregate([\n    {\n        $group:{\n            _id:\"$sex\",\n            num:{$sum:1}\n        }\n    }\n])\n```\n\n3. 求学生总数和平均年龄\n\n```\ndb.集合名.aggregate([\n    {\n        $group:{\n            _id:null,\n            Total_num:{$sum:1},\n            Avg_age:{$avg:\"age\"}\n        }\n    }\n])\n```\n\n3. 查询男生女生人数，按人数排序\n\n\n```\ndb.集合名.aggregate([\n    {\n        $group:{\n            _id:\"$sex\",\n            num:{$sum:1}\n        }\n    },\n    {\n        $sort:{\n            num:1//升序\n        }\n    }\n])\n```\n\n#  索引\n\n## 创建索引\n\n> Db.集合名.createIndex(待创建索引的列，[额外选项])\n>\n> 待创建索引的列：{键：1，…，键：-1}\n>\n> 说明：1升序-1降序      例：{age：1}表示创建age索引并按照升序的方式存储\n>\n> 额外选项：设置索引的名称或唯一索引\n\n## 删除索引\n\n* 全部删除\n\n> db.集合名.dropIndexes()\n\n* 删除指定\n\n> db.集合名.dropIndex(索引名)\n\n## 查看索引\n\n> Db.集合名.getIndexes()\n>\n> 显示出来的key：给哪个列设置了索引\n>\n> 显示出来的name：表示索引名称，默认系统生成，也可以自定义\n\n## 给索引取名\n\n> Db.集合名.createIndex({“键\"：“值\"}，{键：“名称\"})\n\n## 添加唯一索引\n\n> Db.集合名.createIndex({“键\"：“值\"}，{unique：“键\"})\n\n## 分析索引\n\n> Db.集合名.find().explain(“executionStats\")\n\n# 权限机制\n\n## 创建账号\n\n   ```\nUse admin\ndb.createUser({\n    \"user\":\"admin\",\n    \"pwd\":\"admin\",\n    \"roles\":[{\n        role:\"root\",\n        db:\"admin\"\n    }]\n}) \n\n   ```\n\n## 角色\n\n* 角色种类\n\n> 超级用户角色：root\n>\n> 数据库用户角色：read、readwrite；\n>\n> 数据库管理角色：dbAdmin、userAdmin；\n>\n> 集群管理角色：clusterAdmin、clusterManager、ClusterMonitor、hostManager；\n>\n> 备份恢复角色：backup、restore；\n>\n> 所有数据库角色：readAnyDatabase、readWriterAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase；\n\n* 角色说明\n\n> root：只在admin数据库中可用。超级账号、超级权限；\n>\n> read：允许用户读取指定数据库；\n>\n> readWriter：允许用户读写指定数据库\n\n## 开启验证模式\n\n### 概念\n\n> 指用户需要输入账号密码才能登录使用\n\n### 操作步骤\n\n1. 添加超级管理员\n\n```sql\nUse admin\ndb.createUser({\n    \"user\":\"admin\",\n    \"pwd\":\"admin\",\n    \"roles\":[{\n        role:\"root\",\n        db:\"admin\"\n    }]\n}) \n```\n\n2. 退出卸载服务\n\n> Linux：mongod --shutdown\n>\n> Window：Mongod --remove\n\n3. 重新安装需要输入账号密码的服务(注：在原安装命令基础上加上—auth即可)\n\n> Linux：bin目录下\n>\n> ./mongod --dbpath=/usr/local/mongodb/data --logpath= /usr/local/mongodb/logs/mongodb.log --auth --logappend --port=27017 –fork\n>\n> Window：bin目录下\n>\n> mongod --install --dbpath (data路径) --logpath (log路径) –auth\n\n4. 启动服务->登录测试\n\n> Linux：bin目录下./mongo\n>\n> Windows：net start mongodb再输入mongo启动\n>\n> 直接启动show dbs看不到任何东西\n>\n> 方法1：mongo服务ip地址：端口号/数据库 -u 用户名 -p密码\n>\n> 方法2：先登录，选择数据库，输入db.auth(用户名，密码)\n\n### 例子\n\n> 添加用户shop1可以读shop数据库\n>\n> 添加用户shop2可以读写shop数据库\n>\n> 注意：必须在对应数据库创建用户\n\n1. 准备测试数据\n\n```\nuse shop\nfor(var i = 1 ;i <= 10;i++){\n\tdb.goods.insert({\n        \"name\":\"goodsName\"+i,\n        \"price\":i\n\t})\n}\n```\n\n2. 查看添加的数据\n\n>db.goods.find()\n\n3. 添加用户并设置权限\n\n```\nuse shop\ndb.createUser({\n    \"user\":\"shop1\",\n    \"pwd\":\"shop1\",\n    \"roles\":[{\n    \trole:\"read\",\n    \tdb:\"shop\"\n    }]\n})\ndb.createUser({\n    \"user\":\"shop2\",\n    \"pwd\":\"shop2\",\n    \"roles\":[{\n    \trole:\"readWrite\",\n    \tdb:\"shop\"\n    }]\n})\n```\n\n4. 查看添加的用户\n\n>use admin\n>\n>db.system.users.find().pretty()\n\n5. 登入shop1账号\n\n> mongo localhost:27017/shop -u shop1 -p shop1\n\n6. 查看数据\n\n> db.goods.find()\n\n7. 尝试插入数据（会报错就对了）\n\n```\ndb.goods.insert({\n\t\"name\":\"goodsName11\",\n\t\"price\":11\n})\n```\n\n8. 登入shop2账号\n\n> mongo localhost:27017/shop -u shop2 -p shop2\n\n9. 查看数据\n\n> db.goods.find()\n\n10. 尝试插入数据（插入成功）\n\n```\ndb.goods.insert({\n\t\"name\":\"goodsName11\",\n\t\"price\":11\n})\n```\n\n# 备份还原\n\n> 备份与还原都在bin目录下执行命令\n\n## 备份语法\n\n> mongodump -h -port -u -p -d -o\n>\n> -h：host 服务器IP地址(一般不写，默认本机)\n>\n> -port：   端口(一般不写，默认27017)\n>\n> -u：user  账号\n>\n> -p：pwd  密码\n>\n> -d：databse 数据库(数据库不写则导出全部)\n>\n> -o：open 备份到指定目录下\n\n## 例子\n\n* 备份所有数据\n\n> mongodump -u admin -p admin -o 备份目录\n\n* 备份指定数据\n\n> mongodump -u shop1 -p shop1 -d shop -o 备份目录\n\n## 还原语法\n\n> mongorestore -h -port -u -p -d --drop 备份数据目录\n>\n> -d 不写则还原全部数据\n>\n> --drop 先删除数据库再导入\n\n## 例子\n\n* 还原所有数据\n\n> 先删除两个数据库\n>\n> use test1，db.dropDatabse()，use test2()，db.dropDatabase()\n>\n> 查看剩下的数据库show dbs\n>\n> 还原数据mongorestore -u admin -p admin --drop\n>\n> 备份数据目录，重新登录查看效果\n\n* 还原指定数据\n\n> mongorestore -u shop2 -p shop2 -d shop –drop 备份目录\n\n# Java连接mongodb\n\n1. 查看mongodb占用的端口\n\n> ps -ef | grep mongodb\n\n2. 关掉mongodb\n\n> kill -9 端口\n\n3. 开启mongodb服务\n\n> 传教mongo-start.sh文件并编辑\n>\n> ./mongod --dbpath=/usr/local/mongodb/data --logpath= /usr/local/mongodb/logs/mongodb.log --auth --logappend --port=27017 --bind_ip=0.0.0.0(设置为所有人可访问) --fork\n>\n> 将该文件设置为可执行文件,chmod +x mongo-start.sh\n>\n> 执行./mongo-start开启服务\n\n4. 在java端连接测试\n\n* 导入pom依赖\n\n```xml\n<dependency>\n    <groupId>org.mongodb</groupId>\n    <artifactId>mongodb-driver</artifactId>\n    <version>3.8.2</version>\n</dependency>\n```\n\n* 未设置账号密码\n\n```java\n//创建连接\nMongoClient client = new MongoClient(IP地址);\n\n//获取操作的数据库\nMongoDatabase test1 = client.getDatabase(数据库名);\n\n//获取集合\nMongoCollection<Document> collection = test1.getCollection(集合名);\n\n//获取文档的内容\nFindIterable<Document> documents = collection.find();\n\nfor (Document document : documents){\n    System.out.println(document.get(字段));\n}\nclient.close();\n```\n\n* 设置账号密码\n\n```java\n//设置服务器地址和端口号\nServerAddress serverAddress = new ServerAddress(IP地址, 端口号);\n\n//设置用户名、数据库名称、密码\nMongoCredential credential = MongoCredential.createCredential(\"admin\", \"admin\", \"admin\".toCharArray());\n\n//通过连接认证获取连接\nMongoClientOptions build = MongoClientOptions.builder().build();\n\nMongoClient client = new MongoClient(serverAddress, credential, build);\n\n//获取操作的数据库\nMongoDatabase test1 = client.getDatabase(数据库名);\n\n//获取集合\nMongoCollection<Document> collection = test1.getCollection(集合名);\n\n//获取文档的内容\nFindIterable<Document> documents = collection.find();\n\nfor (Document document : documents){\n    System.out.println(document.get(字段));\n}\nclient.close();\n```\n\n# SpringBoot连接MongoDB\n\n## application.yml\n\n* 不带密码\n\n```yml\nspring:\n  data:\n    mongodb:\n      database: 数据库\n      host: IP地址\n```\n\n* 密码访问\n\n```yml\nspring:\n  data:\n    mongodb:\n      database: 数据库\n      host: IP地址\n      username: 用户名\n      password: 密码\n      authentication-database: 用户名绑定的数据库(admin)\n```","slug":"computer/course-1/MongoDB","published":1,"updated":"2020-12-25T07:29:38.914Z","_id":"ckj15eg6x000cb0ut7b168hop","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<ul>\n<li>Mongodb 文档数据库，存储的是文档 (Bson&gt;json 的二进制化)</li>\n</ul>\n<blockquote>\n<p>特点：内部执行引擎为 JS 解释器，把文档存储成 bson 结构，在查询时，转化为就、JS 对象，并可以通过熟悉的 JS 语法来操作</p>\n</blockquote>\n<ul>\n<li>Mongodb 和传统数据库相比最大的不同</li>\n</ul>\n<blockquote>\n<p>传统型数据库：结构化数据，定好了表结构后，每一行的内容必是符合表结构的，就是说 - 列的个数，类型都一样</p>\n<p>Mongodb 文档型数据库：表下的每篇文档都可以有自己独特的结构 (json 对象都可以有自己独特的属性和值)</p>\n</blockquote>\n<ul>\n<li>下载地址</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.mongodb.com/download-center/community\"><strong>https://www.mongodb.com/download-center/community</strong></a></p>\n</blockquote>\n<h1 id=\"linux安装mongodb\"><a class=\"anchor\" href=\"#linux安装mongodb\">#</a> Linux 安装 mongodb</h1>\n<ol>\n<li>下载</li>\n</ol>\n<blockquote>\n<p>wget  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mYXN0ZGwubW9uZ29kYi5vcmcvbGludXgvbW9uZ29kYi1saW51eC14ODZfNjQtcmhlbDgwLTQuNC4xLnRneg==\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-4.4.1.tgz</span></p>\n</blockquote>\n<ol start=\"2\">\n<li>解压</li>\n</ol>\n<blockquote>\n<p>tar -zxvf mongodb-linux-x86_64-rhel80-4.4.1.tgz</p>\n</blockquote>\n<ol start=\"3\">\n<li>将解压包拷贝至指定目录</li>\n</ol>\n<blockquote>\n<p>mv mongodb-linux-x86_64-rhel80-4.4.1 /usr/local/mongodb</p>\n</blockquote>\n<ol start=\"4\">\n<li>创建数据存放目录与日志存放目录</li>\n</ol>\n<blockquote>\n<p>mkdir -p /usr/local/mongodb/data /usr/local/mongodb/logs</p>\n</blockquote>\n<ol start=\"5\">\n<li>启动 mongodb 服务</li>\n</ol>\n<blockquote>\n<p>/usr/local/mongodb/bin/mongod –dbpath=/usr/local/mongodb/data –logpath=/usr/local/mongodb/logs/mongodb.log –logappend –port=27017 --fork</p>\n</blockquote>\n<ol start=\"6\">\n<li>登录</li>\n</ol>\n<blockquote>\n<p>/usr/local/mongodb/bin/mongo</p>\n</blockquote>\n<h1 id=\"基本操作\"><a class=\"anchor\" href=\"#基本操作\">#</a> 基本操作</h1>\n<h2 id=\"通用操作\"><a class=\"anchor\" href=\"#通用操作\">#</a> 通用操作</h2>\n<ol>\n<li>查看数据库</li>\n</ol>\n<blockquote>\n<p>Show databases</p>\n</blockquote>\n<ol start=\"2\">\n<li>选择数据库</li>\n</ol>\n<blockquote>\n<p>Use 数据库名</p>\n<p>隐式创建：在 mongodb 选择不存在的数据库不会报错，后期当该数据库有数据时，系统会自动创建</p>\n</blockquote>\n<ol start=\"3\">\n<li>查看集合</li>\n</ol>\n<blockquote>\n<p>Show collections</p>\n</blockquote>\n<ol start=\"4\">\n<li>创建集合</li>\n</ol>\n<blockquote>\n<p>db.createCollection (‘集合名’)</p>\n</blockquote>\n<ol start=\"5\">\n<li>删除集合</li>\n</ol>\n<blockquote>\n<p>db. 集合名.drop ()</p>\n</blockquote>\n<h2 id=\"c增\"><a class=\"anchor\" href=\"#c增\">#</a> C 增</h2>\n<blockquote>\n<p>db. 集合名.insert (JSON 数据)</p>\n<p>集合存在 - 则直接插入数据，集合不存在 - 隐式创建，创建时会有默认 id，如需自定义，给插入的 JSON 数据增加_id 键即可覆盖</p>\n</blockquote>\n<p>增加多条数据</p>\n<blockquote>\n<p>(JSON 数据) 变为 ([JSON 数据，JSON 数据]）</p>\n</blockquote>\n<p>快速插入多条数据</p>\n<blockquote>\n<p>由于 mongodb 底层是 JS 引擎，所以支持部分 JS 语法</p>\n<p>for(var i = 1; i &lt; n; i++){</p>\n<p>​\tdb. 集合名.insert ({name:&quot;a&quot;+i,age:i})</p>\n<p>}</p>\n</blockquote>\n<h2 id=\"r查\"><a class=\"anchor\" href=\"#r查\">#</a> R 查</h2>\n<ol>\n<li>查询全部数据</li>\n</ol>\n<blockquote>\n<p>Db. 集合名.find ()</p>\n</blockquote>\n<ol start=\"2\">\n<li>只看 name 列</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ({},{name:1})</p>\n</blockquote>\n<ol start=\"3\">\n<li>除了 name 列</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ({},{name:0})</p>\n<p>第一个 {} 不填表示查询所有</p>\n</blockquote>\n<ol start=\"4\">\n<li>查询固定数据</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ({name:&quot;张三&quot;})</p>\n</blockquote>\n<ol start=\"5\">\n<li>查询年龄大于 5 岁的数据</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ({age:{$gt:5}})</p>\n</blockquote>\n<ol start=\"6\">\n<li>查询 5,8,10 岁的数据</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ({age:{$in:[5,8,10]}})</p>\n</blockquote>\n<ol start=\"7\">\n<li>运算符</li>\n</ol>\n<blockquote>\n<p>$gt：大于</p>\n<p>$gte：大于等于</p>\n<p>$lt：小于</p>\n<p>$lte：小于等于</p>\n<p>$ne：不等于</p>\n<p>$in：in</p>\n<p>$nin：not in</p>\n</blockquote>\n<h2 id=\"u改\"><a class=\"anchor\" href=\"#u改\">#</a> U 改</h2>\n<blockquote>\n<p>Db. 集合名.update (条件，新数据，[是否新增，是否修改多条])</p>\n</blockquote>\n<ul>\n<li>是否新增</li>\n</ul>\n<blockquote>\n<p>指条件匹配不到数据则插入 (true 是插入，false 否不插入默认)</p>\n</blockquote>\n<ul>\n<li>是否修改多条</li>\n</ul>\n<blockquote>\n<p>指将匹配成功的数据都修改 (true 是，false 否默认)</p>\n</blockquote>\n<ul>\n<li>修改张三的数据</li>\n</ul>\n<blockquote>\n<p>db. 集合名.update ({name:&quot;zs1&quot;},{$set:{name:&quot;zs2&quot;}})，不加 set 默认是替换而不是修改</p>\n</blockquote>\n<ul>\n<li>将张三的年龄加 1</li>\n</ul>\n<blockquote>\n<p>db. 集合名.update ({name:&quot;zs1&quot;},{$inc:{age:1}})</p>\n</blockquote>\n<ul>\n<li>修改器</li>\n</ul>\n<blockquote>\n<p>$set：修改列值</p>\n<p>$inc：递增</p>\n<p>$rename：重命名列</p>\n<p>$unset：删除列</p>\n</blockquote>\n<h2 id=\"d删\"><a class=\"anchor\" href=\"#d删\">#</a> D 删</h2>\n<blockquote>\n<p>db. 集合名.remove ({},[是否删除一条])</p>\n<p>ture：删除一条，默认 false：全删除</p>\n</blockquote>\n<h1 id=\"拓展操作\"><a class=\"anchor\" href=\"#拓展操作\">#</a> 拓展操作</h1>\n<ol>\n<li>格式化数据 pretty ()</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ().pretty ()</p>\n</blockquote>\n<ol start=\"2\">\n<li>排序</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ().sort (JSON 数据)</p>\n<p>键 - 就是要排序的字段的列 / 字段、值：1 升序   -1 降序</p>\n</blockquote>\n<ol start=\"3\">\n<li>分页</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ().skip (数字).limit (数字)</p>\n<p>skip 跳过指定条数 (可选)，limit 限制查询的条数</p>\n</blockquote>\n<ol start=\"4\">\n<li>总结</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ()</p>\n<p>.pretty () 格式化数据</p>\n<p>.sort ({列：1/-1}) 排序</p>\n<p>.skip (数字) 跳过指定条数</p>\n<p>.limit (数字) 限制查询条数</p>\n<p>.count () 统计总条数</p>\n</blockquote>\n<h1 id=\"聚合查询\"><a class=\"anchor\" href=\"#聚合查询\">#</a> 聚合查询</h1>\n<pre><code>Db.集合名.aggregate([\n    &#123;管道：&#123;表达式&#125;&#125;\n    ……\n])\n</code></pre>\n<h2 id=\"常用管道\"><a class=\"anchor\" href=\"#常用管道\">#</a> 常用管道：</h2>\n<ul>\n<li>$group</li>\n</ul>\n<blockquote>\n<p>将集合中的文档进行分组，用于统计结果</p>\n</blockquote>\n<ul>\n<li>$match</li>\n</ul>\n<blockquote>\n<p>过滤数据，只要输出符合条件的文档</p>\n</blockquote>\n<ul>\n<li>$sort</li>\n</ul>\n<blockquote>\n<p>聚合数据进一步排序</p>\n</blockquote>\n<ul>\n<li>$skip</li>\n</ul>\n<blockquote>\n<p>跳过指定文档数</p>\n</blockquote>\n<ul>\n<li>$limit</li>\n</ul>\n<blockquote>\n<p>限制集合数据返回文档数</p>\n</blockquote>\n<h2 id=\"常用表达式\"><a class=\"anchor\" href=\"#常用表达式\">#</a> 常用表达式</h2>\n<ul>\n<li>$sum</li>\n</ul>\n<blockquote>\n<p>总和  $sum：1 同 count 表示统计</p>\n</blockquote>\n<ul>\n<li>$avg</li>\n</ul>\n<blockquote>\n<p>平均</p>\n</blockquote>\n<ul>\n<li>$min</li>\n</ul>\n<blockquote>\n<p>最小值</p>\n</blockquote>\n<ul>\n<li>$max</li>\n</ul>\n<blockquote>\n<p>最大值</p>\n</blockquote>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<ol>\n<li>统计男生女生的总年龄：</li>\n</ol>\n<pre><code>db.集合名.aggregate([\n    &#123;\n        $group:&#123;\n            _id:&quot;$sex&quot;.\n            result:&#123;$sum:&quot;$age&quot;&#125;\n    \t&#125;\n    &#125;\n])\n</code></pre>\n<ol start=\"2\">\n<li>统计男生女生的总人数</li>\n</ol>\n<pre><code>db.集合名.aggregate([\n    &#123;\n        $group:&#123;\n            _id:&quot;$sex&quot;,\n            num:&#123;$sum:1&#125;\n        &#125;\n    &#125;\n])\n</code></pre>\n<ol start=\"3\">\n<li>求学生总数和平均年龄</li>\n</ol>\n<pre><code>db.集合名.aggregate([\n    &#123;\n        $group:&#123;\n            _id:null,\n            Total_num:&#123;$sum:1&#125;,\n            Avg_age:&#123;$avg:&quot;age&quot;&#125;\n        &#125;\n    &#125;\n])\n</code></pre>\n<ol start=\"3\">\n<li>查询男生女生人数，按人数排序</li>\n</ol>\n<pre><code>db.集合名.aggregate([\n    &#123;\n        $group:&#123;\n            _id:&quot;$sex&quot;,\n            num:&#123;$sum:1&#125;\n        &#125;\n    &#125;,\n    &#123;\n        $sort:&#123;\n            num:1//升序\n        &#125;\n    &#125;\n])\n</code></pre>\n<h1 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h1>\n<h2 id=\"创建索引\"><a class=\"anchor\" href=\"#创建索引\">#</a> 创建索引</h2>\n<blockquote>\n<p>Db. 集合名.createIndex (待创建索引的列，[额外选项])</p>\n<p 键：1，…，键：-1=\"\">待创建索引的列：</p>\n<p>说明：1 升序 - 1 降序      例：{age：1} 表示创建 age 索引并按照升序的方式存储</p>\n<p>额外选项：设置索引的名称或唯一索引</p>\n</blockquote>\n<h2 id=\"删除索引\"><a class=\"anchor\" href=\"#删除索引\">#</a> 删除索引</h2>\n<ul>\n<li>全部删除</li>\n</ul>\n<blockquote>\n<p>db. 集合名.dropIndexes ()</p>\n</blockquote>\n<ul>\n<li>删除指定</li>\n</ul>\n<blockquote>\n<p>db. 集合名.dropIndex (索引名)</p>\n</blockquote>\n<h2 id=\"查看索引\"><a class=\"anchor\" href=\"#查看索引\">#</a> 查看索引</h2>\n<blockquote>\n<p>Db. 集合名.getIndexes ()</p>\n<p>显示出来的 key：给哪个列设置了索引</p>\n<p>显示出来的 name：表示索引名称，默认系统生成，也可以自定义</p>\n</blockquote>\n<h2 id=\"给索引取名\"><a class=\"anchor\" href=\"#给索引取名\">#</a> 给索引取名</h2>\n<blockquote>\n<p>Db. 集合名.createIndex ({“键 &quot;：“值&quot;}，{键：“名称 &quot;})</p>\n</blockquote>\n<h2 id=\"添加唯一索引\"><a class=\"anchor\" href=\"#添加唯一索引\">#</a> 添加唯一索引</h2>\n<blockquote>\n<p>Db. 集合名.createIndex ({“键 &quot;：“值&quot;}，{unique：“键 &quot;})</p>\n</blockquote>\n<h2 id=\"分析索引\"><a class=\"anchor\" href=\"#分析索引\">#</a> 分析索引</h2>\n<blockquote>\n<p>Db. 集合名.find ().explain (“executionStats&quot;)</p>\n</blockquote>\n<h1 id=\"权限机制\"><a class=\"anchor\" href=\"#权限机制\">#</a> 权限机制</h1>\n<h2 id=\"创建账号\"><a class=\"anchor\" href=\"#创建账号\">#</a> 创建账号</h2>\n<pre><code>Use admin\ndb.createUser(&#123;\n &quot;user&quot;:&quot;admin&quot;,\n &quot;pwd&quot;:&quot;admin&quot;,\n &quot;roles&quot;:[&#123;\n     role:&quot;root&quot;,\n     db:&quot;admin&quot;\n &#125;]\n&#125;) \n\n</code></pre>\n<h2 id=\"角色\"><a class=\"anchor\" href=\"#角色\">#</a> 角色</h2>\n<ul>\n<li>角色种类</li>\n</ul>\n<blockquote>\n<p>超级用户角色：root</p>\n<p>数据库用户角色：read、readwrite；</p>\n<p>数据库管理角色：dbAdmin、userAdmin；</p>\n<p>集群管理角色：clusterAdmin、clusterManager、ClusterMonitor、hostManager；</p>\n<p>备份恢复角色：backup、restore；</p>\n<p>所有数据库角色：readAnyDatabase、readWriterAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase；</p>\n</blockquote>\n<ul>\n<li>角色说明</li>\n</ul>\n<blockquote>\n<p>root：只在 admin 数据库中可用。超级账号、超级权限；</p>\n<p>read：允许用户读取指定数据库；</p>\n<p>readWriter：允许用户读写指定数据库</p>\n</blockquote>\n<h2 id=\"开启验证模式\"><a class=\"anchor\" href=\"#开启验证模式\">#</a> 开启验证模式</h2>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3>\n<blockquote>\n<p>指用户需要输入账号密码才能登录使用</p>\n</blockquote>\n<h3 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h3>\n<ol>\n<li>添加超级管理员</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Use</span> admin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db<span class=\"token punctuation\">.</span>createUser<span class=\"token punctuation\">(</span>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"user\"</span>:<span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">\"pwd\"</span>:<span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">\"roles\"</span>:<span class=\"token punctuation\">[</span>&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        role:<span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        db:<span class=\"token string\">\"admin\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>退出卸载服务</li>\n</ol>\n<blockquote>\n<p>Linux：mongod --shutdown</p>\n<p>Window：Mongod --remove</p>\n</blockquote>\n<ol start=\"3\">\n<li>重新安装需要输入账号密码的服务 (注：在原安装命令基础上加上 —auth 即可)</li>\n</ol>\n<blockquote>\n<p>Linux：bin 目录下</p>\n<p>./mongod --dbpath=/usr/local/mongodb/data --logpath= /usr/local/mongodb/logs/mongodb.log --auth --logappend --port=27017 –fork</p>\n<p>Window：bin 目录下</p>\n<p>mongod --install --dbpath (data 路径) --logpath (log 路径) –auth</p>\n</blockquote>\n<ol start=\"4\">\n<li>启动服务 -&gt; 登录测试</li>\n</ol>\n<blockquote>\n<p>Linux：bin 目录下./mongo</p>\n<p>Windows：net start mongodb 再输入 mongo 启动</p>\n<p>直接启动 show dbs 看不到任何东西</p>\n<p>方法 1：mongo 服务 ip 地址：端口号 / 数据库 -u 用户名 -p 密码</p>\n<p>方法 2：先登录，选择数据库，输入 db.auth (用户名，密码)</p>\n</blockquote>\n<h3 id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子</h3>\n<blockquote>\n<p>添加用户 shop1 可以读 shop 数据库</p>\n<p>添加用户 shop2 可以读写 shop 数据库</p>\n<p>注意：必须在对应数据库创建用户</p>\n</blockquote>\n<ol>\n<li>准备测试数据</li>\n</ol>\n<pre><code>use shop\nfor(var i = 1 ;i &lt;= 10;i++)&#123;\n\tdb.goods.insert(&#123;\n        &quot;name&quot;:&quot;goodsName&quot;+i,\n        &quot;price&quot;:i\n\t&#125;)\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>查看添加的数据</li>\n</ol>\n<blockquote>\n<p>db.goods.find()</p>\n</blockquote>\n<ol start=\"3\">\n<li>添加用户并设置权限</li>\n</ol>\n<pre><code>use shop\ndb.createUser(&#123;\n    &quot;user&quot;:&quot;shop1&quot;,\n    &quot;pwd&quot;:&quot;shop1&quot;,\n    &quot;roles&quot;:[&#123;\n    \trole:&quot;read&quot;,\n    \tdb:&quot;shop&quot;\n    &#125;]\n&#125;)\ndb.createUser(&#123;\n    &quot;user&quot;:&quot;shop2&quot;,\n    &quot;pwd&quot;:&quot;shop2&quot;,\n    &quot;roles&quot;:[&#123;\n    \trole:&quot;readWrite&quot;,\n    \tdb:&quot;shop&quot;\n    &#125;]\n&#125;)\n</code></pre>\n<ol start=\"4\">\n<li>查看添加的用户</li>\n</ol>\n<blockquote>\n<p>use admin</p>\n<p>db.system.users.find().pretty()</p>\n</blockquote>\n<ol start=\"5\">\n<li>登入 shop1 账号</li>\n</ol>\n<blockquote>\n<p>mongo localhost:27017/shop -u shop1 -p shop1</p>\n</blockquote>\n<ol start=\"6\">\n<li>查看数据</li>\n</ol>\n<blockquote>\n<p>db.goods.find()</p>\n</blockquote>\n<ol start=\"7\">\n<li>尝试插入数据（会报错就对了）</li>\n</ol>\n<pre><code>db.goods.insert(&#123;\n\t&quot;name&quot;:&quot;goodsName11&quot;,\n\t&quot;price&quot;:11\n&#125;)\n</code></pre>\n<ol start=\"8\">\n<li>登入 shop2 账号</li>\n</ol>\n<blockquote>\n<p>mongo localhost:27017/shop -u shop2 -p shop2</p>\n</blockquote>\n<ol start=\"9\">\n<li>查看数据</li>\n</ol>\n<blockquote>\n<p>db.goods.find()</p>\n</blockquote>\n<ol start=\"10\">\n<li>尝试插入数据（插入成功）</li>\n</ol>\n<pre><code>db.goods.insert(&#123;\n\t&quot;name&quot;:&quot;goodsName11&quot;,\n\t&quot;price&quot;:11\n&#125;)\n</code></pre>\n<h1 id=\"备份还原\"><a class=\"anchor\" href=\"#备份还原\">#</a> 备份还原</h1>\n<blockquote>\n<p>备份与还原都在 bin 目录下执行命令</p>\n</blockquote>\n<h2 id=\"备份语法\"><a class=\"anchor\" href=\"#备份语法\">#</a> 备份语法</h2>\n<blockquote>\n<p>mongodump -h -port -u -p -d -o</p>\n<p>-h：host 服务器 IP 地址 (一般不写，默认本机)</p>\n<p>-port：   端口 (一般不写，默认 27017)</p>\n<p>-u：user  账号</p>\n<p>-p：pwd  密码</p>\n<p>-d：databse 数据库 (数据库不写则导出全部)</p>\n<p>-o：open 备份到指定目录下</p>\n</blockquote>\n<h2 id=\"例子-3\"><a class=\"anchor\" href=\"#例子-3\">#</a> 例子</h2>\n<ul>\n<li>备份所有数据</li>\n</ul>\n<blockquote>\n<p>mongodump -u admin -p admin -o 备份目录</p>\n</blockquote>\n<ul>\n<li>备份指定数据</li>\n</ul>\n<blockquote>\n<p>mongodump -u shop1 -p shop1 -d shop -o 备份目录</p>\n</blockquote>\n<h2 id=\"还原语法\"><a class=\"anchor\" href=\"#还原语法\">#</a> 还原语法</h2>\n<blockquote>\n<p>mongorestore -h -port -u -p -d --drop 备份数据目录</p>\n<p>-d 不写则还原全部数据</p>\n<p>--drop 先删除数据库再导入</p>\n</blockquote>\n<h2 id=\"例子-4\"><a class=\"anchor\" href=\"#例子-4\">#</a> 例子</h2>\n<ul>\n<li>还原所有数据</li>\n</ul>\n<blockquote>\n<p>先删除两个数据库</p>\n<p>use test1，db.dropDatabse()，use test2()，db.dropDatabase()</p>\n<p>查看剩下的数据库 show dbs</p>\n<p>还原数据 mongorestore -u admin -p admin --drop</p>\n<p>备份数据目录，重新登录查看效果</p>\n</blockquote>\n<ul>\n<li>还原指定数据</li>\n</ul>\n<blockquote>\n<p>mongorestore -u shop2 -p shop2 -d shop –drop 备份目录</p>\n</blockquote>\n<h1 id=\"java连接mongodb\"><a class=\"anchor\" href=\"#java连接mongodb\">#</a> Java 连接 mongodb</h1>\n<ol>\n<li>查看 mongodb 占用的端口</li>\n</ol>\n<blockquote>\n<p>ps -ef | grep mongodb</p>\n</blockquote>\n<ol start=\"2\">\n<li>关掉 mongodb</li>\n</ol>\n<blockquote>\n<p>kill -9 端口</p>\n</blockquote>\n<ol start=\"3\">\n<li>开启 mongodb 服务</li>\n</ol>\n<blockquote>\n<p>传教 mongo-start.sh 文件并编辑</p>\n<p>./mongod --dbpath=/usr/local/mongodb/data --logpath= /usr/local/mongodb/logs/mongodb.log --auth --logappend --port=27017 --bind_ip=0.0.0.0 (设置为所有人可访问) --fork</p>\n<p>将该文件设置为可执行文件，chmod +x <span class=\"exturl\" data-url=\"aHR0cDovL21vbmdvLXN0YXJ0LnNo\">mongo-start.sh</span></p>\n<p>执行./mongo-start 开启服务</p>\n</blockquote>\n<ol start=\"4\">\n<li>在 java 端连接测试</li>\n</ol>\n<ul>\n<li>导入 pom 依赖</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mongodb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mongodb-driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.8.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>未设置账号密码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建连接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">MongoClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoClient</span><span class=\"token punctuation\">(</span>IP地址<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取操作的数据库</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">MongoDatabase</span> test1 <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span>数据库名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 获取集合</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">MongoCollection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">></span></span> collection <span class=\"token operator\">=</span> test1<span class=\"token punctuation\">.</span><span class=\"token function\">getCollection</span><span class=\"token punctuation\">(</span>集合名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 获取文档的内容</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">FindIterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">></span></span> documents <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Document</span> document <span class=\"token operator\">:</span> documents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>设置账号密码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置服务器地址和端口号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ServerAddress</span> serverAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerAddress</span><span class=\"token punctuation\">(</span>IP地址<span class=\"token punctuation\">,</span> 端口号<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 设置用户名、数据库名称、密码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">MongoCredential</span> credential <span class=\"token operator\">=</span> <span class=\"token class-name\">MongoCredential</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCredential</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 通过连接认证获取连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">MongoClientOptions</span> build <span class=\"token operator\">=</span> <span class=\"token class-name\">MongoClientOptions</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">MongoClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoClient</span><span class=\"token punctuation\">(</span>serverAddress<span class=\"token punctuation\">,</span> credential<span class=\"token punctuation\">,</span> build<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 获取操作的数据库</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">MongoDatabase</span> test1 <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span>数据库名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 获取集合</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">MongoCollection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">></span></span> collection <span class=\"token operator\">=</span> test1<span class=\"token punctuation\">.</span><span class=\"token function\">getCollection</span><span class=\"token punctuation\">(</span>集合名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 获取文档的内容</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">FindIterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">></span></span> documents <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Document</span> document <span class=\"token operator\">:</span> documents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"springboot连接mongodb\"><a class=\"anchor\" href=\"#springboot连接mongodb\">#</a> SpringBoot 连接 MongoDB</h1>\n<h2 id=\"applicationyml\"><a class=\"anchor\" href=\"#applicationyml\">#</a> application.yml</h2>\n<ul>\n<li>不带密码</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> 数据库</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> IP地址</pre></td></tr></table></figure><ul>\n<li>密码访问</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> 数据库</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> IP地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> 用户名</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> 密码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">authentication-database</span><span class=\"token punctuation\">:</span> 用户名绑定的数据库(admin)</pre></td></tr></table></figure>","site":{"data":{}},"length":7181,"excerpt":"","more":"<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<ul>\n<li>Mongodb 文档数据库，存储的是文档 (Bson&gt;json 的二进制化)</li>\n</ul>\n<blockquote>\n<p>特点：内部执行引擎为 JS 解释器，把文档存储成 bson 结构，在查询时，转化为就、JS 对象，并可以通过熟悉的 JS 语法来操作</p>\n</blockquote>\n<ul>\n<li>Mongodb 和传统数据库相比最大的不同</li>\n</ul>\n<blockquote>\n<p>传统型数据库：结构化数据，定好了表结构后，每一行的内容必是符合表结构的，就是说 - 列的个数，类型都一样</p>\n<p>Mongodb 文档型数据库：表下的每篇文档都可以有自己独特的结构 (json 对象都可以有自己独特的属性和值)</p>\n</blockquote>\n<ul>\n<li>下载地址</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.mongodb.com/download-center/community\"><strong>https://www.mongodb.com/download-center/community</strong></a></p>\n</blockquote>\n<h1 id=\"linux安装mongodb\"><a class=\"anchor\" href=\"#linux安装mongodb\">#</a> Linux 安装 mongodb</h1>\n<ol>\n<li>下载</li>\n</ol>\n<blockquote>\n<p>wget  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mYXN0ZGwubW9uZ29kYi5vcmcvbGludXgvbW9uZ29kYi1saW51eC14ODZfNjQtcmhlbDgwLTQuNC4xLnRneg==\">https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-4.4.1.tgz</span></p>\n</blockquote>\n<ol start=\"2\">\n<li>解压</li>\n</ol>\n<blockquote>\n<p>tar -zxvf mongodb-linux-x86_64-rhel80-4.4.1.tgz</p>\n</blockquote>\n<ol start=\"3\">\n<li>将解压包拷贝至指定目录</li>\n</ol>\n<blockquote>\n<p>mv mongodb-linux-x86_64-rhel80-4.4.1 /usr/local/mongodb</p>\n</blockquote>\n<ol start=\"4\">\n<li>创建数据存放目录与日志存放目录</li>\n</ol>\n<blockquote>\n<p>mkdir -p /usr/local/mongodb/data /usr/local/mongodb/logs</p>\n</blockquote>\n<ol start=\"5\">\n<li>启动 mongodb 服务</li>\n</ol>\n<blockquote>\n<p>/usr/local/mongodb/bin/mongod –dbpath=/usr/local/mongodb/data –logpath=/usr/local/mongodb/logs/mongodb.log –logappend –port=27017 --fork</p>\n</blockquote>\n<ol start=\"6\">\n<li>登录</li>\n</ol>\n<blockquote>\n<p>/usr/local/mongodb/bin/mongo</p>\n</blockquote>\n<h1 id=\"基本操作\"><a class=\"anchor\" href=\"#基本操作\">#</a> 基本操作</h1>\n<h2 id=\"通用操作\"><a class=\"anchor\" href=\"#通用操作\">#</a> 通用操作</h2>\n<ol>\n<li>查看数据库</li>\n</ol>\n<blockquote>\n<p>Show databases</p>\n</blockquote>\n<ol start=\"2\">\n<li>选择数据库</li>\n</ol>\n<blockquote>\n<p>Use 数据库名</p>\n<p>隐式创建：在 mongodb 选择不存在的数据库不会报错，后期当该数据库有数据时，系统会自动创建</p>\n</blockquote>\n<ol start=\"3\">\n<li>查看集合</li>\n</ol>\n<blockquote>\n<p>Show collections</p>\n</blockquote>\n<ol start=\"4\">\n<li>创建集合</li>\n</ol>\n<blockquote>\n<p>db.createCollection (‘集合名’)</p>\n</blockquote>\n<ol start=\"5\">\n<li>删除集合</li>\n</ol>\n<blockquote>\n<p>db. 集合名.drop ()</p>\n</blockquote>\n<h2 id=\"c增\"><a class=\"anchor\" href=\"#c增\">#</a> C 增</h2>\n<blockquote>\n<p>db. 集合名.insert (JSON 数据)</p>\n<p>集合存在 - 则直接插入数据，集合不存在 - 隐式创建，创建时会有默认 id，如需自定义，给插入的 JSON 数据增加_id 键即可覆盖</p>\n</blockquote>\n<p>增加多条数据</p>\n<blockquote>\n<p>(JSON 数据) 变为 ([JSON 数据，JSON 数据]）</p>\n</blockquote>\n<p>快速插入多条数据</p>\n<blockquote>\n<p>由于 mongodb 底层是 JS 引擎，所以支持部分 JS 语法</p>\n<p>for(var i = 1; i &lt; n; i++){</p>\n<p>​\tdb. 集合名.insert ({name:&quot;a&quot;+i,age:i})</p>\n<p>}</p>\n</blockquote>\n<h2 id=\"r查\"><a class=\"anchor\" href=\"#r查\">#</a> R 查</h2>\n<ol>\n<li>查询全部数据</li>\n</ol>\n<blockquote>\n<p>Db. 集合名.find ()</p>\n</blockquote>\n<ol start=\"2\">\n<li>只看 name 列</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ({},{name:1})</p>\n</blockquote>\n<ol start=\"3\">\n<li>除了 name 列</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ({},{name:0})</p>\n<p>第一个 {} 不填表示查询所有</p>\n</blockquote>\n<ol start=\"4\">\n<li>查询固定数据</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ({name:&quot;张三&quot;})</p>\n</blockquote>\n<ol start=\"5\">\n<li>查询年龄大于 5 岁的数据</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ({age:{$gt:5}})</p>\n</blockquote>\n<ol start=\"6\">\n<li>查询 5,8,10 岁的数据</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ({age:{$in:[5,8,10]}})</p>\n</blockquote>\n<ol start=\"7\">\n<li>运算符</li>\n</ol>\n<blockquote>\n<p>$gt：大于</p>\n<p>$gte：大于等于</p>\n<p>$lt：小于</p>\n<p>$lte：小于等于</p>\n<p>$ne：不等于</p>\n<p>$in：in</p>\n<p>$nin：not in</p>\n</blockquote>\n<h2 id=\"u改\"><a class=\"anchor\" href=\"#u改\">#</a> U 改</h2>\n<blockquote>\n<p>Db. 集合名.update (条件，新数据，[是否新增，是否修改多条])</p>\n</blockquote>\n<ul>\n<li>是否新增</li>\n</ul>\n<blockquote>\n<p>指条件匹配不到数据则插入 (true 是插入，false 否不插入默认)</p>\n</blockquote>\n<ul>\n<li>是否修改多条</li>\n</ul>\n<blockquote>\n<p>指将匹配成功的数据都修改 (true 是，false 否默认)</p>\n</blockquote>\n<ul>\n<li>修改张三的数据</li>\n</ul>\n<blockquote>\n<p>db. 集合名.update ({name:&quot;zs1&quot;},{$set:{name:&quot;zs2&quot;}})，不加 set 默认是替换而不是修改</p>\n</blockquote>\n<ul>\n<li>将张三的年龄加 1</li>\n</ul>\n<blockquote>\n<p>db. 集合名.update ({name:&quot;zs1&quot;},{$inc:{age:1}})</p>\n</blockquote>\n<ul>\n<li>修改器</li>\n</ul>\n<blockquote>\n<p>$set：修改列值</p>\n<p>$inc：递增</p>\n<p>$rename：重命名列</p>\n<p>$unset：删除列</p>\n</blockquote>\n<h2 id=\"d删\"><a class=\"anchor\" href=\"#d删\">#</a> D 删</h2>\n<blockquote>\n<p>db. 集合名.remove ({},[是否删除一条])</p>\n<p>ture：删除一条，默认 false：全删除</p>\n</blockquote>\n<h1 id=\"拓展操作\"><a class=\"anchor\" href=\"#拓展操作\">#</a> 拓展操作</h1>\n<ol>\n<li>格式化数据 pretty ()</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ().pretty ()</p>\n</blockquote>\n<ol start=\"2\">\n<li>排序</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ().sort (JSON 数据)</p>\n<p>键 - 就是要排序的字段的列 / 字段、值：1 升序   -1 降序</p>\n</blockquote>\n<ol start=\"3\">\n<li>分页</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ().skip (数字).limit (数字)</p>\n<p>skip 跳过指定条数 (可选)，limit 限制查询的条数</p>\n</blockquote>\n<ol start=\"4\">\n<li>总结</li>\n</ol>\n<blockquote>\n<p>db. 集合名.find ()</p>\n<p>.pretty () 格式化数据</p>\n<p>.sort ({列：1/-1}) 排序</p>\n<p>.skip (数字) 跳过指定条数</p>\n<p>.limit (数字) 限制查询条数</p>\n<p>.count () 统计总条数</p>\n</blockquote>\n<h1 id=\"聚合查询\"><a class=\"anchor\" href=\"#聚合查询\">#</a> 聚合查询</h1>\n<pre><code>Db.集合名.aggregate([\n    &#123;管道：&#123;表达式&#125;&#125;\n    ……\n])\n</code></pre>\n<h2 id=\"常用管道\"><a class=\"anchor\" href=\"#常用管道\">#</a> 常用管道：</h2>\n<ul>\n<li>$group</li>\n</ul>\n<blockquote>\n<p>将集合中的文档进行分组，用于统计结果</p>\n</blockquote>\n<ul>\n<li>$match</li>\n</ul>\n<blockquote>\n<p>过滤数据，只要输出符合条件的文档</p>\n</blockquote>\n<ul>\n<li>$sort</li>\n</ul>\n<blockquote>\n<p>聚合数据进一步排序</p>\n</blockquote>\n<ul>\n<li>$skip</li>\n</ul>\n<blockquote>\n<p>跳过指定文档数</p>\n</blockquote>\n<ul>\n<li>$limit</li>\n</ul>\n<blockquote>\n<p>限制集合数据返回文档数</p>\n</blockquote>\n<h2 id=\"常用表达式\"><a class=\"anchor\" href=\"#常用表达式\">#</a> 常用表达式</h2>\n<ul>\n<li>$sum</li>\n</ul>\n<blockquote>\n<p>总和  $sum：1 同 count 表示统计</p>\n</blockquote>\n<ul>\n<li>$avg</li>\n</ul>\n<blockquote>\n<p>平均</p>\n</blockquote>\n<ul>\n<li>$min</li>\n</ul>\n<blockquote>\n<p>最小值</p>\n</blockquote>\n<ul>\n<li>$max</li>\n</ul>\n<blockquote>\n<p>最大值</p>\n</blockquote>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<ol>\n<li>统计男生女生的总年龄：</li>\n</ol>\n<pre><code>db.集合名.aggregate([\n    &#123;\n        $group:&#123;\n            _id:&quot;$sex&quot;.\n            result:&#123;$sum:&quot;$age&quot;&#125;\n    \t&#125;\n    &#125;\n])\n</code></pre>\n<ol start=\"2\">\n<li>统计男生女生的总人数</li>\n</ol>\n<pre><code>db.集合名.aggregate([\n    &#123;\n        $group:&#123;\n            _id:&quot;$sex&quot;,\n            num:&#123;$sum:1&#125;\n        &#125;\n    &#125;\n])\n</code></pre>\n<ol start=\"3\">\n<li>求学生总数和平均年龄</li>\n</ol>\n<pre><code>db.集合名.aggregate([\n    &#123;\n        $group:&#123;\n            _id:null,\n            Total_num:&#123;$sum:1&#125;,\n            Avg_age:&#123;$avg:&quot;age&quot;&#125;\n        &#125;\n    &#125;\n])\n</code></pre>\n<ol start=\"3\">\n<li>查询男生女生人数，按人数排序</li>\n</ol>\n<pre><code>db.集合名.aggregate([\n    &#123;\n        $group:&#123;\n            _id:&quot;$sex&quot;,\n            num:&#123;$sum:1&#125;\n        &#125;\n    &#125;,\n    &#123;\n        $sort:&#123;\n            num:1//升序\n        &#125;\n    &#125;\n])\n</code></pre>\n<h1 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h1>\n<h2 id=\"创建索引\"><a class=\"anchor\" href=\"#创建索引\">#</a> 创建索引</h2>\n<blockquote>\n<p>Db. 集合名.createIndex (待创建索引的列，[额外选项])</p>\n<p 键：1，…，键：-1=\"\">待创建索引的列：</p>\n<p>说明：1 升序 - 1 降序      例：{age：1} 表示创建 age 索引并按照升序的方式存储</p>\n<p>额外选项：设置索引的名称或唯一索引</p>\n</blockquote>\n<h2 id=\"删除索引\"><a class=\"anchor\" href=\"#删除索引\">#</a> 删除索引</h2>\n<ul>\n<li>全部删除</li>\n</ul>\n<blockquote>\n<p>db. 集合名.dropIndexes ()</p>\n</blockquote>\n<ul>\n<li>删除指定</li>\n</ul>\n<blockquote>\n<p>db. 集合名.dropIndex (索引名)</p>\n</blockquote>\n<h2 id=\"查看索引\"><a class=\"anchor\" href=\"#查看索引\">#</a> 查看索引</h2>\n<blockquote>\n<p>Db. 集合名.getIndexes ()</p>\n<p>显示出来的 key：给哪个列设置了索引</p>\n<p>显示出来的 name：表示索引名称，默认系统生成，也可以自定义</p>\n</blockquote>\n<h2 id=\"给索引取名\"><a class=\"anchor\" href=\"#给索引取名\">#</a> 给索引取名</h2>\n<blockquote>\n<p>Db. 集合名.createIndex ({“键 &quot;：“值&quot;}，{键：“名称 &quot;})</p>\n</blockquote>\n<h2 id=\"添加唯一索引\"><a class=\"anchor\" href=\"#添加唯一索引\">#</a> 添加唯一索引</h2>\n<blockquote>\n<p>Db. 集合名.createIndex ({“键 &quot;：“值&quot;}，{unique：“键 &quot;})</p>\n</blockquote>\n<h2 id=\"分析索引\"><a class=\"anchor\" href=\"#分析索引\">#</a> 分析索引</h2>\n<blockquote>\n<p>Db. 集合名.find ().explain (“executionStats&quot;)</p>\n</blockquote>\n<h1 id=\"权限机制\"><a class=\"anchor\" href=\"#权限机制\">#</a> 权限机制</h1>\n<h2 id=\"创建账号\"><a class=\"anchor\" href=\"#创建账号\">#</a> 创建账号</h2>\n<pre><code>Use admin\ndb.createUser(&#123;\n &quot;user&quot;:&quot;admin&quot;,\n &quot;pwd&quot;:&quot;admin&quot;,\n &quot;roles&quot;:[&#123;\n     role:&quot;root&quot;,\n     db:&quot;admin&quot;\n &#125;]\n&#125;) \n\n</code></pre>\n<h2 id=\"角色\"><a class=\"anchor\" href=\"#角色\">#</a> 角色</h2>\n<ul>\n<li>角色种类</li>\n</ul>\n<blockquote>\n<p>超级用户角色：root</p>\n<p>数据库用户角色：read、readwrite；</p>\n<p>数据库管理角色：dbAdmin、userAdmin；</p>\n<p>集群管理角色：clusterAdmin、clusterManager、ClusterMonitor、hostManager；</p>\n<p>备份恢复角色：backup、restore；</p>\n<p>所有数据库角色：readAnyDatabase、readWriterAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase；</p>\n</blockquote>\n<ul>\n<li>角色说明</li>\n</ul>\n<blockquote>\n<p>root：只在 admin 数据库中可用。超级账号、超级权限；</p>\n<p>read：允许用户读取指定数据库；</p>\n<p>readWriter：允许用户读写指定数据库</p>\n</blockquote>\n<h2 id=\"开启验证模式\"><a class=\"anchor\" href=\"#开启验证模式\">#</a> 开启验证模式</h2>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3>\n<blockquote>\n<p>指用户需要输入账号密码才能登录使用</p>\n</blockquote>\n<h3 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h3>\n<ol>\n<li>添加超级管理员</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">Use</span> admin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db<span class=\"token punctuation\">.</span>createUser<span class=\"token punctuation\">(</span>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"user\"</span>:<span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">\"pwd\"</span>:<span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">\"roles\"</span>:<span class=\"token punctuation\">[</span>&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        role:<span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        db:<span class=\"token string\">\"admin\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>退出卸载服务</li>\n</ol>\n<blockquote>\n<p>Linux：mongod --shutdown</p>\n<p>Window：Mongod --remove</p>\n</blockquote>\n<ol start=\"3\">\n<li>重新安装需要输入账号密码的服务 (注：在原安装命令基础上加上 —auth 即可)</li>\n</ol>\n<blockquote>\n<p>Linux：bin 目录下</p>\n<p>./mongod --dbpath=/usr/local/mongodb/data --logpath= /usr/local/mongodb/logs/mongodb.log --auth --logappend --port=27017 –fork</p>\n<p>Window：bin 目录下</p>\n<p>mongod --install --dbpath (data 路径) --logpath (log 路径) –auth</p>\n</blockquote>\n<ol start=\"4\">\n<li>启动服务 -&gt; 登录测试</li>\n</ol>\n<blockquote>\n<p>Linux：bin 目录下./mongo</p>\n<p>Windows：net start mongodb 再输入 mongo 启动</p>\n<p>直接启动 show dbs 看不到任何东西</p>\n<p>方法 1：mongo 服务 ip 地址：端口号 / 数据库 -u 用户名 -p 密码</p>\n<p>方法 2：先登录，选择数据库，输入 db.auth (用户名，密码)</p>\n</blockquote>\n<h3 id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子</h3>\n<blockquote>\n<p>添加用户 shop1 可以读 shop 数据库</p>\n<p>添加用户 shop2 可以读写 shop 数据库</p>\n<p>注意：必须在对应数据库创建用户</p>\n</blockquote>\n<ol>\n<li>准备测试数据</li>\n</ol>\n<pre><code>use shop\nfor(var i = 1 ;i &lt;= 10;i++)&#123;\n\tdb.goods.insert(&#123;\n        &quot;name&quot;:&quot;goodsName&quot;+i,\n        &quot;price&quot;:i\n\t&#125;)\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>查看添加的数据</li>\n</ol>\n<blockquote>\n<p>db.goods.find()</p>\n</blockquote>\n<ol start=\"3\">\n<li>添加用户并设置权限</li>\n</ol>\n<pre><code>use shop\ndb.createUser(&#123;\n    &quot;user&quot;:&quot;shop1&quot;,\n    &quot;pwd&quot;:&quot;shop1&quot;,\n    &quot;roles&quot;:[&#123;\n    \trole:&quot;read&quot;,\n    \tdb:&quot;shop&quot;\n    &#125;]\n&#125;)\ndb.createUser(&#123;\n    &quot;user&quot;:&quot;shop2&quot;,\n    &quot;pwd&quot;:&quot;shop2&quot;,\n    &quot;roles&quot;:[&#123;\n    \trole:&quot;readWrite&quot;,\n    \tdb:&quot;shop&quot;\n    &#125;]\n&#125;)\n</code></pre>\n<ol start=\"4\">\n<li>查看添加的用户</li>\n</ol>\n<blockquote>\n<p>use admin</p>\n<p>db.system.users.find().pretty()</p>\n</blockquote>\n<ol start=\"5\">\n<li>登入 shop1 账号</li>\n</ol>\n<blockquote>\n<p>mongo localhost:27017/shop -u shop1 -p shop1</p>\n</blockquote>\n<ol start=\"6\">\n<li>查看数据</li>\n</ol>\n<blockquote>\n<p>db.goods.find()</p>\n</blockquote>\n<ol start=\"7\">\n<li>尝试插入数据（会报错就对了）</li>\n</ol>\n<pre><code>db.goods.insert(&#123;\n\t&quot;name&quot;:&quot;goodsName11&quot;,\n\t&quot;price&quot;:11\n&#125;)\n</code></pre>\n<ol start=\"8\">\n<li>登入 shop2 账号</li>\n</ol>\n<blockquote>\n<p>mongo localhost:27017/shop -u shop2 -p shop2</p>\n</blockquote>\n<ol start=\"9\">\n<li>查看数据</li>\n</ol>\n<blockquote>\n<p>db.goods.find()</p>\n</blockquote>\n<ol start=\"10\">\n<li>尝试插入数据（插入成功）</li>\n</ol>\n<pre><code>db.goods.insert(&#123;\n\t&quot;name&quot;:&quot;goodsName11&quot;,\n\t&quot;price&quot;:11\n&#125;)\n</code></pre>\n<h1 id=\"备份还原\"><a class=\"anchor\" href=\"#备份还原\">#</a> 备份还原</h1>\n<blockquote>\n<p>备份与还原都在 bin 目录下执行命令</p>\n</blockquote>\n<h2 id=\"备份语法\"><a class=\"anchor\" href=\"#备份语法\">#</a> 备份语法</h2>\n<blockquote>\n<p>mongodump -h -port -u -p -d -o</p>\n<p>-h：host 服务器 IP 地址 (一般不写，默认本机)</p>\n<p>-port：   端口 (一般不写，默认 27017)</p>\n<p>-u：user  账号</p>\n<p>-p：pwd  密码</p>\n<p>-d：databse 数据库 (数据库不写则导出全部)</p>\n<p>-o：open 备份到指定目录下</p>\n</blockquote>\n<h2 id=\"例子-3\"><a class=\"anchor\" href=\"#例子-3\">#</a> 例子</h2>\n<ul>\n<li>备份所有数据</li>\n</ul>\n<blockquote>\n<p>mongodump -u admin -p admin -o 备份目录</p>\n</blockquote>\n<ul>\n<li>备份指定数据</li>\n</ul>\n<blockquote>\n<p>mongodump -u shop1 -p shop1 -d shop -o 备份目录</p>\n</blockquote>\n<h2 id=\"还原语法\"><a class=\"anchor\" href=\"#还原语法\">#</a> 还原语法</h2>\n<blockquote>\n<p>mongorestore -h -port -u -p -d --drop 备份数据目录</p>\n<p>-d 不写则还原全部数据</p>\n<p>--drop 先删除数据库再导入</p>\n</blockquote>\n<h2 id=\"例子-4\"><a class=\"anchor\" href=\"#例子-4\">#</a> 例子</h2>\n<ul>\n<li>还原所有数据</li>\n</ul>\n<blockquote>\n<p>先删除两个数据库</p>\n<p>use test1，db.dropDatabse()，use test2()，db.dropDatabase()</p>\n<p>查看剩下的数据库 show dbs</p>\n<p>还原数据 mongorestore -u admin -p admin --drop</p>\n<p>备份数据目录，重新登录查看效果</p>\n</blockquote>\n<ul>\n<li>还原指定数据</li>\n</ul>\n<blockquote>\n<p>mongorestore -u shop2 -p shop2 -d shop –drop 备份目录</p>\n</blockquote>\n<h1 id=\"java连接mongodb\"><a class=\"anchor\" href=\"#java连接mongodb\">#</a> Java 连接 mongodb</h1>\n<ol>\n<li>查看 mongodb 占用的端口</li>\n</ol>\n<blockquote>\n<p>ps -ef | grep mongodb</p>\n</blockquote>\n<ol start=\"2\">\n<li>关掉 mongodb</li>\n</ol>\n<blockquote>\n<p>kill -9 端口</p>\n</blockquote>\n<ol start=\"3\">\n<li>开启 mongodb 服务</li>\n</ol>\n<blockquote>\n<p>传教 mongo-start.sh 文件并编辑</p>\n<p>./mongod --dbpath=/usr/local/mongodb/data --logpath= /usr/local/mongodb/logs/mongodb.log --auth --logappend --port=27017 --bind_ip=0.0.0.0 (设置为所有人可访问) --fork</p>\n<p>将该文件设置为可执行文件，chmod +x <span class=\"exturl\" data-url=\"aHR0cDovL21vbmdvLXN0YXJ0LnNo\">mongo-start.sh</span></p>\n<p>执行./mongo-start 开启服务</p>\n</blockquote>\n<ol start=\"4\">\n<li>在 java 端连接测试</li>\n</ol>\n<ul>\n<li>导入 pom 依赖</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mongodb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mongodb-driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.8.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>未设置账号密码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建连接</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">MongoClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoClient</span><span class=\"token punctuation\">(</span>IP地址<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取操作的数据库</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">MongoDatabase</span> test1 <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span>数据库名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 获取集合</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">MongoCollection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">></span></span> collection <span class=\"token operator\">=</span> test1<span class=\"token punctuation\">.</span><span class=\"token function\">getCollection</span><span class=\"token punctuation\">(</span>集合名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 获取文档的内容</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">FindIterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">></span></span> documents <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Document</span> document <span class=\"token operator\">:</span> documents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>设置账号密码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置服务器地址和端口号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ServerAddress</span> serverAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerAddress</span><span class=\"token punctuation\">(</span>IP地址<span class=\"token punctuation\">,</span> 端口号<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 设置用户名、数据库名称、密码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">MongoCredential</span> credential <span class=\"token operator\">=</span> <span class=\"token class-name\">MongoCredential</span><span class=\"token punctuation\">.</span><span class=\"token function\">createCredential</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 通过连接认证获取连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">MongoClientOptions</span> build <span class=\"token operator\">=</span> <span class=\"token class-name\">MongoClientOptions</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">MongoClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoClient</span><span class=\"token punctuation\">(</span>serverAddress<span class=\"token punctuation\">,</span> credential<span class=\"token punctuation\">,</span> build<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 获取操作的数据库</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">MongoDatabase</span> test1 <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span>数据库名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 获取集合</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">MongoCollection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">></span></span> collection <span class=\"token operator\">=</span> test1<span class=\"token punctuation\">.</span><span class=\"token function\">getCollection</span><span class=\"token punctuation\">(</span>集合名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 获取文档的内容</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">FindIterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Document</span><span class=\"token punctuation\">></span></span> documents <span class=\"token operator\">=</span> collection<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Document</span> document <span class=\"token operator\">:</span> documents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"springboot连接mongodb\"><a class=\"anchor\" href=\"#springboot连接mongodb\">#</a> SpringBoot 连接 MongoDB</h1>\n<h2 id=\"applicationyml\"><a class=\"anchor\" href=\"#applicationyml\">#</a> application.yml</h2>\n<ul>\n<li>不带密码</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> 数据库</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> IP地址</pre></td></tr></table></figure><ul>\n<li>密码访问</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> 数据库</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> IP地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> 用户名</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> 密码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">authentication-database</span><span class=\"token punctuation\">:</span> 用户名绑定的数据库(admin)</pre></td></tr></table></figure>"},{"title":"RabbitMQ","date":"2020-12-24T16:00:00.000Z","_content":"\n# 安装RabbitMQ\n\n1. 下载\n\n> erlang-solutions-1.0-1.noarch.rpm,socat-1.7.3.3-2.el8.x86_64.rpm,rabbitmq-server-3.8.8-1.el8.noarch\n\n2. 执行\n\n> rpm -Uvh erlang-solutions-1.0-1.noarch.rpm\n\n3. 出现epel-release问题执行以下命令\n\n> yum -y install epel-release再执行上条命令\n\n4. 安装\n\n> sudo yum install erlang\n\n5. 检验 \n\n> erl\n\n6. 查看安装路径 \n\n> whereis erlang\n\n7. 安装配置包 \n\n> rpm – ivh socat-1.7.3.3-2.el8.x86_64.rpm\n\n8. 安装rabbitmq\n\n> rpm -ivh rabbitmq-server-3.8.8-1.el8.noarch\n\n9. 修改配置文件\n\n> 将配置文件rabbitmq-config-example复制到/etc/rabbitmq/rabbitmq.config下，并且修改配置文件，将%%{loopback_users, []}的注释取消掉\n\n10. 启动rabbitmq的插件管理\n\n> rabbitmq-plugins enable rabbitmq_management\n\n11. rabbitmq\n\n> 启动systemctl start rabbitmq-server\n>\n> 重启systemctl restart rabbitmq-server\n>\n> 停止systemctl stoprabbitmq-server\n>\n> 检查状态systemctl status rabbitmq-server\n\n如果启动出现ERROR: epmd error for host 192: badarg (unknown POSIX error) 编辑：vi /etc/rabbitmq/rabbitmq-env.conf 添加一行NODENAME=rabbit@localhost\n\n12. 关闭防火墙\n\n> systemctl stop firefalld\n\n13. 访问IP:15672\n\n> 账号：guest\n>\n> 密码：guest\n\n# 管理命令行\n\n1. 启动服务相关\n\n> systemctl start | restart | stop | status rabbotmq-server\n\n2. 管理命令行 用来在不使用web管理界面情况下命令操作RabbitMQ\n\n> Rabbitmqctl help 可以查看更多命令\n\n3. 插件管理命令行\n\n> Rabbitmqplugins enable | list | disable\n\n# 搭建集群\n\n## 普通集群\n\n1. 克隆三台机器主机名和IP映射\n\n> Vim /etc/hosts 加入：\n>\n> ​    ip1：mq1\n>\n> ​    ip2：mq2\n>\n> ​    ip3：mq3\n>\n>  node1: vim /etc/hostname 加入：mq1\n>\n>  node2: vim /etc/hostname 加入：mq2\n>\n>  node3: vim /etc/hostname 加入：mq3\n\n2. 三个机器安装rabbitmq，并同步cokkie文件，在node1上执行\n\n> scp  /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/\n>\n> scp  /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/\n\n3. 查看cookie是否一致\n\n> node1:  cat /var/lib/rabbitmq/.erlang.cookie\n>\n> node2:  cat /var/lib/rabbitmq/.erlang.cookie\n>\n> node3:  cat /var/lib/rabbitmq/.erlang.cookie\n\n4. 后台启动rabbitmq所有节点执行如下命令，启动成功后访问管理界面\n\n> rabbitmq-server -detached\n\n5. 在node2和node3执行加入集群命令\n\n* 关闭 \n\n   rabbitmqctl stop_app\n\n* 加入集群 \n\n   rabbitmqctl join_cluster rabbit@mq1\n\n* 启动服务\n\n   rabbitmqctl start_app\n\n6. 查看集群状态，任意节点执行\n\n> rabbitmqctl cluster_status\n\n7. 如果出现以下显示，集群搭建成功\n\n> [{nodes,[{disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]}]}],…\n\n8. 登录管理界面，在overview页面下面的nodes有三个mq\n\n## 镜像集群\n\n策略说明\n\n> Rabbitmqctl set_policy [-p <vhost>] [--priority <priority>] [--apply-to <apply-to>] <name> <pattern> <definition>\n>\n> -p Vhost：可选参数，针对指定的vhost下的queue进行设置\n>\n> Priority：可选参数，policy的优先级\n>\n> Name：policy的名称\n>\n> Pattren：queue的匹配模式(正则表达式)\n>\n> Definition：镜像定义，包括三个部分ha-mode，ha-params，ha-sync-mode.\n>\n> * Ha-mode：指明镜像队列的模式，有效值为all/exactly/nodes\n>\n>   * All:表示在集群中所有的节点上进行镜像\n>\n>   * Exactly:表示在指定个数的节点上进行镜像，节点的个数由ha-params指定\n>\n>   * Nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定\n>\n> * Ha-params：ha-mode模式需要用到的参数\n>\n> * Ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual\n\n1. 查看当前策略\n\n> Rabbitmqctl list_policies\n\n2. 添加策略\n\n> Rabbitmqctl set_policy ha-all ‘^hello’ ‘{“ha-mode”:”all”,”ha-sync-mode”:”sutomatic”}’\n>\n> 说明：策略正则表达式为 ”^”：匹配所有队列, ^hello：匹配jello开头队列\n\n3. 删除策略\n\n> Rabbitmq clear_policy ha-all\n\n# Java实现RabbitMQ\n\n## 搭建项目\n\n1. 启动RabbitMQ\n2. 进入管理界面，在Admin下面添加一个User\n\n![1](/assets/RabbitMQ.assets/1.png)\n\n3. 添加一个Virtual Hosts\n\n![2](/assets/RabbitMQ.assets/2.png)\n\n4. 设置权限\n\n![3](/assets/RabbitMQ.assets/3.png)\n\n![4](/assets/RabbitMQ.assets/4.png)\n\n5. 新建一个Maven项目\n\n6. 导入pom依赖\n\n```xml\n<!--junit测试-->\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.11</version>\n</dependency>\n<!--rabbitmq-->\n<dependency>\n    <groupId>com.rabbitmq</groupId>\n    <artifactId>amqp-client</artifactId>\n    <version>5.8.0</version>\n</dependency>\n```\n\n## 简单队列\n\n![helloworld](/assets/RabbitMQ.assets/helloworld.png)\n\n1. 创建一个生产者Provider类\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\npublic class Provider {\n\n    //生产消息\n    @Test\n    public void sendMessage() throws IOException, TimeoutException {\n        //创建连接mq的连接工厂对象\n        ConnectionFactory connectionFactory = new ConnectionFactory();\n        //设置连接rabbitmq主机\n        connectionFactory.setHost(\"主机ip\");\n        //设置端口号\n        connectionFactory.setPort(5672);\n        //设置连接那个虚拟主机\n        connectionFactory.setVirtualHost(\"/qiyin\");\n        //设置访问虚拟主机的用户和密码\n        connectionFactory.setUsername(\"qiyin\");\n        connectionFactory.setPassword(\"qiyin\");\n\n        //获取连接对象\n        Connection connection = connectionFactory.newConnection();\n\n        //获取连接中的通道\n        Channel channel = connection.createChannel();\n        //通道绑定对应的消息队列\n        //参数1:队列名称 如果队列不存在就自动创建\n        //参数2:用来定义队列特性是否持久化\n        //参数3:是否独占队列\n        //参数4:是否在消费完成后自动删除队列\n        //参数5:额外附加参数\n        channel.queueDeclare(\"hello\", false, false, false, null);\n\n        //发布消息\n        //参数1:交换机名称 参数2:队列名称 参数3:传递消息额外设置 参数4:消息的具体内容\n        channel.basicPublish(\"\",\"hello\",null,\"hello rabbitmq\".getBytes());\n\n        channel.close();\n        connection.close();\n    }\n}\n```\n\n> 运行之后在管理界面Queues有一条消息\n\n![5](/assets/RabbitMQ.assets/5.png)\n\n2. 创建一个消费者Consumer类\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\npublic class Consumer {\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建连接mq的连接工厂对象\n        ConnectionFactory connectionFactory = new ConnectionFactory();\n        connectionFactory.setHost(\"192.168.78.128\");\n        connectionFactory.setPort(5672);\n        connectionFactory.setVirtualHost(\"/qiyin\");\n        connectionFactory.setUsername(\"qiyin\");\n        connectionFactory.setPassword(\"qiyin\");\n\n        //获取连接对象\n        Connection connection = connectionFactory.newConnection();\n\n        //获取连接中通道\n        Channel channel = connection.createChannel();\n\n        //通道绑定消息队列\n        channel.queueDeclare(\"hello\", false, false, false, null);\n\n        //消费消息\n        //参数1:消费那个队列的消息 消息名称\n        //参数2:开始消息的自动确认机制\n        //参数3:消费时的回调函数\n        channel.basicConsume(\"hello\", true, new DefaultConsumer(channel) {\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"----\" + new String(body) + \"----\");\n            }\n        });\n    }\n}\n```\n\n> 运行之后，消息被消费\n>\n> 输出----hello rabbitmq----\n\n![6](/assets/RabbitMQ.assets/6.png)\n\n## work模式\n\n![work](/assets/RabbitMQ.assets/work.png)\n\n1. 创建一个连接关闭工具类\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\npublic class RabbitMQUtils {\n\n    private static ConnectionFactory connectionFactory;\n\n    static {\n        connectionFactory = new ConnectionFactory();\n        connectionFactory.setHost(\"主机ip\");\n        connectionFactory.setPort(5672);\n        connectionFactory.setVirtualHost(\"/qiyin\");\n        connectionFactory.setUsername(\"qiyin\");\n        connectionFactory.setPassword(\"qiyin\");\n    }\n\n    public static Connection getConnection(){\n        try {\n            return connectionFactory.newConnection();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public static void closeConnectionAndChannel(Channel channel,Connection connection){\n        try {\n            if (channel != null) channel.close();\n            if (connection != null) connection.close();\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n2. 创建一个生产者\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\n\nimport java.io.IOException;\n\npublic class Provider {\n    public static void main(String[] args) throws IOException {\n        //获取连接\n        Connection connection = RabbitMQUtils.getConnection();\n        //获取通道\n        Channel channel = connection.createChannel();\n        channel.queueDeclare(\"work\",true,false,false,null);\n        for (int i = 1; i <= 20; i++) {\n            channel.basicPublish(\"\",\"work\",null,(i+\" hello work queue\").getBytes());\n        }\n        RabbitMQUtils.closeConnectionAndChannel(channel,connection);\n    }\n}\n```\n\n3. 创建两个消费者\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_1 {\n    public static void main(String[] args) throws IOException {\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n        channel.queueDeclare(\"work\",true,false,false,null);\n        //第二个参数自动确认机制，设置为true，每个消费者都会收到相同数量的消息\n        channel.basicConsume(\"work\",true, new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(new String(body));\n            }\n        });\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_2 {\n    public static void main(String[] args) throws IOException {\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n        channel.queueDeclare(\"work\",true,false,false,null);\n        channel.basicConsume(\"work\",true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(new String(body));\n            }\n        });\n    }\n}\n```\n\n> 先将两个消费者运行起来，然后在运行生产者\n>\n> 消费者1运行结果\n> 1 hello work queue\n> 3 hello work queue\n> 5 hello work queue\n> ...\n> 19 hello work queue\n>\n> 消费者2运行结果\n> 2 hello work queue\n> 4 hello work queue\n> 6 hello work queue\n> ...\n> 20 hello work queue\n\n4.再创建两个消费者\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_3 {\n    public static void main(String[] args) throws IOException {\n        Connection connection = RabbitMQUtils.getConnection();\n        final Channel channel = connection.createChannel();\n        //一次只接受一条未确认的消息\n        channel.basicQos(1);\n        channel.queueDeclare(\"work\",true,false,false,null);\n        //参数2:关闭自动确认机制\n        channel.basicConsume(\"work\",false, new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(new String(body));\n                //手动确认消息\n                channel.basicAck(envelope.getDeliveryTag(),false);\n            }\n        });\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_4 {\n    public static void main(String[] args) throws IOException {\n        Connection connection = RabbitMQUtils.getConnection();\n        final Channel channel = connection.createChannel();\n        channel.basicQos(1);\n        channel.queueDeclare(\"work\",true,false,false,null);\n        channel.basicConsume(\"work\",false,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                try {\n                    Thread.sleep(400);\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n                System.out.println(new String(body));\n                channel.basicAck(envelope.getDeliveryTag(),false);\n            }\n        });\n    }\n}\n```\n\n> 先将两个消费者运行起来，然后在运行生产者\n>\n> 消费者3运行结果\n> 1 hello work queue\n> 5 hello work queue\n> 8 hello work queue\n> 12 hello work queue\n> 15 hello work queue\n> 19 hello work queue\n>\n> 消费者4运行结果\n> 2 hello work queue\n> 3 hello work queue\n> 4 hello work queue\n> 6 hello work queue\n> 7 hello work queue\n> 9 hello work queue\n> 10 hello work queue\n> 11 hello work queue\n> 13 hello work queue\n> 14 hello work queue\n> 16 hello work queue\n> 17 hello work queue\n> 18 hello work queue\n> 20 hello work queue\n\n## 订阅模式\n\n![fanout](/assets/RabbitMQ.assets/fanout.png)\n\n1. 创建一个生产者\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\n\nimport java.io.IOException;\n\npublic class Provider {\n    public static void main(String[] args) throws IOException {\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n        //声明交换机\n        //参数1:交换机的名称 参数2:交换机的类型 fanout 广播类型\n        channel.exchangeDeclare(\"logs\",\"fanout\");\n        //发生资源\n        channel.basicPublish(\"logs\",\"\",null,\"fanout type message\".getBytes());\n        //释放资源\n        RabbitMQUtils.closeConnectionAndChannel(channel,connection);\n    }\n}\n```\n\n2. 创建三个消费者\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_1 {\n    public static void main(String[] args) throws IOException {\n        //获取连接对象\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //通道绑定交换机\n        channel.exchangeDeclare(\"logs\",\"fanout\");\n\n        //临时队列\n        String queue = channel.queueDeclare().getQueue();\n\n        //绑定交换机和队列\n        channel.queueBind(queue,\"logs\",\"\");\n\n        //消费消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者-1：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_2 {\n    public static void main(String[] args) throws IOException {\n        ...\n        //消费消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者-2：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_3 {\n    public static void main(String[] args) throws IOException {\n        ...\n        //消费消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者-3：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n3. 运行三个消费者，再运行生产者\n\n> 消费者1运行结果\n> 消费者-1：fanout type message\n>\n> 消费者2运行结果\n> 消费者-2：fanout type message\n>\n> 消费者3运行结果\n> 消费者-3：fanout type message\n\n## 路由模式\n\n![direct](/assets/RabbitMQ.assets/direct.png)\n\n1. 创建一个生产者\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\n\nimport java.io.IOException;\n\npublic class Provider {\n    public static void main(String[] args) throws IOException {\n        //获取连接\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //交换机名称\n        String exchangeName = \"logs_direct\";\n\n        //通过通道声明交换机\n        //参数1:交换机名称 参数2:direct 路由模式\n        channel.exchangeDeclare(exchangeName,\"direct\");\n\n        //发送消息\n        String routingkey = \"info\";\n        channel.basicPublish(exchangeName,routingkey,null,(\"这是direct模型发布的基于rout key:\"+routingkey+\"的消息\").getBytes());\n\n        //关闭资源\n        RabbitMQUtils.closeConnectionAndChannel(channel,connection);\n    }\n}\n```\n\n2. 创建两个消费者\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_1 {\n    public static void main(String[] args) throws IOException {\n        //获取连接\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //通过通道声明交换机以及交换机的类型\n        channel.exchangeDeclare(\"log_direct\",\"direct\");\n\n        //创建一个临时队列\n        String queue = channel.queueDeclare().getQueue();\n\n        //基于rout key绑定交换机和队列\n        channel.queueBind(queue,\"logs_direct\",\"error\");\n\n        //获取消费的消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者-1：\"+new String(body));\n            }\n        });\n\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_2 {\n    public static void main(String[] args) throws IOException {\n        //获取连接\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //定义交换机名称\n        String exchangeName = \"logs_direct\";\n\n        //通道声明交换机的名称和类型\n        channel.exchangeDeclare(exchangeName,\"direct\");\n\n        //创建一个临时队列\n        String queue = channel.queueDeclare().getQueue();\n\n        //基于rout key绑定交换机和队列\n        channel.queueBind(queue,exchangeName,\"info\");\n        channel.queueBind(queue,exchangeName,\"error\");\n        channel.queueBind(queue,exchangeName,\"warning\");\n\n        //获取消费的消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者2：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n3. 运行两个消费者，运行生产者，将routingkey改为error，再运行一次生产者\n\n> 消费者1输出结果\n> 消费者-1：这是direct模型发布的基于rout key:error的消息\n>\n> 消费者2输出消息\n> 消费者2：这是direct模型发布的基于rout key:info的消息\n> 消费者2：这是direct模型发布的基于rout key:error的消息\n\n## 主题模式\n\n![topic](/assets/RabbitMQ.assets/topic.png)\n\n1. 创建一个生产者\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\n\nimport java.io.IOException;\n\npublic class Provider {\n    public static void main(String[] args) throws IOException {\n        //创建连接\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //声明交换机以及交换机类型 topic 动态路由\n        channel.exchangeDeclare(\"topics\",\"topic\");\n\n        //发布消息\n        String routekey = \"user\";\n        channel.basicPublish(\"topics\",routekey,null,(\"这里是topic动态路由模型,routekey：\"+routekey+\"的消息\").getBytes());\n\n        //释放资源\n        RabbitMQUtils.closeConnectionAndChannel(channel,connection);\n    }\n}\n```\n\n2. 创建两个消费者\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_1 {\n    public static void main(String[] args) throws IOException {\n        //创建连接\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //声明交换机的名称和类型\n        channel.exchangeDeclare(\"topics\",\"topic\");\n\n        //定义一个临时的队列\n        String queue = channel.queueDeclare().getQueue();\n\n        //绑定交换机和队列\n        // * 匹配一个\n        // # 匹配零个或多个\n        channel.queueBind(queue,\"topics\",\"user.*\");\n\n        //消费消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者1：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_2 {\n    public static void main(String[] args) throws IOException {\n    \t...\n        //绑定队列和交换机\n        channel.queueBind(queue,\"topics\",\"user.#\");\n\n        //消费消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者2：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n3. 运行两个消费者，运行生产者，将routekey改为user.user，再运行一次生产者\n\n> 消费者1输出结果\n> 消费者1：这里是topic动态路由模型,routekey：user.user的消息\n>\n> 消费者2输出结果\n> 消费者2：这里是topic动态路由模型,routekey：user的消息\n> 消费者2：这里是topic动态路由模型,routekey：user.user的消息\n\n# SpringBoot实现RabbitMQ\n\n...","source":"_posts/computer/course-1/RabbitMQ.md","raw":"---\ntitle: RabbitMQ\ndate: 2020/12/25\ncategories:\n\t- [计算机,框架]\ntags:\n\t- RabbitMQ\n---\n\n# 安装RabbitMQ\n\n1. 下载\n\n> erlang-solutions-1.0-1.noarch.rpm,socat-1.7.3.3-2.el8.x86_64.rpm,rabbitmq-server-3.8.8-1.el8.noarch\n\n2. 执行\n\n> rpm -Uvh erlang-solutions-1.0-1.noarch.rpm\n\n3. 出现epel-release问题执行以下命令\n\n> yum -y install epel-release再执行上条命令\n\n4. 安装\n\n> sudo yum install erlang\n\n5. 检验 \n\n> erl\n\n6. 查看安装路径 \n\n> whereis erlang\n\n7. 安装配置包 \n\n> rpm – ivh socat-1.7.3.3-2.el8.x86_64.rpm\n\n8. 安装rabbitmq\n\n> rpm -ivh rabbitmq-server-3.8.8-1.el8.noarch\n\n9. 修改配置文件\n\n> 将配置文件rabbitmq-config-example复制到/etc/rabbitmq/rabbitmq.config下，并且修改配置文件，将%%{loopback_users, []}的注释取消掉\n\n10. 启动rabbitmq的插件管理\n\n> rabbitmq-plugins enable rabbitmq_management\n\n11. rabbitmq\n\n> 启动systemctl start rabbitmq-server\n>\n> 重启systemctl restart rabbitmq-server\n>\n> 停止systemctl stoprabbitmq-server\n>\n> 检查状态systemctl status rabbitmq-server\n\n如果启动出现ERROR: epmd error for host 192: badarg (unknown POSIX error) 编辑：vi /etc/rabbitmq/rabbitmq-env.conf 添加一行NODENAME=rabbit@localhost\n\n12. 关闭防火墙\n\n> systemctl stop firefalld\n\n13. 访问IP:15672\n\n> 账号：guest\n>\n> 密码：guest\n\n# 管理命令行\n\n1. 启动服务相关\n\n> systemctl start | restart | stop | status rabbotmq-server\n\n2. 管理命令行 用来在不使用web管理界面情况下命令操作RabbitMQ\n\n> Rabbitmqctl help 可以查看更多命令\n\n3. 插件管理命令行\n\n> Rabbitmqplugins enable | list | disable\n\n# 搭建集群\n\n## 普通集群\n\n1. 克隆三台机器主机名和IP映射\n\n> Vim /etc/hosts 加入：\n>\n> ​    ip1：mq1\n>\n> ​    ip2：mq2\n>\n> ​    ip3：mq3\n>\n>  node1: vim /etc/hostname 加入：mq1\n>\n>  node2: vim /etc/hostname 加入：mq2\n>\n>  node3: vim /etc/hostname 加入：mq3\n\n2. 三个机器安装rabbitmq，并同步cokkie文件，在node1上执行\n\n> scp  /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/\n>\n> scp  /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/\n\n3. 查看cookie是否一致\n\n> node1:  cat /var/lib/rabbitmq/.erlang.cookie\n>\n> node2:  cat /var/lib/rabbitmq/.erlang.cookie\n>\n> node3:  cat /var/lib/rabbitmq/.erlang.cookie\n\n4. 后台启动rabbitmq所有节点执行如下命令，启动成功后访问管理界面\n\n> rabbitmq-server -detached\n\n5. 在node2和node3执行加入集群命令\n\n* 关闭 \n\n   rabbitmqctl stop_app\n\n* 加入集群 \n\n   rabbitmqctl join_cluster rabbit@mq1\n\n* 启动服务\n\n   rabbitmqctl start_app\n\n6. 查看集群状态，任意节点执行\n\n> rabbitmqctl cluster_status\n\n7. 如果出现以下显示，集群搭建成功\n\n> [{nodes,[{disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]}]}],…\n\n8. 登录管理界面，在overview页面下面的nodes有三个mq\n\n## 镜像集群\n\n策略说明\n\n> Rabbitmqctl set_policy [-p <vhost>] [--priority <priority>] [--apply-to <apply-to>] <name> <pattern> <definition>\n>\n> -p Vhost：可选参数，针对指定的vhost下的queue进行设置\n>\n> Priority：可选参数，policy的优先级\n>\n> Name：policy的名称\n>\n> Pattren：queue的匹配模式(正则表达式)\n>\n> Definition：镜像定义，包括三个部分ha-mode，ha-params，ha-sync-mode.\n>\n> * Ha-mode：指明镜像队列的模式，有效值为all/exactly/nodes\n>\n>   * All:表示在集群中所有的节点上进行镜像\n>\n>   * Exactly:表示在指定个数的节点上进行镜像，节点的个数由ha-params指定\n>\n>   * Nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定\n>\n> * Ha-params：ha-mode模式需要用到的参数\n>\n> * Ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual\n\n1. 查看当前策略\n\n> Rabbitmqctl list_policies\n\n2. 添加策略\n\n> Rabbitmqctl set_policy ha-all ‘^hello’ ‘{“ha-mode”:”all”,”ha-sync-mode”:”sutomatic”}’\n>\n> 说明：策略正则表达式为 ”^”：匹配所有队列, ^hello：匹配jello开头队列\n\n3. 删除策略\n\n> Rabbitmq clear_policy ha-all\n\n# Java实现RabbitMQ\n\n## 搭建项目\n\n1. 启动RabbitMQ\n2. 进入管理界面，在Admin下面添加一个User\n\n![1](/assets/RabbitMQ.assets/1.png)\n\n3. 添加一个Virtual Hosts\n\n![2](/assets/RabbitMQ.assets/2.png)\n\n4. 设置权限\n\n![3](/assets/RabbitMQ.assets/3.png)\n\n![4](/assets/RabbitMQ.assets/4.png)\n\n5. 新建一个Maven项目\n\n6. 导入pom依赖\n\n```xml\n<!--junit测试-->\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.11</version>\n</dependency>\n<!--rabbitmq-->\n<dependency>\n    <groupId>com.rabbitmq</groupId>\n    <artifactId>amqp-client</artifactId>\n    <version>5.8.0</version>\n</dependency>\n```\n\n## 简单队列\n\n![helloworld](/assets/RabbitMQ.assets/helloworld.png)\n\n1. 创建一个生产者Provider类\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\npublic class Provider {\n\n    //生产消息\n    @Test\n    public void sendMessage() throws IOException, TimeoutException {\n        //创建连接mq的连接工厂对象\n        ConnectionFactory connectionFactory = new ConnectionFactory();\n        //设置连接rabbitmq主机\n        connectionFactory.setHost(\"主机ip\");\n        //设置端口号\n        connectionFactory.setPort(5672);\n        //设置连接那个虚拟主机\n        connectionFactory.setVirtualHost(\"/qiyin\");\n        //设置访问虚拟主机的用户和密码\n        connectionFactory.setUsername(\"qiyin\");\n        connectionFactory.setPassword(\"qiyin\");\n\n        //获取连接对象\n        Connection connection = connectionFactory.newConnection();\n\n        //获取连接中的通道\n        Channel channel = connection.createChannel();\n        //通道绑定对应的消息队列\n        //参数1:队列名称 如果队列不存在就自动创建\n        //参数2:用来定义队列特性是否持久化\n        //参数3:是否独占队列\n        //参数4:是否在消费完成后自动删除队列\n        //参数5:额外附加参数\n        channel.queueDeclare(\"hello\", false, false, false, null);\n\n        //发布消息\n        //参数1:交换机名称 参数2:队列名称 参数3:传递消息额外设置 参数4:消息的具体内容\n        channel.basicPublish(\"\",\"hello\",null,\"hello rabbitmq\".getBytes());\n\n        channel.close();\n        connection.close();\n    }\n}\n```\n\n> 运行之后在管理界面Queues有一条消息\n\n![5](/assets/RabbitMQ.assets/5.png)\n\n2. 创建一个消费者Consumer类\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\npublic class Consumer {\n    public static void main(String[] args) throws IOException, TimeoutException {\n        //创建连接mq的连接工厂对象\n        ConnectionFactory connectionFactory = new ConnectionFactory();\n        connectionFactory.setHost(\"192.168.78.128\");\n        connectionFactory.setPort(5672);\n        connectionFactory.setVirtualHost(\"/qiyin\");\n        connectionFactory.setUsername(\"qiyin\");\n        connectionFactory.setPassword(\"qiyin\");\n\n        //获取连接对象\n        Connection connection = connectionFactory.newConnection();\n\n        //获取连接中通道\n        Channel channel = connection.createChannel();\n\n        //通道绑定消息队列\n        channel.queueDeclare(\"hello\", false, false, false, null);\n\n        //消费消息\n        //参数1:消费那个队列的消息 消息名称\n        //参数2:开始消息的自动确认机制\n        //参数3:消费时的回调函数\n        channel.basicConsume(\"hello\", true, new DefaultConsumer(channel) {\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"----\" + new String(body) + \"----\");\n            }\n        });\n    }\n}\n```\n\n> 运行之后，消息被消费\n>\n> 输出----hello rabbitmq----\n\n![6](/assets/RabbitMQ.assets/6.png)\n\n## work模式\n\n![work](/assets/RabbitMQ.assets/work.png)\n\n1. 创建一个连接关闭工具类\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\npublic class RabbitMQUtils {\n\n    private static ConnectionFactory connectionFactory;\n\n    static {\n        connectionFactory = new ConnectionFactory();\n        connectionFactory.setHost(\"主机ip\");\n        connectionFactory.setPort(5672);\n        connectionFactory.setVirtualHost(\"/qiyin\");\n        connectionFactory.setUsername(\"qiyin\");\n        connectionFactory.setPassword(\"qiyin\");\n    }\n\n    public static Connection getConnection(){\n        try {\n            return connectionFactory.newConnection();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public static void closeConnectionAndChannel(Channel channel,Connection connection){\n        try {\n            if (channel != null) channel.close();\n            if (connection != null) connection.close();\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n2. 创建一个生产者\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\n\nimport java.io.IOException;\n\npublic class Provider {\n    public static void main(String[] args) throws IOException {\n        //获取连接\n        Connection connection = RabbitMQUtils.getConnection();\n        //获取通道\n        Channel channel = connection.createChannel();\n        channel.queueDeclare(\"work\",true,false,false,null);\n        for (int i = 1; i <= 20; i++) {\n            channel.basicPublish(\"\",\"work\",null,(i+\" hello work queue\").getBytes());\n        }\n        RabbitMQUtils.closeConnectionAndChannel(channel,connection);\n    }\n}\n```\n\n3. 创建两个消费者\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_1 {\n    public static void main(String[] args) throws IOException {\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n        channel.queueDeclare(\"work\",true,false,false,null);\n        //第二个参数自动确认机制，设置为true，每个消费者都会收到相同数量的消息\n        channel.basicConsume(\"work\",true, new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(new String(body));\n            }\n        });\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_2 {\n    public static void main(String[] args) throws IOException {\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n        channel.queueDeclare(\"work\",true,false,false,null);\n        channel.basicConsume(\"work\",true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(new String(body));\n            }\n        });\n    }\n}\n```\n\n> 先将两个消费者运行起来，然后在运行生产者\n>\n> 消费者1运行结果\n> 1 hello work queue\n> 3 hello work queue\n> 5 hello work queue\n> ...\n> 19 hello work queue\n>\n> 消费者2运行结果\n> 2 hello work queue\n> 4 hello work queue\n> 6 hello work queue\n> ...\n> 20 hello work queue\n\n4.再创建两个消费者\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_3 {\n    public static void main(String[] args) throws IOException {\n        Connection connection = RabbitMQUtils.getConnection();\n        final Channel channel = connection.createChannel();\n        //一次只接受一条未确认的消息\n        channel.basicQos(1);\n        channel.queueDeclare(\"work\",true,false,false,null);\n        //参数2:关闭自动确认机制\n        channel.basicConsume(\"work\",false, new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(new String(body));\n                //手动确认消息\n                channel.basicAck(envelope.getDeliveryTag(),false);\n            }\n        });\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_4 {\n    public static void main(String[] args) throws IOException {\n        Connection connection = RabbitMQUtils.getConnection();\n        final Channel channel = connection.createChannel();\n        channel.basicQos(1);\n        channel.queueDeclare(\"work\",true,false,false,null);\n        channel.basicConsume(\"work\",false,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                try {\n                    Thread.sleep(400);\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n                System.out.println(new String(body));\n                channel.basicAck(envelope.getDeliveryTag(),false);\n            }\n        });\n    }\n}\n```\n\n> 先将两个消费者运行起来，然后在运行生产者\n>\n> 消费者3运行结果\n> 1 hello work queue\n> 5 hello work queue\n> 8 hello work queue\n> 12 hello work queue\n> 15 hello work queue\n> 19 hello work queue\n>\n> 消费者4运行结果\n> 2 hello work queue\n> 3 hello work queue\n> 4 hello work queue\n> 6 hello work queue\n> 7 hello work queue\n> 9 hello work queue\n> 10 hello work queue\n> 11 hello work queue\n> 13 hello work queue\n> 14 hello work queue\n> 16 hello work queue\n> 17 hello work queue\n> 18 hello work queue\n> 20 hello work queue\n\n## 订阅模式\n\n![fanout](/assets/RabbitMQ.assets/fanout.png)\n\n1. 创建一个生产者\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\n\nimport java.io.IOException;\n\npublic class Provider {\n    public static void main(String[] args) throws IOException {\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n        //声明交换机\n        //参数1:交换机的名称 参数2:交换机的类型 fanout 广播类型\n        channel.exchangeDeclare(\"logs\",\"fanout\");\n        //发生资源\n        channel.basicPublish(\"logs\",\"\",null,\"fanout type message\".getBytes());\n        //释放资源\n        RabbitMQUtils.closeConnectionAndChannel(channel,connection);\n    }\n}\n```\n\n2. 创建三个消费者\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_1 {\n    public static void main(String[] args) throws IOException {\n        //获取连接对象\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //通道绑定交换机\n        channel.exchangeDeclare(\"logs\",\"fanout\");\n\n        //临时队列\n        String queue = channel.queueDeclare().getQueue();\n\n        //绑定交换机和队列\n        channel.queueBind(queue,\"logs\",\"\");\n\n        //消费消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者-1：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_2 {\n    public static void main(String[] args) throws IOException {\n        ...\n        //消费消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者-2：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_3 {\n    public static void main(String[] args) throws IOException {\n        ...\n        //消费消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者-3：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n3. 运行三个消费者，再运行生产者\n\n> 消费者1运行结果\n> 消费者-1：fanout type message\n>\n> 消费者2运行结果\n> 消费者-2：fanout type message\n>\n> 消费者3运行结果\n> 消费者-3：fanout type message\n\n## 路由模式\n\n![direct](/assets/RabbitMQ.assets/direct.png)\n\n1. 创建一个生产者\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\n\nimport java.io.IOException;\n\npublic class Provider {\n    public static void main(String[] args) throws IOException {\n        //获取连接\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //交换机名称\n        String exchangeName = \"logs_direct\";\n\n        //通过通道声明交换机\n        //参数1:交换机名称 参数2:direct 路由模式\n        channel.exchangeDeclare(exchangeName,\"direct\");\n\n        //发送消息\n        String routingkey = \"info\";\n        channel.basicPublish(exchangeName,routingkey,null,(\"这是direct模型发布的基于rout key:\"+routingkey+\"的消息\").getBytes());\n\n        //关闭资源\n        RabbitMQUtils.closeConnectionAndChannel(channel,connection);\n    }\n}\n```\n\n2. 创建两个消费者\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_1 {\n    public static void main(String[] args) throws IOException {\n        //获取连接\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //通过通道声明交换机以及交换机的类型\n        channel.exchangeDeclare(\"log_direct\",\"direct\");\n\n        //创建一个临时队列\n        String queue = channel.queueDeclare().getQueue();\n\n        //基于rout key绑定交换机和队列\n        channel.queueBind(queue,\"logs_direct\",\"error\");\n\n        //获取消费的消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者-1：\"+new String(body));\n            }\n        });\n\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_2 {\n    public static void main(String[] args) throws IOException {\n        //获取连接\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //定义交换机名称\n        String exchangeName = \"logs_direct\";\n\n        //通道声明交换机的名称和类型\n        channel.exchangeDeclare(exchangeName,\"direct\");\n\n        //创建一个临时队列\n        String queue = channel.queueDeclare().getQueue();\n\n        //基于rout key绑定交换机和队列\n        channel.queueBind(queue,exchangeName,\"info\");\n        channel.queueBind(queue,exchangeName,\"error\");\n        channel.queueBind(queue,exchangeName,\"warning\");\n\n        //获取消费的消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者2：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n3. 运行两个消费者，运行生产者，将routingkey改为error，再运行一次生产者\n\n> 消费者1输出结果\n> 消费者-1：这是direct模型发布的基于rout key:error的消息\n>\n> 消费者2输出消息\n> 消费者2：这是direct模型发布的基于rout key:info的消息\n> 消费者2：这是direct模型发布的基于rout key:error的消息\n\n## 主题模式\n\n![topic](/assets/RabbitMQ.assets/topic.png)\n\n1. 创建一个生产者\n\n```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\n\nimport java.io.IOException;\n\npublic class Provider {\n    public static void main(String[] args) throws IOException {\n        //创建连接\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //声明交换机以及交换机类型 topic 动态路由\n        channel.exchangeDeclare(\"topics\",\"topic\");\n\n        //发布消息\n        String routekey = \"user\";\n        channel.basicPublish(\"topics\",routekey,null,(\"这里是topic动态路由模型,routekey：\"+routekey+\"的消息\").getBytes());\n\n        //释放资源\n        RabbitMQUtils.closeConnectionAndChannel(channel,connection);\n    }\n}\n```\n\n2. 创建两个消费者\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_1 {\n    public static void main(String[] args) throws IOException {\n        //创建连接\n        Connection connection = RabbitMQUtils.getConnection();\n        Channel channel = connection.createChannel();\n\n        //声明交换机的名称和类型\n        channel.exchangeDeclare(\"topics\",\"topic\");\n\n        //定义一个临时的队列\n        String queue = channel.queueDeclare().getQueue();\n\n        //绑定交换机和队列\n        // * 匹配一个\n        // # 匹配零个或多个\n        channel.queueBind(queue,\"topics\",\"user.*\");\n\n        //消费消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者1：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n```java\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\n\npublic class Consumer_2 {\n    public static void main(String[] args) throws IOException {\n    \t...\n        //绑定队列和交换机\n        channel.queueBind(queue,\"topics\",\"user.#\");\n\n        //消费消息\n        channel.basicConsume(queue,true,new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消费者2：\"+new String(body));\n            }\n        });\n    }\n}\n```\n\n3. 运行两个消费者，运行生产者，将routekey改为user.user，再运行一次生产者\n\n> 消费者1输出结果\n> 消费者1：这里是topic动态路由模型,routekey：user.user的消息\n>\n> 消费者2输出结果\n> 消费者2：这里是topic动态路由模型,routekey：user的消息\n> 消费者2：这里是topic动态路由模型,routekey：user.user的消息\n\n# SpringBoot实现RabbitMQ\n\n...","slug":"computer/course-1/RabbitMQ","published":1,"updated":"2020-12-25T07:34:52.303Z","_id":"ckj15eg6z000eb0ut2u20gwhg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"安装rabbitmq\"><a class=\"anchor\" href=\"#安装rabbitmq\">#</a> 安装 RabbitMQ</h1>\n<ol>\n<li>下载</li>\n</ol>\n<blockquote>\n<p>erlang-solutions-1.0-1.noarch.rpm,socat-1.7.3.3-2.el8.x86_64.rpm,rabbitmq-server-3.8.8-1.el8.noarch</p>\n</blockquote>\n<ol start=\"2\">\n<li>执行</li>\n</ol>\n<blockquote>\n<p>rpm -Uvh erlang-solutions-1.0-1.noarch.rpm</p>\n</blockquote>\n<ol start=\"3\">\n<li>出现 epel-release 问题执行以下命令</li>\n</ol>\n<blockquote>\n<p>yum -y install epel-release 再执行上条命令</p>\n</blockquote>\n<ol start=\"4\">\n<li>安装</li>\n</ol>\n<blockquote>\n<p>sudo yum install erlang</p>\n</blockquote>\n<ol start=\"5\">\n<li>检验</li>\n</ol>\n<blockquote>\n<p>erl</p>\n</blockquote>\n<ol start=\"6\">\n<li>查看安装路径</li>\n</ol>\n<blockquote>\n<p>whereis erlang</p>\n</blockquote>\n<ol start=\"7\">\n<li>安装配置包</li>\n</ol>\n<blockquote>\n<p>rpm – ivh socat-1.7.3.3-2.el8.x86_64.rpm</p>\n</blockquote>\n<ol start=\"8\">\n<li>安装 rabbitmq</li>\n</ol>\n<blockquote>\n<p>rpm -ivh rabbitmq-server-3.8.8-1.el8.noarch</p>\n</blockquote>\n<ol start=\"9\">\n<li>修改配置文件</li>\n</ol>\n<blockquote>\n<p>将配置文件 rabbitmq-config-example 复制到 /etc/rabbitmq/rabbitmq.config 下，并且修改配置文件，将 %%{loopback_users, []} 的注释取消掉</p>\n</blockquote>\n<ol start=\"10\">\n<li>启动 rabbitmq 的插件管理</li>\n</ol>\n<blockquote>\n<p>rabbitmq-plugins enable rabbitmq_management</p>\n</blockquote>\n<ol start=\"11\">\n<li>rabbitmq</li>\n</ol>\n<blockquote>\n<p>启动 systemctl start rabbitmq-server</p>\n<p>重启 systemctl restart rabbitmq-server</p>\n<p>停止 systemctl stoprabbitmq-server</p>\n<p>检查状态 systemctl status rabbitmq-server</p>\n</blockquote>\n<p>如果启动出现 ERROR: epmd error for host 192: badarg (unknown POSIX error) 编辑：vi /etc/rabbitmq/rabbitmq-env.conf 添加一行 NODENAME=rabbit@localhost</p>\n<ol start=\"12\">\n<li>关闭防火墙</li>\n</ol>\n<blockquote>\n<p>systemctl stop firefalld</p>\n</blockquote>\n<ol start=\"13\">\n<li>访问 IP:15672</li>\n</ol>\n<blockquote>\n<p>账号：guest</p>\n<p>密码：guest</p>\n</blockquote>\n<h1 id=\"管理命令行\"><a class=\"anchor\" href=\"#管理命令行\">#</a> 管理命令行</h1>\n<ol>\n<li>启动服务相关</li>\n</ol>\n<blockquote>\n<p>systemctl start | restart | stop | status rabbotmq-server</p>\n</blockquote>\n<ol start=\"2\">\n<li>管理命令行 用来在不使用 web 管理界面情况下命令操作 RabbitMQ</li>\n</ol>\n<blockquote>\n<p>Rabbitmqctl help 可以查看更多命令</p>\n</blockquote>\n<ol start=\"3\">\n<li>插件管理命令行</li>\n</ol>\n<blockquote>\n<p>Rabbitmqplugins enable | list | disable</p>\n</blockquote>\n<h1 id=\"搭建集群\"><a class=\"anchor\" href=\"#搭建集群\">#</a> 搭建集群</h1>\n<h2 id=\"普通集群\"><a class=\"anchor\" href=\"#普通集群\">#</a> 普通集群</h2>\n<ol>\n<li>克隆三台机器主机名和 IP 映射</li>\n</ol>\n<blockquote>\n<p>Vim /etc/hosts 加入：</p>\n<p>​    ip1：mq1</p>\n<p>​    ip2：mq2</p>\n<p>​    ip3：mq3</p>\n<p>node1: vim /etc/hostname 加入：mq1</p>\n<p>node2: vim /etc/hostname 加入：mq2</p>\n<p>node3: vim /etc/hostname 加入：mq3</p>\n</blockquote>\n<ol start=\"2\">\n<li>三个机器安装 rabbitmq，并同步 cokkie 文件，在 node1 上执行</li>\n</ol>\n<blockquote>\n<p>scp  /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/</p>\n<p>scp  /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/</p>\n</blockquote>\n<ol start=\"3\">\n<li>查看 cookie 是否一致</li>\n</ol>\n<blockquote>\n<p>node1:  cat /var/lib/rabbitmq/.erlang.cookie</p>\n<p>node2:  cat /var/lib/rabbitmq/.erlang.cookie</p>\n<p>node3:  cat /var/lib/rabbitmq/.erlang.cookie</p>\n</blockquote>\n<ol start=\"4\">\n<li>后台启动 rabbitmq 所有节点执行如下命令，启动成功后访问管理界面</li>\n</ol>\n<blockquote>\n<p>rabbitmq-server -detached</p>\n</blockquote>\n<ol start=\"5\">\n<li>在 node2 和 node3 执行加入集群命令</li>\n</ol>\n<ul>\n<li>\n<p>关闭</p>\n<p>rabbitmqctl stop_app</p>\n</li>\n<li>\n<p>加入集群</p>\n<p>rabbitmqctl join_cluster rabbit@mq1</p>\n</li>\n<li>\n<p>启动服务</p>\n<p>rabbitmqctl start_app</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li>查看集群状态，任意节点执行</li>\n</ol>\n<blockquote>\n<p>rabbitmqctl cluster_status</p>\n</blockquote>\n<ol start=\"7\">\n<li>如果出现以下显示，集群搭建成功</li>\n</ol>\n<blockquote>\n<p>[{nodes,[{disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]}]}],…</p>\n</blockquote>\n<ol start=\"8\">\n<li>登录管理界面，在 overview 页面下面的 nodes 有三个 mq</li>\n</ol>\n<h2 id=\"镜像集群\"><a class=\"anchor\" href=\"#镜像集群\">#</a> 镜像集群</h2>\n<p>策略说明</p>\n<blockquote>\n<p>Rabbitmqctl set_policy [-p &lt;vhost&gt;] [--priority &lt;priority&gt;] [--apply-to &lt;apply-to&gt;] &lt;name&gt; &lt;pattern&gt; &lt;definition&gt;</p>\n<p>-p Vhost：可选参数，针对指定的 vhost 下的 queue 进行设置</p>\n<p>Priority：可选参数，policy 的优先级</p>\n<p>Name：policy 的名称</p>\n<p>Pattren：queue 的匹配模式 (正则表达式)</p>\n<p>Definition：镜像定义，包括三个部分 ha-mode，ha-params，ha-sync-mode.</p>\n<ul>\n<li>\n<p>Ha-mode：指明镜像队列的模式，有效值为 all/exactly/nodes</p>\n<ul>\n<li>\n<p>All: 表示在集群中所有的节点上进行镜像</p>\n</li>\n<li>\n<p>Exactly: 表示在指定个数的节点上进行镜像，节点的个数由 ha-params 指定</p>\n</li>\n<li>\n<p>Nodes：表示在指定的节点上进行镜像，节点名称通过 ha-params 指定</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Ha-params：ha-mode 模式需要用到的参数</p>\n</li>\n<li>\n<p>Ha-sync-mode：进行队列中消息的同步方式，有效值为 automatic 和 manual</p>\n</li>\n</ul>\n</blockquote>\n<ol>\n<li>查看当前策略</li>\n</ol>\n<blockquote>\n<p>Rabbitmqctl list_policies</p>\n</blockquote>\n<ol start=\"2\">\n<li>添加策略</li>\n</ol>\n<blockquote>\n<p>Rabbitmqctl set_policy ha-all ‘^hello’ ‘{“ha-mode”:”all”,”ha-sync-mode”:”sutomatic”}’</p>\n<p>说明：策略正则表达式为 ”^”：匹配所有队列，^hello：匹配 jello 开头队列</p>\n</blockquote>\n<ol start=\"3\">\n<li>删除策略</li>\n</ol>\n<blockquote>\n<p>Rabbitmq clear_policy ha-all</p>\n</blockquote>\n<h1 id=\"java实现rabbitmq\"><a class=\"anchor\" href=\"#java实现rabbitmq\">#</a> Java 实现 RabbitMQ</h1>\n<h2 id=\"搭建项目\"><a class=\"anchor\" href=\"#搭建项目\">#</a> 搭建项目</h2>\n<ol>\n<li>启动 RabbitMQ</li>\n<li>进入管理界面，在 Admin 下面添加一个 User</li>\n</ol>\n<p><img data-src=\"/assets/RabbitMQ.assets/1.png\" alt=\"1\" /></p>\n<ol start=\"3\">\n<li>添加一个 Virtual Hosts</li>\n</ol>\n<p><img data-src=\"/assets/RabbitMQ.assets/2.png\" alt=\"2\" /></p>\n<ol start=\"4\">\n<li>设置权限</li>\n</ol>\n<p><img data-src=\"/assets/RabbitMQ.assets/3.png\" alt=\"3\" /></p>\n<p><img data-src=\"/assets/RabbitMQ.assets/4.png\" alt=\"4\" /></p>\n<ol start=\"5\">\n<li>\n<p>新建一个 Maven 项目</p>\n</li>\n<li>\n<p>导入 pom 依赖</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--junit 测试 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!--rabbitmq--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.rabbitmq<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>amqp-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"简单队列\"><a class=\"anchor\" href=\"#简单队列\">#</a> 简单队列</h2>\n<p><img data-src=\"/assets/RabbitMQ.assets/helloworld.png\" alt=\"helloworld\" /></p>\n<ol>\n<li>创建一个生产者 Provider 类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 生产消息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 创建连接 mq 的连接工厂对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 设置连接 rabbitmq 主机</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主机ip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 设置端口号</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 设置连接那个虚拟主机</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 设置访问虚拟主机的用户和密码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 获取连接对象</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 获取连接中的通道</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 通道绑定对应的消息队列</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 参数 1: 队列名称 如果队列不存在就自动创建</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 参数 2: 用来定义队列特性是否持久化</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 参数 3: 是否独占队列</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 参数 4: 是否在消费完成后自动删除队列</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 参数 5: 额外附加参数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 发布消息</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 参数 1: 交换机名称 参数 2: 队列名称 参数 3: 传递消息额外设置 参数 4: 消息的具体内容</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello rabbitmq\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>运行之后在管理界面 Queues 有一条消息</p>\n</blockquote>\n<p><img data-src=\"/assets/RabbitMQ.assets/5.png\" alt=\"5\" /></p>\n<ol start=\"2\">\n<li>创建一个消费者 Consumer 类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 创建连接 mq 的连接工厂对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.78.128\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 获取连接对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 获取连接中通道</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 通道绑定消息队列</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 参数 1: 消费那个队列的消息 消息名称</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 参数 2: 开始消息的自动确认机制</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 参数 3: 消费时的回调函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>运行之后，消息被消费</p>\n<p>输出 ----hello rabbitmq----</p>\n</blockquote>\n<p><img data-src=\"/assets/RabbitMQ.assets/6.png\" alt=\"6\" /></p>\n<h2 id=\"work模式\"><a class=\"anchor\" href=\"#work模式\">#</a> work 模式</h2>\n<p><img data-src=\"/assets/RabbitMQ.assets/work.png\" alt=\"work\" /></p>\n<ol>\n<li>创建一个连接关闭工具类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RabbitMQUtils</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ConnectionFactory</span> connectionFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主机ip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">closeConnectionAndChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Channel</span> channel<span class=\"token punctuation\">,</span><span class=\"token class-name\">Connection</span> connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建一个生产者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 获取通道</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\" hello work queue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeConnectionAndChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建两个消费者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 第二个参数自动确认机制，设置为 true，每个消费者都会收到相同数量的消息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>先将两个消费者运行起来，然后在运行生产者</p>\n<p>消费者 1 运行结果<br />\n 1 hello work queue<br />\n3 hello work queue<br />\n5 hello work queue<br />\n...<br />\n19 hello work queue</p>\n<p>消费者 2 运行结果<br />\n 2 hello work queue<br />\n4 hello work queue<br />\n6 hello work queue<br />\n...<br />\n20 hello work queue</p>\n</blockquote>\n<p>4. 再创建两个消费者</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 一次只接受一条未确认的消息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicQos</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 参数 2: 关闭自动确认机制</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 手动确认消息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicAck</span><span class=\"token punctuation\">(</span>envelope<span class=\"token punctuation\">.</span><span class=\"token function\">getDeliveryTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicQos</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicAck</span><span class=\"token punctuation\">(</span>envelope<span class=\"token punctuation\">.</span><span class=\"token function\">getDeliveryTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>先将两个消费者运行起来，然后在运行生产者</p>\n<p>消费者 3 运行结果<br />\n 1 hello work queue<br />\n5 hello work queue<br />\n8 hello work queue<br />\n12 hello work queue<br />\n15 hello work queue<br />\n19 hello work queue</p>\n<p>消费者 4 运行结果<br />\n 2 hello work queue<br />\n3 hello work queue<br />\n4 hello work queue<br />\n6 hello work queue<br />\n7 hello work queue<br />\n9 hello work queue<br />\n10 hello work queue<br />\n11 hello work queue<br />\n13 hello work queue<br />\n14 hello work queue<br />\n16 hello work queue<br />\n17 hello work queue<br />\n18 hello work queue<br />\n20 hello work queue</p>\n</blockquote>\n<h2 id=\"订阅模式\"><a class=\"anchor\" href=\"#订阅模式\">#</a> 订阅模式</h2>\n<p><img data-src=\"/assets/RabbitMQ.assets/fanout.png\" alt=\"fanout\" /></p>\n<ol>\n<li>创建一个生产者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 声明交换机</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 参数 1: 交换机的名称 参数 2: 交换机的类型 fanout 广播类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logs\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fanout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 发生资源</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logs\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fanout type message\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 释放资源</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeConnectionAndChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建三个消费者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 获取连接对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 通道绑定交换机</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logs\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fanout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 临时队列</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> queue <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 绑定交换机和队列</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token string\">\"logs\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-1：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-2：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-3：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>运行三个消费者，再运行生产者</li>\n</ol>\n<blockquote>\n<p>消费者 1 运行结果<br />\n消费者 - 1：fanout type message</p>\n<p>消费者 2 运行结果<br />\n消费者 - 2：fanout type message</p>\n<p>消费者 3 运行结果<br />\n消费者 - 3：fanout type message</p>\n</blockquote>\n<h2 id=\"路由模式\"><a class=\"anchor\" href=\"#路由模式\">#</a> 路由模式</h2>\n<p><img data-src=\"/assets/RabbitMQ.assets/direct.png\" alt=\"direct\" /></p>\n<ol>\n<li>创建一个生产者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 交换机名称</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"logs_direct\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 通过通道声明交换机</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 参数 1: 交换机名称 参数 2:direct 路由模式</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span><span class=\"token string\">\"direct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 发送消息</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> routingkey <span class=\"token operator\">=</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span>routingkey<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是direct模型发布的基于rout key:\"</span><span class=\"token operator\">+</span>routingkey<span class=\"token operator\">+</span><span class=\"token string\">\"的消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 关闭资源</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeConnectionAndChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建两个消费者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 获取连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 通过通道声明交换机以及交换机的类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log_direct\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"direct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 创建一个临时队列</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> queue <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 基于 rout key 绑定交换机和队列</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token string\">\"logs_direct\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 获取消费的消息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-1：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 获取连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 定义交换机名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"logs_direct\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 通道声明交换机的名称和类型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span><span class=\"token string\">\"direct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 创建一个临时队列</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">String</span> queue <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 基于 rout key 绑定交换机和队列</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span>exchangeName<span class=\"token punctuation\">,</span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span>exchangeName<span class=\"token punctuation\">,</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span>exchangeName<span class=\"token punctuation\">,</span><span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 获取消费的消息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者2：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>运行两个消费者，运行生产者，将 routingkey 改为 error，再运行一次生产者</li>\n</ol>\n<blockquote>\n<p>消费者 1 输出结果<br />\n消费者 - 1：这是 direct 模型发布的基于 rout key:error 的消息</p>\n<p>消费者 2 输出消息<br />\n消费者 2：这是 direct 模型发布的基于 rout key:info 的消息<br />\n消费者 2：这是 direct 模型发布的基于 rout key:error 的消息</p>\n</blockquote>\n<h2 id=\"主题模式\"><a class=\"anchor\" href=\"#主题模式\">#</a> 主题模式</h2>\n<p><img data-src=\"/assets/RabbitMQ.assets/topic.png\" alt=\"topic\" /></p>\n<ol>\n<li>创建一个生产者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 创建连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 声明交换机以及交换机类型 topic 动态路由</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"topic\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 发布消息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> routekey <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">,</span>routekey<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这里是topic动态路由模型,routekey：\"</span><span class=\"token operator\">+</span>routekey<span class=\"token operator\">+</span><span class=\"token string\">\"的消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 释放资源</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeConnectionAndChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建两个消费者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 创建连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 声明交换机的名称和类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"topic\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 定义一个临时的队列</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> queue <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 绑定交换机和队列</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// * 匹配一个</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// # 匹配零个或多个</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"user.*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者1：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 绑定队列和交换机</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"user.#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者2：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>运行两个消费者，运行生产者，将 routekey 改为 user.user，再运行一次生产者</li>\n</ol>\n<blockquote>\n<p>消费者 1 输出结果<br />\n消费者 1：这里是 topic 动态路由模型，routekey：user.user 的消息</p>\n<p>消费者 2 输出结果<br />\n消费者 2：这里是 topic 动态路由模型，routekey：user 的消息<br />\n消费者 2：这里是 topic 动态路由模型，routekey：user.user 的消息</p>\n</blockquote>\n<h1 id=\"springboot实现rabbitmq\"><a class=\"anchor\" href=\"#springboot实现rabbitmq\">#</a> SpringBoot 实现 RabbitMQ</h1>\n<p>...</p>\n","site":{"data":{}},"length":15785,"excerpt":"","more":"<h1 id=\"安装rabbitmq\"><a class=\"anchor\" href=\"#安装rabbitmq\">#</a> 安装 RabbitMQ</h1>\n<ol>\n<li>下载</li>\n</ol>\n<blockquote>\n<p>erlang-solutions-1.0-1.noarch.rpm,socat-1.7.3.3-2.el8.x86_64.rpm,rabbitmq-server-3.8.8-1.el8.noarch</p>\n</blockquote>\n<ol start=\"2\">\n<li>执行</li>\n</ol>\n<blockquote>\n<p>rpm -Uvh erlang-solutions-1.0-1.noarch.rpm</p>\n</blockquote>\n<ol start=\"3\">\n<li>出现 epel-release 问题执行以下命令</li>\n</ol>\n<blockquote>\n<p>yum -y install epel-release 再执行上条命令</p>\n</blockquote>\n<ol start=\"4\">\n<li>安装</li>\n</ol>\n<blockquote>\n<p>sudo yum install erlang</p>\n</blockquote>\n<ol start=\"5\">\n<li>检验</li>\n</ol>\n<blockquote>\n<p>erl</p>\n</blockquote>\n<ol start=\"6\">\n<li>查看安装路径</li>\n</ol>\n<blockquote>\n<p>whereis erlang</p>\n</blockquote>\n<ol start=\"7\">\n<li>安装配置包</li>\n</ol>\n<blockquote>\n<p>rpm – ivh socat-1.7.3.3-2.el8.x86_64.rpm</p>\n</blockquote>\n<ol start=\"8\">\n<li>安装 rabbitmq</li>\n</ol>\n<blockquote>\n<p>rpm -ivh rabbitmq-server-3.8.8-1.el8.noarch</p>\n</blockquote>\n<ol start=\"9\">\n<li>修改配置文件</li>\n</ol>\n<blockquote>\n<p>将配置文件 rabbitmq-config-example 复制到 /etc/rabbitmq/rabbitmq.config 下，并且修改配置文件，将 %%{loopback_users, []} 的注释取消掉</p>\n</blockquote>\n<ol start=\"10\">\n<li>启动 rabbitmq 的插件管理</li>\n</ol>\n<blockquote>\n<p>rabbitmq-plugins enable rabbitmq_management</p>\n</blockquote>\n<ol start=\"11\">\n<li>rabbitmq</li>\n</ol>\n<blockquote>\n<p>启动 systemctl start rabbitmq-server</p>\n<p>重启 systemctl restart rabbitmq-server</p>\n<p>停止 systemctl stoprabbitmq-server</p>\n<p>检查状态 systemctl status rabbitmq-server</p>\n</blockquote>\n<p>如果启动出现 ERROR: epmd error for host 192: badarg (unknown POSIX error) 编辑：vi /etc/rabbitmq/rabbitmq-env.conf 添加一行 NODENAME=rabbit@localhost</p>\n<ol start=\"12\">\n<li>关闭防火墙</li>\n</ol>\n<blockquote>\n<p>systemctl stop firefalld</p>\n</blockquote>\n<ol start=\"13\">\n<li>访问 IP:15672</li>\n</ol>\n<blockquote>\n<p>账号：guest</p>\n<p>密码：guest</p>\n</blockquote>\n<h1 id=\"管理命令行\"><a class=\"anchor\" href=\"#管理命令行\">#</a> 管理命令行</h1>\n<ol>\n<li>启动服务相关</li>\n</ol>\n<blockquote>\n<p>systemctl start | restart | stop | status rabbotmq-server</p>\n</blockquote>\n<ol start=\"2\">\n<li>管理命令行 用来在不使用 web 管理界面情况下命令操作 RabbitMQ</li>\n</ol>\n<blockquote>\n<p>Rabbitmqctl help 可以查看更多命令</p>\n</blockquote>\n<ol start=\"3\">\n<li>插件管理命令行</li>\n</ol>\n<blockquote>\n<p>Rabbitmqplugins enable | list | disable</p>\n</blockquote>\n<h1 id=\"搭建集群\"><a class=\"anchor\" href=\"#搭建集群\">#</a> 搭建集群</h1>\n<h2 id=\"普通集群\"><a class=\"anchor\" href=\"#普通集群\">#</a> 普通集群</h2>\n<ol>\n<li>克隆三台机器主机名和 IP 映射</li>\n</ol>\n<blockquote>\n<p>Vim /etc/hosts 加入：</p>\n<p>​    ip1：mq1</p>\n<p>​    ip2：mq2</p>\n<p>​    ip3：mq3</p>\n<p>node1: vim /etc/hostname 加入：mq1</p>\n<p>node2: vim /etc/hostname 加入：mq2</p>\n<p>node3: vim /etc/hostname 加入：mq3</p>\n</blockquote>\n<ol start=\"2\">\n<li>三个机器安装 rabbitmq，并同步 cokkie 文件，在 node1 上执行</li>\n</ol>\n<blockquote>\n<p>scp  /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/</p>\n<p>scp  /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/</p>\n</blockquote>\n<ol start=\"3\">\n<li>查看 cookie 是否一致</li>\n</ol>\n<blockquote>\n<p>node1:  cat /var/lib/rabbitmq/.erlang.cookie</p>\n<p>node2:  cat /var/lib/rabbitmq/.erlang.cookie</p>\n<p>node3:  cat /var/lib/rabbitmq/.erlang.cookie</p>\n</blockquote>\n<ol start=\"4\">\n<li>后台启动 rabbitmq 所有节点执行如下命令，启动成功后访问管理界面</li>\n</ol>\n<blockquote>\n<p>rabbitmq-server -detached</p>\n</blockquote>\n<ol start=\"5\">\n<li>在 node2 和 node3 执行加入集群命令</li>\n</ol>\n<ul>\n<li>\n<p>关闭</p>\n<p>rabbitmqctl stop_app</p>\n</li>\n<li>\n<p>加入集群</p>\n<p>rabbitmqctl join_cluster rabbit@mq1</p>\n</li>\n<li>\n<p>启动服务</p>\n<p>rabbitmqctl start_app</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li>查看集群状态，任意节点执行</li>\n</ol>\n<blockquote>\n<p>rabbitmqctl cluster_status</p>\n</blockquote>\n<ol start=\"7\">\n<li>如果出现以下显示，集群搭建成功</li>\n</ol>\n<blockquote>\n<p>[{nodes,[{disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]}]}],…</p>\n</blockquote>\n<ol start=\"8\">\n<li>登录管理界面，在 overview 页面下面的 nodes 有三个 mq</li>\n</ol>\n<h2 id=\"镜像集群\"><a class=\"anchor\" href=\"#镜像集群\">#</a> 镜像集群</h2>\n<p>策略说明</p>\n<blockquote>\n<p>Rabbitmqctl set_policy [-p &lt;vhost&gt;] [--priority &lt;priority&gt;] [--apply-to &lt;apply-to&gt;] &lt;name&gt; &lt;pattern&gt; &lt;definition&gt;</p>\n<p>-p Vhost：可选参数，针对指定的 vhost 下的 queue 进行设置</p>\n<p>Priority：可选参数，policy 的优先级</p>\n<p>Name：policy 的名称</p>\n<p>Pattren：queue 的匹配模式 (正则表达式)</p>\n<p>Definition：镜像定义，包括三个部分 ha-mode，ha-params，ha-sync-mode.</p>\n<ul>\n<li>\n<p>Ha-mode：指明镜像队列的模式，有效值为 all/exactly/nodes</p>\n<ul>\n<li>\n<p>All: 表示在集群中所有的节点上进行镜像</p>\n</li>\n<li>\n<p>Exactly: 表示在指定个数的节点上进行镜像，节点的个数由 ha-params 指定</p>\n</li>\n<li>\n<p>Nodes：表示在指定的节点上进行镜像，节点名称通过 ha-params 指定</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Ha-params：ha-mode 模式需要用到的参数</p>\n</li>\n<li>\n<p>Ha-sync-mode：进行队列中消息的同步方式，有效值为 automatic 和 manual</p>\n</li>\n</ul>\n</blockquote>\n<ol>\n<li>查看当前策略</li>\n</ol>\n<blockquote>\n<p>Rabbitmqctl list_policies</p>\n</blockquote>\n<ol start=\"2\">\n<li>添加策略</li>\n</ol>\n<blockquote>\n<p>Rabbitmqctl set_policy ha-all ‘^hello’ ‘{“ha-mode”:”all”,”ha-sync-mode”:”sutomatic”}’</p>\n<p>说明：策略正则表达式为 ”^”：匹配所有队列，^hello：匹配 jello 开头队列</p>\n</blockquote>\n<ol start=\"3\">\n<li>删除策略</li>\n</ol>\n<blockquote>\n<p>Rabbitmq clear_policy ha-all</p>\n</blockquote>\n<h1 id=\"java实现rabbitmq\"><a class=\"anchor\" href=\"#java实现rabbitmq\">#</a> Java 实现 RabbitMQ</h1>\n<h2 id=\"搭建项目\"><a class=\"anchor\" href=\"#搭建项目\">#</a> 搭建项目</h2>\n<ol>\n<li>启动 RabbitMQ</li>\n<li>进入管理界面，在 Admin 下面添加一个 User</li>\n</ol>\n<p><img data-src=\"/assets/RabbitMQ.assets/1.png\" alt=\"1\" /></p>\n<ol start=\"3\">\n<li>添加一个 Virtual Hosts</li>\n</ol>\n<p><img data-src=\"/assets/RabbitMQ.assets/2.png\" alt=\"2\" /></p>\n<ol start=\"4\">\n<li>设置权限</li>\n</ol>\n<p><img data-src=\"/assets/RabbitMQ.assets/3.png\" alt=\"3\" /></p>\n<p><img data-src=\"/assets/RabbitMQ.assets/4.png\" alt=\"4\" /></p>\n<ol start=\"5\">\n<li>\n<p>新建一个 Maven 项目</p>\n</li>\n<li>\n<p>导入 pom 依赖</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--junit 测试 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!--rabbitmq--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.rabbitmq<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>amqp-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"简单队列\"><a class=\"anchor\" href=\"#简单队列\">#</a> 简单队列</h2>\n<p><img data-src=\"/assets/RabbitMQ.assets/helloworld.png\" alt=\"helloworld\" /></p>\n<ol>\n<li>创建一个生产者 Provider 类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 生产消息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 创建连接 mq 的连接工厂对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 设置连接 rabbitmq 主机</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主机ip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 设置端口号</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 设置连接那个虚拟主机</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 设置访问虚拟主机的用户和密码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 获取连接对象</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 获取连接中的通道</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 通道绑定对应的消息队列</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 参数 1: 队列名称 如果队列不存在就自动创建</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 参数 2: 用来定义队列特性是否持久化</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 参数 3: 是否独占队列</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 参数 4: 是否在消费完成后自动删除队列</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 参数 5: 额外附加参数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 发布消息</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 参数 1: 交换机名称 参数 2: 队列名称 参数 3: 传递消息额外设置 参数 4: 消息的具体内容</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello rabbitmq\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>运行之后在管理界面 Queues 有一条消息</p>\n</blockquote>\n<p><img data-src=\"/assets/RabbitMQ.assets/5.png\" alt=\"5\" /></p>\n<ol start=\"2\">\n<li>创建一个消费者 Consumer 类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 创建连接 mq 的连接工厂对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.78.128\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 获取连接对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 获取连接中通道</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 通道绑定消息队列</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 参数 1: 消费那个队列的消息 消息名称</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 参数 2: 开始消息的自动确认机制</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 参数 3: 消费时的回调函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>运行之后，消息被消费</p>\n<p>输出 ----hello rabbitmq----</p>\n</blockquote>\n<p><img data-src=\"/assets/RabbitMQ.assets/6.png\" alt=\"6\" /></p>\n<h2 id=\"work模式\"><a class=\"anchor\" href=\"#work模式\">#</a> work 模式</h2>\n<p><img data-src=\"/assets/RabbitMQ.assets/work.png\" alt=\"work\" /></p>\n<ol>\n<li>创建一个连接关闭工具类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RabbitMQUtils</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ConnectionFactory</span> connectionFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主机ip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qiyin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">closeConnectionAndChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Channel</span> channel<span class=\"token punctuation\">,</span><span class=\"token class-name\">Connection</span> connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建一个生产者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 获取通道</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token string\">\" hello work queue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeConnectionAndChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建两个消费者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 第二个参数自动确认机制，设置为 true，每个消费者都会收到相同数量的消息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>先将两个消费者运行起来，然后在运行生产者</p>\n<p>消费者 1 运行结果<br />\n 1 hello work queue<br />\n3 hello work queue<br />\n5 hello work queue<br />\n...<br />\n19 hello work queue</p>\n<p>消费者 2 运行结果<br />\n 2 hello work queue<br />\n4 hello work queue<br />\n6 hello work queue<br />\n...<br />\n20 hello work queue</p>\n</blockquote>\n<p>4. 再创建两个消费者</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 一次只接受一条未确认的消息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicQos</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 参数 2: 关闭自动确认机制</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 手动确认消息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicAck</span><span class=\"token punctuation\">(</span>envelope<span class=\"token punctuation\">.</span><span class=\"token function\">getDeliveryTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicQos</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"work\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicAck</span><span class=\"token punctuation\">(</span>envelope<span class=\"token punctuation\">.</span><span class=\"token function\">getDeliveryTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>先将两个消费者运行起来，然后在运行生产者</p>\n<p>消费者 3 运行结果<br />\n 1 hello work queue<br />\n5 hello work queue<br />\n8 hello work queue<br />\n12 hello work queue<br />\n15 hello work queue<br />\n19 hello work queue</p>\n<p>消费者 4 运行结果<br />\n 2 hello work queue<br />\n3 hello work queue<br />\n4 hello work queue<br />\n6 hello work queue<br />\n7 hello work queue<br />\n9 hello work queue<br />\n10 hello work queue<br />\n11 hello work queue<br />\n13 hello work queue<br />\n14 hello work queue<br />\n16 hello work queue<br />\n17 hello work queue<br />\n18 hello work queue<br />\n20 hello work queue</p>\n</blockquote>\n<h2 id=\"订阅模式\"><a class=\"anchor\" href=\"#订阅模式\">#</a> 订阅模式</h2>\n<p><img data-src=\"/assets/RabbitMQ.assets/fanout.png\" alt=\"fanout\" /></p>\n<ol>\n<li>创建一个生产者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 声明交换机</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 参数 1: 交换机的名称 参数 2: 交换机的类型 fanout 广播类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logs\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fanout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 发生资源</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logs\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fanout type message\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 释放资源</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeConnectionAndChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建三个消费者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 获取连接对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 通道绑定交换机</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logs\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fanout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 临时队列</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> queue <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 绑定交换机和队列</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token string\">\"logs\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-1：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-2：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-3：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>运行三个消费者，再运行生产者</li>\n</ol>\n<blockquote>\n<p>消费者 1 运行结果<br />\n消费者 - 1：fanout type message</p>\n<p>消费者 2 运行结果<br />\n消费者 - 2：fanout type message</p>\n<p>消费者 3 运行结果<br />\n消费者 - 3：fanout type message</p>\n</blockquote>\n<h2 id=\"路由模式\"><a class=\"anchor\" href=\"#路由模式\">#</a> 路由模式</h2>\n<p><img data-src=\"/assets/RabbitMQ.assets/direct.png\" alt=\"direct\" /></p>\n<ol>\n<li>创建一个生产者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 交换机名称</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"logs_direct\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 通过通道声明交换机</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 参数 1: 交换机名称 参数 2:direct 路由模式</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span><span class=\"token string\">\"direct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 发送消息</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> routingkey <span class=\"token operator\">=</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span>routingkey<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是direct模型发布的基于rout key:\"</span><span class=\"token operator\">+</span>routingkey<span class=\"token operator\">+</span><span class=\"token string\">\"的消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 关闭资源</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeConnectionAndChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建两个消费者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 获取连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 通过通道声明交换机以及交换机的类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log_direct\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"direct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 创建一个临时队列</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> queue <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 基于 rout key 绑定交换机和队列</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token string\">\"logs_direct\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 获取消费的消息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-1：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 获取连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 定义交换机名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"logs_direct\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 通道声明交换机的名称和类型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span><span class=\"token string\">\"direct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 创建一个临时队列</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">String</span> queue <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 基于 rout key 绑定交换机和队列</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span>exchangeName<span class=\"token punctuation\">,</span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span>exchangeName<span class=\"token punctuation\">,</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span>exchangeName<span class=\"token punctuation\">,</span><span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 获取消费的消息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者2：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>运行两个消费者，运行生产者，将 routingkey 改为 error，再运行一次生产者</li>\n</ol>\n<blockquote>\n<p>消费者 1 输出结果<br />\n消费者 - 1：这是 direct 模型发布的基于 rout key:error 的消息</p>\n<p>消费者 2 输出消息<br />\n消费者 2：这是 direct 模型发布的基于 rout key:info 的消息<br />\n消费者 2：这是 direct 模型发布的基于 rout key:error 的消息</p>\n</blockquote>\n<h2 id=\"主题模式\"><a class=\"anchor\" href=\"#主题模式\">#</a> 主题模式</h2>\n<p><img data-src=\"/assets/RabbitMQ.assets/topic.png\" alt=\"topic\" /></p>\n<ol>\n<li>创建一个生产者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Provider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 创建连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 声明交换机以及交换机类型 topic 动态路由</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"topic\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 发布消息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> routekey <span class=\"token operator\">=</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">,</span>routekey<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这里是topic动态路由模型,routekey：\"</span><span class=\"token operator\">+</span>routekey<span class=\"token operator\">+</span><span class=\"token string\">\"的消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 释放资源</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeConnectionAndChannel</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">,</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建两个消费者</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 创建连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">RabbitMQUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 声明交换机的名称和类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"topic\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 定义一个临时的队列</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> queue <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 绑定交换机和队列</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// * 匹配一个</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// # 匹配零个或多个</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"user.*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者1：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer_2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 绑定队列和交换机</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token string\">\"topics\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"user.#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 消费消息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> AMQP<span class=\"token punctuation\">.</span><span class=\"token class-name\">BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者2：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>运行两个消费者，运行生产者，将 routekey 改为 user.user，再运行一次生产者</li>\n</ol>\n<blockquote>\n<p>消费者 1 输出结果<br />\n消费者 1：这里是 topic 动态路由模型，routekey：user.user 的消息</p>\n<p>消费者 2 输出结果<br />\n消费者 2：这里是 topic 动态路由模型，routekey：user 的消息<br />\n消费者 2：这里是 topic 动态路由模型，routekey：user.user 的消息</p>\n</blockquote>\n<h1 id=\"springboot实现rabbitmq\"><a class=\"anchor\" href=\"#springboot实现rabbitmq\">#</a> SpringBoot 实现 RabbitMQ</h1>\n<p>...</p>\n"},{"title":"Redis","date":"2020-08-01T07:32:00.000Z","_content":"\n# 下载地址\n\n> https://github.com/microsoftarchive/redis/tags\n\n# 基本操作\n\n## 信息添加\n\n> 设置key，value数据\n>\n> set key value\n\n## 获取值\n\n> 根据key值查找对应的value，如果不存在，返回空（nil）;\n>\n> get key\n\n## 清屏\n\n> clear\n\n## 帮助信息\n\n> 获取帮助文档\n>\n> help 命令名称\n>\n> Help @组名\n\n## 退出\n\n> 退出客户端\n>\n> quit 或者 exit\n\n# **数据类型**\n\n> String、hash、list、set、sorted_set\n\n## String\n\n### 基本操作\n\n1. 添加/修改数据\n\n   >  set key value\n\n2. 获取数据\n\n   >  get key\n\n3. 删除数据\n\n   >  del key\n\n4. 添加/几个多个数据\n\n   > mset key1 value1 key2 value2 …\n\n5. 获取多个数据\n\n   > mget key1 key2 …\n\n6. 获取数据字符个数\n\n   >  strlen key\n\n7. 追加信息到原始信息后部\n\n   > append key value\n\n### **拓展操作**\n\n1. 设置数据增加指定范围的值\n\n   > Incr key                   对于整数加一操作\n   >\n   > lncrby key increment         增加指定的整数\n   >\n   > Incrybyfloat key increment     增加指定的浮点数\n\n2.  设置数值数据减少指定范围的值\n\n   > decr key                  对于整数减一操作\n   >\n   > decryby key increment        减少指定的整数\n\n3. 设置数据具有指定的生命周期\n\n   >  setex key seconds value\n   >\n   > psetex key milliseconds value\n\n4. key的设置约定\n\n   > 数据库中的热点数据key命名惯例\n   >\n   > 表名：主键名：主键值：字段名\n   >\n   > eg：order:id:123:name\n\n## hash\n\n### **基本操作**\n\n1. 添加/修改数据\n\n   > H  set key field value\n\n2.  获取数据\n\n   > hget key field\n   >\n   > hgetall key\n\n3. 删除数据\n\n   > hdel key field1 {field2}\n\n4. 添加/修改多个数据\n\n   > hmset key field1 value1 field2 value2\n\n5. 获取多个数据\n\n   > hmget key field1 field2\n\n6. 获取哈希表中的字段数量\n\n   > hlen key\n\n7. 获取哈希表中是否存在指定的字段\n\n   > hexists key field\n\n### **拓展操作**\n\n1. 获取哈希表中所有的字段名或字段值\n\n   >  hkeys key\n   >\n   > hvals key\n\n2. 设置指定字段的数据增加指定范围的值\n\n   > hincrby key field increment\n   >\n   > hincrbyfloat key field increment\n\n## **list**\n\n### **基本操作**\n\n1. 添加/删除数据\n\n   > lpush key value1 {valur2} …\n   >\n   > rpush key value2 {value2} …\n\n2. 获取数据\n\n   > lrange key start stop\n   >\n   > lindex key index\n   >\n   > llen key\n\n3. 获取并移除数据\n\n   > lpop key\n   >\n   > rpop key\n\n### **拓展操作**\n\n1. 规定时间内获取并移除数据\n\n   > blpop key1 {key2} timeout\n   >\n   > brpop key1 {key2} timeout\n\n2. 移除指定数据\n\n   > lrem key count value\n\n## set\n\n### **基本操作**\n\n1. 添加数据\n\n   > sadd key member1 {member2}\n\n2. 获取所有数据\n\n   > smembers key\n\n3. 删除数据\n\n   > srem key member1 {member2}\n\n4. 获取集合数据总数\n\n   > scard key\n\n5. 判断集合中是否包含指定数据\n\n   > sismember key member\n\n### **拓展操作**\n\n1. 随机获取集合指定数量的数据\n\n   > srandmember key {count}\n\n2. 随机获取集合中的某个数据并将该数据移除集合\n\n   > spop key\n\n3. 求两个集合的交、并、差集\n\n   > sinter key1 {key2}\n   >\n   > sunion key1 {key2}\n   >\n   > sdiff key1 {key2}\n\n4. 求两个集合的交、并、差并存储到指定集合中\n\n   > Sinterstore destination key1 {key2}\n   >\n   > sunionstore destination key1 {key2}\n   >\n   > sdiffstore destination key1 {key2}\n\n5. 将指定数据从原始集合移动到目标集合中\n\n   > smove source destination member\n\n## **sorted_set**\n\n### **基本操作**\n\n1. 添加数据\n\n   > zadd key score1 member1 {score2 member2}\n\n2. 获取全部数据\n\n   > zrange key start stop [WINTHSCORES]\n   >\n   > zrevrange key start stop {WINTHSCORES}\n\n3. 删除数据\n\n   > zrem key member {member …}\n\n4. 按条件获取数据\n\n   > zrangebyscore key min max {WINTHSCORES} {LIMIT}\n   >\n   > zrevrangebyscore key min max {WINTHSCORES}\n\n5. 条件删除数据\n\n   > zremrangebyrank key start stop\n   >\n   > zremrangebyscore key min max\n\n6. 获取集合数量总数\n\n   > Zcard key\n   >\n   > Zcount key min max\n\n7. 集合交、并操作\n\n   > Zinterstore destination numkeys key {key …}    Zunionstore destination numkeys key {key…}\n\n### **拓展操作**\n\n1. 获取数据对应的索引\n\n   > Zrank key member\n   >\n   > Zrevrank key member\n\n2. Score值获取与修改\n\n   > Zscore key member\n   >\n   > Zincrby key increment member\n\n3. 获取当前时间\n\n   > Time\n\n# 通用操作\n\n## Key通用操作\n\n### **基本操作**\n\n1. 删除指定key\n\n   > del key\n\n2. 获取key是否存在\n\n   > exists key\n\n3. 获取Key的类型\n\n   > type key\n\n###     **拓展操作**\n\n1. 为指定的key设置有效期\n\n   > expire key seconds\n   >\n   > pexpire key milliseconds\n   >\n   > expireat key timestamp\n   >\n   > pexpireat key milliseconds-timestamp\n\n2. 获取key的有效时间\n\n   > ttl key\n   >\n   > pttl key\n\n3. 切换key从时效性转化为永久性\n\n   > persist key\n\n4. 查询key\n\n   > keys pattern\n\n5. 例子\n\n   > keys *      查询所有\n   >\n   > keys it*     查询所有以it开头\n   >\n   > keys *it     查询所有以it结尾\n   >\n   > keys ??it    查询所有前面两个为任意字符，后面以it结尾\n   >\n   > keys user:?   查询所有以user:开头，最后一个字符任意\n   >\n   > keys u[st]er:1 查询所有以u开头，以er:1结尾，中间包含一个字母,s或t \n\n###     **其他操作**\n\n​       为key改名\n\n​       rename key newkey\n\n​       renamenx key newkey\n\n​       对所有key排序\n\n​       sort\n\n​       其他key通用操作\n\n​       help @generic\n\n## 数据库通用操作\n\n### 基本操作\n\n1. 切换数据库\n\n   > delect index\n\n2. 其他操作\n\n   > quit\n   >\n   > ping\n   >\n   > echo message\n\n### 相关操作\n\n1. 数据移动\n\n   > move key db\n\n2. 数据清除\n\n   > dbsize\n   >\n   > flushdb\n   >\n   > flushall\n\n# **Jedis**\n\n1. 创建连接\n\n   > Jedis jedis = new Jedis(“127.0.0.1”,6379);\n\n2. 添加元素\n\n   > jedis.set(“str”,123);\n\n3.  关闭连接\n\n   > jedis.close();\n\n# **持久化**\n\n> RDB(记录数据)AOF(记录数据产生的过程)\n\n## RDB\n\n>save立即保存,如果时间过长会阻塞客服端指令\n>\n>bgsave 针对save阻塞问题的优化\n>\n>save配置\n>\n>save second changes\n\n## AOF\n\n> always(每次):零误差，性能低\n>\n> everysec(每秒)：准确性较高，性能较高，可能丢失一秒内的数据\n>\n> no(系统控制)：整体过程不可控\n>\n> aof重写（手动重写，自动重写）\n\n# 事务\n\n## 开事务\n\n> multi\n\n1. 对key’添加监视锁，在执行exec前如果key发生了变化，终止事务执行\n\n   > watch key1 {key2…}\n\n2. 取消对所有key的监视\n\n   > unwatch\n\n## 分布式锁\n\n使用setnx设置一个公共锁\n\n> setnx lock-key value\n>\n> 有值返回设置失败，无值返回设置成功\n>\n> 对于返回设置成功的，拥有控制权，进行下一步的业务操作\n>\n> 对于返回设置失败的，不具有控制权，排队或等待\n\n释放锁\n\n> del lock-key\n\n解决死锁\n\n分布式锁改良\n\n> 使用expire为锁key添加时间限定，到时不释放，放弃锁\n>\n> expire lock-name second\n>\n> pexpire lock-name milliseconds\n\n# 删除策略\n\n1. 定时删除\n\n   > 优点：节约内存，到时就删除，快速释放不必要的内存占用\n   >\n   > 缺点：cpu压力大，无论cpu次数负载量多高，均占用cpu\n   >\n   > 拿cpu换内存\n\n2. 惰性删除\n\n    >优点：节约cpu性能，发现必须删除的时候才删除\n    >\n    >缺点：内存压力大，出行长期占用内存的数据\n    >\n    >用存储空间换cpu性能\n\n3. 定期删除\n\n   >Cpu性能占用设置有峰值，检测频度可自定义设置\n   >\n   >内存压力不是很大，长期占用内存的类数据会被持续清理\n   >\n   >周期性抽查存储空间（随机抽查，重点抽查）\n\n​    逐出算法\n\n# 高级数据类型\n\n> **Bitmaps**\n>\n> **HyperLogLog**\n>\n> **GEO**\n\n# Redis集群","source":"_posts/computer/course-1/redis.md","raw":"---\ntitle: Redis\ndate: 2020/8/1 15:32\ncategories:\n\t- [计算机, 框架]\ntags:\n\t- Redis\n---\n\n# 下载地址\n\n> https://github.com/microsoftarchive/redis/tags\n\n# 基本操作\n\n## 信息添加\n\n> 设置key，value数据\n>\n> set key value\n\n## 获取值\n\n> 根据key值查找对应的value，如果不存在，返回空（nil）;\n>\n> get key\n\n## 清屏\n\n> clear\n\n## 帮助信息\n\n> 获取帮助文档\n>\n> help 命令名称\n>\n> Help @组名\n\n## 退出\n\n> 退出客户端\n>\n> quit 或者 exit\n\n# **数据类型**\n\n> String、hash、list、set、sorted_set\n\n## String\n\n### 基本操作\n\n1. 添加/修改数据\n\n   >  set key value\n\n2. 获取数据\n\n   >  get key\n\n3. 删除数据\n\n   >  del key\n\n4. 添加/几个多个数据\n\n   > mset key1 value1 key2 value2 …\n\n5. 获取多个数据\n\n   > mget key1 key2 …\n\n6. 获取数据字符个数\n\n   >  strlen key\n\n7. 追加信息到原始信息后部\n\n   > append key value\n\n### **拓展操作**\n\n1. 设置数据增加指定范围的值\n\n   > Incr key                   对于整数加一操作\n   >\n   > lncrby key increment         增加指定的整数\n   >\n   > Incrybyfloat key increment     增加指定的浮点数\n\n2.  设置数值数据减少指定范围的值\n\n   > decr key                  对于整数减一操作\n   >\n   > decryby key increment        减少指定的整数\n\n3. 设置数据具有指定的生命周期\n\n   >  setex key seconds value\n   >\n   > psetex key milliseconds value\n\n4. key的设置约定\n\n   > 数据库中的热点数据key命名惯例\n   >\n   > 表名：主键名：主键值：字段名\n   >\n   > eg：order:id:123:name\n\n## hash\n\n### **基本操作**\n\n1. 添加/修改数据\n\n   > H  set key field value\n\n2.  获取数据\n\n   > hget key field\n   >\n   > hgetall key\n\n3. 删除数据\n\n   > hdel key field1 {field2}\n\n4. 添加/修改多个数据\n\n   > hmset key field1 value1 field2 value2\n\n5. 获取多个数据\n\n   > hmget key field1 field2\n\n6. 获取哈希表中的字段数量\n\n   > hlen key\n\n7. 获取哈希表中是否存在指定的字段\n\n   > hexists key field\n\n### **拓展操作**\n\n1. 获取哈希表中所有的字段名或字段值\n\n   >  hkeys key\n   >\n   > hvals key\n\n2. 设置指定字段的数据增加指定范围的值\n\n   > hincrby key field increment\n   >\n   > hincrbyfloat key field increment\n\n## **list**\n\n### **基本操作**\n\n1. 添加/删除数据\n\n   > lpush key value1 {valur2} …\n   >\n   > rpush key value2 {value2} …\n\n2. 获取数据\n\n   > lrange key start stop\n   >\n   > lindex key index\n   >\n   > llen key\n\n3. 获取并移除数据\n\n   > lpop key\n   >\n   > rpop key\n\n### **拓展操作**\n\n1. 规定时间内获取并移除数据\n\n   > blpop key1 {key2} timeout\n   >\n   > brpop key1 {key2} timeout\n\n2. 移除指定数据\n\n   > lrem key count value\n\n## set\n\n### **基本操作**\n\n1. 添加数据\n\n   > sadd key member1 {member2}\n\n2. 获取所有数据\n\n   > smembers key\n\n3. 删除数据\n\n   > srem key member1 {member2}\n\n4. 获取集合数据总数\n\n   > scard key\n\n5. 判断集合中是否包含指定数据\n\n   > sismember key member\n\n### **拓展操作**\n\n1. 随机获取集合指定数量的数据\n\n   > srandmember key {count}\n\n2. 随机获取集合中的某个数据并将该数据移除集合\n\n   > spop key\n\n3. 求两个集合的交、并、差集\n\n   > sinter key1 {key2}\n   >\n   > sunion key1 {key2}\n   >\n   > sdiff key1 {key2}\n\n4. 求两个集合的交、并、差并存储到指定集合中\n\n   > Sinterstore destination key1 {key2}\n   >\n   > sunionstore destination key1 {key2}\n   >\n   > sdiffstore destination key1 {key2}\n\n5. 将指定数据从原始集合移动到目标集合中\n\n   > smove source destination member\n\n## **sorted_set**\n\n### **基本操作**\n\n1. 添加数据\n\n   > zadd key score1 member1 {score2 member2}\n\n2. 获取全部数据\n\n   > zrange key start stop [WINTHSCORES]\n   >\n   > zrevrange key start stop {WINTHSCORES}\n\n3. 删除数据\n\n   > zrem key member {member …}\n\n4. 按条件获取数据\n\n   > zrangebyscore key min max {WINTHSCORES} {LIMIT}\n   >\n   > zrevrangebyscore key min max {WINTHSCORES}\n\n5. 条件删除数据\n\n   > zremrangebyrank key start stop\n   >\n   > zremrangebyscore key min max\n\n6. 获取集合数量总数\n\n   > Zcard key\n   >\n   > Zcount key min max\n\n7. 集合交、并操作\n\n   > Zinterstore destination numkeys key {key …}    Zunionstore destination numkeys key {key…}\n\n### **拓展操作**\n\n1. 获取数据对应的索引\n\n   > Zrank key member\n   >\n   > Zrevrank key member\n\n2. Score值获取与修改\n\n   > Zscore key member\n   >\n   > Zincrby key increment member\n\n3. 获取当前时间\n\n   > Time\n\n# 通用操作\n\n## Key通用操作\n\n### **基本操作**\n\n1. 删除指定key\n\n   > del key\n\n2. 获取key是否存在\n\n   > exists key\n\n3. 获取Key的类型\n\n   > type key\n\n###     **拓展操作**\n\n1. 为指定的key设置有效期\n\n   > expire key seconds\n   >\n   > pexpire key milliseconds\n   >\n   > expireat key timestamp\n   >\n   > pexpireat key milliseconds-timestamp\n\n2. 获取key的有效时间\n\n   > ttl key\n   >\n   > pttl key\n\n3. 切换key从时效性转化为永久性\n\n   > persist key\n\n4. 查询key\n\n   > keys pattern\n\n5. 例子\n\n   > keys *      查询所有\n   >\n   > keys it*     查询所有以it开头\n   >\n   > keys *it     查询所有以it结尾\n   >\n   > keys ??it    查询所有前面两个为任意字符，后面以it结尾\n   >\n   > keys user:?   查询所有以user:开头，最后一个字符任意\n   >\n   > keys u[st]er:1 查询所有以u开头，以er:1结尾，中间包含一个字母,s或t \n\n###     **其他操作**\n\n​       为key改名\n\n​       rename key newkey\n\n​       renamenx key newkey\n\n​       对所有key排序\n\n​       sort\n\n​       其他key通用操作\n\n​       help @generic\n\n## 数据库通用操作\n\n### 基本操作\n\n1. 切换数据库\n\n   > delect index\n\n2. 其他操作\n\n   > quit\n   >\n   > ping\n   >\n   > echo message\n\n### 相关操作\n\n1. 数据移动\n\n   > move key db\n\n2. 数据清除\n\n   > dbsize\n   >\n   > flushdb\n   >\n   > flushall\n\n# **Jedis**\n\n1. 创建连接\n\n   > Jedis jedis = new Jedis(“127.0.0.1”,6379);\n\n2. 添加元素\n\n   > jedis.set(“str”,123);\n\n3.  关闭连接\n\n   > jedis.close();\n\n# **持久化**\n\n> RDB(记录数据)AOF(记录数据产生的过程)\n\n## RDB\n\n>save立即保存,如果时间过长会阻塞客服端指令\n>\n>bgsave 针对save阻塞问题的优化\n>\n>save配置\n>\n>save second changes\n\n## AOF\n\n> always(每次):零误差，性能低\n>\n> everysec(每秒)：准确性较高，性能较高，可能丢失一秒内的数据\n>\n> no(系统控制)：整体过程不可控\n>\n> aof重写（手动重写，自动重写）\n\n# 事务\n\n## 开事务\n\n> multi\n\n1. 对key’添加监视锁，在执行exec前如果key发生了变化，终止事务执行\n\n   > watch key1 {key2…}\n\n2. 取消对所有key的监视\n\n   > unwatch\n\n## 分布式锁\n\n使用setnx设置一个公共锁\n\n> setnx lock-key value\n>\n> 有值返回设置失败，无值返回设置成功\n>\n> 对于返回设置成功的，拥有控制权，进行下一步的业务操作\n>\n> 对于返回设置失败的，不具有控制权，排队或等待\n\n释放锁\n\n> del lock-key\n\n解决死锁\n\n分布式锁改良\n\n> 使用expire为锁key添加时间限定，到时不释放，放弃锁\n>\n> expire lock-name second\n>\n> pexpire lock-name milliseconds\n\n# 删除策略\n\n1. 定时删除\n\n   > 优点：节约内存，到时就删除，快速释放不必要的内存占用\n   >\n   > 缺点：cpu压力大，无论cpu次数负载量多高，均占用cpu\n   >\n   > 拿cpu换内存\n\n2. 惰性删除\n\n    >优点：节约cpu性能，发现必须删除的时候才删除\n    >\n    >缺点：内存压力大，出行长期占用内存的数据\n    >\n    >用存储空间换cpu性能\n\n3. 定期删除\n\n   >Cpu性能占用设置有峰值，检测频度可自定义设置\n   >\n   >内存压力不是很大，长期占用内存的类数据会被持续清理\n   >\n   >周期性抽查存储空间（随机抽查，重点抽查）\n\n​    逐出算法\n\n# 高级数据类型\n\n> **Bitmaps**\n>\n> **HyperLogLog**\n>\n> **GEO**\n\n# Redis集群","slug":"computer/course-1/redis","published":1,"updated":"2020-12-17T09:00:32.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg77000hb0uthnmz98xz","content":"<h1 id=\"下载地址\"><a class=\"anchor\" href=\"#下载地址\">#</a> 下载地址</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdGFyY2hpdmUvcmVkaXMvdGFncw==\">https://github.com/microsoftarchive/redis/tags</span></p>\n</blockquote>\n<h1 id=\"基本操作\"><a class=\"anchor\" href=\"#基本操作\">#</a> 基本操作</h1>\n<h2 id=\"信息添加\"><a class=\"anchor\" href=\"#信息添加\">#</a> 信息添加</h2>\n<blockquote>\n<p>设置 key，value 数据</p>\n<p>set key value</p>\n</blockquote>\n<h2 id=\"获取值\"><a class=\"anchor\" href=\"#获取值\">#</a> 获取值</h2>\n<blockquote>\n<p>根据 key 值查找对应的 value，如果不存在，返回空（nil）;</p>\n<p>get key</p>\n</blockquote>\n<h2 id=\"清屏\"><a class=\"anchor\" href=\"#清屏\">#</a> 清屏</h2>\n<blockquote>\n<p>clear</p>\n</blockquote>\n<h2 id=\"帮助信息\"><a class=\"anchor\" href=\"#帮助信息\">#</a> 帮助信息</h2>\n<blockquote>\n<p>获取帮助文档</p>\n<p>help 命令名称</p>\n<p>Help @组名</p>\n</blockquote>\n<h2 id=\"退出\"><a class=\"anchor\" href=\"#退出\">#</a> 退出</h2>\n<blockquote>\n<p>退出客户端</p>\n<p>quit 或者 exit</p>\n</blockquote>\n<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> <strong>数据类型</strong></h1>\n<blockquote>\n<p>String、hash、list、set、sorted_set</p>\n</blockquote>\n<h2 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h2>\n<h3 id=\"基本操作-2\"><a class=\"anchor\" href=\"#基本操作-2\">#</a> 基本操作</h3>\n<ol>\n<li>\n<p>添加 / 修改数据</p>\n<blockquote>\n<p>set key value</p>\n</blockquote>\n</li>\n<li>\n<p>获取数据</p>\n<blockquote>\n<p>get key</p>\n</blockquote>\n</li>\n<li>\n<p>删除数据</p>\n<blockquote>\n<p>del key</p>\n</blockquote>\n</li>\n<li>\n<p>添加 / 几个多个数据</p>\n<blockquote>\n<p>mset key1 value1 key2 value2 …</p>\n</blockquote>\n</li>\n<li>\n<p>获取多个数据</p>\n<blockquote>\n<p>mget key1 key2 …</p>\n</blockquote>\n</li>\n<li>\n<p>获取数据字符个数</p>\n<blockquote>\n<p>strlen key</p>\n</blockquote>\n</li>\n<li>\n<p>追加信息到原始信息后部</p>\n<blockquote>\n<p>append key value</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作\"><a class=\"anchor\" href=\"#拓展操作\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li>\n<p>设置数据增加指定范围的值</p>\n<blockquote>\n<p>Incr key                   对于整数加一操作</p>\n<p>lncrby key increment         增加指定的整数</p>\n<p>Incrybyfloat key increment     增加指定的浮点数</p>\n</blockquote>\n</li>\n<li>\n<p>设置数值数据减少指定范围的值</p>\n</li>\n</ol>\n<blockquote>\n<p>decr key                  对于整数减一操作</p>\n<p>decryby key increment        减少指定的整数</p>\n</blockquote>\n<ol start=\"3\">\n<li>\n<p>设置数据具有指定的生命周期</p>\n<blockquote>\n<p>setex key seconds value</p>\n<p>psetex key milliseconds value</p>\n</blockquote>\n</li>\n<li>\n<p>key 的设置约定</p>\n<blockquote>\n<p>数据库中的热点数据 key 命名惯例</p>\n<p>表名：主键名：主键值：字段名</p>\n<p>eg：order🆔123:name</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"hash\"><a class=\"anchor\" href=\"#hash\">#</a> hash</h2>\n<h3 id=\"基本操作-3\"><a class=\"anchor\" href=\"#基本操作-3\">#</a> <strong>基本操作</strong></h3>\n<ol>\n<li>\n<p>添加 / 修改数据</p>\n<blockquote>\n<p>H  set key field value</p>\n</blockquote>\n</li>\n<li>\n<p>获取数据</p>\n</li>\n</ol>\n<blockquote>\n<p>hget key field</p>\n<p>hgetall key</p>\n</blockquote>\n<ol start=\"3\">\n<li field2=\"\">\n<p>删除数据</p>\n<blockquote>\n<p>hdel key field1</p>\n</blockquote>\n</li>\n<li>\n<p>添加 / 修改多个数据</p>\n<blockquote>\n<p>hmset key field1 value1 field2 value2</p>\n</blockquote>\n</li>\n<li>\n<p>获取多个数据</p>\n<blockquote>\n<p>hmget key field1 field2</p>\n</blockquote>\n</li>\n<li>\n<p>获取哈希表中的字段数量</p>\n<blockquote>\n<p>hlen key</p>\n</blockquote>\n</li>\n<li>\n<p>获取哈希表中是否存在指定的字段</p>\n<blockquote>\n<p>hexists key field</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作-2\"><a class=\"anchor\" href=\"#拓展操作-2\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li>\n<p>获取哈希表中所有的字段名或字段值</p>\n<blockquote>\n<p>hkeys key</p>\n<p>hvals key</p>\n</blockquote>\n</li>\n<li>\n<p>设置指定字段的数据增加指定范围的值</p>\n<blockquote>\n<p>hincrby key field increment</p>\n<p>hincrbyfloat key field increment</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> <strong>list</strong></h2>\n<h3 id=\"基本操作-4\"><a class=\"anchor\" href=\"#基本操作-4\">#</a> <strong>基本操作</strong></h3>\n<ol>\n<li>\n<p>添加 / 删除数据</p>\n<blockquote>\n<p>lpush key value1 {valur2} …</p>\n<p>rpush key value2 {value2} …</p>\n</blockquote>\n</li>\n<li>\n<p>获取数据</p>\n<blockquote>\n<p>lrange key start stop</p>\n<p>lindex key index</p>\n<p>llen key</p>\n</blockquote>\n</li>\n<li>\n<p>获取并移除数据</p>\n<blockquote>\n<p>lpop key</p>\n<p>rpop key</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作-3\"><a class=\"anchor\" href=\"#拓展操作-3\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li>\n<p>规定时间内获取并移除数据</p>\n<blockquote>\n<p>blpop key1 {key2} timeout</p>\n<p>brpop key1 {key2} timeout</p>\n</blockquote>\n</li>\n<li>\n<p>移除指定数据</p>\n<blockquote>\n<p>lrem key count value</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> set</h2>\n<h3 id=\"基本操作-5\"><a class=\"anchor\" href=\"#基本操作-5\">#</a> <strong>基本操作</strong></h3>\n<ol>\n<li member2=\"\">\n<p>添加数据</p>\n<blockquote>\n<p>sadd key member1</p>\n</blockquote>\n</li>\n<li>\n<p>获取所有数据</p>\n<blockquote>\n<p>smembers key</p>\n</blockquote>\n</li>\n<li member2=\"\">\n<p>删除数据</p>\n<blockquote>\n<p>srem key member1</p>\n</blockquote>\n</li>\n<li>\n<p>获取集合数据总数</p>\n<blockquote>\n<p>scard key</p>\n</blockquote>\n</li>\n<li>\n<p>判断集合中是否包含指定数据</p>\n<blockquote>\n<p>sismember key member</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作-4\"><a class=\"anchor\" href=\"#拓展操作-4\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li count=\"\">\n<p>随机获取集合指定数量的数据</p>\n<blockquote>\n<p>srandmember key</p>\n</blockquote>\n</li>\n<li>\n<p>随机获取集合中的某个数据并将该数据移除集合</p>\n<blockquote>\n<p>spop key</p>\n</blockquote>\n</li>\n<li key2=\"\">\n<p>求两个集合的交、并、差集</p>\n<blockquote>\n<p key2=\"\">sinter key1</p>\n<p key2=\"\">sunion key1</p>\n<p>sdiff key1</p>\n</blockquote>\n</li>\n<li key2=\"\">\n<p>求两个集合的交、并、差并存储到指定集合中</p>\n<blockquote>\n<p key2=\"\">Sinterstore destination key1</p>\n<p key2=\"\">sunionstore destination key1</p>\n<p>sdiffstore destination key1</p>\n</blockquote>\n</li>\n<li>\n<p>将指定数据从原始集合移动到目标集合中</p>\n<blockquote>\n<p>smove source destination member</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"sorted_set\"><a class=\"anchor\" href=\"#sorted_set\">#</a> <strong>sorted_set</strong></h2>\n<h3 id=\"基本操作-6\"><a class=\"anchor\" href=\"#基本操作-6\">#</a> <strong>基本操作</strong></h3>\n<ol key…=\"\">\n<li score2=\"\" member2=\"\">\n<p>添加数据</p>\n<blockquote>\n<p>zadd key score1 member1</p>\n</blockquote>\n</li>\n<li WINTHSCORES=\"\">\n<p>获取全部数据</p>\n<blockquote>\n<p>zrange key start stop [WINTHSCORES]</p>\n<p>zrevrange key start stop</p>\n</blockquote>\n</li>\n<li member=\"\" …=\"\">\n<p>删除数据</p>\n<blockquote>\n<p>zrem key member</p>\n</blockquote>\n</li>\n<li WINTHSCORES=\"\">\n<p>按条件获取数据</p>\n<blockquote>\n<p LIMIT=\"\">zrangebyscore key min max {WINTHSCORES}</p>\n<p>zrevrangebyscore key min max</p>\n</blockquote>\n</li>\n<li>\n<p>条件删除数据</p>\n<blockquote>\n<p>zremrangebyrank key start stop</p>\n<p>zremrangebyscore key min max</p>\n</blockquote>\n</li>\n<li>\n<p>获取集合数量总数</p>\n<blockquote>\n<p>Zcard key</p>\n<p>Zcount key min max</p>\n</blockquote>\n</li>\n<li>\n<p>集合交、并操作</p>\n<blockquote>\n<p>Zinterstore destination numkeys key {key …}    Zunionstore destination numkeys key</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作-5\"><a class=\"anchor\" href=\"#拓展操作-5\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li>\n<p>获取数据对应的索引</p>\n<blockquote>\n<p>Zrank key member</p>\n<p>Zrevrank key member</p>\n</blockquote>\n</li>\n<li>\n<p>Score 值获取与修改</p>\n<blockquote>\n<p>Zscore key member</p>\n<p>Zincrby key increment member</p>\n</blockquote>\n</li>\n<li>\n<p>获取当前时间</p>\n<blockquote>\n<p>Time</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"通用操作\"><a class=\"anchor\" href=\"#通用操作\">#</a> 通用操作</h1>\n<h2 id=\"key通用操作\"><a class=\"anchor\" href=\"#key通用操作\">#</a> Key 通用操作</h2>\n<h3 id=\"基本操作-7\"><a class=\"anchor\" href=\"#基本操作-7\">#</a> <strong>基本操作</strong></h3>\n<ol>\n<li>\n<p>删除指定 key</p>\n<blockquote>\n<p>del key</p>\n</blockquote>\n</li>\n<li>\n<p>获取 key 是否存在</p>\n<blockquote>\n<p>exists key</p>\n</blockquote>\n</li>\n<li>\n<p>获取 Key 的类型</p>\n<blockquote>\n<p>type key</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作-6\"><a class=\"anchor\" href=\"#拓展操作-6\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li>\n<p>为指定的 key 设置有效期</p>\n<blockquote>\n<p>expire key seconds</p>\n<p>pexpire key milliseconds</p>\n<p>expireat key timestamp</p>\n<p>pexpireat key milliseconds-timestamp</p>\n</blockquote>\n</li>\n<li>\n<p>获取 key 的有效时间</p>\n<blockquote>\n<p>ttl key</p>\n<p>pttl key</p>\n</blockquote>\n</li>\n<li>\n<p>切换 key 从时效性转化为永久性</p>\n<blockquote>\n<p>persist key</p>\n</blockquote>\n</li>\n<li>\n<p>查询 key</p>\n<blockquote>\n<p>keys pattern</p>\n</blockquote>\n</li>\n<li>\n<p>例子</p>\n<blockquote>\n<p>keys *      查询所有</p>\n<p>keys it*     查询所有以 it 开头</p>\n<p>keys *it     查询所有以 it 结尾</p>\n<p>keys ??it    查询所有前面两个为任意字符，后面以 it 结尾</p>\n<p>keys user:?   查询所有以 user: 开头，最后一个字符任意</p>\n<p>keys u [st] er:1 查询所有以 u 开头，以 er:1 结尾，中间包含一个字母，s 或 t</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"其他操作\"><a class=\"anchor\" href=\"#其他操作\">#</a> <strong>其他操作</strong></h3>\n<p>​       为 key 改名</p>\n<p>​       rename key newkey</p>\n<p>​       renamenx key newkey</p>\n<p>​       对所有 key 排序</p>\n<p>​       sort</p>\n<p>​       其他 key 通用操作</p>\n<p>​       help @generic</p>\n<h2 id=\"数据库通用操作\"><a class=\"anchor\" href=\"#数据库通用操作\">#</a> 数据库通用操作</h2>\n<h3 id=\"基本操作-8\"><a class=\"anchor\" href=\"#基本操作-8\">#</a> 基本操作</h3>\n<ol>\n<li>\n<p>切换数据库</p>\n<blockquote>\n<p>delect index</p>\n</blockquote>\n</li>\n<li>\n<p>其他操作</p>\n<blockquote>\n<p>quit</p>\n<p>ping</p>\n<p>echo message</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"相关操作\"><a class=\"anchor\" href=\"#相关操作\">#</a> 相关操作</h3>\n<ol>\n<li>\n<p>数据移动</p>\n<blockquote>\n<p>move key db</p>\n</blockquote>\n</li>\n<li>\n<p>数据清除</p>\n<blockquote>\n<p>dbsize</p>\n<p>flushdb</p>\n<p>flushall</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"jedis\"><a class=\"anchor\" href=\"#jedis\">#</a> <strong>Jedis</strong></h1>\n<ol>\n<li>\n<p>创建连接</p>\n<blockquote>\n<p>Jedis jedis = new Jedis(“127.0.0.1”,6379);</p>\n</blockquote>\n</li>\n<li>\n<p>添加元素</p>\n<blockquote>\n<p>jedis.set(“str”,123);</p>\n</blockquote>\n</li>\n<li>\n<p>关闭连接</p>\n</li>\n</ol>\n<blockquote>\n<p>jedis.close();</p>\n</blockquote>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> <strong>持久化</strong></h1>\n<blockquote>\n<p>RDB (记录数据) AOF (记录数据产生的过程)</p>\n</blockquote>\n<h2 id=\"rdb\"><a class=\"anchor\" href=\"#rdb\">#</a> RDB</h2>\n<blockquote>\n<p>save 立即保存，如果时间过长会阻塞客服端指令</p>\n<p>bgsave 针对 save 阻塞问题的优化</p>\n<p>save 配置</p>\n<p>save second changes</p>\n</blockquote>\n<h2 id=\"aof\"><a class=\"anchor\" href=\"#aof\">#</a> AOF</h2>\n<blockquote>\n<p>always (每次): 零误差，性能低</p>\n<p>everysec (每秒)：准确性较高，性能较高，可能丢失一秒内的数据</p>\n<p>no (系统控制)：整体过程不可控</p>\n<p>aof 重写（手动重写，自动重写）</p>\n</blockquote>\n<h1 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h1>\n<h2 id=\"开事务\"><a class=\"anchor\" href=\"#开事务\">#</a> 开事务</h2>\n<blockquote>\n<p>multi</p>\n</blockquote>\n<ol>\n<li key2…=\"\">\n<p>对 key’添加监视锁，在执行 exec 前如果 key 发生了变化，终止事务执行</p>\n<blockquote>\n<p>watch key1</p>\n</blockquote>\n</li>\n<li>\n<p>取消对所有 key 的监视</p>\n<blockquote>\n<p>unwatch</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"分布式锁\"><a class=\"anchor\" href=\"#分布式锁\">#</a> 分布式锁</h2>\n<p>使用 setnx 设置一个公共锁</p>\n<blockquote>\n<p>setnx lock-key value</p>\n<p>有值返回设置失败，无值返回设置成功</p>\n<p>对于返回设置成功的，拥有控制权，进行下一步的业务操作</p>\n<p>对于返回设置失败的，不具有控制权，排队或等待</p>\n</blockquote>\n<p>释放锁</p>\n<blockquote>\n<p>del lock-key</p>\n</blockquote>\n<p>解决死锁</p>\n<p>分布式锁改良</p>\n<blockquote>\n<p>使用 expire 为锁 key 添加时间限定，到时不释放，放弃锁</p>\n<p>expire lock-name second</p>\n<p>pexpire lock-name milliseconds</p>\n</blockquote>\n<h1 id=\"删除策略\"><a class=\"anchor\" href=\"#删除策略\">#</a> 删除策略</h1>\n<ol>\n<li>\n<p>定时删除</p>\n<blockquote>\n<p>优点：节约内存，到时就删除，快速释放不必要的内存占用</p>\n<p>缺点：cpu 压力大，无论 cpu 次数负载量多高，均占用 cpu</p>\n<p>拿 cpu 换内存</p>\n</blockquote>\n</li>\n<li>\n<p>惰性删除</p>\n<blockquote>\n<p>优点：节约 cpu 性能，发现必须删除的时候才删除</p>\n<p>缺点：内存压力大，出行长期占用内存的数据</p>\n<p>用存储空间换 cpu 性能</p>\n</blockquote>\n</li>\n<li>\n<p>定期删除</p>\n<blockquote>\n<p>Cpu 性能占用设置有峰值，检测频度可自定义设置</p>\n<p>内存压力不是很大，长期占用内存的类数据会被持续清理</p>\n<p>周期性抽查存储空间（随机抽查，重点抽查）</p>\n</blockquote>\n</li>\n</ol>\n<p>​    逐出算法</p>\n<h1 id=\"高级数据类型\"><a class=\"anchor\" href=\"#高级数据类型\">#</a> 高级数据类型</h1>\n<blockquote>\n<p><strong>Bitmaps</strong></p>\n<p><strong>HyperLogLog</strong></p>\n<p><strong>GEO</strong></p>\n</blockquote>\n<h1 id=\"redis集群\"><a class=\"anchor\" href=\"#redis集群\">#</a> Redis 集群</h1>\n","site":{"data":{}},"length":3292,"excerpt":"","more":"<h1 id=\"下载地址\"><a class=\"anchor\" href=\"#下载地址\">#</a> 下载地址</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdGFyY2hpdmUvcmVkaXMvdGFncw==\">https://github.com/microsoftarchive/redis/tags</span></p>\n</blockquote>\n<h1 id=\"基本操作\"><a class=\"anchor\" href=\"#基本操作\">#</a> 基本操作</h1>\n<h2 id=\"信息添加\"><a class=\"anchor\" href=\"#信息添加\">#</a> 信息添加</h2>\n<blockquote>\n<p>设置 key，value 数据</p>\n<p>set key value</p>\n</blockquote>\n<h2 id=\"获取值\"><a class=\"anchor\" href=\"#获取值\">#</a> 获取值</h2>\n<blockquote>\n<p>根据 key 值查找对应的 value，如果不存在，返回空（nil）;</p>\n<p>get key</p>\n</blockquote>\n<h2 id=\"清屏\"><a class=\"anchor\" href=\"#清屏\">#</a> 清屏</h2>\n<blockquote>\n<p>clear</p>\n</blockquote>\n<h2 id=\"帮助信息\"><a class=\"anchor\" href=\"#帮助信息\">#</a> 帮助信息</h2>\n<blockquote>\n<p>获取帮助文档</p>\n<p>help 命令名称</p>\n<p>Help @组名</p>\n</blockquote>\n<h2 id=\"退出\"><a class=\"anchor\" href=\"#退出\">#</a> 退出</h2>\n<blockquote>\n<p>退出客户端</p>\n<p>quit 或者 exit</p>\n</blockquote>\n<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> <strong>数据类型</strong></h1>\n<blockquote>\n<p>String、hash、list、set、sorted_set</p>\n</blockquote>\n<h2 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h2>\n<h3 id=\"基本操作-2\"><a class=\"anchor\" href=\"#基本操作-2\">#</a> 基本操作</h3>\n<ol>\n<li>\n<p>添加 / 修改数据</p>\n<blockquote>\n<p>set key value</p>\n</blockquote>\n</li>\n<li>\n<p>获取数据</p>\n<blockquote>\n<p>get key</p>\n</blockquote>\n</li>\n<li>\n<p>删除数据</p>\n<blockquote>\n<p>del key</p>\n</blockquote>\n</li>\n<li>\n<p>添加 / 几个多个数据</p>\n<blockquote>\n<p>mset key1 value1 key2 value2 …</p>\n</blockquote>\n</li>\n<li>\n<p>获取多个数据</p>\n<blockquote>\n<p>mget key1 key2 …</p>\n</blockquote>\n</li>\n<li>\n<p>获取数据字符个数</p>\n<blockquote>\n<p>strlen key</p>\n</blockquote>\n</li>\n<li>\n<p>追加信息到原始信息后部</p>\n<blockquote>\n<p>append key value</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作\"><a class=\"anchor\" href=\"#拓展操作\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li>\n<p>设置数据增加指定范围的值</p>\n<blockquote>\n<p>Incr key                   对于整数加一操作</p>\n<p>lncrby key increment         增加指定的整数</p>\n<p>Incrybyfloat key increment     增加指定的浮点数</p>\n</blockquote>\n</li>\n<li>\n<p>设置数值数据减少指定范围的值</p>\n</li>\n</ol>\n<blockquote>\n<p>decr key                  对于整数减一操作</p>\n<p>decryby key increment        减少指定的整数</p>\n</blockquote>\n<ol start=\"3\">\n<li>\n<p>设置数据具有指定的生命周期</p>\n<blockquote>\n<p>setex key seconds value</p>\n<p>psetex key milliseconds value</p>\n</blockquote>\n</li>\n<li>\n<p>key 的设置约定</p>\n<blockquote>\n<p>数据库中的热点数据 key 命名惯例</p>\n<p>表名：主键名：主键值：字段名</p>\n<p>eg：order🆔123:name</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"hash\"><a class=\"anchor\" href=\"#hash\">#</a> hash</h2>\n<h3 id=\"基本操作-3\"><a class=\"anchor\" href=\"#基本操作-3\">#</a> <strong>基本操作</strong></h3>\n<ol>\n<li>\n<p>添加 / 修改数据</p>\n<blockquote>\n<p>H  set key field value</p>\n</blockquote>\n</li>\n<li>\n<p>获取数据</p>\n</li>\n</ol>\n<blockquote>\n<p>hget key field</p>\n<p>hgetall key</p>\n</blockquote>\n<ol start=\"3\">\n<li field2=\"\">\n<p>删除数据</p>\n<blockquote>\n<p>hdel key field1</p>\n</blockquote>\n</li>\n<li>\n<p>添加 / 修改多个数据</p>\n<blockquote>\n<p>hmset key field1 value1 field2 value2</p>\n</blockquote>\n</li>\n<li>\n<p>获取多个数据</p>\n<blockquote>\n<p>hmget key field1 field2</p>\n</blockquote>\n</li>\n<li>\n<p>获取哈希表中的字段数量</p>\n<blockquote>\n<p>hlen key</p>\n</blockquote>\n</li>\n<li>\n<p>获取哈希表中是否存在指定的字段</p>\n<blockquote>\n<p>hexists key field</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作-2\"><a class=\"anchor\" href=\"#拓展操作-2\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li>\n<p>获取哈希表中所有的字段名或字段值</p>\n<blockquote>\n<p>hkeys key</p>\n<p>hvals key</p>\n</blockquote>\n</li>\n<li>\n<p>设置指定字段的数据增加指定范围的值</p>\n<blockquote>\n<p>hincrby key field increment</p>\n<p>hincrbyfloat key field increment</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> <strong>list</strong></h2>\n<h3 id=\"基本操作-4\"><a class=\"anchor\" href=\"#基本操作-4\">#</a> <strong>基本操作</strong></h3>\n<ol>\n<li>\n<p>添加 / 删除数据</p>\n<blockquote>\n<p>lpush key value1 {valur2} …</p>\n<p>rpush key value2 {value2} …</p>\n</blockquote>\n</li>\n<li>\n<p>获取数据</p>\n<blockquote>\n<p>lrange key start stop</p>\n<p>lindex key index</p>\n<p>llen key</p>\n</blockquote>\n</li>\n<li>\n<p>获取并移除数据</p>\n<blockquote>\n<p>lpop key</p>\n<p>rpop key</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作-3\"><a class=\"anchor\" href=\"#拓展操作-3\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li>\n<p>规定时间内获取并移除数据</p>\n<blockquote>\n<p>blpop key1 {key2} timeout</p>\n<p>brpop key1 {key2} timeout</p>\n</blockquote>\n</li>\n<li>\n<p>移除指定数据</p>\n<blockquote>\n<p>lrem key count value</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> set</h2>\n<h3 id=\"基本操作-5\"><a class=\"anchor\" href=\"#基本操作-5\">#</a> <strong>基本操作</strong></h3>\n<ol>\n<li member2=\"\">\n<p>添加数据</p>\n<blockquote>\n<p>sadd key member1</p>\n</blockquote>\n</li>\n<li>\n<p>获取所有数据</p>\n<blockquote>\n<p>smembers key</p>\n</blockquote>\n</li>\n<li member2=\"\">\n<p>删除数据</p>\n<blockquote>\n<p>srem key member1</p>\n</blockquote>\n</li>\n<li>\n<p>获取集合数据总数</p>\n<blockquote>\n<p>scard key</p>\n</blockquote>\n</li>\n<li>\n<p>判断集合中是否包含指定数据</p>\n<blockquote>\n<p>sismember key member</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作-4\"><a class=\"anchor\" href=\"#拓展操作-4\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li count=\"\">\n<p>随机获取集合指定数量的数据</p>\n<blockquote>\n<p>srandmember key</p>\n</blockquote>\n</li>\n<li>\n<p>随机获取集合中的某个数据并将该数据移除集合</p>\n<blockquote>\n<p>spop key</p>\n</blockquote>\n</li>\n<li key2=\"\">\n<p>求两个集合的交、并、差集</p>\n<blockquote>\n<p key2=\"\">sinter key1</p>\n<p key2=\"\">sunion key1</p>\n<p>sdiff key1</p>\n</blockquote>\n</li>\n<li key2=\"\">\n<p>求两个集合的交、并、差并存储到指定集合中</p>\n<blockquote>\n<p key2=\"\">Sinterstore destination key1</p>\n<p key2=\"\">sunionstore destination key1</p>\n<p>sdiffstore destination key1</p>\n</blockquote>\n</li>\n<li>\n<p>将指定数据从原始集合移动到目标集合中</p>\n<blockquote>\n<p>smove source destination member</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"sorted_set\"><a class=\"anchor\" href=\"#sorted_set\">#</a> <strong>sorted_set</strong></h2>\n<h3 id=\"基本操作-6\"><a class=\"anchor\" href=\"#基本操作-6\">#</a> <strong>基本操作</strong></h3>\n<ol key…=\"\">\n<li score2=\"\" member2=\"\">\n<p>添加数据</p>\n<blockquote>\n<p>zadd key score1 member1</p>\n</blockquote>\n</li>\n<li WINTHSCORES=\"\">\n<p>获取全部数据</p>\n<blockquote>\n<p>zrange key start stop [WINTHSCORES]</p>\n<p>zrevrange key start stop</p>\n</blockquote>\n</li>\n<li member=\"\" …=\"\">\n<p>删除数据</p>\n<blockquote>\n<p>zrem key member</p>\n</blockquote>\n</li>\n<li WINTHSCORES=\"\">\n<p>按条件获取数据</p>\n<blockquote>\n<p LIMIT=\"\">zrangebyscore key min max {WINTHSCORES}</p>\n<p>zrevrangebyscore key min max</p>\n</blockquote>\n</li>\n<li>\n<p>条件删除数据</p>\n<blockquote>\n<p>zremrangebyrank key start stop</p>\n<p>zremrangebyscore key min max</p>\n</blockquote>\n</li>\n<li>\n<p>获取集合数量总数</p>\n<blockquote>\n<p>Zcard key</p>\n<p>Zcount key min max</p>\n</blockquote>\n</li>\n<li>\n<p>集合交、并操作</p>\n<blockquote>\n<p>Zinterstore destination numkeys key {key …}    Zunionstore destination numkeys key</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作-5\"><a class=\"anchor\" href=\"#拓展操作-5\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li>\n<p>获取数据对应的索引</p>\n<blockquote>\n<p>Zrank key member</p>\n<p>Zrevrank key member</p>\n</blockquote>\n</li>\n<li>\n<p>Score 值获取与修改</p>\n<blockquote>\n<p>Zscore key member</p>\n<p>Zincrby key increment member</p>\n</blockquote>\n</li>\n<li>\n<p>获取当前时间</p>\n<blockquote>\n<p>Time</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"通用操作\"><a class=\"anchor\" href=\"#通用操作\">#</a> 通用操作</h1>\n<h2 id=\"key通用操作\"><a class=\"anchor\" href=\"#key通用操作\">#</a> Key 通用操作</h2>\n<h3 id=\"基本操作-7\"><a class=\"anchor\" href=\"#基本操作-7\">#</a> <strong>基本操作</strong></h3>\n<ol>\n<li>\n<p>删除指定 key</p>\n<blockquote>\n<p>del key</p>\n</blockquote>\n</li>\n<li>\n<p>获取 key 是否存在</p>\n<blockquote>\n<p>exists key</p>\n</blockquote>\n</li>\n<li>\n<p>获取 Key 的类型</p>\n<blockquote>\n<p>type key</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"拓展操作-6\"><a class=\"anchor\" href=\"#拓展操作-6\">#</a> <strong>拓展操作</strong></h3>\n<ol>\n<li>\n<p>为指定的 key 设置有效期</p>\n<blockquote>\n<p>expire key seconds</p>\n<p>pexpire key milliseconds</p>\n<p>expireat key timestamp</p>\n<p>pexpireat key milliseconds-timestamp</p>\n</blockquote>\n</li>\n<li>\n<p>获取 key 的有效时间</p>\n<blockquote>\n<p>ttl key</p>\n<p>pttl key</p>\n</blockquote>\n</li>\n<li>\n<p>切换 key 从时效性转化为永久性</p>\n<blockquote>\n<p>persist key</p>\n</blockquote>\n</li>\n<li>\n<p>查询 key</p>\n<blockquote>\n<p>keys pattern</p>\n</blockquote>\n</li>\n<li>\n<p>例子</p>\n<blockquote>\n<p>keys *      查询所有</p>\n<p>keys it*     查询所有以 it 开头</p>\n<p>keys *it     查询所有以 it 结尾</p>\n<p>keys ??it    查询所有前面两个为任意字符，后面以 it 结尾</p>\n<p>keys user:?   查询所有以 user: 开头，最后一个字符任意</p>\n<p>keys u [st] er:1 查询所有以 u 开头，以 er:1 结尾，中间包含一个字母，s 或 t</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"其他操作\"><a class=\"anchor\" href=\"#其他操作\">#</a> <strong>其他操作</strong></h3>\n<p>​       为 key 改名</p>\n<p>​       rename key newkey</p>\n<p>​       renamenx key newkey</p>\n<p>​       对所有 key 排序</p>\n<p>​       sort</p>\n<p>​       其他 key 通用操作</p>\n<p>​       help @generic</p>\n<h2 id=\"数据库通用操作\"><a class=\"anchor\" href=\"#数据库通用操作\">#</a> 数据库通用操作</h2>\n<h3 id=\"基本操作-8\"><a class=\"anchor\" href=\"#基本操作-8\">#</a> 基本操作</h3>\n<ol>\n<li>\n<p>切换数据库</p>\n<blockquote>\n<p>delect index</p>\n</blockquote>\n</li>\n<li>\n<p>其他操作</p>\n<blockquote>\n<p>quit</p>\n<p>ping</p>\n<p>echo message</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"相关操作\"><a class=\"anchor\" href=\"#相关操作\">#</a> 相关操作</h3>\n<ol>\n<li>\n<p>数据移动</p>\n<blockquote>\n<p>move key db</p>\n</blockquote>\n</li>\n<li>\n<p>数据清除</p>\n<blockquote>\n<p>dbsize</p>\n<p>flushdb</p>\n<p>flushall</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"jedis\"><a class=\"anchor\" href=\"#jedis\">#</a> <strong>Jedis</strong></h1>\n<ol>\n<li>\n<p>创建连接</p>\n<blockquote>\n<p>Jedis jedis = new Jedis(“127.0.0.1”,6379);</p>\n</blockquote>\n</li>\n<li>\n<p>添加元素</p>\n<blockquote>\n<p>jedis.set(“str”,123);</p>\n</blockquote>\n</li>\n<li>\n<p>关闭连接</p>\n</li>\n</ol>\n<blockquote>\n<p>jedis.close();</p>\n</blockquote>\n<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> <strong>持久化</strong></h1>\n<blockquote>\n<p>RDB (记录数据) AOF (记录数据产生的过程)</p>\n</blockquote>\n<h2 id=\"rdb\"><a class=\"anchor\" href=\"#rdb\">#</a> RDB</h2>\n<blockquote>\n<p>save 立即保存，如果时间过长会阻塞客服端指令</p>\n<p>bgsave 针对 save 阻塞问题的优化</p>\n<p>save 配置</p>\n<p>save second changes</p>\n</blockquote>\n<h2 id=\"aof\"><a class=\"anchor\" href=\"#aof\">#</a> AOF</h2>\n<blockquote>\n<p>always (每次): 零误差，性能低</p>\n<p>everysec (每秒)：准确性较高，性能较高，可能丢失一秒内的数据</p>\n<p>no (系统控制)：整体过程不可控</p>\n<p>aof 重写（手动重写，自动重写）</p>\n</blockquote>\n<h1 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h1>\n<h2 id=\"开事务\"><a class=\"anchor\" href=\"#开事务\">#</a> 开事务</h2>\n<blockquote>\n<p>multi</p>\n</blockquote>\n<ol>\n<li key2…=\"\">\n<p>对 key’添加监视锁，在执行 exec 前如果 key 发生了变化，终止事务执行</p>\n<blockquote>\n<p>watch key1</p>\n</blockquote>\n</li>\n<li>\n<p>取消对所有 key 的监视</p>\n<blockquote>\n<p>unwatch</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"分布式锁\"><a class=\"anchor\" href=\"#分布式锁\">#</a> 分布式锁</h2>\n<p>使用 setnx 设置一个公共锁</p>\n<blockquote>\n<p>setnx lock-key value</p>\n<p>有值返回设置失败，无值返回设置成功</p>\n<p>对于返回设置成功的，拥有控制权，进行下一步的业务操作</p>\n<p>对于返回设置失败的，不具有控制权，排队或等待</p>\n</blockquote>\n<p>释放锁</p>\n<blockquote>\n<p>del lock-key</p>\n</blockquote>\n<p>解决死锁</p>\n<p>分布式锁改良</p>\n<blockquote>\n<p>使用 expire 为锁 key 添加时间限定，到时不释放，放弃锁</p>\n<p>expire lock-name second</p>\n<p>pexpire lock-name milliseconds</p>\n</blockquote>\n<h1 id=\"删除策略\"><a class=\"anchor\" href=\"#删除策略\">#</a> 删除策略</h1>\n<ol>\n<li>\n<p>定时删除</p>\n<blockquote>\n<p>优点：节约内存，到时就删除，快速释放不必要的内存占用</p>\n<p>缺点：cpu 压力大，无论 cpu 次数负载量多高，均占用 cpu</p>\n<p>拿 cpu 换内存</p>\n</blockquote>\n</li>\n<li>\n<p>惰性删除</p>\n<blockquote>\n<p>优点：节约 cpu 性能，发现必须删除的时候才删除</p>\n<p>缺点：内存压力大，出行长期占用内存的数据</p>\n<p>用存储空间换 cpu 性能</p>\n</blockquote>\n</li>\n<li>\n<p>定期删除</p>\n<blockquote>\n<p>Cpu 性能占用设置有峰值，检测频度可自定义设置</p>\n<p>内存压力不是很大，长期占用内存的类数据会被持续清理</p>\n<p>周期性抽查存储空间（随机抽查，重点抽查）</p>\n</blockquote>\n</li>\n</ol>\n<p>​    逐出算法</p>\n<h1 id=\"高级数据类型\"><a class=\"anchor\" href=\"#高级数据类型\">#</a> 高级数据类型</h1>\n<blockquote>\n<p><strong>Bitmaps</strong></p>\n<p><strong>HyperLogLog</strong></p>\n<p><strong>GEO</strong></p>\n</blockquote>\n<h1 id=\"redis集群\"><a class=\"anchor\" href=\"#redis集群\">#</a> Redis 集群</h1>\n"},{"title":"Java基础","date":"2020-12-15T11:21:00.000Z","_content":"\n# 基本数据类型\n\n| 数据类型 |    占用字节     |     取值范围     |    默认值    | 包装类型  |\n| :------: | :-------------: | :--------------: | :----------: | :-------: |\n| boolean  | 只有true和false |   true、false    |    false     |  Boolean  |\n|   byte   |     1(8位）     |     -128~127     |      0       |   Byte    |\n|  short   |     2(16位)     |   -32768~32767   |      0       |   Short   |\n|   int    |     4(32位)     |   -2^31~2^31-1   |      0       |  Integer  |\n|   long   |        8        |   -2^63~2^63-1   |     0.0l     |   Long    |\n|  float   |        4        |  3.4E-45~1.4E38  |     0.0f     |   Float   |\n|  double  |        8        | 4.9E-324~1.8E308 |      0       |  Double   |\n|   char   |        2        |     0~65535      | \\u0000(空格) | Character |\n\n# 访问控制修饰符\n\n| 修饰符  | 当前类 | 同包 | 子类 | 其他包 |\n| :-----: | :----: | :--: | :--: | :----: |\n| public  |   √    |  √   |  √   |   √    |\n| protect |   √    |  √   |  √   |   ×    |\n| default |   √    |  √   |  ×   |   ×    |\n| private |   √    |  ×   |  ×   |   ×    |\n\n# Character类\n\n* 方法\n\n> **isDigit()**\n> 是否是一个数字字符\n>\n> **isWhitespace()**\n> 是否是一个空白字符\n>\n> **isUpperCase()**\n> 是否是大写字母\n>\n> **isLowerCase()**\n> 是否是小写字母\n>\n> **toUpperCase() **\n> 指定字母的大写形式\n>\n> **toLowerCase()**\n> 指定字母的小写形式\n>\n> **toString()**\n> 返回字符的字符串形式，字符串的长度仅为1\n\n# String类\n\n## 常用方法\n\n> char charAt(int index)：返回指定索引处的 char 值。\n>\n> int compareTo(String anotherString)：按字典顺序比较两个字符串。\n>\n> String concat(String str)：将指定字符串连接到此字符串的结尾。\n>\n> byte[] getBytes()：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。\n>\n> int indexOf(int ch)：返回指定字符在此字符串中第一次出现处的索引。\n>\n> boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。\n>\n> String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。\n>\n> String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。\n>\n> char[] toCharArray()：将此字符串转换为一个新的字符数组。\n>\n> String substring(int beginIndex, int endIndex)：返回一个新字符串，它是此字符串的一个子字符串。\n>\n> contains(CharSequence chars)：判断是否包含指定的字符系列。\n>\n> isEmpty()：判断字符串是否为空。\n\n## 其他方法\n\n>int compareTo(Object o)：把这个字符串和另一个对象比较。\n>\n>int compareToIgnoreCase(String str)：按字典顺序比较两个字符串，不考虑大小写。\n>\n>static String copyValueOf(char[] data)：返回指定数组中表示该字符序列的 String。\n>\n>static String copyValueOf(char[] data, int offset, int count)：返回指定数组中表示该字符序列的 String。\n>\n>boolean equals(Object anObject)：将此字符串与指定的对象比较。\n>\n>boolean equalsIgnoreCase(String anotherString)：将此 String 与另一个 String 比较，不考虑大小写。\n>\n>byte[] getBytes(String charsetName)：使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。\n>\n>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)：将字符从此字符串复制到目标字符数组。\n>\n>int hashCode()：返回此字符串的哈希码。\n>\n>int indexOf(int ch, int fromIndex)：返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。\n>\n>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引。\n>\n>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。\n>\n>int lastIndexOf(int ch)：返回指定字符在此字符串中最后一次出现处的索引。\n>\n>int lastIndexOf(int ch, int fromIndex)：返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。\n>\n>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引。\n>\n>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。\n>\n>int length()：返回此字符串的长度。\n>\n>boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)：测试两个字符串区域是否相等。\n>\n>boolean regionMatches(int toffset, String other, int ooffset, int len)：测试两个字符串区域是否相等。\n>\n>String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。\n>\n>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串。\n>\n>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始。\n>\n>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始。\n>\n>CharSequence subSequence(int beginIndex, int endIndex)：：返回一个新的字符序列，它是此序列的一个子序列。\n>\n>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的一个子字符串。\n>\n>String toLowerCase()：使用默认语言环境的规则将此 String 中的所有字符都转换为小写。\n>\n>String toLowerCase(Locale locale)：：使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。\n>\n>String toString()：：返回此对象本身（它已经是一个字符串！）。\n>\n>String toUpperCase()：使用默认语言环境的规则将此 String 中的所有字符都转换为大写。\n>\n>String toUpperCase(Locale locale)：使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。\n>\n>String trim()：返回字符串的副本，忽略前导空白和尾部空白。\n>\n>static String valueOf(primitive data type x)：返回给定data type类型x参数的字符串表示形式。\n\n## 例子\n\n1. split\n\n> **split(String regex, int limit)**\n>\n> **regex** -- 正则表达式分隔符。\n>\n> **limit** -- 分割的份数。\n\n```java\nString s = \"1,2,3,4,5\";\nString num[] = s.split(\",\");\n```\n\n2. subSequence\n\n> **subSequence(int beginIndex, int endIndex)**\n>\n> **beginIndex** -- 起始索引（包括）。\n>\n> **endIndex** -- 结束索引（不包括）。\n\n```java\nString s = \"HelloWord\";\nSystem.out.println(s.subSequence(1, 4));\n```\n\n> 输出：ell\n\n# StringBuffer类\n\n* 方法\n\n> **public StringBuffer append(String s)**\n> 将指定的字符串追加到此字符序列。\n>\n> **public StringBuffer reverse()**\n> 将此字符序列用其反转形式取代。\n>\n> **public delete(int start, int end)**\n> 移除此序列的子字符串中的字符。\n>\n> **public insert(int offset, int i)**\n> 将 int 参数的字符串表示形式插入此序列中。\n>\n> **replace(int start, int end, String str)**\n> 使用给定 String 中的字符替换此序列的子字符串中的字符。\n\n# String与StringBuilder\n\n>**StringBuilder拼接字符串耗时耗空间，需要用StringBuilder**\n>\n\n```java\nString s;\nStringBuilder sb = new StringBuilder(s);\n```\n\n>**拼接sb.append(字符串)**\n>\n\n```java\nString s = sb.toString();\n```\n\n# Math类\n\n>**xxxValue()**\n>将 Number 对象转换为xxx数据类型的值并返回。\n>\n>**compareTo()**\n>将number对象与参数比较。\n>\n>**equals()**\n>判断number对象是否与参数相等。\n>\n>**valueOf()**\n>返回一个 Number 对象指定的内置数据类型\n>\n>**toString()**\n>以字符串形式返回值。\n>\n>**parseInt()**\n>将字符串解析为int类型。\n>\n>**abs()**\n>返回参数的绝对值。\n>\n>**ceil()**\n>返回大于等于( >= )给定参数的的最小整数，类型为双精度浮点型。\n>\n>**floor()**\n>返回小于等于（<=）给定参数的最大整数 。\n>\n>**rint()**\n>返回与参数最接近的整数。返回类型为double。\n>\n>**round()**\n>它表示**四舍五入**，算法为 **Math.floor(x+0.5)**，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。\n>\n>**min()**\n>返回两个参数中的最小值。\n>\n>**max()**\n>返回两个参数中的最大值。\n>\n>**pow()**\n>返回第一个参数的第二个参数次方。\n>\n>**sqrt()**\n>求参数的算术平方根。\n>\n>**random()**\n>返回一个随机数\n\n# Arrays 类\n\n> **Arrays.asList()**\n> 可以从 Array 转换成 List。可以作为其他集合类型构造器的参数\n>\n> **Arrays.binarySearch()**\n> 在一个已排序的或者其中一段中快速查找\n>\n> **Arrays.copyOf()**\n> 如果你想扩大数组容量又不想改变它的内容的时候可以使用这个方法\n>\n> **Arrays.copyOfRange()**\n> 可以复制整个数组或其中的一部分\n>\n> **Arrays.deepEquals()**\n> **Arrays.deepHashCode()**\n> Arrays.equals/hashCode的高级版本，支持子数组的操作\n>\n> **Arrays.equals()**\n> 如果你想要比较两个数组是否相等，应该调用这个方法而不是数组对象中的 equals方法（数组对象中没有重写equals()方法，所以这个方法之比较引用而不比较内容）。这个方法集合了Java 5的自动装箱和无参变量的特性，来实现将一个变量快速地传给 equals()方法——所以这个方法在比较了对象的类型之后是直接传值进去比较的\n>\n> **Arrays.fill()**\n> 用一个给定的值填充整个数组或其中的一部分\n>\n> **Arrays.hashCode()**\n> 用来根据数组的内容计算其哈希值（数组对象的hashCode()不可用）。这个方法集合了Java 5的自动装箱和无参变量的特性，来实现将一个变量快速地传给 Arrays.hashcode方法——只是传值进去，不是对象\n>\n> **Arrays.sort()**\n> 对整个数组或者数组的一部分进行排序。也可以使用此方法用给定的比较器对对象数组进行排序\n>\n> **Arrays.toString()**\n> 打印数组的内容\n\n# 日期时间\n\n## 基本方法\n\n> **boolean after(Date date)**\n> 若当调用此方法的Date对象在指定日期之后返回true,否则返回false。\n>\n> **boolean before(Date date)**\n> 若当调用此方法的Date对象在指定日期之前返回true,否则返回false。\n>\n> **int compareTo(Date date)**\n> 比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。\n>\n> **boolean equals(Object date)**\n> 当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。\n>\n> **long getTime( )** \n> 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。\n>\n> **void setTime(long time)**\n> 用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。\n>\n> **String toString( )** \n> 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。\n\n## 日期和时间的格式化编码\n\n| **字母** | **描述**                 | **示例**                |\n| :------- | :----------------------- | :---------------------- |\n| G        | 纪元标记                 | AD                      |\n| y        | 四位年份                 | 2001                    |\n| M        | 月份                     | July or 07              |\n| d        | 一个月的日期             | 10                      |\n| h        | A.M./P.M. (1~12)格式小时 | 12                      |\n| H        | 一天中的小时 (0~23)      | 22                      |\n| m        | 分钟数                   | 30                      |\n| s        | 秒数                     | 55                      |\n| S        | 毫秒数                   | 234                     |\n| E        | 星期几                   | Tuesday                 |\n| D        | 一年中的日子             | 360                     |\n| F        | 一个月中第几周的周几     | 2 (second Wed. in July) |\n| w        | 一年中第几周             | 40                      |\n| W        | 一个月中第几周           | 1                       |\n| a        | A.M./P.M. 标记           | PM                      |\n| k        | 一天中的小时(1~24)       | 24                      |\n| K        | A.M./P.M. (0~11)格式小时 | 10                      |\n| z        | 时区                     | Eastern Standard Time   |\n| '        | 文字定界符               | Delimiter               |\n| \"        | 单引号                   | `                       |\n\n## String与Date自定义格式转化\n\n```java\nDate date = new Date()\n```\n\n>获取当前时间返回一个毫秒值\n\n```java\nLong time = System.currentTimeMills();\ndate.setTime(time);\n```\n\n>将date转化为String\n\n```java\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm:ss\");\nString s = sdf.format(date);\n```\n\n>将String转化为date\n\n```java\nString s = \"yyyy-MM-dd HH:mm:ss\";\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm:ss\");\ndate = sdf.parse(s);\n```\n\n# 正则表达式\n\n| 字符          | 说明                                                         |\n| :------------ | :----------------------------------------------------------- |\n| \\             | 将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，\"n\"匹配字符\"n\"。\"\\n\"匹配换行符。序列\"\\\\\\\\\"匹配\"\\\\\"，\"\\\\(\"匹配\"(\"。 |\n| ^             | 匹配输入字符串开始的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，^ 还会与\"\\n\"或\"\\r\"之后的位置匹配。 |\n| $             | 匹配输入字符串结尾的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，$ 还会与\"\\n\"或\"\\r\"之前的位置匹配。 |\n| *             | 零次或多次匹配前面的字符或子表达式。例如，zo* 匹配\"z\"和\"zoo\"。* 等效于 {0,}。 |\n| +             | 一次或多次匹配前面的字符或子表达式。例如，\"zo+\"与\"zo\"和\"zoo\"匹配，但与\"z\"不匹配。+ 等效于 {1,}。 |\n| ?             | 零次或一次匹配前面的字符或子表达式。例如，\"do(es)?\"匹配\"do\"或\"does\"中的\"do\"。? 等效于 {0,1}。 |\n| {*n*}         | *n* 是非负整数。正好匹配 *n* 次。例如，\"o{2}\"与\"Bob\"中的\"o\"不匹配，但与\"food\"中的两个\"o\"匹配。 |\n| {*n*,}        | *n* 是非负整数。至少匹配 *n* 次。例如，\"o{2,}\"不匹配\"Bob\"中的\"o\"，而匹配\"foooood\"中的所有 o。\"o{1,}\"等效于\"o+\"。\"o{0,}\"等效于\"o*\"。 |\n| {*n*,*m*}     | *m* 和 *n* 是非负整数，其中 *n* <= *m*。匹配至少 *n* 次，至多 *m* 次。例如，\"o{1,3}\"匹配\"fooooood\"中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。 |\n| ?             | 当此字符紧随任何其他限定符（*、+、?、{*n*}、{*n*,}、{*n*,*m*}）之后时，匹配模式是\"非贪心的\"。\"非贪心的\"模式匹配搜索到的、尽可能短的字符串，而默认的\"贪心的\"模式匹配搜索到的、尽可能长的字符串。例如，在字符串\"oooo\"中，\"o+?\"只匹配单个\"o\"，而\"o+\"匹配所有\"o\"。 |\n| .             | 匹配除\"\\r\\n\"之外的任何单个字符。若要匹配包括\"\\r\\n\"在内的任意字符，请使用诸如\"[\\s\\S]\"之类的模式。 |\n| (*pattern*)   | 匹配 *pattern* 并捕获该匹配的子表达式。可以使用 **$0…$9** 属性从结果\"匹配\"集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用\"\\(\"或者\"\\)\"。 |\n| (?:*pattern*) | 匹配 *pattern* 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用\"or\"字符 (\\|) 组合模式部件的情况很有用。例如，'industr(?:y\\|ies) 是比 'industry\\|industries' 更经济的表达式。 |\n| (?=*pattern*) | 执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 *pattern* 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95\\|98\\|NT\\|2000)' 匹配\"Windows 2000\"中的\"Windows\"，但不匹配\"Windows 3.1\"中的\"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 |\n| (?!*pattern*) | 执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 *pattern* 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95\\|98\\|NT\\|2000)' 匹配\"Windows 3.1\"中的 \"Windows\"，但不匹配\"Windows 2000\"中的\"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 |\n| *x*\\|*y*      | 匹配 *x* 或 *y*。例如，'z\\|food' 匹配\"z\"或\"food\"。'(z\\|f)ood' 匹配\"zood\"或\"food\"。 |\n| [*xyz*]       | 字符集。匹配包含的任一字符。例如，\"[abc]\"匹配\"plain\"中的\"a\"。 |\n| [^*xyz*]      | 反向字符集。匹配未包含的任何字符。例如，\"[^abc]\"匹配\"plain\"中\"p\"，\"l\"，\"i\"，\"n\"。 |\n| [*a-z*]       | 字符范围。匹配指定范围内的任何字符。例如，\"[a-z]\"匹配\"a\"到\"z\"范围内的任何小写字母。 |\n| [^*a-z*]      | 反向范围字符。匹配不在指定的范围内的任何字符。例如，\"[^a-z]\"匹配任何不在\"a\"到\"z\"范围内的任何字符。 |\n| \\b            | 匹配一个字边界，即字与空格间的位置。例如，\"er\\b\"匹配\"never\"中的\"er\"，但不匹配\"verb\"中的\"er\"。 |\n| \\B            | 非字边界匹配。\"er\\B\"匹配\"verb\"中的\"er\"，但不匹配\"never\"中的\"er\"。 |\n| \\c*x*         | 匹配 *x* 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。*x* 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是\"c\"字符本身。 |\n| \\d            | 数字字符匹配。等效于 [0-9]。                                 |\n| \\D            | 非数字字符匹配。等效于 [^0-9]。                              |\n| \\f            | 换页符匹配。等效于 \\x0c 和 \\cL。                             |\n| \\n            | 换行符匹配。等效于 \\x0a 和 \\cJ。                             |\n| \\r            | 匹配一个回车符。等效于 \\x0d 和 \\cM。                         |\n| \\s            | 匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。 |\n| \\S            | 匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。                 |\n| \\t            | 制表符匹配。与 \\x09 和 \\cI 等效。                            |\n| \\v            | 垂直制表符匹配。与 \\x0b 和 \\cK 等效。                        |\n| \\w            | 匹配任何字类字符，包括下划线。与\"[A-Za-z0-9_]\"等效。         |\n| \\W            | 与任何非单词字符匹配。与\"[^A-Za-z0-9_]\"等效。                |\n| \\x*n*         | 匹配 *n*，此处的 *n* 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，\"\\x41\"匹配\"A\"。\"\\x041\"与\"\\x04\"&\"1\"等效。允许在正则表达式中使用 ASCII 代码。 |\n| \\*num*        | 匹配 *num*，此处的 *num* 是一个正整数。到捕获匹配的反向引用。例如，\"(.)\\1\"匹配两个连续的相同字符。 |\n| \\*n*          | 标识一个八进制转义码或反向引用。如果 \\*n* 前面至少有 *n* 个捕获子表达式，那么 *n* 是反向引用。否则，如果 *n* 是八进制数 (0-7)，那么 *n* 是八进制转义码。 |\n| \\*nm*         | 标识一个八进制转义码或反向引用。如果 \\*nm* 前面至少有 *nm* 个捕获子表达式，那么 *nm* 是反向引用。如果 \\*nm* 前面至少有 *n* 个捕获，则 *n* 是反向引用，后面跟有字符 *m*。如果两种前面的情况都不存在，则 \\*nm* 匹配八进制值 *nm*，其中 *n* 和 *m* 是八进制数字 (0-7)。 |\n| \\nml          | 当 *n* 是八进制数 (0-3)，*m* 和 *l* 是八进制数 (0-7) 时，匹配八进制转义码 *nml*。 |\n| \\u*n*         | 匹配 *n*，其中 *n* 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。 |\n\n# 逻辑运算符\n\n>**&：逻辑与，无论左边为真还是假，后面都要执行**\n>\n>**&&： 短路与，只要左边为假，后面都不执行**\n>\n>**|：  逻辑或，无论左边是真还是假，后面都要执行**\n>\n>**||：  短路或，只要左边为真，后面都不执行**\n\n\n\n","source":"_posts/computer/Java/course-1/Java.md","raw":"---\ntitle: Java基础\ndate: 2020/12/15 19:21\ncategories:\n- [计算机, 计算机语言, Java]\ntags: \n- Java\n---\n\n# 基本数据类型\n\n| 数据类型 |    占用字节     |     取值范围     |    默认值    | 包装类型  |\n| :------: | :-------------: | :--------------: | :----------: | :-------: |\n| boolean  | 只有true和false |   true、false    |    false     |  Boolean  |\n|   byte   |     1(8位）     |     -128~127     |      0       |   Byte    |\n|  short   |     2(16位)     |   -32768~32767   |      0       |   Short   |\n|   int    |     4(32位)     |   -2^31~2^31-1   |      0       |  Integer  |\n|   long   |        8        |   -2^63~2^63-1   |     0.0l     |   Long    |\n|  float   |        4        |  3.4E-45~1.4E38  |     0.0f     |   Float   |\n|  double  |        8        | 4.9E-324~1.8E308 |      0       |  Double   |\n|   char   |        2        |     0~65535      | \\u0000(空格) | Character |\n\n# 访问控制修饰符\n\n| 修饰符  | 当前类 | 同包 | 子类 | 其他包 |\n| :-----: | :----: | :--: | :--: | :----: |\n| public  |   √    |  √   |  √   |   √    |\n| protect |   √    |  √   |  √   |   ×    |\n| default |   √    |  √   |  ×   |   ×    |\n| private |   √    |  ×   |  ×   |   ×    |\n\n# Character类\n\n* 方法\n\n> **isDigit()**\n> 是否是一个数字字符\n>\n> **isWhitespace()**\n> 是否是一个空白字符\n>\n> **isUpperCase()**\n> 是否是大写字母\n>\n> **isLowerCase()**\n> 是否是小写字母\n>\n> **toUpperCase() **\n> 指定字母的大写形式\n>\n> **toLowerCase()**\n> 指定字母的小写形式\n>\n> **toString()**\n> 返回字符的字符串形式，字符串的长度仅为1\n\n# String类\n\n## 常用方法\n\n> char charAt(int index)：返回指定索引处的 char 值。\n>\n> int compareTo(String anotherString)：按字典顺序比较两个字符串。\n>\n> String concat(String str)：将指定字符串连接到此字符串的结尾。\n>\n> byte[] getBytes()：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。\n>\n> int indexOf(int ch)：返回指定字符在此字符串中第一次出现处的索引。\n>\n> boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。\n>\n> String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。\n>\n> String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。\n>\n> char[] toCharArray()：将此字符串转换为一个新的字符数组。\n>\n> String substring(int beginIndex, int endIndex)：返回一个新字符串，它是此字符串的一个子字符串。\n>\n> contains(CharSequence chars)：判断是否包含指定的字符系列。\n>\n> isEmpty()：判断字符串是否为空。\n\n## 其他方法\n\n>int compareTo(Object o)：把这个字符串和另一个对象比较。\n>\n>int compareToIgnoreCase(String str)：按字典顺序比较两个字符串，不考虑大小写。\n>\n>static String copyValueOf(char[] data)：返回指定数组中表示该字符序列的 String。\n>\n>static String copyValueOf(char[] data, int offset, int count)：返回指定数组中表示该字符序列的 String。\n>\n>boolean equals(Object anObject)：将此字符串与指定的对象比较。\n>\n>boolean equalsIgnoreCase(String anotherString)：将此 String 与另一个 String 比较，不考虑大小写。\n>\n>byte[] getBytes(String charsetName)：使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。\n>\n>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)：将字符从此字符串复制到目标字符数组。\n>\n>int hashCode()：返回此字符串的哈希码。\n>\n>int indexOf(int ch, int fromIndex)：返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。\n>\n>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引。\n>\n>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。\n>\n>int lastIndexOf(int ch)：返回指定字符在此字符串中最后一次出现处的索引。\n>\n>int lastIndexOf(int ch, int fromIndex)：返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。\n>\n>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引。\n>\n>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。\n>\n>int length()：返回此字符串的长度。\n>\n>boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)：测试两个字符串区域是否相等。\n>\n>boolean regionMatches(int toffset, String other, int ooffset, int len)：测试两个字符串区域是否相等。\n>\n>String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。\n>\n>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串。\n>\n>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始。\n>\n>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始。\n>\n>CharSequence subSequence(int beginIndex, int endIndex)：：返回一个新的字符序列，它是此序列的一个子序列。\n>\n>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的一个子字符串。\n>\n>String toLowerCase()：使用默认语言环境的规则将此 String 中的所有字符都转换为小写。\n>\n>String toLowerCase(Locale locale)：：使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。\n>\n>String toString()：：返回此对象本身（它已经是一个字符串！）。\n>\n>String toUpperCase()：使用默认语言环境的规则将此 String 中的所有字符都转换为大写。\n>\n>String toUpperCase(Locale locale)：使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。\n>\n>String trim()：返回字符串的副本，忽略前导空白和尾部空白。\n>\n>static String valueOf(primitive data type x)：返回给定data type类型x参数的字符串表示形式。\n\n## 例子\n\n1. split\n\n> **split(String regex, int limit)**\n>\n> **regex** -- 正则表达式分隔符。\n>\n> **limit** -- 分割的份数。\n\n```java\nString s = \"1,2,3,4,5\";\nString num[] = s.split(\",\");\n```\n\n2. subSequence\n\n> **subSequence(int beginIndex, int endIndex)**\n>\n> **beginIndex** -- 起始索引（包括）。\n>\n> **endIndex** -- 结束索引（不包括）。\n\n```java\nString s = \"HelloWord\";\nSystem.out.println(s.subSequence(1, 4));\n```\n\n> 输出：ell\n\n# StringBuffer类\n\n* 方法\n\n> **public StringBuffer append(String s)**\n> 将指定的字符串追加到此字符序列。\n>\n> **public StringBuffer reverse()**\n> 将此字符序列用其反转形式取代。\n>\n> **public delete(int start, int end)**\n> 移除此序列的子字符串中的字符。\n>\n> **public insert(int offset, int i)**\n> 将 int 参数的字符串表示形式插入此序列中。\n>\n> **replace(int start, int end, String str)**\n> 使用给定 String 中的字符替换此序列的子字符串中的字符。\n\n# String与StringBuilder\n\n>**StringBuilder拼接字符串耗时耗空间，需要用StringBuilder**\n>\n\n```java\nString s;\nStringBuilder sb = new StringBuilder(s);\n```\n\n>**拼接sb.append(字符串)**\n>\n\n```java\nString s = sb.toString();\n```\n\n# Math类\n\n>**xxxValue()**\n>将 Number 对象转换为xxx数据类型的值并返回。\n>\n>**compareTo()**\n>将number对象与参数比较。\n>\n>**equals()**\n>判断number对象是否与参数相等。\n>\n>**valueOf()**\n>返回一个 Number 对象指定的内置数据类型\n>\n>**toString()**\n>以字符串形式返回值。\n>\n>**parseInt()**\n>将字符串解析为int类型。\n>\n>**abs()**\n>返回参数的绝对值。\n>\n>**ceil()**\n>返回大于等于( >= )给定参数的的最小整数，类型为双精度浮点型。\n>\n>**floor()**\n>返回小于等于（<=）给定参数的最大整数 。\n>\n>**rint()**\n>返回与参数最接近的整数。返回类型为double。\n>\n>**round()**\n>它表示**四舍五入**，算法为 **Math.floor(x+0.5)**，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。\n>\n>**min()**\n>返回两个参数中的最小值。\n>\n>**max()**\n>返回两个参数中的最大值。\n>\n>**pow()**\n>返回第一个参数的第二个参数次方。\n>\n>**sqrt()**\n>求参数的算术平方根。\n>\n>**random()**\n>返回一个随机数\n\n# Arrays 类\n\n> **Arrays.asList()**\n> 可以从 Array 转换成 List。可以作为其他集合类型构造器的参数\n>\n> **Arrays.binarySearch()**\n> 在一个已排序的或者其中一段中快速查找\n>\n> **Arrays.copyOf()**\n> 如果你想扩大数组容量又不想改变它的内容的时候可以使用这个方法\n>\n> **Arrays.copyOfRange()**\n> 可以复制整个数组或其中的一部分\n>\n> **Arrays.deepEquals()**\n> **Arrays.deepHashCode()**\n> Arrays.equals/hashCode的高级版本，支持子数组的操作\n>\n> **Arrays.equals()**\n> 如果你想要比较两个数组是否相等，应该调用这个方法而不是数组对象中的 equals方法（数组对象中没有重写equals()方法，所以这个方法之比较引用而不比较内容）。这个方法集合了Java 5的自动装箱和无参变量的特性，来实现将一个变量快速地传给 equals()方法——所以这个方法在比较了对象的类型之后是直接传值进去比较的\n>\n> **Arrays.fill()**\n> 用一个给定的值填充整个数组或其中的一部分\n>\n> **Arrays.hashCode()**\n> 用来根据数组的内容计算其哈希值（数组对象的hashCode()不可用）。这个方法集合了Java 5的自动装箱和无参变量的特性，来实现将一个变量快速地传给 Arrays.hashcode方法——只是传值进去，不是对象\n>\n> **Arrays.sort()**\n> 对整个数组或者数组的一部分进行排序。也可以使用此方法用给定的比较器对对象数组进行排序\n>\n> **Arrays.toString()**\n> 打印数组的内容\n\n# 日期时间\n\n## 基本方法\n\n> **boolean after(Date date)**\n> 若当调用此方法的Date对象在指定日期之后返回true,否则返回false。\n>\n> **boolean before(Date date)**\n> 若当调用此方法的Date对象在指定日期之前返回true,否则返回false。\n>\n> **int compareTo(Date date)**\n> 比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。\n>\n> **boolean equals(Object date)**\n> 当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。\n>\n> **long getTime( )** \n> 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。\n>\n> **void setTime(long time)**\n> 用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。\n>\n> **String toString( )** \n> 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。\n\n## 日期和时间的格式化编码\n\n| **字母** | **描述**                 | **示例**                |\n| :------- | :----------------------- | :---------------------- |\n| G        | 纪元标记                 | AD                      |\n| y        | 四位年份                 | 2001                    |\n| M        | 月份                     | July or 07              |\n| d        | 一个月的日期             | 10                      |\n| h        | A.M./P.M. (1~12)格式小时 | 12                      |\n| H        | 一天中的小时 (0~23)      | 22                      |\n| m        | 分钟数                   | 30                      |\n| s        | 秒数                     | 55                      |\n| S        | 毫秒数                   | 234                     |\n| E        | 星期几                   | Tuesday                 |\n| D        | 一年中的日子             | 360                     |\n| F        | 一个月中第几周的周几     | 2 (second Wed. in July) |\n| w        | 一年中第几周             | 40                      |\n| W        | 一个月中第几周           | 1                       |\n| a        | A.M./P.M. 标记           | PM                      |\n| k        | 一天中的小时(1~24)       | 24                      |\n| K        | A.M./P.M. (0~11)格式小时 | 10                      |\n| z        | 时区                     | Eastern Standard Time   |\n| '        | 文字定界符               | Delimiter               |\n| \"        | 单引号                   | `                       |\n\n## String与Date自定义格式转化\n\n```java\nDate date = new Date()\n```\n\n>获取当前时间返回一个毫秒值\n\n```java\nLong time = System.currentTimeMills();\ndate.setTime(time);\n```\n\n>将date转化为String\n\n```java\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm:ss\");\nString s = sdf.format(date);\n```\n\n>将String转化为date\n\n```java\nString s = \"yyyy-MM-dd HH:mm:ss\";\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm:ss\");\ndate = sdf.parse(s);\n```\n\n# 正则表达式\n\n| 字符          | 说明                                                         |\n| :------------ | :----------------------------------------------------------- |\n| \\             | 将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，\"n\"匹配字符\"n\"。\"\\n\"匹配换行符。序列\"\\\\\\\\\"匹配\"\\\\\"，\"\\\\(\"匹配\"(\"。 |\n| ^             | 匹配输入字符串开始的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，^ 还会与\"\\n\"或\"\\r\"之后的位置匹配。 |\n| $             | 匹配输入字符串结尾的位置。如果设置了 **RegExp** 对象的 **Multiline** 属性，$ 还会与\"\\n\"或\"\\r\"之前的位置匹配。 |\n| *             | 零次或多次匹配前面的字符或子表达式。例如，zo* 匹配\"z\"和\"zoo\"。* 等效于 {0,}。 |\n| +             | 一次或多次匹配前面的字符或子表达式。例如，\"zo+\"与\"zo\"和\"zoo\"匹配，但与\"z\"不匹配。+ 等效于 {1,}。 |\n| ?             | 零次或一次匹配前面的字符或子表达式。例如，\"do(es)?\"匹配\"do\"或\"does\"中的\"do\"。? 等效于 {0,1}。 |\n| {*n*}         | *n* 是非负整数。正好匹配 *n* 次。例如，\"o{2}\"与\"Bob\"中的\"o\"不匹配，但与\"food\"中的两个\"o\"匹配。 |\n| {*n*,}        | *n* 是非负整数。至少匹配 *n* 次。例如，\"o{2,}\"不匹配\"Bob\"中的\"o\"，而匹配\"foooood\"中的所有 o。\"o{1,}\"等效于\"o+\"。\"o{0,}\"等效于\"o*\"。 |\n| {*n*,*m*}     | *m* 和 *n* 是非负整数，其中 *n* <= *m*。匹配至少 *n* 次，至多 *m* 次。例如，\"o{1,3}\"匹配\"fooooood\"中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。 |\n| ?             | 当此字符紧随任何其他限定符（*、+、?、{*n*}、{*n*,}、{*n*,*m*}）之后时，匹配模式是\"非贪心的\"。\"非贪心的\"模式匹配搜索到的、尽可能短的字符串，而默认的\"贪心的\"模式匹配搜索到的、尽可能长的字符串。例如，在字符串\"oooo\"中，\"o+?\"只匹配单个\"o\"，而\"o+\"匹配所有\"o\"。 |\n| .             | 匹配除\"\\r\\n\"之外的任何单个字符。若要匹配包括\"\\r\\n\"在内的任意字符，请使用诸如\"[\\s\\S]\"之类的模式。 |\n| (*pattern*)   | 匹配 *pattern* 并捕获该匹配的子表达式。可以使用 **$0…$9** 属性从结果\"匹配\"集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用\"\\(\"或者\"\\)\"。 |\n| (?:*pattern*) | 匹配 *pattern* 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用\"or\"字符 (\\|) 组合模式部件的情况很有用。例如，'industr(?:y\\|ies) 是比 'industry\\|industries' 更经济的表达式。 |\n| (?=*pattern*) | 执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 *pattern* 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95\\|98\\|NT\\|2000)' 匹配\"Windows 2000\"中的\"Windows\"，但不匹配\"Windows 3.1\"中的\"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 |\n| (?!*pattern*) | 执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 *pattern* 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95\\|98\\|NT\\|2000)' 匹配\"Windows 3.1\"中的 \"Windows\"，但不匹配\"Windows 2000\"中的\"Windows\"。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 |\n| *x*\\|*y*      | 匹配 *x* 或 *y*。例如，'z\\|food' 匹配\"z\"或\"food\"。'(z\\|f)ood' 匹配\"zood\"或\"food\"。 |\n| [*xyz*]       | 字符集。匹配包含的任一字符。例如，\"[abc]\"匹配\"plain\"中的\"a\"。 |\n| [^*xyz*]      | 反向字符集。匹配未包含的任何字符。例如，\"[^abc]\"匹配\"plain\"中\"p\"，\"l\"，\"i\"，\"n\"。 |\n| [*a-z*]       | 字符范围。匹配指定范围内的任何字符。例如，\"[a-z]\"匹配\"a\"到\"z\"范围内的任何小写字母。 |\n| [^*a-z*]      | 反向范围字符。匹配不在指定的范围内的任何字符。例如，\"[^a-z]\"匹配任何不在\"a\"到\"z\"范围内的任何字符。 |\n| \\b            | 匹配一个字边界，即字与空格间的位置。例如，\"er\\b\"匹配\"never\"中的\"er\"，但不匹配\"verb\"中的\"er\"。 |\n| \\B            | 非字边界匹配。\"er\\B\"匹配\"verb\"中的\"er\"，但不匹配\"never\"中的\"er\"。 |\n| \\c*x*         | 匹配 *x* 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。*x* 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是\"c\"字符本身。 |\n| \\d            | 数字字符匹配。等效于 [0-9]。                                 |\n| \\D            | 非数字字符匹配。等效于 [^0-9]。                              |\n| \\f            | 换页符匹配。等效于 \\x0c 和 \\cL。                             |\n| \\n            | 换行符匹配。等效于 \\x0a 和 \\cJ。                             |\n| \\r            | 匹配一个回车符。等效于 \\x0d 和 \\cM。                         |\n| \\s            | 匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。 |\n| \\S            | 匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。                 |\n| \\t            | 制表符匹配。与 \\x09 和 \\cI 等效。                            |\n| \\v            | 垂直制表符匹配。与 \\x0b 和 \\cK 等效。                        |\n| \\w            | 匹配任何字类字符，包括下划线。与\"[A-Za-z0-9_]\"等效。         |\n| \\W            | 与任何非单词字符匹配。与\"[^A-Za-z0-9_]\"等效。                |\n| \\x*n*         | 匹配 *n*，此处的 *n* 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，\"\\x41\"匹配\"A\"。\"\\x041\"与\"\\x04\"&\"1\"等效。允许在正则表达式中使用 ASCII 代码。 |\n| \\*num*        | 匹配 *num*，此处的 *num* 是一个正整数。到捕获匹配的反向引用。例如，\"(.)\\1\"匹配两个连续的相同字符。 |\n| \\*n*          | 标识一个八进制转义码或反向引用。如果 \\*n* 前面至少有 *n* 个捕获子表达式，那么 *n* 是反向引用。否则，如果 *n* 是八进制数 (0-7)，那么 *n* 是八进制转义码。 |\n| \\*nm*         | 标识一个八进制转义码或反向引用。如果 \\*nm* 前面至少有 *nm* 个捕获子表达式，那么 *nm* 是反向引用。如果 \\*nm* 前面至少有 *n* 个捕获，则 *n* 是反向引用，后面跟有字符 *m*。如果两种前面的情况都不存在，则 \\*nm* 匹配八进制值 *nm*，其中 *n* 和 *m* 是八进制数字 (0-7)。 |\n| \\nml          | 当 *n* 是八进制数 (0-3)，*m* 和 *l* 是八进制数 (0-7) 时，匹配八进制转义码 *nml*。 |\n| \\u*n*         | 匹配 *n*，其中 *n* 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。 |\n\n# 逻辑运算符\n\n>**&：逻辑与，无论左边为真还是假，后面都要执行**\n>\n>**&&： 短路与，只要左边为假，后面都不执行**\n>\n>**|：  逻辑或，无论左边是真还是假，后面都要执行**\n>\n>**||：  短路或，只要左边为真，后面都不执行**\n\n\n\n","slug":"computer/Java/course-1/Java","published":1,"updated":"2020-12-25T05:22:43.682Z","_id":"ckj15eg7a000jb0ut8ioz81q1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">占用字节</th>\n<th style=\"text-align:center\">取值范围</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">包装类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只有 true 和 false</td>\n<td style=\"text-align:center\">true、false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">Boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">1 (8 位）</td>\n<td style=\"text-align:center\">-128~127</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Byte</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">2 (16 位)</td>\n<td style=\"text-align:center\">-32768~32767</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Short</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4 (32 位)</td>\n<td style=\"text-align:center\">-2<sup>31~2</sup>31-1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Integer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">-2<sup>63~2</sup>63-1</td>\n<td style=\"text-align:center\">0.0l</td>\n<td style=\"text-align:center\">Long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3.4E-45~1.4E38</td>\n<td style=\"text-align:center\">0.0f</td>\n<td style=\"text-align:center\">Float</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">4.9E-324~1.8E308</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Double</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0~65535</td>\n<td style=\"text-align:center\">\\u0000 (空格)</td>\n<td style=\"text-align:center\">Character</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"访问控制修饰符\"><a class=\"anchor\" href=\"#访问控制修饰符\">#</a> 访问控制修饰符</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">修饰符</th>\n<th style=\"text-align:center\">当前类</th>\n<th style=\"text-align:center\">同包</th>\n<th style=\"text-align:center\">子类</th>\n<th style=\"text-align:center\">其他包</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protect</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"character类\"><a class=\"anchor\" href=\"#character类\">#</a> Character 类</h1>\n<ul>\n<li>方法</li>\n</ul>\n<blockquote>\n<p><strong>isDigit()</strong><br />\n 是否是一个数字字符</p>\n<p><strong>isWhitespace()</strong><br />\n 是否是一个空白字符</p>\n<p><strong>isUpperCase()</strong><br />\n 是否是大写字母</p>\n<p><strong>isLowerCase()</strong><br />\n 是否是小写字母</p>\n<p>**toUpperCase() **<br />\n 指定字母的大写形式</p>\n<p><strong>toLowerCase()</strong><br />\n 指定字母的小写形式</p>\n<p><strong>toString()</strong><br />\n 返回字符的字符串形式，字符串的长度仅为 1</p>\n</blockquote>\n<h1 id=\"string类\"><a class=\"anchor\" href=\"#string类\">#</a> String 类</h1>\n<h2 id=\"常用方法\"><a class=\"anchor\" href=\"#常用方法\">#</a> 常用方法</h2>\n<blockquote>\n<p>char charAt (int index)：返回指定索引处的 char 值。</p>\n<p>int compareTo (String anotherString)：按字典顺序比较两个字符串。</p>\n<p>String concat (String str)：将指定字符串连接到此字符串的结尾。</p>\n<p>byte [] getBytes ()：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</p>\n<p>int indexOf (int ch)：返回指定字符在此字符串中第一次出现处的索引。</p>\n<p>boolean matches (String regex)：告知此字符串是否匹配给定的正则表达式。</p>\n<p>String replace (char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</p>\n<p>String [] split (String regex)：根据给定正则表达式的匹配拆分此字符串。</p>\n<p>char [] toCharArray ()：将此字符串转换为一个新的字符数组。</p>\n<p>String substring (int beginIndex, int endIndex)：返回一个新字符串，它是此字符串的一个子字符串。</p>\n<p>contains (CharSequence chars)：判断是否包含指定的字符系列。</p>\n<p>isEmpty ()：判断字符串是否为空。</p>\n</blockquote>\n<h2 id=\"其他方法\"><a class=\"anchor\" href=\"#其他方法\">#</a> 其他方法</h2>\n<blockquote>\n<p>int compareTo (Object o)：把这个字符串和另一个对象比较。</p>\n<p>int compareToIgnoreCase (String str)：按字典顺序比较两个字符串，不考虑大小写。</p>\n<p>static String copyValueOf (char [] data)：返回指定数组中表示该字符序列的 String。</p>\n<p>static String copyValueOf (char [] data, int offset, int count)：返回指定数组中表示该字符序列的 String。</p>\n<p>boolean equals (Object anObject)：将此字符串与指定的对象比较。</p>\n<p>boolean equalsIgnoreCase (String anotherString)：将此 String 与另一个 String 比较，不考虑大小写。</p>\n<p>byte [] getBytes (String charsetName)：使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</p>\n<p>void getChars (int srcBegin, int srcEnd, char [] dst, int dstBegin)：将字符从此字符串复制到目标字符数组。</p>\n<p>int hashCode ()：返回此字符串的哈希码。</p>\n<p>int indexOf (int ch, int fromIndex)：返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</p>\n<p>int indexOf (String str)：返回指定子字符串在此字符串中第一次出现处的索引。</p>\n<p>int indexOf (String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</p>\n<p>int lastIndexOf (int ch)：返回指定字符在此字符串中最后一次出现处的索引。</p>\n<p>int lastIndexOf (int ch, int fromIndex)：返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</p>\n<p>int lastIndexOf (String str)：返回指定子字符串在此字符串中最右边出现处的索引。</p>\n<p>int lastIndexOf (String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</p>\n<p>int length ()：返回此字符串的长度。</p>\n<p>boolean regionMatches (boolean ignoreCase, int toffset, String other, int ooffset, int len)：测试两个字符串区域是否相等。</p>\n<p>boolean regionMatches (int toffset, String other, int ooffset, int len)：测试两个字符串区域是否相等。</p>\n<p>String replaceAll (String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 String replaceFirst (String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</p>\n<p>String [] split (String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串。</p>\n<p>boolean startsWith (String prefix)：测试此字符串是否以指定的前缀开始。</p>\n<p>boolean startsWith (String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</p>\n<p>CharSequence subSequence (int beginIndex, int endIndex)：：返回一个新的字符序列，它是此序列的一个子序列。</p>\n<p>String substring (int beginIndex)：返回一个新的字符串，它是此字符串的一个子字符串。</p>\n<p>String toLowerCase ()：使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</p>\n<p>String toLowerCase (Locale locale)：：使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</p>\n<p>String toString ()：：返回此对象本身（它已经是一个字符串！）。</p>\n<p>String toUpperCase ()：使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</p>\n<p>String toUpperCase (Locale locale)：使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</p>\n<p>String trim ()：返回字符串的副本，忽略前导空白和尾部空白。</p>\n<p>static String valueOf (primitive data type x)：返回给定 data type 类型 x 参数的字符串表示形式。</p>\n</blockquote>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<ol>\n<li>split</li>\n</ol>\n<blockquote>\n<p><strong>split(String regex, int limit)</strong></p>\n<p><strong>regex</strong> -- 正则表达式分隔符。</p>\n<p><strong>limit</strong> -- 分割的份数。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"1,2,3,4,5\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>subSequence</li>\n</ol>\n<blockquote>\n<p><strong>subSequence(int beginIndex, int endIndex)</strong></p>\n<p><strong>beginIndex</strong> -- 起始索引（包括）。</p>\n<p><strong>endIndex</strong> -- 结束索引（不包括）。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"HelloWord\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">subSequence</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>输出：ell</p>\n</blockquote>\n<h1 id=\"stringbuffer类\"><a class=\"anchor\" href=\"#stringbuffer类\">#</a> StringBuffer 类</h1>\n<ul>\n<li>方法</li>\n</ul>\n<blockquote>\n<p><strong>public StringBuffer append(String s)</strong><br />\n 将指定的字符串追加到此字符序列。</p>\n<p><strong>public StringBuffer reverse()</strong><br />\n 将此字符序列用其反转形式取代。</p>\n<p><strong>public delete(int start, int end)</strong><br />\n 移除此序列的子字符串中的字符。</p>\n<p><strong>public insert(int offset, int i)</strong><br />\n 将 int 参数的字符串表示形式插入此序列中。</p>\n<p><strong>replace(int start, int end, String str)</strong><br />\n 使用给定 String 中的字符替换此序列的子字符串中的字符。</p>\n</blockquote>\n<h1 id=\"string与stringbuilder\"><a class=\"anchor\" href=\"#string与stringbuilder\">#</a> String 与 StringBuilder</h1>\n<blockquote>\n<p><strong>StringBuilder 拼接字符串耗时耗空间，需要用 StringBuilder</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>拼接 sb.append (字符串)</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"math类\"><a class=\"anchor\" href=\"#math类\">#</a> Math 类</h1>\n<blockquote>\n<p><strong>xxxValue()</strong><br />\n 将 Number 对象转换为 xxx 数据类型的值并返回。</p>\n<p><strong>compareTo()</strong><br />\n 将 number 对象与参数比较。</p>\n<p><strong>equals()</strong><br />\n 判断 number 对象是否与参数相等。</p>\n<p><strong>valueOf()</strong><br />\n 返回一个 Number 对象指定的内置数据类型</p>\n<p><strong>toString()</strong><br />\n 以字符串形式返回值。</p>\n<p><strong>parseInt()</strong><br />\n 将字符串解析为 int 类型。</p>\n<p><strong>abs()</strong><br />\n 返回参数的绝对值。</p>\n<p><strong>ceil()</strong><br />\n 返回大于等于 (&gt;=) 给定参数的的最小整数，类型为双精度浮点型。</p>\n<p><strong>floor()</strong><br />\n 返回小于等于（&lt;=）给定参数的最大整数 。</p>\n<p><strong>rint()</strong><br />\n 返回与参数最接近的整数。返回类型为 double。</p>\n<p><strong>round()</strong><br />\n 它表示<strong>四舍五入</strong>，算法为 <strong>Math.floor(x+0.5)</strong>，即将原来的数字加上 0.5 后再向下取整，所以，Math.round (11.5) 的结果为 12，Math.round (-11.5) 的结果为 - 11。</p>\n<p><strong>min()</strong><br />\n 返回两个参数中的最小值。</p>\n<p><strong>max()</strong><br />\n 返回两个参数中的最大值。</p>\n<p><strong>pow()</strong><br />\n 返回第一个参数的第二个参数次方。</p>\n<p><strong>sqrt()</strong><br />\n 求参数的算术平方根。</p>\n<p><strong>random()</strong><br />\n 返回一个随机数</p>\n</blockquote>\n<h1 id=\"arrays-类\"><a class=\"anchor\" href=\"#arrays-类\">#</a> Arrays 类</h1>\n<blockquote>\n<p><strong>Arrays.asList()</strong><br />\n 可以从 Array 转换成 List。可以作为其他集合类型构造器的参数</p>\n<p><strong>Arrays.binarySearch()</strong><br />\n 在一个已排序的或者其中一段中快速查找</p>\n<p><strong>Arrays.copyOf()</strong><br />\n 如果你想扩大数组容量又不想改变它的内容的时候可以使用这个方法</p>\n<p><strong>Arrays.copyOfRange()</strong><br />\n 可以复制整个数组或其中的一部分</p>\n<p><strong>Arrays.deepEquals()</strong><br />\n<strong>Arrays.deepHashCode()</strong><br />\n Arrays.equals/hashCode 的高级版本，支持子数组的操作</p>\n<p><strong>Arrays.equals()</strong><br />\n 如果你想要比较两个数组是否相等，应该调用这个方法而不是数组对象中的 equals 方法（数组对象中没有重写 equals () 方法，所以这个方法之比较引用而不比较内容）。这个方法集合了 Java 5 的自动装箱和无参变量的特性，来实现将一个变量快速地传给 equals () 方法 —— 所以这个方法在比较了对象的类型之后是直接传值进去比较的</p>\n<p><strong>Arrays.fill()</strong><br />\n 用一个给定的值填充整个数组或其中的一部分</p>\n<p><strong>Arrays.hashCode()</strong><br />\n 用来根据数组的内容计算其哈希值（数组对象的 hashCode () 不可用）。这个方法集合了 Java 5 的自动装箱和无参变量的特性，来实现将一个变量快速地传给 Arrays.hashcode 方法 —— 只是传值进去，不是对象</p>\n<p><strong>Arrays.sort()</strong><br />\n 对整个数组或者数组的一部分进行排序。也可以使用此方法用给定的比较器对对象数组进行排序</p>\n<p><strong>Arrays.toString()</strong><br />\n 打印数组的内容</p>\n</blockquote>\n<h1 id=\"日期时间\"><a class=\"anchor\" href=\"#日期时间\">#</a> 日期时间</h1>\n<h2 id=\"基本方法\"><a class=\"anchor\" href=\"#基本方法\">#</a> 基本方法</h2>\n<blockquote>\n<p><strong>boolean after(Date date)</strong><br />\n 若当调用此方法的 Date 对象在指定日期之后返回 true, 否则返回 false。</p>\n<p><strong>boolean before(Date date)</strong><br />\n 若当调用此方法的 Date 对象在指定日期之前返回 true, 否则返回 false。</p>\n<p><strong>int compareTo(Date date)</strong><br />\n 比较当调用此方法的 Date 对象和指定日期。两者相等时候返回 0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</p>\n<p><strong>boolean equals(Object date)</strong><br />\n 当调用此方法的 Date 对象和指定日期相等时候返回 true, 否则返回 false。</p>\n<p><strong>long getTime( )</strong><br />\n 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</p>\n<p><strong>void setTime(long time)</strong><br />\n 用自 1970 年 1 月 1 日 00:00:00 GMT 以后 time 毫秒数设置时间和日期。</p>\n<p><strong>String toString( )</strong><br />\n 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</p>\n</blockquote>\n<h2 id=\"日期和时间的格式化编码\"><a class=\"anchor\" href=\"#日期和时间的格式化编码\">#</a> 日期和时间的格式化编码</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>字母</strong></th>\n<th style=\"text-align:left\"><strong>描述</strong></th>\n<th style=\"text-align:left\"><strong>示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">G</td>\n<td style=\"text-align:left\">纪元标记</td>\n<td style=\"text-align:left\">AD</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">y</td>\n<td style=\"text-align:left\">四位年份</td>\n<td style=\"text-align:left\">2001</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">M</td>\n<td style=\"text-align:left\">月份</td>\n<td style=\"text-align:left\">July or 07</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\">一个月的日期</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">h</td>\n<td style=\"text-align:left\">A.M./P.M. (1~12) 格式小时</td>\n<td style=\"text-align:left\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">H</td>\n<td style=\"text-align:left\">一天中的小时 (0~23)</td>\n<td style=\"text-align:left\">22</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m</td>\n<td style=\"text-align:left\">分钟数</td>\n<td style=\"text-align:left\">30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:left\">秒数</td>\n<td style=\"text-align:left\">55</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S</td>\n<td style=\"text-align:left\">毫秒数</td>\n<td style=\"text-align:left\">234</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">E</td>\n<td style=\"text-align:left\">星期几</td>\n<td style=\"text-align:left\">Tuesday</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">D</td>\n<td style=\"text-align:left\">一年中的日子</td>\n<td style=\"text-align:left\">360</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F</td>\n<td style=\"text-align:left\">一个月中第几周的周几</td>\n<td style=\"text-align:left\">2 (second Wed. in July)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td style=\"text-align:left\">一年中第几周</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">W</td>\n<td style=\"text-align:left\">一个月中第几周</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a</td>\n<td style=\"text-align:left\">A.M./P.M. 标记</td>\n<td style=\"text-align:left\">PM</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">k</td>\n<td style=\"text-align:left\">一天中的小时 (1~24)</td>\n<td style=\"text-align:left\">24</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">K</td>\n<td style=\"text-align:left\">A.M./P.M. (0~11) 格式小时</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">z</td>\n<td style=\"text-align:left\">时区</td>\n<td style=\"text-align:left\">Eastern Standard Time</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">'</td>\n<td style=\"text-align:left\">文字定界符</td>\n<td style=\"text-align:left\">Delimiter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&quot;</td>\n<td style=\"text-align:left\">单引号</td>\n<td style=\"text-align:left\">`                       |</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"string与date自定义格式转化\"><a class=\"anchor\" href=\"#string与date自定义格式转化\">#</a> String 与 Date 自定义格式转化</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>获取当前时间返回一个毫秒值</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Long</span> time <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>date<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>将 date 转化为 String</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>将 String 转化为 date</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:left\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，&quot;n&quot; 匹配字符 &quot;n&quot;。&quot;\\n&quot; 匹配换行符。序列 &quot;\\\\&quot; 匹配 &quot;\\&quot;，&quot;\\(&quot; 匹配 &quot;(&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与 &quot;\\n&quot; 或 &quot;\\r&quot; 之后的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与 &quot;\\n&quot; 或 &quot;\\r&quot; 之前的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配 &quot;z&quot; 和 &quot;zoo&quot;。* 等效于 {0,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">一次或多次匹配前面的字符或子表达式。例如，&quot;zo+&quot; 与 &quot;zo&quot; 和 &quot;zoo&quot; 匹配，但与 &quot;z&quot; 不匹配。+ 等效于 {1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">零次或一次匹配前面的字符或子表达式。例如，&quot;do (es)?&quot; 匹配 &quot;do&quot; 或 &quot;does&quot; 中的 &quot;do&quot;。? 等效于 {0,1}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{<em>n</em>}</td>\n<td style=\"text-align:left\"><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，&quot;o {2}&quot; 与 &quot;Bob&quot; 中的 &quot;o&quot; 不匹配，但与 &quot;food&quot; 中的两个 &quot;o&quot; 匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{<em>n</em>,}</td>\n<td style=\"text-align:left\"><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，&quot;o {2,}&quot; 不匹配 &quot;Bob&quot; 中的 &quot;o&quot;，而匹配 &quot;foooood&quot; 中的所有 o。&quot;o {1,}&quot; 等效于 &quot;o+&quot;。&quot;o {0,}&quot; 等效于 &quot;o*&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{<em>n</em>,<em>m</em>}</td>\n<td style=\"text-align:left\"><em>m</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，&quot;o {1,3}&quot; 匹配 &quot;fooooood&quot; 中的头三个 o。'o {0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">当此字符紧随任何其他限定符（*、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是 &quot;非贪心的&quot;。&quot;非贪心的&quot; 模式匹配搜索到的、尽可能短的字符串，而默认的 &quot;贪心的&quot; 模式匹配搜索到的、尽可能长的字符串。例如，在字符串 &quot;oooo&quot; 中，&quot;o+?&quot; 只匹配单个 &quot;o&quot;，而 &quot;o+&quot; 匹配所有 &quot;o&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">匹配除 &quot;\\r\\n&quot; 之外的任何单个字符。若要匹配包括 &quot;\\r\\n&quot; 在内的任意字符，请使用诸如 &quot;[\\s\\S]&quot; 之类的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(<em>pattern</em>)</td>\n<td style=\"text-align:left\">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果 &quot;匹配&quot; 集合中检索捕获的匹配。若要匹配括号字符 ()，请使用 &quot;(&quot; 或者 &quot;)&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:<em>pattern</em>)</td>\n<td style=\"text-align:left\">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用 &quot;or&quot; 字符 (|) 组合模式部件的情况很有用。例如，'industr (?:y|ies) 是比 'industry|industries' 更经济的表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?=<em>pattern</em>)</td>\n<td style=\"text-align:left\">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95|98|NT|2000)' 匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot;，但不匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?!<em>pattern</em>)</td>\n<td style=\"text-align:left\">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95|98|NT|2000)' 匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;，但不匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot;。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>x</em>|<em>y</em></td>\n<td style=\"text-align:left\">匹配 <em>x</em> 或 <em>y</em>。例如，'z|food' 匹配 &quot;z&quot; 或 &quot;food&quot;。'(z|f) ood' 匹配 &quot;zood&quot; 或 &quot;food&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[<em>xyz</em>]</td>\n<td style=\"text-align:left\">字符集。匹配包含的任一字符。例如，&quot;[abc]&quot; 匹配 &quot;plain&quot; 中的 &quot;a&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^<em>xyz</em>]</td>\n<td style=\"text-align:left\">反向字符集。匹配未包含的任何字符。例如，&quot;[^abc]&quot; 匹配 &quot;plain&quot; 中 &quot;p&quot;，&quot;l&quot;，&quot;i&quot;，&quot;n&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[<em>a-z</em>]</td>\n<td style=\"text-align:left\">字符范围。匹配指定范围内的任何字符。例如，&quot;[a-z]&quot; 匹配 &quot;a&quot; 到 &quot;z&quot; 范围内的任何小写字母。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^<em>a-z</em>]</td>\n<td style=\"text-align:left\">反向范围字符。匹配不在指定的范围内的任何字符。例如，&quot;[^a-z]&quot; 匹配任何不在 &quot;a&quot; 到 &quot;z&quot; 范围内的任何字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">匹配一个字边界，即字与空格间的位置。例如，&quot;er\\b&quot; 匹配 &quot;never&quot; 中的 &quot;er&quot;，但不匹配 &quot;verb&quot; 中的 &quot;er&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td style=\"text-align:left\">非字边界匹配。&quot;er\\B&quot; 匹配 &quot;verb&quot; 中的 &quot;er&quot;，但不匹配 &quot;never&quot; 中的 &quot;er&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\c<em>x</em></td>\n<td style=\"text-align:left\">匹配 <em>x</em> 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是 &quot;c&quot; 字符本身。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d</td>\n<td style=\"text-align:left\">数字字符匹配。等效于 [0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\D</td>\n<td style=\"text-align:left\">非数字字符匹配。等效于 [^0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页符匹配。等效于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行符匹配。等效于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">匹配一个回车符。等效于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\s</td>\n<td style=\"text-align:left\">匹配任何空白字符，包括空格、制表符、换页符等。与 [\\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\S</td>\n<td style=\"text-align:left\">匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">制表符匹配。与 \\x09 和 \\cI 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\w</td>\n<td style=\"text-align:left\">匹配任何字类字符，包括下划线。与 &quot;[A-Za-z0-9_]&quot; 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\W</td>\n<td style=\"text-align:left\">与任何非单词字符匹配。与 &quot;[^A-Za-z0-9_]&quot; 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\x<em>n</em></td>\n<td style=\"text-align:left\">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，&quot;\\x41&quot; 匹配 &quot;A&quot;。&quot;\\x041&quot; 与 &quot;\\x04&quot;&amp;&quot;1&quot; 等效。允许在正则表达式中使用 ASCII 代码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*num*</td>\n<td style=\"text-align:left\">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，&quot;(.)\\1&quot; 匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*n*</td>\n<td style=\"text-align:left\">标识一个八进制转义码或反向引用。如果 *n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*nm*</td>\n<td style=\"text-align:left\">标识一个八进制转义码或反向引用。如果 *nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm* 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 *nm* 匹配八进制值 <em>nm</em>，其中 <em>n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nml</td>\n<td style=\"text-align:left\">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\u<em>n</em></td>\n<td style=\"text-align:left\">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h1>\n<blockquote>\n<p><strong>&amp;：逻辑与，无论左边为真还是假，后面都要执行</strong></p>\n<p><strong>&amp;&amp;： 短路与，只要左边为假，后面都不执行</strong></p>\n<p><strong>|：  逻辑或，无论左边是真还是假，后面都要执行</strong></p>\n<p><strong>||：  短路或，只要左边为真，后面都不执行</strong></p>\n</blockquote>\n","site":{"data":{}},"length":9725,"excerpt":"","more":"<h1 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">占用字节</th>\n<th style=\"text-align:center\">取值范围</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">包装类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只有 true 和 false</td>\n<td style=\"text-align:center\">true、false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">Boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">1 (8 位）</td>\n<td style=\"text-align:center\">-128~127</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Byte</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">2 (16 位)</td>\n<td style=\"text-align:center\">-32768~32767</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Short</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4 (32 位)</td>\n<td style=\"text-align:center\">-2<sup>31~2</sup>31-1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Integer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">-2<sup>63~2</sup>63-1</td>\n<td style=\"text-align:center\">0.0l</td>\n<td style=\"text-align:center\">Long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3.4E-45~1.4E38</td>\n<td style=\"text-align:center\">0.0f</td>\n<td style=\"text-align:center\">Float</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">4.9E-324~1.8E308</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Double</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0~65535</td>\n<td style=\"text-align:center\">\\u0000 (空格)</td>\n<td style=\"text-align:center\">Character</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"访问控制修饰符\"><a class=\"anchor\" href=\"#访问控制修饰符\">#</a> 访问控制修饰符</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">修饰符</th>\n<th style=\"text-align:center\">当前类</th>\n<th style=\"text-align:center\">同包</th>\n<th style=\"text-align:center\">子类</th>\n<th style=\"text-align:center\">其他包</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protect</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"character类\"><a class=\"anchor\" href=\"#character类\">#</a> Character 类</h1>\n<ul>\n<li>方法</li>\n</ul>\n<blockquote>\n<p><strong>isDigit()</strong><br />\n 是否是一个数字字符</p>\n<p><strong>isWhitespace()</strong><br />\n 是否是一个空白字符</p>\n<p><strong>isUpperCase()</strong><br />\n 是否是大写字母</p>\n<p><strong>isLowerCase()</strong><br />\n 是否是小写字母</p>\n<p>**toUpperCase() **<br />\n 指定字母的大写形式</p>\n<p><strong>toLowerCase()</strong><br />\n 指定字母的小写形式</p>\n<p><strong>toString()</strong><br />\n 返回字符的字符串形式，字符串的长度仅为 1</p>\n</blockquote>\n<h1 id=\"string类\"><a class=\"anchor\" href=\"#string类\">#</a> String 类</h1>\n<h2 id=\"常用方法\"><a class=\"anchor\" href=\"#常用方法\">#</a> 常用方法</h2>\n<blockquote>\n<p>char charAt (int index)：返回指定索引处的 char 值。</p>\n<p>int compareTo (String anotherString)：按字典顺序比较两个字符串。</p>\n<p>String concat (String str)：将指定字符串连接到此字符串的结尾。</p>\n<p>byte [] getBytes ()：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</p>\n<p>int indexOf (int ch)：返回指定字符在此字符串中第一次出现处的索引。</p>\n<p>boolean matches (String regex)：告知此字符串是否匹配给定的正则表达式。</p>\n<p>String replace (char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</p>\n<p>String [] split (String regex)：根据给定正则表达式的匹配拆分此字符串。</p>\n<p>char [] toCharArray ()：将此字符串转换为一个新的字符数组。</p>\n<p>String substring (int beginIndex, int endIndex)：返回一个新字符串，它是此字符串的一个子字符串。</p>\n<p>contains (CharSequence chars)：判断是否包含指定的字符系列。</p>\n<p>isEmpty ()：判断字符串是否为空。</p>\n</blockquote>\n<h2 id=\"其他方法\"><a class=\"anchor\" href=\"#其他方法\">#</a> 其他方法</h2>\n<blockquote>\n<p>int compareTo (Object o)：把这个字符串和另一个对象比较。</p>\n<p>int compareToIgnoreCase (String str)：按字典顺序比较两个字符串，不考虑大小写。</p>\n<p>static String copyValueOf (char [] data)：返回指定数组中表示该字符序列的 String。</p>\n<p>static String copyValueOf (char [] data, int offset, int count)：返回指定数组中表示该字符序列的 String。</p>\n<p>boolean equals (Object anObject)：将此字符串与指定的对象比较。</p>\n<p>boolean equalsIgnoreCase (String anotherString)：将此 String 与另一个 String 比较，不考虑大小写。</p>\n<p>byte [] getBytes (String charsetName)：使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</p>\n<p>void getChars (int srcBegin, int srcEnd, char [] dst, int dstBegin)：将字符从此字符串复制到目标字符数组。</p>\n<p>int hashCode ()：返回此字符串的哈希码。</p>\n<p>int indexOf (int ch, int fromIndex)：返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</p>\n<p>int indexOf (String str)：返回指定子字符串在此字符串中第一次出现处的索引。</p>\n<p>int indexOf (String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</p>\n<p>int lastIndexOf (int ch)：返回指定字符在此字符串中最后一次出现处的索引。</p>\n<p>int lastIndexOf (int ch, int fromIndex)：返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</p>\n<p>int lastIndexOf (String str)：返回指定子字符串在此字符串中最右边出现处的索引。</p>\n<p>int lastIndexOf (String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</p>\n<p>int length ()：返回此字符串的长度。</p>\n<p>boolean regionMatches (boolean ignoreCase, int toffset, String other, int ooffset, int len)：测试两个字符串区域是否相等。</p>\n<p>boolean regionMatches (int toffset, String other, int ooffset, int len)：测试两个字符串区域是否相等。</p>\n<p>String replaceAll (String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。 String replaceFirst (String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</p>\n<p>String [] split (String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串。</p>\n<p>boolean startsWith (String prefix)：测试此字符串是否以指定的前缀开始。</p>\n<p>boolean startsWith (String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</p>\n<p>CharSequence subSequence (int beginIndex, int endIndex)：：返回一个新的字符序列，它是此序列的一个子序列。</p>\n<p>String substring (int beginIndex)：返回一个新的字符串，它是此字符串的一个子字符串。</p>\n<p>String toLowerCase ()：使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</p>\n<p>String toLowerCase (Locale locale)：：使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</p>\n<p>String toString ()：：返回此对象本身（它已经是一个字符串！）。</p>\n<p>String toUpperCase ()：使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</p>\n<p>String toUpperCase (Locale locale)：使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</p>\n<p>String trim ()：返回字符串的副本，忽略前导空白和尾部空白。</p>\n<p>static String valueOf (primitive data type x)：返回给定 data type 类型 x 参数的字符串表示形式。</p>\n</blockquote>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<ol>\n<li>split</li>\n</ol>\n<blockquote>\n<p><strong>split(String regex, int limit)</strong></p>\n<p><strong>regex</strong> -- 正则表达式分隔符。</p>\n<p><strong>limit</strong> -- 分割的份数。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"1,2,3,4,5\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> num<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>subSequence</li>\n</ol>\n<blockquote>\n<p><strong>subSequence(int beginIndex, int endIndex)</strong></p>\n<p><strong>beginIndex</strong> -- 起始索引（包括）。</p>\n<p><strong>endIndex</strong> -- 结束索引（不包括）。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"HelloWord\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">subSequence</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>输出：ell</p>\n</blockquote>\n<h1 id=\"stringbuffer类\"><a class=\"anchor\" href=\"#stringbuffer类\">#</a> StringBuffer 类</h1>\n<ul>\n<li>方法</li>\n</ul>\n<blockquote>\n<p><strong>public StringBuffer append(String s)</strong><br />\n 将指定的字符串追加到此字符序列。</p>\n<p><strong>public StringBuffer reverse()</strong><br />\n 将此字符序列用其反转形式取代。</p>\n<p><strong>public delete(int start, int end)</strong><br />\n 移除此序列的子字符串中的字符。</p>\n<p><strong>public insert(int offset, int i)</strong><br />\n 将 int 参数的字符串表示形式插入此序列中。</p>\n<p><strong>replace(int start, int end, String str)</strong><br />\n 使用给定 String 中的字符替换此序列的子字符串中的字符。</p>\n</blockquote>\n<h1 id=\"string与stringbuilder\"><a class=\"anchor\" href=\"#string与stringbuilder\">#</a> String 与 StringBuilder</h1>\n<blockquote>\n<p><strong>StringBuilder 拼接字符串耗时耗空间，需要用 StringBuilder</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>拼接 sb.append (字符串)</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"math类\"><a class=\"anchor\" href=\"#math类\">#</a> Math 类</h1>\n<blockquote>\n<p><strong>xxxValue()</strong><br />\n 将 Number 对象转换为 xxx 数据类型的值并返回。</p>\n<p><strong>compareTo()</strong><br />\n 将 number 对象与参数比较。</p>\n<p><strong>equals()</strong><br />\n 判断 number 对象是否与参数相等。</p>\n<p><strong>valueOf()</strong><br />\n 返回一个 Number 对象指定的内置数据类型</p>\n<p><strong>toString()</strong><br />\n 以字符串形式返回值。</p>\n<p><strong>parseInt()</strong><br />\n 将字符串解析为 int 类型。</p>\n<p><strong>abs()</strong><br />\n 返回参数的绝对值。</p>\n<p><strong>ceil()</strong><br />\n 返回大于等于 (&gt;=) 给定参数的的最小整数，类型为双精度浮点型。</p>\n<p><strong>floor()</strong><br />\n 返回小于等于（&lt;=）给定参数的最大整数 。</p>\n<p><strong>rint()</strong><br />\n 返回与参数最接近的整数。返回类型为 double。</p>\n<p><strong>round()</strong><br />\n 它表示<strong>四舍五入</strong>，算法为 <strong>Math.floor(x+0.5)</strong>，即将原来的数字加上 0.5 后再向下取整，所以，Math.round (11.5) 的结果为 12，Math.round (-11.5) 的结果为 - 11。</p>\n<p><strong>min()</strong><br />\n 返回两个参数中的最小值。</p>\n<p><strong>max()</strong><br />\n 返回两个参数中的最大值。</p>\n<p><strong>pow()</strong><br />\n 返回第一个参数的第二个参数次方。</p>\n<p><strong>sqrt()</strong><br />\n 求参数的算术平方根。</p>\n<p><strong>random()</strong><br />\n 返回一个随机数</p>\n</blockquote>\n<h1 id=\"arrays-类\"><a class=\"anchor\" href=\"#arrays-类\">#</a> Arrays 类</h1>\n<blockquote>\n<p><strong>Arrays.asList()</strong><br />\n 可以从 Array 转换成 List。可以作为其他集合类型构造器的参数</p>\n<p><strong>Arrays.binarySearch()</strong><br />\n 在一个已排序的或者其中一段中快速查找</p>\n<p><strong>Arrays.copyOf()</strong><br />\n 如果你想扩大数组容量又不想改变它的内容的时候可以使用这个方法</p>\n<p><strong>Arrays.copyOfRange()</strong><br />\n 可以复制整个数组或其中的一部分</p>\n<p><strong>Arrays.deepEquals()</strong><br />\n<strong>Arrays.deepHashCode()</strong><br />\n Arrays.equals/hashCode 的高级版本，支持子数组的操作</p>\n<p><strong>Arrays.equals()</strong><br />\n 如果你想要比较两个数组是否相等，应该调用这个方法而不是数组对象中的 equals 方法（数组对象中没有重写 equals () 方法，所以这个方法之比较引用而不比较内容）。这个方法集合了 Java 5 的自动装箱和无参变量的特性，来实现将一个变量快速地传给 equals () 方法 —— 所以这个方法在比较了对象的类型之后是直接传值进去比较的</p>\n<p><strong>Arrays.fill()</strong><br />\n 用一个给定的值填充整个数组或其中的一部分</p>\n<p><strong>Arrays.hashCode()</strong><br />\n 用来根据数组的内容计算其哈希值（数组对象的 hashCode () 不可用）。这个方法集合了 Java 5 的自动装箱和无参变量的特性，来实现将一个变量快速地传给 Arrays.hashcode 方法 —— 只是传值进去，不是对象</p>\n<p><strong>Arrays.sort()</strong><br />\n 对整个数组或者数组的一部分进行排序。也可以使用此方法用给定的比较器对对象数组进行排序</p>\n<p><strong>Arrays.toString()</strong><br />\n 打印数组的内容</p>\n</blockquote>\n<h1 id=\"日期时间\"><a class=\"anchor\" href=\"#日期时间\">#</a> 日期时间</h1>\n<h2 id=\"基本方法\"><a class=\"anchor\" href=\"#基本方法\">#</a> 基本方法</h2>\n<blockquote>\n<p><strong>boolean after(Date date)</strong><br />\n 若当调用此方法的 Date 对象在指定日期之后返回 true, 否则返回 false。</p>\n<p><strong>boolean before(Date date)</strong><br />\n 若当调用此方法的 Date 对象在指定日期之前返回 true, 否则返回 false。</p>\n<p><strong>int compareTo(Date date)</strong><br />\n 比较当调用此方法的 Date 对象和指定日期。两者相等时候返回 0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</p>\n<p><strong>boolean equals(Object date)</strong><br />\n 当调用此方法的 Date 对象和指定日期相等时候返回 true, 否则返回 false。</p>\n<p><strong>long getTime( )</strong><br />\n 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</p>\n<p><strong>void setTime(long time)</strong><br />\n 用自 1970 年 1 月 1 日 00:00:00 GMT 以后 time 毫秒数设置时间和日期。</p>\n<p><strong>String toString( )</strong><br />\n 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</p>\n</blockquote>\n<h2 id=\"日期和时间的格式化编码\"><a class=\"anchor\" href=\"#日期和时间的格式化编码\">#</a> 日期和时间的格式化编码</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>字母</strong></th>\n<th style=\"text-align:left\"><strong>描述</strong></th>\n<th style=\"text-align:left\"><strong>示例</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">G</td>\n<td style=\"text-align:left\">纪元标记</td>\n<td style=\"text-align:left\">AD</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">y</td>\n<td style=\"text-align:left\">四位年份</td>\n<td style=\"text-align:left\">2001</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">M</td>\n<td style=\"text-align:left\">月份</td>\n<td style=\"text-align:left\">July or 07</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">d</td>\n<td style=\"text-align:left\">一个月的日期</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">h</td>\n<td style=\"text-align:left\">A.M./P.M. (1~12) 格式小时</td>\n<td style=\"text-align:left\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">H</td>\n<td style=\"text-align:left\">一天中的小时 (0~23)</td>\n<td style=\"text-align:left\">22</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m</td>\n<td style=\"text-align:left\">分钟数</td>\n<td style=\"text-align:left\">30</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">s</td>\n<td style=\"text-align:left\">秒数</td>\n<td style=\"text-align:left\">55</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">S</td>\n<td style=\"text-align:left\">毫秒数</td>\n<td style=\"text-align:left\">234</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">E</td>\n<td style=\"text-align:left\">星期几</td>\n<td style=\"text-align:left\">Tuesday</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">D</td>\n<td style=\"text-align:left\">一年中的日子</td>\n<td style=\"text-align:left\">360</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F</td>\n<td style=\"text-align:left\">一个月中第几周的周几</td>\n<td style=\"text-align:left\">2 (second Wed. in July)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">w</td>\n<td style=\"text-align:left\">一年中第几周</td>\n<td style=\"text-align:left\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">W</td>\n<td style=\"text-align:left\">一个月中第几周</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a</td>\n<td style=\"text-align:left\">A.M./P.M. 标记</td>\n<td style=\"text-align:left\">PM</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">k</td>\n<td style=\"text-align:left\">一天中的小时 (1~24)</td>\n<td style=\"text-align:left\">24</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">K</td>\n<td style=\"text-align:left\">A.M./P.M. (0~11) 格式小时</td>\n<td style=\"text-align:left\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">z</td>\n<td style=\"text-align:left\">时区</td>\n<td style=\"text-align:left\">Eastern Standard Time</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">'</td>\n<td style=\"text-align:left\">文字定界符</td>\n<td style=\"text-align:left\">Delimiter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&quot;</td>\n<td style=\"text-align:left\">单引号</td>\n<td style=\"text-align:left\">`                       |</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"string与date自定义格式转化\"><a class=\"anchor\" href=\"#string与date自定义格式转化\">#</a> String 与 Date 自定义格式转化</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>获取当前时间返回一个毫秒值</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Long</span> time <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMills</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>date<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>将 date 转化为 String</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>将 String 转化为 date</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日 HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>date <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:left\">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，&quot;n&quot; 匹配字符 &quot;n&quot;。&quot;\\n&quot; 匹配换行符。序列 &quot;\\\\&quot; 匹配 &quot;\\&quot;，&quot;\\(&quot; 匹配 &quot;(&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与 &quot;\\n&quot; 或 &quot;\\r&quot; 之后的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与 &quot;\\n&quot; 或 &quot;\\r&quot; 之前的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配 &quot;z&quot; 和 &quot;zoo&quot;。* 等效于 {0,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">+</td>\n<td style=\"text-align:left\">一次或多次匹配前面的字符或子表达式。例如，&quot;zo+&quot; 与 &quot;zo&quot; 和 &quot;zoo&quot; 匹配，但与 &quot;z&quot; 不匹配。+ 等效于 {1,}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">零次或一次匹配前面的字符或子表达式。例如，&quot;do (es)?&quot; 匹配 &quot;do&quot; 或 &quot;does&quot; 中的 &quot;do&quot;。? 等效于 {0,1}。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{<em>n</em>}</td>\n<td style=\"text-align:left\"><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，&quot;o {2}&quot; 与 &quot;Bob&quot; 中的 &quot;o&quot; 不匹配，但与 &quot;food&quot; 中的两个 &quot;o&quot; 匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{<em>n</em>,}</td>\n<td style=\"text-align:left\"><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，&quot;o {2,}&quot; 不匹配 &quot;Bob&quot; 中的 &quot;o&quot;，而匹配 &quot;foooood&quot; 中的所有 o。&quot;o {1,}&quot; 等效于 &quot;o+&quot;。&quot;o {0,}&quot; 等效于 &quot;o*&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">{<em>n</em>,<em>m</em>}</td>\n<td style=\"text-align:left\"><em>m</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，&quot;o {1,3}&quot; 匹配 &quot;fooooood&quot; 中的头三个 o。'o {0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">当此字符紧随任何其他限定符（*、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是 &quot;非贪心的&quot;。&quot;非贪心的&quot; 模式匹配搜索到的、尽可能短的字符串，而默认的 &quot;贪心的&quot; 模式匹配搜索到的、尽可能长的字符串。例如，在字符串 &quot;oooo&quot; 中，&quot;o+?&quot; 只匹配单个 &quot;o&quot;，而 &quot;o+&quot; 匹配所有 &quot;o&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">匹配除 &quot;\\r\\n&quot; 之外的任何单个字符。若要匹配包括 &quot;\\r\\n&quot; 在内的任意字符，请使用诸如 &quot;[\\s\\S]&quot; 之类的模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(<em>pattern</em>)</td>\n<td style=\"text-align:left\">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果 &quot;匹配&quot; 集合中检索捕获的匹配。若要匹配括号字符 ()，请使用 &quot;(&quot; 或者 &quot;)&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?:<em>pattern</em>)</td>\n<td style=\"text-align:left\">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用 &quot;or&quot; 字符 (|) 组合模式部件的情况很有用。例如，'industr (?:y|ies) 是比 'industry|industries' 更经济的表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?=<em>pattern</em>)</td>\n<td style=\"text-align:left\">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95|98|NT|2000)' 匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot;，但不匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(?!<em>pattern</em>)</td>\n<td style=\"text-align:left\">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95|98|NT|2000)' 匹配 &quot;Windows 3.1&quot; 中的 &quot;Windows&quot;，但不匹配 &quot;Windows 2000&quot; 中的 &quot;Windows&quot;。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>x</em>|<em>y</em></td>\n<td style=\"text-align:left\">匹配 <em>x</em> 或 <em>y</em>。例如，'z|food' 匹配 &quot;z&quot; 或 &quot;food&quot;。'(z|f) ood' 匹配 &quot;zood&quot; 或 &quot;food&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[<em>xyz</em>]</td>\n<td style=\"text-align:left\">字符集。匹配包含的任一字符。例如，&quot;[abc]&quot; 匹配 &quot;plain&quot; 中的 &quot;a&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^<em>xyz</em>]</td>\n<td style=\"text-align:left\">反向字符集。匹配未包含的任何字符。例如，&quot;[^abc]&quot; 匹配 &quot;plain&quot; 中 &quot;p&quot;，&quot;l&quot;，&quot;i&quot;，&quot;n&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[<em>a-z</em>]</td>\n<td style=\"text-align:left\">字符范围。匹配指定范围内的任何字符。例如，&quot;[a-z]&quot; 匹配 &quot;a&quot; 到 &quot;z&quot; 范围内的任何小写字母。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[^<em>a-z</em>]</td>\n<td style=\"text-align:left\">反向范围字符。匹配不在指定的范围内的任何字符。例如，&quot;[^a-z]&quot; 匹配任何不在 &quot;a&quot; 到 &quot;z&quot; 范围内的任何字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\b</td>\n<td style=\"text-align:left\">匹配一个字边界，即字与空格间的位置。例如，&quot;er\\b&quot; 匹配 &quot;never&quot; 中的 &quot;er&quot;，但不匹配 &quot;verb&quot; 中的 &quot;er&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\B</td>\n<td style=\"text-align:left\">非字边界匹配。&quot;er\\B&quot; 匹配 &quot;verb&quot; 中的 &quot;er&quot;，但不匹配 &quot;never&quot; 中的 &quot;er&quot;。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\c<em>x</em></td>\n<td style=\"text-align:left\">匹配 <em>x</em> 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是 &quot;c&quot; 字符本身。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d</td>\n<td style=\"text-align:left\">数字字符匹配。等效于 [0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\D</td>\n<td style=\"text-align:left\">非数字字符匹配。等效于 [^0-9]。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\f</td>\n<td style=\"text-align:left\">换页符匹配。等效于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\n</td>\n<td style=\"text-align:left\">换行符匹配。等效于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\r</td>\n<td style=\"text-align:left\">匹配一个回车符。等效于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\s</td>\n<td style=\"text-align:left\">匹配任何空白字符，包括空格、制表符、换页符等。与 [\\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\S</td>\n<td style=\"text-align:left\">匹配任何非空白字符。与 [^ \\f\\n\\r\\t\\v] 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\t</td>\n<td style=\"text-align:left\">制表符匹配。与 \\x09 和 \\cI 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\v</td>\n<td style=\"text-align:left\">垂直制表符匹配。与 \\x0b 和 \\cK 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\w</td>\n<td style=\"text-align:left\">匹配任何字类字符，包括下划线。与 &quot;[A-Za-z0-9_]&quot; 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\W</td>\n<td style=\"text-align:left\">与任何非单词字符匹配。与 &quot;[^A-Za-z0-9_]&quot; 等效。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\x<em>n</em></td>\n<td style=\"text-align:left\">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，&quot;\\x41&quot; 匹配 &quot;A&quot;。&quot;\\x041&quot; 与 &quot;\\x04&quot;&amp;&quot;1&quot; 等效。允许在正则表达式中使用 ASCII 代码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*num*</td>\n<td style=\"text-align:left\">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，&quot;(.)\\1&quot; 匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*n*</td>\n<td style=\"text-align:left\">标识一个八进制转义码或反向引用。如果 *n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*nm*</td>\n<td style=\"text-align:left\">标识一个八进制转义码或反向引用。如果 *nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm* 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 *nm* 匹配八进制值 <em>nm</em>，其中 <em>n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\nml</td>\n<td style=\"text-align:left\">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\u<em>n</em></td>\n<td style=\"text-align:left\">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (©)。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h1>\n<blockquote>\n<p><strong>&amp;：逻辑与，无论左边为真还是假，后面都要执行</strong></p>\n<p><strong>&amp;&amp;： 短路与，只要左边为假，后面都不执行</strong></p>\n<p><strong>|：  逻辑或，无论左边是真还是假，后面都要执行</strong></p>\n<p><strong>||：  短路或，只要左边为真，后面都不执行</strong></p>\n</blockquote>\n"},{"title":"集合","date":"2020-12-15T11:21:00.000Z","_content":"\n## Set\n\n### 概念\n\n无序的，不可重复的集合\n\n要保证元素的唯一性，需要重写hashCode()和equals()方法\n\n### 方法\n\n>​\t**添加：add()**\n>\n>​\t**删除：remove()**\n\n### 取值方式\n\n```java\nSet<String> set = new HashSet<>();\nset.add(\"apple\");\nset.add(\"banana\");\nset.add(\"pear\");\n```\n\n>**foreach遍历**\n>\n>```java\n>for (String s : set){\n>System.out.println(s);\n>}\n>```\n>\n>**迭代器遍历**\n>\n>```java\n>Iterator<String> iterator = set.iterator();\n>while (iterator.hasNext()){\n>String s = iterator.next();\n>System.out.println(s);\n>}\n>```\n\n## List\n\n### 概念\n\n有序的，可重复的集合\n\n### 方法\n\n>**添加：add()**\n>\n>**删除：remove()**\n>\n>**获取：get()**\n>\n>**长度：size()**\n\n### 取值方式\n\n```java\nList<String> list = new LinkedList<>();\nlist.add(\"apple\");\nlist.add(\"banana\");\nlist.add(\"pear\");\n```\n\n>**for循环**\n>\n>```java\n>for (int i = 0;i < list.size();i++){\n>System.out.println(list.get(i));\n>}\n>```\n>\n>**foreach循环**\n>\n>```java\n>for (String s : list){\n>System.out.println(s);\n>}\n>```\n>\n>**迭代器循环**\n>\n>```java\n>Iterator<String> iterator = list.iterator();\n>while (iterator.hasNext()){\n>String s = iterator.next();\n>System.out.println(s);\n>}\n>```\n\n## Map\n\n### 概念\n\n无序，键值对集合（映射关系），键不能重复，值可以重复，键可以为null，值也可为null。\n\n### 方法\n\n>**添加：put(key,value)**\n>\n>**获取：get(key)**\n>\n>**删除：remove(key)**\n\n### 获取所有的值\n\n```java\nMap<String,String> map = new HashMap<>();\nmap.put(\"apple\",\"good\");\nmap.put(\"banana\",\"better\");\nmap.put(\"pear\",\"best\");\nSet<String> keySet = map.keySet();\n```\n\n拿到所有的key，遍历key，根据key拿值\n\n**foreach循环遍历**\n\n```java\nfor (String key : keySet){\n    System.out.println(map.get(key));\n}\n```\n\n**迭代器遍历**\n\n```java\nwhile (iterator.hasNext()){\n    String s = iterator.next();\n    System.out.println(map.get(s));\n}\n```\n\n### 获取所有的映射关系集合\n\n```java\nSet<Map.Entry<String,String>> entries = map.entrySet();\n```\n\n**for循环**\n\n```java\nfor (Map.Entry<String,String> entry:entries){\n    System.out.println(entry.getKey()+\" \"+entry.getValue());\n}\n```\n\n**迭代器遍历**\n\n```java\nIterator<Map.Entry<String,String>> iterator = entries.iterator();\nwhile (iterator.hasNext()){\n    Map.Entry<String,String> entry = iterator.next();\n    System.out.println(entry.getKey()+\" \"+entry.getValue());\n}\n```\n\n## 迭代器\n\n### Iterator\n\n#### 方法\n\n>**next()：返回迭代中的下一个元素**\n>\n>**hasNext()：如果迭代器有下一个元素，返回true**\n\n### ListIterator\n\n#### 方法\n\n>**next()**\n>\n>**hasNext()**\n>\n>**previous()：返回列表中的上一个元素** \n>\n>**hasPrevious()：如果迭代在相反方向上遍历有更多元素，返回true**\n>\n>**add()：向指定的元素插入列表**\n\n## **Array和List的相互转换**\n\n### **array转list**\n\n>```java\n> String[] array = {\"string1\",\"string2\",\"string3\"};\n>//Arrays.asList产生一个Arrays内置的类 其中数组用final表示！\n>List<String> list = Arrays.asList(array);\n>// list.add(\"string4\");  所以不能往其中添加元素\n>for(String s:list){\n>    System.out.println(s);\n>}\n>```\n\n### **list转array**\n\n> ```java\n> List<String> list = new ArrayList<>();\n> list.add(\"t1\");\n> list.add(\"t2\");\n> list.add(\"t3\");\n> //toArray中不指定参数 只能转换为Object类型\n> String[] strings = list2.toArray(new String[list2.size()]);\n> for (String v:strings) {\n>     System.out.println(v);\n> }\n> ```\n","source":"_posts/computer/Java/course-1/collection.md","raw":"---\ntitle: 集合\ndate: 2020/12/15 19:21\ncategories:\n- [计算机, 计算机语言, Java]\ntags: \n- Java\n---\n\n## Set\n\n### 概念\n\n无序的，不可重复的集合\n\n要保证元素的唯一性，需要重写hashCode()和equals()方法\n\n### 方法\n\n>​\t**添加：add()**\n>\n>​\t**删除：remove()**\n\n### 取值方式\n\n```java\nSet<String> set = new HashSet<>();\nset.add(\"apple\");\nset.add(\"banana\");\nset.add(\"pear\");\n```\n\n>**foreach遍历**\n>\n>```java\n>for (String s : set){\n>System.out.println(s);\n>}\n>```\n>\n>**迭代器遍历**\n>\n>```java\n>Iterator<String> iterator = set.iterator();\n>while (iterator.hasNext()){\n>String s = iterator.next();\n>System.out.println(s);\n>}\n>```\n\n## List\n\n### 概念\n\n有序的，可重复的集合\n\n### 方法\n\n>**添加：add()**\n>\n>**删除：remove()**\n>\n>**获取：get()**\n>\n>**长度：size()**\n\n### 取值方式\n\n```java\nList<String> list = new LinkedList<>();\nlist.add(\"apple\");\nlist.add(\"banana\");\nlist.add(\"pear\");\n```\n\n>**for循环**\n>\n>```java\n>for (int i = 0;i < list.size();i++){\n>System.out.println(list.get(i));\n>}\n>```\n>\n>**foreach循环**\n>\n>```java\n>for (String s : list){\n>System.out.println(s);\n>}\n>```\n>\n>**迭代器循环**\n>\n>```java\n>Iterator<String> iterator = list.iterator();\n>while (iterator.hasNext()){\n>String s = iterator.next();\n>System.out.println(s);\n>}\n>```\n\n## Map\n\n### 概念\n\n无序，键值对集合（映射关系），键不能重复，值可以重复，键可以为null，值也可为null。\n\n### 方法\n\n>**添加：put(key,value)**\n>\n>**获取：get(key)**\n>\n>**删除：remove(key)**\n\n### 获取所有的值\n\n```java\nMap<String,String> map = new HashMap<>();\nmap.put(\"apple\",\"good\");\nmap.put(\"banana\",\"better\");\nmap.put(\"pear\",\"best\");\nSet<String> keySet = map.keySet();\n```\n\n拿到所有的key，遍历key，根据key拿值\n\n**foreach循环遍历**\n\n```java\nfor (String key : keySet){\n    System.out.println(map.get(key));\n}\n```\n\n**迭代器遍历**\n\n```java\nwhile (iterator.hasNext()){\n    String s = iterator.next();\n    System.out.println(map.get(s));\n}\n```\n\n### 获取所有的映射关系集合\n\n```java\nSet<Map.Entry<String,String>> entries = map.entrySet();\n```\n\n**for循环**\n\n```java\nfor (Map.Entry<String,String> entry:entries){\n    System.out.println(entry.getKey()+\" \"+entry.getValue());\n}\n```\n\n**迭代器遍历**\n\n```java\nIterator<Map.Entry<String,String>> iterator = entries.iterator();\nwhile (iterator.hasNext()){\n    Map.Entry<String,String> entry = iterator.next();\n    System.out.println(entry.getKey()+\" \"+entry.getValue());\n}\n```\n\n## 迭代器\n\n### Iterator\n\n#### 方法\n\n>**next()：返回迭代中的下一个元素**\n>\n>**hasNext()：如果迭代器有下一个元素，返回true**\n\n### ListIterator\n\n#### 方法\n\n>**next()**\n>\n>**hasNext()**\n>\n>**previous()：返回列表中的上一个元素** \n>\n>**hasPrevious()：如果迭代在相反方向上遍历有更多元素，返回true**\n>\n>**add()：向指定的元素插入列表**\n\n## **Array和List的相互转换**\n\n### **array转list**\n\n>```java\n> String[] array = {\"string1\",\"string2\",\"string3\"};\n>//Arrays.asList产生一个Arrays内置的类 其中数组用final表示！\n>List<String> list = Arrays.asList(array);\n>// list.add(\"string4\");  所以不能往其中添加元素\n>for(String s:list){\n>    System.out.println(s);\n>}\n>```\n\n### **list转array**\n\n> ```java\n> List<String> list = new ArrayList<>();\n> list.add(\"t1\");\n> list.add(\"t2\");\n> list.add(\"t3\");\n> //toArray中不指定参数 只能转换为Object类型\n> String[] strings = list2.toArray(new String[list2.size()]);\n> for (String v:strings) {\n>     System.out.println(v);\n> }\n> ```\n","slug":"computer/Java/course-1/collection","published":1,"updated":"2020-12-17T03:31:52.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg7d000mb0utdh8r05iv","content":"<h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h2>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>无序的，不可重复的集合</p>\n<p>要保证元素的唯一性，需要重写 hashCode () 和 equals () 方法</p>\n<h3 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h3>\n<blockquote>\n<p>​\t<strong>添加：add ()</strong></p>\n<p>​\t<strong>删除：remove ()</strong></p>\n</blockquote>\n<h3 id=\"取值方式\"><a class=\"anchor\" href=\"#取值方式\">#</a> 取值方式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>foreach 遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h2>\n<h3 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h3>\n<p>有序的，可重复的集合</p>\n<h3 id=\"方法-2\"><a class=\"anchor\" href=\"#方法-2\">#</a> 方法</h3>\n<blockquote>\n<p><strong>添加：add ()</strong></p>\n<p><strong>删除：remove ()</strong></p>\n<p><strong>获取：get ()</strong></p>\n<p><strong>长度：size ()</strong></p>\n</blockquote>\n<h3 id=\"取值方式-2\"><a class=\"anchor\" href=\"#取值方式-2\">#</a> 取值方式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>for 循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>foreach 循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h2>\n<h3 id=\"概念-3\"><a class=\"anchor\" href=\"#概念-3\">#</a> 概念</h3>\n<p>无序，键值对集合（映射关系），键不能重复，值可以重复，键可以为 null，值也可为 null。</p>\n<h3 id=\"方法-3\"><a class=\"anchor\" href=\"#方法-3\">#</a> 方法</h3>\n<blockquote>\n<p><strong>添加：put (key,value)</strong></p>\n<p><strong>获取：get (key)</strong></p>\n<p><strong>删除：remove (key)</strong></p>\n</blockquote>\n<h3 id=\"获取所有的值\"><a class=\"anchor\" href=\"#获取所有的值\">#</a> 获取所有的值</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"better\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"best\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>拿到所有的 key，遍历 key，根据 key 拿值</p>\n<p><strong>foreach 循环遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"获取所有的映射关系集合\"><a class=\"anchor\" href=\"#获取所有的映射关系集合\">#</a> 获取所有的映射关系集合</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entries <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>for 循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span>entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<h3 id=\"iterator\"><a class=\"anchor\" href=\"#iterator\">#</a> Iterator</h3>\n<h4 id=\"方法-4\"><a class=\"anchor\" href=\"#方法-4\">#</a> 方法</h4>\n<blockquote>\n<p><strong>next ()：返回迭代中的下一个元素</strong></p>\n<p><strong>hasNext ()：如果迭代器有下一个元素，返回 true</strong></p>\n</blockquote>\n<h3 id=\"listiterator\"><a class=\"anchor\" href=\"#listiterator\">#</a> ListIterator</h3>\n<h4 id=\"方法-5\"><a class=\"anchor\" href=\"#方法-5\">#</a> 方法</h4>\n<blockquote>\n<p><strong>next()</strong></p>\n<p><strong>hasNext()</strong></p>\n<p><strong>previous ()：返回列表中的上一个元素</strong></p>\n<p><strong>hasPrevious ()：如果迭代在相反方向上遍历有更多元素，返回 true</strong></p>\n<p><strong>add ()：向指定的元素插入列表</strong></p>\n</blockquote>\n<h2 id=\"array和list的相互转换\"><a class=\"anchor\" href=\"#array和list的相互转换\">#</a> <strong>Array 和 List 的相互转换</strong></h2>\n<h3 id=\"array转list\"><a class=\"anchor\" href=\"#array转list\">#</a> <strong>array 转 list</strong></h3>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"string1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"string2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"string3\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Arrays.asList 产生一个 Arrays 内置的类 其中数组用 final 表示！</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//list.add (\"string4\");  所以不能往其中添加元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"list转array\"><a class=\"anchor\" href=\"#list转array\">#</a> <strong>list 转 array</strong></h3>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//toArray 中不指定参数 只能转换为 Object 类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strings <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>list2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> v<span class=\"token operator\">:</span>strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n","site":{"data":{}},"length":2293,"excerpt":"","more":"<h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h2>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>无序的，不可重复的集合</p>\n<p>要保证元素的唯一性，需要重写 hashCode () 和 equals () 方法</p>\n<h3 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h3>\n<blockquote>\n<p>​\t<strong>添加：add ()</strong></p>\n<p>​\t<strong>删除：remove ()</strong></p>\n</blockquote>\n<h3 id=\"取值方式\"><a class=\"anchor\" href=\"#取值方式\">#</a> 取值方式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>foreach 遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h2>\n<h3 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h3>\n<p>有序的，可重复的集合</p>\n<h3 id=\"方法-2\"><a class=\"anchor\" href=\"#方法-2\">#</a> 方法</h3>\n<blockquote>\n<p><strong>添加：add ()</strong></p>\n<p><strong>删除：remove ()</strong></p>\n<p><strong>获取：get ()</strong></p>\n<p><strong>长度：size ()</strong></p>\n</blockquote>\n<h3 id=\"取值方式-2\"><a class=\"anchor\" href=\"#取值方式-2\">#</a> 取值方式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>for 循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>foreach 循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h2>\n<h3 id=\"概念-3\"><a class=\"anchor\" href=\"#概念-3\">#</a> 概念</h3>\n<p>无序，键值对集合（映射关系），键不能重复，值可以重复，键可以为 null，值也可为 null。</p>\n<h3 id=\"方法-3\"><a class=\"anchor\" href=\"#方法-3\">#</a> 方法</h3>\n<blockquote>\n<p><strong>添加：put (key,value)</strong></p>\n<p><strong>获取：get (key)</strong></p>\n<p><strong>删除：remove (key)</strong></p>\n</blockquote>\n<h3 id=\"获取所有的值\"><a class=\"anchor\" href=\"#获取所有的值\">#</a> 获取所有的值</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"better\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"best\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>拿到所有的 key，遍历 key，根据 key 拿值</p>\n<p><strong>foreach 循环遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"获取所有的映射关系集合\"><a class=\"anchor\" href=\"#获取所有的映射关系集合\">#</a> 获取所有的映射关系集合</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entries <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>for 循环</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span>entries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>迭代器遍历</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<h3 id=\"iterator\"><a class=\"anchor\" href=\"#iterator\">#</a> Iterator</h3>\n<h4 id=\"方法-4\"><a class=\"anchor\" href=\"#方法-4\">#</a> 方法</h4>\n<blockquote>\n<p><strong>next ()：返回迭代中的下一个元素</strong></p>\n<p><strong>hasNext ()：如果迭代器有下一个元素，返回 true</strong></p>\n</blockquote>\n<h3 id=\"listiterator\"><a class=\"anchor\" href=\"#listiterator\">#</a> ListIterator</h3>\n<h4 id=\"方法-5\"><a class=\"anchor\" href=\"#方法-5\">#</a> 方法</h4>\n<blockquote>\n<p><strong>next()</strong></p>\n<p><strong>hasNext()</strong></p>\n<p><strong>previous ()：返回列表中的上一个元素</strong></p>\n<p><strong>hasPrevious ()：如果迭代在相反方向上遍历有更多元素，返回 true</strong></p>\n<p><strong>add ()：向指定的元素插入列表</strong></p>\n</blockquote>\n<h2 id=\"array和list的相互转换\"><a class=\"anchor\" href=\"#array和list的相互转换\">#</a> <strong>Array 和 List 的相互转换</strong></h2>\n<h3 id=\"array转list\"><a class=\"anchor\" href=\"#array转list\">#</a> <strong>array 转 list</strong></h3>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"string1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"string2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"string3\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Arrays.asList 产生一个 Arrays 内置的类 其中数组用 final 表示！</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//list.add (\"string4\");  所以不能往其中添加元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"list转array\"><a class=\"anchor\" href=\"#list转array\">#</a> <strong>list 转 array</strong></h3>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//toArray 中不指定参数 只能转换为 Object 类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strings <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>list2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> v<span class=\"token operator\">:</span>strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n"},{"title":"file","date":"2020-12-15T11:21:00.000Z","_content":"\n# 方法\n\n>**File file = new File(路径);**\n>\n>**createNewFile()：创建文件，如果有没有该文件就创建文件并返回true，否则返回false**\n>\n>**mkdir()：创建目录，如果有该目录则创建该目录并返回true，否则返回false**\n>\n>**mkdirs()：创建多级目录，如果有这多级目录则创建多级目录并返回true，否则返回false**\n>\n>**isDirectory()：判断file是否为目录**\n>\n>**isFile()：判断file是否为文件**\n>\n>**exists()：判断file是否存在**\n>\n>**getAbsolutePath()：返回该路径的绝对路径名字符串**\n>\n>**getPath()：返回该路径的路径名字符串**\n>\n>**getName()：返回该路径表示的文件或目录**\n>\n>**list()：返回该目录中的文件和目录的名称字符串数组**\n>\n>**listFiles()：返回该目录中的文件和目录的file对象数组**\n>\n>**delete()：删除该目录，如果目录中有内容，不能直接删除，先要删除目录中的内容，在删除目录**\n\n# 例子\n\n1. 在D盘下创建文件file.txt\n\n   ```java\n   File file = new File(\"D://file.txt\");\n   try {\n      boolean b = file.createNewFile();\n   } catch (IOException e) {\n       e.printStackTrace();\n   }\n   System.out.println(b);\n   ```\n\n2. 在D盘下创建目录file\n\n   ```java\n   File file = new File(\"D://file\");\n   boolean b = file.mkdir();\n   System.out.println(b);\n   ```\n\n   \n\n3. 在D盘下创建目录file，在file目录下在创建目录files\n\n   ```java\n   File file = new File(\"D://file//files\");\n   boolean b = file.mkdirs();\n   System.out.println(b);\n   ```\n","source":"_posts/computer/Java/course-1/file.md","raw":"---\ntitle: file\ndate: 2020/12/15 19:21\ncategories:\n- [计算机, 计算机语言, Java]\ntags: \n- Java\n\n---\n\n# 方法\n\n>**File file = new File(路径);**\n>\n>**createNewFile()：创建文件，如果有没有该文件就创建文件并返回true，否则返回false**\n>\n>**mkdir()：创建目录，如果有该目录则创建该目录并返回true，否则返回false**\n>\n>**mkdirs()：创建多级目录，如果有这多级目录则创建多级目录并返回true，否则返回false**\n>\n>**isDirectory()：判断file是否为目录**\n>\n>**isFile()：判断file是否为文件**\n>\n>**exists()：判断file是否存在**\n>\n>**getAbsolutePath()：返回该路径的绝对路径名字符串**\n>\n>**getPath()：返回该路径的路径名字符串**\n>\n>**getName()：返回该路径表示的文件或目录**\n>\n>**list()：返回该目录中的文件和目录的名称字符串数组**\n>\n>**listFiles()：返回该目录中的文件和目录的file对象数组**\n>\n>**delete()：删除该目录，如果目录中有内容，不能直接删除，先要删除目录中的内容，在删除目录**\n\n# 例子\n\n1. 在D盘下创建文件file.txt\n\n   ```java\n   File file = new File(\"D://file.txt\");\n   try {\n      boolean b = file.createNewFile();\n   } catch (IOException e) {\n       e.printStackTrace();\n   }\n   System.out.println(b);\n   ```\n\n2. 在D盘下创建目录file\n\n   ```java\n   File file = new File(\"D://file\");\n   boolean b = file.mkdir();\n   System.out.println(b);\n   ```\n\n   \n\n3. 在D盘下创建目录file，在file目录下在创建目录files\n\n   ```java\n   File file = new File(\"D://file//files\");\n   boolean b = file.mkdirs();\n   System.out.println(b);\n   ```\n","slug":"computer/Java/course-1/file","published":1,"updated":"2020-12-17T03:32:24.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg7f000ob0utdefg2hqb","content":"<h1 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h1>\n<blockquote>\n<p><strong>File file = new File (路径);</strong></p>\n<p><strong>createNewFile ()：创建文件，如果有没有该文件就创建文件并返回 true，否则返回 false</strong></p>\n<p><strong>mkdir ()：创建目录，如果有该目录则创建该目录并返回 true，否则返回 false</strong></p>\n<p><strong>mkdirs ()：创建多级目录，如果有这多级目录则创建多级目录并返回 true，否则返回 false</strong></p>\n<p><strong>isDirectory ()：判断 file 是否为目录</strong></p>\n<p><strong>isFile ()：判断 file 是否为文件</strong></p>\n<p><strong>exists ()：判断 file 是否存在</strong></p>\n<p><strong>getAbsolutePath ()：返回该路径的绝对路径名字符串</strong></p>\n<p><strong>getPath ()：返回该路径的路径名字符串</strong></p>\n<p><strong>getName ()：返回该路径表示的文件或目录</strong></p>\n<p><strong>list ()：返回该目录中的文件和目录的名称字符串数组</strong></p>\n<p><strong>listFiles ()：返回该目录中的文件和目录的 file 对象数组</strong></p>\n<p><strong>delete ()：删除该目录，如果目录中有内容，不能直接删除，先要删除目录中的内容，在删除目录</strong></p>\n</blockquote>\n<h1 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h1>\n<ol>\n<li>\n<p>在 D 盘下创建文件 file.txt</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 D 盘下创建目录 file</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 D 盘下创建目录 file，在 file 目录下在创建目录 files</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file//files\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"length":780,"excerpt":"","more":"<h1 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h1>\n<blockquote>\n<p><strong>File file = new File (路径);</strong></p>\n<p><strong>createNewFile ()：创建文件，如果有没有该文件就创建文件并返回 true，否则返回 false</strong></p>\n<p><strong>mkdir ()：创建目录，如果有该目录则创建该目录并返回 true，否则返回 false</strong></p>\n<p><strong>mkdirs ()：创建多级目录，如果有这多级目录则创建多级目录并返回 true，否则返回 false</strong></p>\n<p><strong>isDirectory ()：判断 file 是否为目录</strong></p>\n<p><strong>isFile ()：判断 file 是否为文件</strong></p>\n<p><strong>exists ()：判断 file 是否存在</strong></p>\n<p><strong>getAbsolutePath ()：返回该路径的绝对路径名字符串</strong></p>\n<p><strong>getPath ()：返回该路径的路径名字符串</strong></p>\n<p><strong>getName ()：返回该路径表示的文件或目录</strong></p>\n<p><strong>list ()：返回该目录中的文件和目录的名称字符串数组</strong></p>\n<p><strong>listFiles ()：返回该目录中的文件和目录的 file 对象数组</strong></p>\n<p><strong>delete ()：删除该目录，如果目录中有内容，不能直接删除，先要删除目录中的内容，在删除目录</strong></p>\n</blockquote>\n<h1 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h1>\n<ol>\n<li>\n<p>在 D 盘下创建文件 file.txt</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 D 盘下创建目录 file</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 D 盘下创建目录 file，在 file 目录下在创建目录 files</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file//files\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"IO流","date":"2020-12-15T11:21:00.000Z","_content":"\n\n# 字节流\n\n## 输出流\n\n### 方法\n\n> **FileOutputStream fos = new FileOutputStream(文件名);**\n>\n> **write()：往文件里面写数据**\n>\n> **getBytes()：返回字符串对应的字节数组**\n>\n> **close()：释放资源**\n\n### 换行符\n\n>**Window：\\r\\n**\n>\n>**Linux：\\n**\n>\n>**Mac：\\r**\n\n### 例子\n\n向file.txt文件写入HelloWorld\n\n```java\nFileOutputStream fos = new FileOutputStream(\"D://file.txt\");\nString s = \"Hello World\";\nfos.write(s.getBytes());\nfos.close();\n```\n\n\n\n## 输入流\n\n### 方法\n\n>**FileInputStream fis = new FileInputStream(文件名);**\n>\n>**read()：读取一个字节，如果有参数并且是byte数组，则返回的数据长度**\n>\n>**close()：释放资源**\n\n### 例子\n\n> **向file.txt读取数据**\n>\n> **方法一**\n>\n> ```java\n> FileInputStream fis = new FileInputStream(\"D://file.txt\");\n> byte b[] = new byte[1024];\n> int length = fis.read(b);\n> System.out.println(new String(b));\n> System.out.println(length);\n> fis.close();\n> ```\n>\n> **方法二**\n>\n> ```java\n> FileInputStream fis = new FileInputStream(\"D://file.txt\");\n> int data = 0;\n> while ((data=fis.read())!=-1) {\n>  System.out.print((char)data);\n> }\n> fis.close();\n> ```\n\n# 字符流\n\n## 输出流\n\n### 方法\n\n> **FileWriter fw = new FileWriter();**\n>\n> **write()：写数据**\n>\n> **flush()：刷新**\n>\n> **close()：释放资源**\n\n#### 例子\n\n> **向file.txt写入Hello World**\n>\n> ```java\n> FileWriter fw = new FileWriter(\"D://file.txt\");\n> String s = \"Hello World\";\n> fw.write(s);\n> fw.flush();//不刷新将不会写入\n> fw.close();//关闭资源前会自动刷新\n> ```\n\n## 输入流\n\n### 方法\n\n> **FileReader fr = new FileReader();**\n>\n> **read()：读取数据**\n\n### 例子\n\n> 方法一\n>\n> ```java\n> FileReader fr = new FileReader(\"D://file.txt\");\n> char c[] = new char[1024];\n> fr.read(c);\n> System.out.println(new String(c));\n> ```\n>\n> 方法二\n>\n> ``````java\n> FileReader fr = new FileReader(\"D://file.txt\");\n> int data = 0;\n> while ((data=fr.read())!=-1) {\n>  System.out.print((char)data);\n> }\n> fr.close();\n> ``````\n","source":"_posts/computer/Java/course-1/io.md","raw":"---\ntitle: IO流\ndate: 2020/12/15 19:21\ncategories:\n- [计算机, 计算机语言, Java]\ntags: \n- Java\n---\n\n\n# 字节流\n\n## 输出流\n\n### 方法\n\n> **FileOutputStream fos = new FileOutputStream(文件名);**\n>\n> **write()：往文件里面写数据**\n>\n> **getBytes()：返回字符串对应的字节数组**\n>\n> **close()：释放资源**\n\n### 换行符\n\n>**Window：\\r\\n**\n>\n>**Linux：\\n**\n>\n>**Mac：\\r**\n\n### 例子\n\n向file.txt文件写入HelloWorld\n\n```java\nFileOutputStream fos = new FileOutputStream(\"D://file.txt\");\nString s = \"Hello World\";\nfos.write(s.getBytes());\nfos.close();\n```\n\n\n\n## 输入流\n\n### 方法\n\n>**FileInputStream fis = new FileInputStream(文件名);**\n>\n>**read()：读取一个字节，如果有参数并且是byte数组，则返回的数据长度**\n>\n>**close()：释放资源**\n\n### 例子\n\n> **向file.txt读取数据**\n>\n> **方法一**\n>\n> ```java\n> FileInputStream fis = new FileInputStream(\"D://file.txt\");\n> byte b[] = new byte[1024];\n> int length = fis.read(b);\n> System.out.println(new String(b));\n> System.out.println(length);\n> fis.close();\n> ```\n>\n> **方法二**\n>\n> ```java\n> FileInputStream fis = new FileInputStream(\"D://file.txt\");\n> int data = 0;\n> while ((data=fis.read())!=-1) {\n>  System.out.print((char)data);\n> }\n> fis.close();\n> ```\n\n# 字符流\n\n## 输出流\n\n### 方法\n\n> **FileWriter fw = new FileWriter();**\n>\n> **write()：写数据**\n>\n> **flush()：刷新**\n>\n> **close()：释放资源**\n\n#### 例子\n\n> **向file.txt写入Hello World**\n>\n> ```java\n> FileWriter fw = new FileWriter(\"D://file.txt\");\n> String s = \"Hello World\";\n> fw.write(s);\n> fw.flush();//不刷新将不会写入\n> fw.close();//关闭资源前会自动刷新\n> ```\n\n## 输入流\n\n### 方法\n\n> **FileReader fr = new FileReader();**\n>\n> **read()：读取数据**\n\n### 例子\n\n> 方法一\n>\n> ```java\n> FileReader fr = new FileReader(\"D://file.txt\");\n> char c[] = new char[1024];\n> fr.read(c);\n> System.out.println(new String(c));\n> ```\n>\n> 方法二\n>\n> ``````java\n> FileReader fr = new FileReader(\"D://file.txt\");\n> int data = 0;\n> while ((data=fr.read())!=-1) {\n>  System.out.print((char)data);\n> }\n> fr.close();\n> ``````\n","slug":"computer/Java/course-1/io","published":1,"updated":"2020-12-17T03:32:41.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg7g000qb0ut005fgkbf","content":"<h1 id=\"字节流\"><a class=\"anchor\" href=\"#字节流\">#</a> 字节流</h1>\n<h2 id=\"输出流\"><a class=\"anchor\" href=\"#输出流\">#</a> 输出流</h2>\n<h3 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileOutputStream fos = new FileOutputStream (文件名);</strong></p>\n<p><strong>write ()：往文件里面写数据</strong></p>\n<p><strong>getBytes ()：返回字符串对应的字节数组</strong></p>\n<p><strong>close ()：释放资源</strong></p>\n</blockquote>\n<h3 id=\"换行符\"><a class=\"anchor\" href=\"#换行符\">#</a> 换行符</h3>\n<blockquote>\n<p><strong>Window：\\r\\n</strong></p>\n<p><strong>Linux：\\n</strong></p>\n<p><strong>Mac：\\r</strong></p>\n</blockquote>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p>向 file.txt 文件写入 HelloWorld</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"输入流\"><a class=\"anchor\" href=\"#输入流\">#</a> 输入流</h2>\n<h3 id=\"方法-2\"><a class=\"anchor\" href=\"#方法-2\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileInputStream fis = new FileInputStream (文件名);</strong></p>\n<p><strong>read ()：读取一个字节，如果有参数并且是 byte 数组，则返回的数据长度</strong></p>\n<p><strong>close ()：释放资源</strong></p>\n</blockquote>\n<h3 id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子</h3>\n<blockquote>\n<p><strong>向 file.txt 读取数据</strong></p>\n<p><strong>方法一</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>方法二</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> data <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"字符流\"><a class=\"anchor\" href=\"#字符流\">#</a> 字符流</h1>\n<h2 id=\"输出流-2\"><a class=\"anchor\" href=\"#输出流-2\">#</a> 输出流</h2>\n<h3 id=\"方法-3\"><a class=\"anchor\" href=\"#方法-3\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileWriter fw = new FileWriter();</strong></p>\n<p><strong>write ()：写数据</strong></p>\n<p><strong>flush ()：刷新</strong></p>\n<p><strong>close ()：释放资源</strong></p>\n</blockquote>\n<h4 id=\"例子-3\"><a class=\"anchor\" href=\"#例子-3\">#</a> 例子</h4>\n<blockquote>\n<p><strong>向 file.txt 写入 Hello World</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不刷新将不会写入</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭资源前会自动刷新</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"输入流-2\"><a class=\"anchor\" href=\"#输入流-2\">#</a> 输入流</h2>\n<h3 id=\"方法-4\"><a class=\"anchor\" href=\"#方法-4\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileReader fr = new FileReader();</strong></p>\n<p><strong>read ()：读取数据</strong></p>\n</blockquote>\n<h3 id=\"例子-4\"><a class=\"anchor\" href=\"#例子-4\">#</a> 例子</h3>\n<blockquote>\n<p>方法一</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>方法二</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> data <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n","site":{"data":{}},"length":1225,"excerpt":"","more":"<h1 id=\"字节流\"><a class=\"anchor\" href=\"#字节流\">#</a> 字节流</h1>\n<h2 id=\"输出流\"><a class=\"anchor\" href=\"#输出流\">#</a> 输出流</h2>\n<h3 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileOutputStream fos = new FileOutputStream (文件名);</strong></p>\n<p><strong>write ()：往文件里面写数据</strong></p>\n<p><strong>getBytes ()：返回字符串对应的字节数组</strong></p>\n<p><strong>close ()：释放资源</strong></p>\n</blockquote>\n<h3 id=\"换行符\"><a class=\"anchor\" href=\"#换行符\">#</a> 换行符</h3>\n<blockquote>\n<p><strong>Window：\\r\\n</strong></p>\n<p><strong>Linux：\\n</strong></p>\n<p><strong>Mac：\\r</strong></p>\n</blockquote>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p>向 file.txt 文件写入 HelloWorld</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"输入流\"><a class=\"anchor\" href=\"#输入流\">#</a> 输入流</h2>\n<h3 id=\"方法-2\"><a class=\"anchor\" href=\"#方法-2\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileInputStream fis = new FileInputStream (文件名);</strong></p>\n<p><strong>read ()：读取一个字节，如果有参数并且是 byte 数组，则返回的数据长度</strong></p>\n<p><strong>close ()：释放资源</strong></p>\n</blockquote>\n<h3 id=\"例子-2\"><a class=\"anchor\" href=\"#例子-2\">#</a> 例子</h3>\n<blockquote>\n<p><strong>向 file.txt 读取数据</strong></p>\n<p><strong>方法一</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>方法二</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> data <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"字符流\"><a class=\"anchor\" href=\"#字符流\">#</a> 字符流</h1>\n<h2 id=\"输出流-2\"><a class=\"anchor\" href=\"#输出流-2\">#</a> 输出流</h2>\n<h3 id=\"方法-3\"><a class=\"anchor\" href=\"#方法-3\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileWriter fw = new FileWriter();</strong></p>\n<p><strong>write ()：写数据</strong></p>\n<p><strong>flush ()：刷新</strong></p>\n<p><strong>close ()：释放资源</strong></p>\n</blockquote>\n<h4 id=\"例子-3\"><a class=\"anchor\" href=\"#例子-3\">#</a> 例子</h4>\n<blockquote>\n<p><strong>向 file.txt 写入 Hello World</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不刷新将不会写入</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭资源前会自动刷新</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"输入流-2\"><a class=\"anchor\" href=\"#输入流-2\">#</a> 输入流</h2>\n<h3 id=\"方法-4\"><a class=\"anchor\" href=\"#方法-4\">#</a> 方法</h3>\n<blockquote>\n<p><strong>FileReader fr = new FileReader();</strong></p>\n<p><strong>read ()：读取数据</strong></p>\n</blockquote>\n<h3 id=\"例子-4\"><a class=\"anchor\" href=\"#例子-4\">#</a> 例子</h3>\n<blockquote>\n<p>方法一</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>方法二</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://file.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> data <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n"},{"title":"Java面试题","date":"2020-12-15T11:21:00.000Z","_content":"\n## Java基础\n\n### Java跨平台原理\n\n> Java对于不同系统、不同版本、不同位数的Java虚拟机来屏蔽不同的系统指令集差异而对外提供统一的接口\n\n### JDK、JRE、JVM的关系\n\n> **JDK(java development toolkit)：Java开发工具包**\n>\n> 是java的核心，包括了java运行环境，一堆java工具（javac、java、jdb）和java基础类库（javaAPI包括rt.jar）\n>\n> **JRE(java runtime environment)：Java运行环境**\n>\n> 所有的java程序都要在JRE下才能运行，包括JVM和Java核心类库和支持文件，与JDK相比不包含开发工具（编译器、调试器和其他工具）\n>\n> **JVM(java virtual mechinal)：Java虚拟机**\n>\n> JVM是JRE的一部分，他是一个虚拟出来的计算机，JVM的主要工作是解释自己的指令集（即字节码）并映射到本地的CPU指令集或OS的系统调用\n\n### 面向对象的特征\n\n四个：封装、抽象、继承、多态\n\n> **封装：将客观的事物封装成抽象的类，并且将自己类中的属性私有化，只对外提供set和get方法来进行属性的赋值和取值**\n>\n> **继承：子类继承父类，子类可以使用父类的所有功能，并且在无需改变父类的情况下能对这些功能进行扩展**\n>\n> **多态：允许相同或不同子类型的对象对同一消息作出不同的响应，如重载和重写**\n\n### 访问修饰符public,private,protected,以及默认时的区别\n\n| 修饰符  | 当前类 | 同包 | 子类 | 其他包 |\n| :-----: | :----: | :--: | :--: | :----: |\n| public  |   √    |  √   |  √   |   √    |\n| protect |   √    |  √   |  √   |   ×    |\n| default |   √    |  √   |  ×   |   ×    |\n| private |   √    |  ×   |  ×   |   ×    |\n\n### 基本数据类型，包装类型\n\n基本数据类型有八种\n\n> **byte、short、int、long、char、boolean、float、double**\n\n| 数据类型 |    占用字节     |     取值范围     |    默认值    | 包装类型  |\n| :------: | :-------------: | :--------------: | :----------: | :-------: |\n| boolean  | 只有true和false |   true、false    |    false     |  Boolean  |\n|   byte   |     1(8位）     |     -128~127     |      0       |   Byte    |\n|  short   |     2(16位)     |   -32768~32767   |      0       |   Short   |\n|   int    |     4(32位)     |   -2^31~2^31-1   |      0       |  Integer  |\n|   long   |        8        |   -2^63~2^63-1   |     0.0l     |   Long    |\n|  float   |        4        |  3.4E-45~1.4E38  |     0.0f     |   Float   |\n|  double  |        8        | 4.9E-324~1.8E308 |      0       |  Double   |\n|   char   |        2        |     0~65535      | \\u0000(空格) | Character |\n\n包装类型：每一个基本数据类型都一一对于一个包装类型\n\njava是一个面向对象的语言，而基本数据类型不具备面向对象的特征\n\n### 拆箱和装箱\n\n> **装箱：把基本数据类型转化为对应的包装类型**\n>\n> **Integer i = 1;**\n>\n> **自动装箱实际上会在编译时会调用Integer.valueOf()方法来装箱**\n>\n> **拆箱：把包装类型转换为基本数据类型**\n>\n> **int j = i;**\n>\n> **实际上在编译时会调用intValue()方法来拆箱**\n\n### ==和equals的区别\n\n> **==用来判断两个变量之间的值是否相等，变量可分为基本数据变量和引用类型，如果比较的是基本数据类型，那么就是比较他们的值是否相等，如果比较的是引用类型，那么比较的是他们引用的内存地址**\n>\n> **equals不能用于作用与基本数据类型的变量，他继承至Object类，比较的是是否是同一对象，如果没有对equals方法进行重写，则比较的是引用类型变量所指向对象的地址**\n\n### 重写equals为何要重写hashcode\n\n> 1. **使用hashcode方法提前校验，可以避免每一次对比都调用equals方法，提高效率（因为hashcode不等，equals一定不等）**\n> 2. **为了保证是同一对象，如果重写了equals方法，而没有重写hashcode方法，会出现equals相等，hashcode不相等的情况，重写hashcode方法就是为了避免这种情况发生**\n\n### String，StringBuilder，StringBuffer的区别\n\n> **String是字符串常量，其值不能改变，底层是使用了一个不可变的数组对象(final char[])**\n>\n> **StringBulider是线程不安全的，其值可以改变，速度快，底层是使用了一个可变的数组对象（没有用final修饰）**\n>\n> **StringBuffer是线程安全的，其值可以改变，速度慢。**\n\n### 拼接字符串\n\n> ```java\n> String s = \"a\" + \"b\";\n> ```\n>\n> **开辟了三个内存空间**\n\n> ```java\n> StringBuilder sb = new StringBuilder();\n> sb.append(\"a\").append(\"b\");\n> ```\n>\n> **只开辟了一个内存空间**\n>\n> **拼接字符串不能使用String，要是有StringBuilder或StringBuffer**\n\n## 集合\n\n### Map\n\n可分为HashMap和TreeMap\n\n>HashMap：hash表无序，不能放重复键，允许放空键空值\n>\n>TreeMap：数据结构是树，有序\n\n### Collection\n\n分为List和Set\n\n> List：有序的，可以重复的\n>\n> Set：无序的，不可重复的，需要重写equals和hashcode方法\n\nList接口：ArrayList、LinkedList\n\nSet接口：HashSet、TreeSet\n\n> HashSet：底层数据结构是哈希链表，保证元素的唯一，不保证元素顺序不变，需要使用equals方法和hashcode方法\n>\n> TreeSet：底层数据结构是二叉树，保证元素唯一，并对元素按自然排序进行排序，可以实现Compareable接口重写compareTo()实现自定义排序\n\n### ArrayList、LinkedList和vector的区别\n\nArrayLsit和LinkedList都是实现了List接口\n\nArrayList是基于动态数组的数据结构，LinkedList是基于链表的\n\n> **ArrayList：查询快，增加删除慢，由于数组在内存中是一块连续的内存，查询根据索引就能找到，所以快，而添加和删除需要移动内存，所以慢。**\n>\n> **LinkedList：增加删除快，查询慢，由于链表在内存中不是连续的，查找时，需要从头部开始，挨着找，所以查询慢，而添加删除时，只需要改变引用指向即可，所以增加删除快**\n>\n> **ArrayList：默认容量10，每次扩容时为之前的1.5倍，是线程不安全的，效率高**\n>\n> **vector：默认容量10，每次扩容是为之前的2倍，是线程安全的，效率低**\n\n### HashMap和HashTable的区别\n\n相同点\n\n> **HashMap和HashTable都是通过键值对来存储值的**\n\n不同点\n\n>**HashMap：可以把null作为键或值，是线程安全的，效率较高，默认容量16，每次扩容时为原来的两倍**\n>\n>**HashTable：不能把null作为键或值，是线程不安全的，效率较低，默认容量为11，每次 扩容为原来的两倍加一**\n\n创建时，如果给定容量初始值，那么HashTable就是给定的初始值，而HashMap会自动扩充为2的幂次方大小\n\n### HashMap与concurrentHashMap的区别\n\n> **concurrentHashMap对整个Map进行了分段分割，分为了N个Segment，默认提升16倍，相对于HashTable的synchronized锁粒度更精细了一些，并发性能更好，而HashMap没有锁机制，不是线程安全的，JDk1.8之后concurrentHashMap摒弃了Segment的数据结构，直接采用数组+链表+红黑树的数据结构实现，并发控制使用synchronized和CAS(compare and swap)来操作**\n\n## IO\n\n### BIO、NIO、AIO的区别\n\n> **BIO：同步阻塞**\n>\n> **用户发起一个IO操作请求后，必须等待IO操作的完成，只有当真正完成了IO操作之后，用户进程才能运行**\n>\n> **NIO：同步非阻塞**\n>\n> **用户发起一个IO操作请求后，后边可以做其他事情，但是用户进程需要时不时的询问IO操作是否就绪，从而引起不必要的CPU资源浪费**\n>\n> **AIO：异步非阻塞**\n>\n> **用户发起一个IO操作请求后立即返回，等IO操作真正完成之后，应用程序会得到IO操作完成的通知。**\n\n### 实现拷贝文件的工具类使用字符流还是字节流\n\n> **我们拷贝的文件不确定是只包含字符流，又可能是字节流（图片、声音、图像等），为保证通用性，要是有字节流**\n\n## 多线程\n\n### 实现线程的方式\n\n> 1. **继承Thread类**\n> 2. **实现Runnable接口**\n> 3. **实现Callable接口**\n\n继承拓展性不强，Java总是单继承，如果一个类继承了Thread类就不能继承其他类了\n\n### 线程的启动方式\n\n> **启动线程调用start方法，而启动以后执行的是run方法**\n\n### 区分线程\n\n> **调用setName方法，设置一个线程名称，只是一种规范，在线程创建完成后，都需要设置名称**\n\n### sleep和wait的区别\n\n> 1. **sleep定义在Thread类上，不会释放锁，使用在任何地方**\n> 2. **wait定义在object类上，会释放锁，必须在同步方法或同步代码块中执行**\n> 3. **超时或调用interrupt方法唤醒sleep线程**\n> 4. **notify随机唤醒一个wait线程，notifyall唤醒所有wait线程**\n\n### synchronized和lock的区别\n\n> **synchronized时一个关键字，lock是一个接口**\n>\n> **synchronized可以给方法和同步代码块加锁，lock只能给同步代码块加锁**\n>\n> **synchronized无需手动获取和释放锁，发生异常时会自动解锁，不会出现死锁，lock需要自己手动加锁和释放锁，如lock()、unlock()，如果忘记使用unlock()，则会出现死锁，所以一般在finally里面加上unlock()**\n\n### synchronized和volatile的区别\n\n> 1. **作用位置不同**\n>\n>    **synchronized修饰方法、代码块**\n>\n>    **volatile修饰变量**\n>\n> 2. **作用不同**\n>\n>    **synchronized可以保证原子性和可见性，可能会造成线程阻塞**\n>\n>    **volatile仅能保证可见性，无法保证原子性，不会造成线程阻塞**\n\n### 什么是死锁，如何解决\n\n死锁\n\n> 线程1独占资源a并且尝试获取独占资源b，而线程2独占资源b并尝试获取独占资源a，两个线程在等待另一个资源的同时不释放资源，就形成了死锁\n\n形成死锁的四个必要条件\n\n> 1. 互斥条件：一个资源每次只能被一个进程使用\n> 2. 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放\n> 3. 不剥夺资源：进程以获得的资源，在未完成之前，不能强行剥夺\n> 4. 循环等待条件：若干个进程形成一种头尾相接的循环等待资源关系\n\n预防死锁\n\n> 1. **破坏请求和保存条件**\n>\n>    **一次性的申请所有资源，之后不再申请资源，如果不满足资源条件则得不到资源分配。**\n>\n>    **只获得初期资源运行，之后将运行完的资源释放，请求新的资源**\n>\n> 2. **破坏不可抢占条件**\n>\n>    **当一个进程获取某种不可抢占资源，提出新的资源申请，若不能满足，则释放所有资源，以后需要，再次重新申请**\n>\n> 3. **破坏循环等待条件**\n>\n>    **对资源进行排号，按照序号递增的顺序请求资源，若进程获得序号高的资源想要获取序号低的资源，就需要先释放序号高的资源**\n\n### 线程并发库\n\n创建线程池的四种方式\n\n|          方法名           |         作用         |\n| :-----------------------: | :------------------: |\n|   newFixedThreadPool()    | 创建固定数量的线程池 |\n|   newCachedThreadPool()   |   创建缓存的线程池   |\n| newSingleThreadExecutor() |     创建单个线程     |\n| newScheduledThreadPool()  |   创建定时器线程池   |\n\n### 线程池的作用\n\n> 1. **限定线程的个数，提高线程的可管理性**\n> 2. **提高响应速度**\n> 3. **降低资源消耗**\n\n## 反射\n\n### 什么是反射\n\n> **程序在运行时可以通过类名获取类的所有信息**\n\n### 反射的实现方式\n\n>1. **Class.forName()**\n>2. **类名.class**\n>3. **对象.getClass()**\n\n### 反射的优缺点\n\n> **优点：在运行期间绑定对象，提高了灵活性**\n>\n> **缺点：有性能有影响，他的操作总是慢于直接代码**\n\n### 怎么实现动态代理\n\nJDK动态代理和Cglib代理\n\n> **JDK代理是基于接口实现的**\n>\n> **Cglib代理是基于继承实现的**","source":"_posts/computer/questions/course-1/java_quetsions.md","raw":"---\ntitle: Java面试题\ndate: 2020/12/15 19:21\ncategories:\n- [计算机, 面试, 面试题]\ntags: \n- 面试题\n---\n\n## Java基础\n\n### Java跨平台原理\n\n> Java对于不同系统、不同版本、不同位数的Java虚拟机来屏蔽不同的系统指令集差异而对外提供统一的接口\n\n### JDK、JRE、JVM的关系\n\n> **JDK(java development toolkit)：Java开发工具包**\n>\n> 是java的核心，包括了java运行环境，一堆java工具（javac、java、jdb）和java基础类库（javaAPI包括rt.jar）\n>\n> **JRE(java runtime environment)：Java运行环境**\n>\n> 所有的java程序都要在JRE下才能运行，包括JVM和Java核心类库和支持文件，与JDK相比不包含开发工具（编译器、调试器和其他工具）\n>\n> **JVM(java virtual mechinal)：Java虚拟机**\n>\n> JVM是JRE的一部分，他是一个虚拟出来的计算机，JVM的主要工作是解释自己的指令集（即字节码）并映射到本地的CPU指令集或OS的系统调用\n\n### 面向对象的特征\n\n四个：封装、抽象、继承、多态\n\n> **封装：将客观的事物封装成抽象的类，并且将自己类中的属性私有化，只对外提供set和get方法来进行属性的赋值和取值**\n>\n> **继承：子类继承父类，子类可以使用父类的所有功能，并且在无需改变父类的情况下能对这些功能进行扩展**\n>\n> **多态：允许相同或不同子类型的对象对同一消息作出不同的响应，如重载和重写**\n\n### 访问修饰符public,private,protected,以及默认时的区别\n\n| 修饰符  | 当前类 | 同包 | 子类 | 其他包 |\n| :-----: | :----: | :--: | :--: | :----: |\n| public  |   √    |  √   |  √   |   √    |\n| protect |   √    |  √   |  √   |   ×    |\n| default |   √    |  √   |  ×   |   ×    |\n| private |   √    |  ×   |  ×   |   ×    |\n\n### 基本数据类型，包装类型\n\n基本数据类型有八种\n\n> **byte、short、int、long、char、boolean、float、double**\n\n| 数据类型 |    占用字节     |     取值范围     |    默认值    | 包装类型  |\n| :------: | :-------------: | :--------------: | :----------: | :-------: |\n| boolean  | 只有true和false |   true、false    |    false     |  Boolean  |\n|   byte   |     1(8位）     |     -128~127     |      0       |   Byte    |\n|  short   |     2(16位)     |   -32768~32767   |      0       |   Short   |\n|   int    |     4(32位)     |   -2^31~2^31-1   |      0       |  Integer  |\n|   long   |        8        |   -2^63~2^63-1   |     0.0l     |   Long    |\n|  float   |        4        |  3.4E-45~1.4E38  |     0.0f     |   Float   |\n|  double  |        8        | 4.9E-324~1.8E308 |      0       |  Double   |\n|   char   |        2        |     0~65535      | \\u0000(空格) | Character |\n\n包装类型：每一个基本数据类型都一一对于一个包装类型\n\njava是一个面向对象的语言，而基本数据类型不具备面向对象的特征\n\n### 拆箱和装箱\n\n> **装箱：把基本数据类型转化为对应的包装类型**\n>\n> **Integer i = 1;**\n>\n> **自动装箱实际上会在编译时会调用Integer.valueOf()方法来装箱**\n>\n> **拆箱：把包装类型转换为基本数据类型**\n>\n> **int j = i;**\n>\n> **实际上在编译时会调用intValue()方法来拆箱**\n\n### ==和equals的区别\n\n> **==用来判断两个变量之间的值是否相等，变量可分为基本数据变量和引用类型，如果比较的是基本数据类型，那么就是比较他们的值是否相等，如果比较的是引用类型，那么比较的是他们引用的内存地址**\n>\n> **equals不能用于作用与基本数据类型的变量，他继承至Object类，比较的是是否是同一对象，如果没有对equals方法进行重写，则比较的是引用类型变量所指向对象的地址**\n\n### 重写equals为何要重写hashcode\n\n> 1. **使用hashcode方法提前校验，可以避免每一次对比都调用equals方法，提高效率（因为hashcode不等，equals一定不等）**\n> 2. **为了保证是同一对象，如果重写了equals方法，而没有重写hashcode方法，会出现equals相等，hashcode不相等的情况，重写hashcode方法就是为了避免这种情况发生**\n\n### String，StringBuilder，StringBuffer的区别\n\n> **String是字符串常量，其值不能改变，底层是使用了一个不可变的数组对象(final char[])**\n>\n> **StringBulider是线程不安全的，其值可以改变，速度快，底层是使用了一个可变的数组对象（没有用final修饰）**\n>\n> **StringBuffer是线程安全的，其值可以改变，速度慢。**\n\n### 拼接字符串\n\n> ```java\n> String s = \"a\" + \"b\";\n> ```\n>\n> **开辟了三个内存空间**\n\n> ```java\n> StringBuilder sb = new StringBuilder();\n> sb.append(\"a\").append(\"b\");\n> ```\n>\n> **只开辟了一个内存空间**\n>\n> **拼接字符串不能使用String，要是有StringBuilder或StringBuffer**\n\n## 集合\n\n### Map\n\n可分为HashMap和TreeMap\n\n>HashMap：hash表无序，不能放重复键，允许放空键空值\n>\n>TreeMap：数据结构是树，有序\n\n### Collection\n\n分为List和Set\n\n> List：有序的，可以重复的\n>\n> Set：无序的，不可重复的，需要重写equals和hashcode方法\n\nList接口：ArrayList、LinkedList\n\nSet接口：HashSet、TreeSet\n\n> HashSet：底层数据结构是哈希链表，保证元素的唯一，不保证元素顺序不变，需要使用equals方法和hashcode方法\n>\n> TreeSet：底层数据结构是二叉树，保证元素唯一，并对元素按自然排序进行排序，可以实现Compareable接口重写compareTo()实现自定义排序\n\n### ArrayList、LinkedList和vector的区别\n\nArrayLsit和LinkedList都是实现了List接口\n\nArrayList是基于动态数组的数据结构，LinkedList是基于链表的\n\n> **ArrayList：查询快，增加删除慢，由于数组在内存中是一块连续的内存，查询根据索引就能找到，所以快，而添加和删除需要移动内存，所以慢。**\n>\n> **LinkedList：增加删除快，查询慢，由于链表在内存中不是连续的，查找时，需要从头部开始，挨着找，所以查询慢，而添加删除时，只需要改变引用指向即可，所以增加删除快**\n>\n> **ArrayList：默认容量10，每次扩容时为之前的1.5倍，是线程不安全的，效率高**\n>\n> **vector：默认容量10，每次扩容是为之前的2倍，是线程安全的，效率低**\n\n### HashMap和HashTable的区别\n\n相同点\n\n> **HashMap和HashTable都是通过键值对来存储值的**\n\n不同点\n\n>**HashMap：可以把null作为键或值，是线程安全的，效率较高，默认容量16，每次扩容时为原来的两倍**\n>\n>**HashTable：不能把null作为键或值，是线程不安全的，效率较低，默认容量为11，每次 扩容为原来的两倍加一**\n\n创建时，如果给定容量初始值，那么HashTable就是给定的初始值，而HashMap会自动扩充为2的幂次方大小\n\n### HashMap与concurrentHashMap的区别\n\n> **concurrentHashMap对整个Map进行了分段分割，分为了N个Segment，默认提升16倍，相对于HashTable的synchronized锁粒度更精细了一些，并发性能更好，而HashMap没有锁机制，不是线程安全的，JDk1.8之后concurrentHashMap摒弃了Segment的数据结构，直接采用数组+链表+红黑树的数据结构实现，并发控制使用synchronized和CAS(compare and swap)来操作**\n\n## IO\n\n### BIO、NIO、AIO的区别\n\n> **BIO：同步阻塞**\n>\n> **用户发起一个IO操作请求后，必须等待IO操作的完成，只有当真正完成了IO操作之后，用户进程才能运行**\n>\n> **NIO：同步非阻塞**\n>\n> **用户发起一个IO操作请求后，后边可以做其他事情，但是用户进程需要时不时的询问IO操作是否就绪，从而引起不必要的CPU资源浪费**\n>\n> **AIO：异步非阻塞**\n>\n> **用户发起一个IO操作请求后立即返回，等IO操作真正完成之后，应用程序会得到IO操作完成的通知。**\n\n### 实现拷贝文件的工具类使用字符流还是字节流\n\n> **我们拷贝的文件不确定是只包含字符流，又可能是字节流（图片、声音、图像等），为保证通用性，要是有字节流**\n\n## 多线程\n\n### 实现线程的方式\n\n> 1. **继承Thread类**\n> 2. **实现Runnable接口**\n> 3. **实现Callable接口**\n\n继承拓展性不强，Java总是单继承，如果一个类继承了Thread类就不能继承其他类了\n\n### 线程的启动方式\n\n> **启动线程调用start方法，而启动以后执行的是run方法**\n\n### 区分线程\n\n> **调用setName方法，设置一个线程名称，只是一种规范，在线程创建完成后，都需要设置名称**\n\n### sleep和wait的区别\n\n> 1. **sleep定义在Thread类上，不会释放锁，使用在任何地方**\n> 2. **wait定义在object类上，会释放锁，必须在同步方法或同步代码块中执行**\n> 3. **超时或调用interrupt方法唤醒sleep线程**\n> 4. **notify随机唤醒一个wait线程，notifyall唤醒所有wait线程**\n\n### synchronized和lock的区别\n\n> **synchronized时一个关键字，lock是一个接口**\n>\n> **synchronized可以给方法和同步代码块加锁，lock只能给同步代码块加锁**\n>\n> **synchronized无需手动获取和释放锁，发生异常时会自动解锁，不会出现死锁，lock需要自己手动加锁和释放锁，如lock()、unlock()，如果忘记使用unlock()，则会出现死锁，所以一般在finally里面加上unlock()**\n\n### synchronized和volatile的区别\n\n> 1. **作用位置不同**\n>\n>    **synchronized修饰方法、代码块**\n>\n>    **volatile修饰变量**\n>\n> 2. **作用不同**\n>\n>    **synchronized可以保证原子性和可见性，可能会造成线程阻塞**\n>\n>    **volatile仅能保证可见性，无法保证原子性，不会造成线程阻塞**\n\n### 什么是死锁，如何解决\n\n死锁\n\n> 线程1独占资源a并且尝试获取独占资源b，而线程2独占资源b并尝试获取独占资源a，两个线程在等待另一个资源的同时不释放资源，就形成了死锁\n\n形成死锁的四个必要条件\n\n> 1. 互斥条件：一个资源每次只能被一个进程使用\n> 2. 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放\n> 3. 不剥夺资源：进程以获得的资源，在未完成之前，不能强行剥夺\n> 4. 循环等待条件：若干个进程形成一种头尾相接的循环等待资源关系\n\n预防死锁\n\n> 1. **破坏请求和保存条件**\n>\n>    **一次性的申请所有资源，之后不再申请资源，如果不满足资源条件则得不到资源分配。**\n>\n>    **只获得初期资源运行，之后将运行完的资源释放，请求新的资源**\n>\n> 2. **破坏不可抢占条件**\n>\n>    **当一个进程获取某种不可抢占资源，提出新的资源申请，若不能满足，则释放所有资源，以后需要，再次重新申请**\n>\n> 3. **破坏循环等待条件**\n>\n>    **对资源进行排号，按照序号递增的顺序请求资源，若进程获得序号高的资源想要获取序号低的资源，就需要先释放序号高的资源**\n\n### 线程并发库\n\n创建线程池的四种方式\n\n|          方法名           |         作用         |\n| :-----------------------: | :------------------: |\n|   newFixedThreadPool()    | 创建固定数量的线程池 |\n|   newCachedThreadPool()   |   创建缓存的线程池   |\n| newSingleThreadExecutor() |     创建单个线程     |\n| newScheduledThreadPool()  |   创建定时器线程池   |\n\n### 线程池的作用\n\n> 1. **限定线程的个数，提高线程的可管理性**\n> 2. **提高响应速度**\n> 3. **降低资源消耗**\n\n## 反射\n\n### 什么是反射\n\n> **程序在运行时可以通过类名获取类的所有信息**\n\n### 反射的实现方式\n\n>1. **Class.forName()**\n>2. **类名.class**\n>3. **对象.getClass()**\n\n### 反射的优缺点\n\n> **优点：在运行期间绑定对象，提高了灵活性**\n>\n> **缺点：有性能有影响，他的操作总是慢于直接代码**\n\n### 怎么实现动态代理\n\nJDK动态代理和Cglib代理\n\n> **JDK代理是基于接口实现的**\n>\n> **Cglib代理是基于继承实现的**","slug":"computer/questions/course-1/java_quetsions","published":1,"updated":"2020-12-15T12:08:58.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg7h000tb0utgjtrbssw","content":"<h2 id=\"java基础\"><a class=\"anchor\" href=\"#java基础\">#</a> Java 基础</h2>\n<h3 id=\"java跨平台原理\"><a class=\"anchor\" href=\"#java跨平台原理\">#</a> Java 跨平台原理</h3>\n<blockquote>\n<p>Java 对于不同系统、不同版本、不同位数的 Java 虚拟机来屏蔽不同的系统指令集差异而对外提供统一的接口</p>\n</blockquote>\n<h3 id=\"jdk-jre-jvm的关系\"><a class=\"anchor\" href=\"#jdk-jre-jvm的关系\">#</a> JDK、JRE、JVM 的关系</h3>\n<blockquote>\n<p><strong>JDK (java development toolkit)：Java 开发工具包</strong></p>\n<p>是 java 的核心，包括了 java 运行环境，一堆 java 工具（javac、java、jdb）和 java 基础类库（javaAPI 包括 rt.jar）</p>\n<p><strong>JRE (java runtime environment)：Java 运行环境</strong></p>\n<p>所有的 java 程序都要在 JRE 下才能运行，包括 JVM 和 Java 核心类库和支持文件，与 JDK 相比不包含开发工具（编译器、调试器和其他工具）</p>\n<p><strong>JVM (java virtual mechinal)：Java 虚拟机</strong></p>\n<p>JVM 是 JRE 的一部分，他是一个虚拟出来的计算机，JVM 的主要工作是解释自己的指令集（即字节码）并映射到本地的 CPU 指令集或 OS 的系统调用</p>\n</blockquote>\n<h3 id=\"面向对象的特征\"><a class=\"anchor\" href=\"#面向对象的特征\">#</a> 面向对象的特征</h3>\n<p>四个：封装、抽象、继承、多态</p>\n<blockquote>\n<p><strong>封装：将客观的事物封装成抽象的类，并且将自己类中的属性私有化，只对外提供 set 和 get 方法来进行属性的赋值和取值</strong></p>\n<p><strong>继承：子类继承父类，子类可以使用父类的所有功能，并且在无需改变父类的情况下能对这些功能进行扩展</strong></p>\n<p><strong>多态：允许相同或不同子类型的对象对同一消息作出不同的响应，如重载和重写</strong></p>\n</blockquote>\n<h3 id=\"访问修饰符publicprivateprotected以及默认时的区别\"><a class=\"anchor\" href=\"#访问修饰符publicprivateprotected以及默认时的区别\">#</a> 访问修饰符 public,private,protected, 以及默认时的区别</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">修饰符</th>\n<th style=\"text-align:center\">当前类</th>\n<th style=\"text-align:center\">同包</th>\n<th style=\"text-align:center\">子类</th>\n<th style=\"text-align:center\">其他包</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protect</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"基本数据类型包装类型\"><a class=\"anchor\" href=\"#基本数据类型包装类型\">#</a> 基本数据类型，包装类型</h3>\n<p>基本数据类型有八种</p>\n<blockquote>\n<p><strong>byte、short、int、long、char、boolean、float、double</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">占用字节</th>\n<th style=\"text-align:center\">取值范围</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">包装类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只有 true 和 false</td>\n<td style=\"text-align:center\">true、false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">Boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">1 (8 位）</td>\n<td style=\"text-align:center\">-128~127</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Byte</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">2 (16 位)</td>\n<td style=\"text-align:center\">-32768~32767</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Short</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4 (32 位)</td>\n<td style=\"text-align:center\">-2<sup>31~2</sup>31-1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Integer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">-2<sup>63~2</sup>63-1</td>\n<td style=\"text-align:center\">0.0l</td>\n<td style=\"text-align:center\">Long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3.4E-45~1.4E38</td>\n<td style=\"text-align:center\">0.0f</td>\n<td style=\"text-align:center\">Float</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">4.9E-324~1.8E308</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Double</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0~65535</td>\n<td style=\"text-align:center\">\\u0000 (空格)</td>\n<td style=\"text-align:center\">Character</td>\n</tr>\n</tbody>\n</table>\n<p>包装类型：每一个基本数据类型都一一对于一个包装类型</p>\n<p>java 是一个面向对象的语言，而基本数据类型不具备面向对象的特征</p>\n<h3 id=\"拆箱和装箱\"><a class=\"anchor\" href=\"#拆箱和装箱\">#</a> 拆箱和装箱</h3>\n<blockquote>\n<p><strong>装箱：把基本数据类型转化为对应的包装类型</strong></p>\n<p><strong>Integer i = 1;</strong></p>\n<p><strong>自动装箱实际上会在编译时会调用 Integer.valueOf () 方法来装箱</strong></p>\n<p><strong>拆箱：把包装类型转换为基本数据类型</strong></p>\n<p><strong>int j = i;</strong></p>\n<p><strong>实际上在编译时会调用 intValue () 方法来拆箱</strong></p>\n</blockquote>\n<h3 id=\"和equals的区别\"><a class=\"anchor\" href=\"#和equals的区别\">#</a> == 和 equals 的区别</h3>\n<blockquote>\n<p><strong>== 用来判断两个变量之间的值是否相等，变量可分为基本数据变量和引用类型，如果比较的是基本数据类型，那么就是比较他们的值是否相等，如果比较的是引用类型，那么比较的是他们引用的内存地址</strong></p>\n<p><strong>equals 不能用于作用与基本数据类型的变量，他继承至 Object 类，比较的是是否是同一对象，如果没有对 equals 方法进行重写，则比较的是引用类型变量所指向对象的地址</strong></p>\n</blockquote>\n<h3 id=\"重写equals为何要重写hashcode\"><a class=\"anchor\" href=\"#重写equals为何要重写hashcode\">#</a> 重写 equals 为何要重写 hashcode</h3>\n<blockquote>\n<ol>\n<li><strong>使用 hashcode 方法提前校验，可以避免每一次对比都调用 equals 方法，提高效率（因为 hashcode 不等，equals 一定不等）</strong></li>\n<li><strong>为了保证是同一对象，如果重写了 equals 方法，而没有重写 hashcode 方法，会出现 equals 相等，hashcode 不相等的情况，重写 hashcode 方法就是为了避免这种情况发生</strong></li>\n</ol>\n</blockquote>\n<h3 id=\"stringstringbuilderstringbuffer的区别\"><a class=\"anchor\" href=\"#stringstringbuilderstringbuffer的区别\">#</a> String，StringBuilder，StringBuffer 的区别</h3>\n<blockquote>\n<p><strong>String 是字符串常量，其值不能改变，底层是使用了一个不可变的数组对象 (final char [])</strong></p>\n<p><strong>StringBulider 是线程不安全的，其值可以改变，速度快，底层是使用了一个可变的数组对象（没有用 final 修饰）</strong></p>\n<p><strong>StringBuffer 是线程安全的，其值可以改变，速度慢。</strong></p>\n</blockquote>\n<h3 id=\"拼接字符串\"><a class=\"anchor\" href=\"#拼接字符串\">#</a> 拼接字符串</h3>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>开辟了三个内存空间</strong></p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>只开辟了一个内存空间</strong></p>\n<p><strong>拼接字符串不能使用 String，要是有 StringBuilder 或 StringBuffer</strong></p>\n</blockquote>\n<h2 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h2>\n<h3 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h3>\n<p>可分为 HashMap 和 TreeMap</p>\n<blockquote>\n<p>HashMap：hash 表无序，不能放重复键，允许放空键空值</p>\n<p>TreeMap：数据结构是树，有序</p>\n</blockquote>\n<h3 id=\"collection\"><a class=\"anchor\" href=\"#collection\">#</a> Collection</h3>\n<p>分为 List 和 Set</p>\n<blockquote>\n<p>List：有序的，可以重复的</p>\n<p>Set：无序的，不可重复的，需要重写 equals 和 hashcode 方法</p>\n</blockquote>\n<p>List 接口：ArrayList、LinkedList</p>\n<p>Set 接口：HashSet、TreeSet</p>\n<blockquote>\n<p>HashSet：底层数据结构是哈希链表，保证元素的唯一，不保证元素顺序不变，需要使用 equals 方法和 hashcode 方法</p>\n<p>TreeSet：底层数据结构是二叉树，保证元素唯一，并对元素按自然排序进行排序，可以实现 Compareable 接口重写 compareTo () 实现自定义排序</p>\n</blockquote>\n<h3 id=\"arraylist-linkedlist和vector的区别\"><a class=\"anchor\" href=\"#arraylist-linkedlist和vector的区别\">#</a> ArrayList、LinkedList 和 vector 的区别</h3>\n<p>ArrayLsit 和 LinkedList 都是实现了 List 接口</p>\n<p>ArrayList 是基于动态数组的数据结构，LinkedList 是基于链表的</p>\n<blockquote>\n<p><strong>ArrayList：查询快，增加删除慢，由于数组在内存中是一块连续的内存，查询根据索引就能找到，所以快，而添加和删除需要移动内存，所以慢。</strong></p>\n<p><strong>LinkedList：增加删除快，查询慢，由于链表在内存中不是连续的，查找时，需要从头部开始，挨着找，所以查询慢，而添加删除时，只需要改变引用指向即可，所以增加删除快</strong></p>\n<p><strong>ArrayList：默认容量 10，每次扩容时为之前的 1.5 倍，是线程不安全的，效率高</strong></p>\n<p><strong>vector：默认容量 10，每次扩容是为之前的 2 倍，是线程安全的，效率低</strong></p>\n</blockquote>\n<h3 id=\"hashmap和hashtable的区别\"><a class=\"anchor\" href=\"#hashmap和hashtable的区别\">#</a> HashMap 和 HashTable 的区别</h3>\n<p>相同点</p>\n<blockquote>\n<p><strong>HashMap 和 HashTable 都是通过键值对来存储值的</strong></p>\n</blockquote>\n<p>不同点</p>\n<blockquote>\n<p><strong>HashMap：可以把 null 作为键或值，是线程安全的，效率较高，默认容量 16，每次扩容时为原来的两倍</strong></p>\n<p><strong>HashTable：不能把 null 作为键或值，是线程不安全的，效率较低，默认容量为 11，每次 扩容为原来的两倍加一</strong></p>\n</blockquote>\n<p>创建时，如果给定容量初始值，那么 HashTable 就是给定的初始值，而 HashMap 会自动扩充为 2 的幂次方大小</p>\n<h3 id=\"hashmap与concurrenthashmap的区别\"><a class=\"anchor\" href=\"#hashmap与concurrenthashmap的区别\">#</a> HashMap 与 concurrentHashMap 的区别</h3>\n<blockquote>\n<p><strong>concurrentHashMap 对整个 Map 进行了分段分割，分为了 N 个 Segment，默认提升 16 倍，相对于 HashTable 的 synchronized 锁粒度更精细了一些，并发性能更好，而 HashMap 没有锁机制，不是线程安全的，JDk1.8 之后 concurrentHashMap 摒弃了 Segment 的数据结构，直接采用数组 + 链表 + 红黑树的数据结构实现，并发控制使用 synchronized 和 CAS (compare and swap) 来操作</strong></p>\n</blockquote>\n<h2 id=\"io\"><a class=\"anchor\" href=\"#io\">#</a> IO</h2>\n<h3 id=\"bio-nio-aio的区别\"><a class=\"anchor\" href=\"#bio-nio-aio的区别\">#</a> BIO、NIO、AIO 的区别</h3>\n<blockquote>\n<p><strong>BIO：同步阻塞</strong></p>\n<p><strong>用户发起一个 IO 操作请求后，必须等待 IO 操作的完成，只有当真正完成了 IO 操作之后，用户进程才能运行</strong></p>\n<p><strong>NIO：同步非阻塞</strong></p>\n<p><strong>用户发起一个 IO 操作请求后，后边可以做其他事情，但是用户进程需要时不时的询问 IO 操作是否就绪，从而引起不必要的 CPU 资源浪费</strong></p>\n<p><strong>AIO：异步非阻塞</strong></p>\n<p><strong>用户发起一个 IO 操作请求后立即返回，等 IO 操作真正完成之后，应用程序会得到 IO 操作完成的通知。</strong></p>\n</blockquote>\n<h3 id=\"实现拷贝文件的工具类使用字符流还是字节流\"><a class=\"anchor\" href=\"#实现拷贝文件的工具类使用字符流还是字节流\">#</a> 实现拷贝文件的工具类使用字符流还是字节流</h3>\n<blockquote>\n<p><strong>我们拷贝的文件不确定是只包含字符流，又可能是字节流（图片、声音、图像等），为保证通用性，要是有字节流</strong></p>\n</blockquote>\n<h2 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h2>\n<h3 id=\"实现线程的方式\"><a class=\"anchor\" href=\"#实现线程的方式\">#</a> 实现线程的方式</h3>\n<blockquote>\n<ol>\n<li><strong>继承 Thread 类</strong></li>\n<li><strong>实现 Runnable 接口</strong></li>\n<li><strong>实现 Callable 接口</strong></li>\n</ol>\n</blockquote>\n<p>继承拓展性不强，Java 总是单继承，如果一个类继承了 Thread 类就不能继承其他类了</p>\n<h3 id=\"线程的启动方式\"><a class=\"anchor\" href=\"#线程的启动方式\">#</a> 线程的启动方式</h3>\n<blockquote>\n<p><strong>启动线程调用 start 方法，而启动以后执行的是 run 方法</strong></p>\n</blockquote>\n<h3 id=\"区分线程\"><a class=\"anchor\" href=\"#区分线程\">#</a> 区分线程</h3>\n<blockquote>\n<p><strong>调用 setName 方法，设置一个线程名称，只是一种规范，在线程创建完成后，都需要设置名称</strong></p>\n</blockquote>\n<h3 id=\"sleep和wait的区别\"><a class=\"anchor\" href=\"#sleep和wait的区别\">#</a> sleep 和 wait 的区别</h3>\n<blockquote>\n<ol>\n<li><strong>sleep 定义在 Thread 类上，不会释放锁，使用在任何地方</strong></li>\n<li><strong>wait 定义在 object 类上，会释放锁，必须在同步方法或同步代码块中执行</strong></li>\n<li><strong>超时或调用 interrupt 方法唤醒 sleep 线程</strong></li>\n<li><strong>notify 随机唤醒一个 wait 线程，notifyall 唤醒所有 wait 线程</strong></li>\n</ol>\n</blockquote>\n<h3 id=\"synchronized和lock的区别\"><a class=\"anchor\" href=\"#synchronized和lock的区别\">#</a> synchronized 和 lock 的区别</h3>\n<blockquote>\n<p><strong>synchronized 时一个关键字，lock 是一个接口</strong></p>\n<p><strong>synchronized 可以给方法和同步代码块加锁，lock 只能给同步代码块加锁</strong></p>\n<p><strong>synchronized 无需手动获取和释放锁，发生异常时会自动解锁，不会出现死锁，lock 需要自己手动加锁和释放锁，如 lock ()、unlock ()，如果忘记使用 unlock ()，则会出现死锁，所以一般在 finally 里面加上 unlock ()</strong></p>\n</blockquote>\n<h3 id=\"synchronized和volatile的区别\"><a class=\"anchor\" href=\"#synchronized和volatile的区别\">#</a> synchronized 和 volatile 的区别</h3>\n<blockquote>\n<ol>\n<li>\n<p><strong>作用位置不同</strong></p>\n<p><strong>synchronized 修饰方法、代码块</strong></p>\n<p><strong>volatile 修饰变量</strong></p>\n</li>\n<li>\n<p><strong>作用不同</strong></p>\n<p><strong>synchronized 可以保证原子性和可见性，可能会造成线程阻塞</strong></p>\n<p><strong>volatile 仅能保证可见性，无法保证原子性，不会造成线程阻塞</strong></p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"什么是死锁如何解决\"><a class=\"anchor\" href=\"#什么是死锁如何解决\">#</a> 什么是死锁，如何解决</h3>\n<p>死锁</p>\n<blockquote>\n<p>线程 1 独占资源 a 并且尝试获取独占资源 b，而线程 2 独占资源 b 并尝试获取独占资源 a，两个线程在等待另一个资源的同时不释放资源，就形成了死锁</p>\n</blockquote>\n<p>形成死锁的四个必要条件</p>\n<blockquote>\n<ol>\n<li>互斥条件：一个资源每次只能被一个进程使用</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li>\n<li>不剥夺资源：进程以获得的资源，在未完成之前，不能强行剥夺</li>\n<li>循环等待条件：若干个进程形成一种头尾相接的循环等待资源关系</li>\n</ol>\n</blockquote>\n<p>预防死锁</p>\n<blockquote>\n<ol>\n<li>\n<p><strong>破坏请求和保存条件</strong></p>\n<p><strong>一次性的申请所有资源，之后不再申请资源，如果不满足资源条件则得不到资源分配。</strong></p>\n<p><strong>只获得初期资源运行，之后将运行完的资源释放，请求新的资源</strong></p>\n</li>\n<li>\n<p><strong>破坏不可抢占条件</strong></p>\n<p><strong>当一个进程获取某种不可抢占资源，提出新的资源申请，若不能满足，则释放所有资源，以后需要，再次重新申请</strong></p>\n</li>\n<li>\n<p><strong>破坏循环等待条件</strong></p>\n<p><strong>对资源进行排号，按照序号递增的顺序请求资源，若进程获得序号高的资源想要获取序号低的资源，就需要先释放序号高的资源</strong></p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"线程并发库\"><a class=\"anchor\" href=\"#线程并发库\">#</a> 线程并发库</h3>\n<p>创建线程池的四种方式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">newFixedThreadPool()</td>\n<td style=\"text-align:center\">创建固定数量的线程池</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">newCachedThreadPool()</td>\n<td style=\"text-align:center\">创建缓存的线程池</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">newSingleThreadExecutor()</td>\n<td style=\"text-align:center\">创建单个线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">newScheduledThreadPool()</td>\n<td style=\"text-align:center\">创建定时器线程池</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"线程池的作用\"><a class=\"anchor\" href=\"#线程池的作用\">#</a> 线程池的作用</h3>\n<blockquote>\n<ol>\n<li><strong>限定线程的个数，提高线程的可管理性</strong></li>\n<li><strong>提高响应速度</strong></li>\n<li><strong>降低资源消耗</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h2>\n<h3 id=\"什么是反射\"><a class=\"anchor\" href=\"#什么是反射\">#</a> 什么是反射</h3>\n<blockquote>\n<p><strong>程序在运行时可以通过类名获取类的所有信息</strong></p>\n</blockquote>\n<h3 id=\"反射的实现方式\"><a class=\"anchor\" href=\"#反射的实现方式\">#</a> 反射的实现方式</h3>\n<blockquote>\n<ol>\n<li><strong>Class.forName()</strong></li>\n<li><strong>类名.class</strong></li>\n<li><strong>对象.getClass ()</strong></li>\n</ol>\n</blockquote>\n<h3 id=\"反射的优缺点\"><a class=\"anchor\" href=\"#反射的优缺点\">#</a> 反射的优缺点</h3>\n<blockquote>\n<p><strong>优点：在运行期间绑定对象，提高了灵活性</strong></p>\n<p><strong>缺点：有性能有影响，他的操作总是慢于直接代码</strong></p>\n</blockquote>\n<h3 id=\"怎么实现动态代理\"><a class=\"anchor\" href=\"#怎么实现动态代理\">#</a> 怎么实现动态代理</h3>\n<p>JDK 动态代理和 Cglib 代理</p>\n<blockquote>\n<p><strong>JDK 代理是基于接口实现的</strong></p>\n<p><strong>Cglib 代理是基于继承实现的</strong></p>\n</blockquote>\n","site":{"data":{}},"length":4647,"excerpt":"","more":"<h2 id=\"java基础\"><a class=\"anchor\" href=\"#java基础\">#</a> Java 基础</h2>\n<h3 id=\"java跨平台原理\"><a class=\"anchor\" href=\"#java跨平台原理\">#</a> Java 跨平台原理</h3>\n<blockquote>\n<p>Java 对于不同系统、不同版本、不同位数的 Java 虚拟机来屏蔽不同的系统指令集差异而对外提供统一的接口</p>\n</blockquote>\n<h3 id=\"jdk-jre-jvm的关系\"><a class=\"anchor\" href=\"#jdk-jre-jvm的关系\">#</a> JDK、JRE、JVM 的关系</h3>\n<blockquote>\n<p><strong>JDK (java development toolkit)：Java 开发工具包</strong></p>\n<p>是 java 的核心，包括了 java 运行环境，一堆 java 工具（javac、java、jdb）和 java 基础类库（javaAPI 包括 rt.jar）</p>\n<p><strong>JRE (java runtime environment)：Java 运行环境</strong></p>\n<p>所有的 java 程序都要在 JRE 下才能运行，包括 JVM 和 Java 核心类库和支持文件，与 JDK 相比不包含开发工具（编译器、调试器和其他工具）</p>\n<p><strong>JVM (java virtual mechinal)：Java 虚拟机</strong></p>\n<p>JVM 是 JRE 的一部分，他是一个虚拟出来的计算机，JVM 的主要工作是解释自己的指令集（即字节码）并映射到本地的 CPU 指令集或 OS 的系统调用</p>\n</blockquote>\n<h3 id=\"面向对象的特征\"><a class=\"anchor\" href=\"#面向对象的特征\">#</a> 面向对象的特征</h3>\n<p>四个：封装、抽象、继承、多态</p>\n<blockquote>\n<p><strong>封装：将客观的事物封装成抽象的类，并且将自己类中的属性私有化，只对外提供 set 和 get 方法来进行属性的赋值和取值</strong></p>\n<p><strong>继承：子类继承父类，子类可以使用父类的所有功能，并且在无需改变父类的情况下能对这些功能进行扩展</strong></p>\n<p><strong>多态：允许相同或不同子类型的对象对同一消息作出不同的响应，如重载和重写</strong></p>\n</blockquote>\n<h3 id=\"访问修饰符publicprivateprotected以及默认时的区别\"><a class=\"anchor\" href=\"#访问修饰符publicprivateprotected以及默认时的区别\">#</a> 访问修饰符 public,private,protected, 以及默认时的区别</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">修饰符</th>\n<th style=\"text-align:center\">当前类</th>\n<th style=\"text-align:center\">同包</th>\n<th style=\"text-align:center\">子类</th>\n<th style=\"text-align:center\">其他包</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">public</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">protect</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">default</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">private</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"基本数据类型包装类型\"><a class=\"anchor\" href=\"#基本数据类型包装类型\">#</a> 基本数据类型，包装类型</h3>\n<p>基本数据类型有八种</p>\n<blockquote>\n<p><strong>byte、short、int、long、char、boolean、float、double</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">占用字节</th>\n<th style=\"text-align:center\">取值范围</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">包装类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">只有 true 和 false</td>\n<td style=\"text-align:center\">true、false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">Boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">1 (8 位）</td>\n<td style=\"text-align:center\">-128~127</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Byte</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">2 (16 位)</td>\n<td style=\"text-align:center\">-32768~32767</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Short</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">4 (32 位)</td>\n<td style=\"text-align:center\">-2<sup>31~2</sup>31-1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Integer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">-2<sup>63~2</sup>63-1</td>\n<td style=\"text-align:center\">0.0l</td>\n<td style=\"text-align:center\">Long</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">3.4E-45~1.4E38</td>\n<td style=\"text-align:center\">0.0f</td>\n<td style=\"text-align:center\">Float</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">4.9E-324~1.8E308</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">Double</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0~65535</td>\n<td style=\"text-align:center\">\\u0000 (空格)</td>\n<td style=\"text-align:center\">Character</td>\n</tr>\n</tbody>\n</table>\n<p>包装类型：每一个基本数据类型都一一对于一个包装类型</p>\n<p>java 是一个面向对象的语言，而基本数据类型不具备面向对象的特征</p>\n<h3 id=\"拆箱和装箱\"><a class=\"anchor\" href=\"#拆箱和装箱\">#</a> 拆箱和装箱</h3>\n<blockquote>\n<p><strong>装箱：把基本数据类型转化为对应的包装类型</strong></p>\n<p><strong>Integer i = 1;</strong></p>\n<p><strong>自动装箱实际上会在编译时会调用 Integer.valueOf () 方法来装箱</strong></p>\n<p><strong>拆箱：把包装类型转换为基本数据类型</strong></p>\n<p><strong>int j = i;</strong></p>\n<p><strong>实际上在编译时会调用 intValue () 方法来拆箱</strong></p>\n</blockquote>\n<h3 id=\"和equals的区别\"><a class=\"anchor\" href=\"#和equals的区别\">#</a> == 和 equals 的区别</h3>\n<blockquote>\n<p><strong>== 用来判断两个变量之间的值是否相等，变量可分为基本数据变量和引用类型，如果比较的是基本数据类型，那么就是比较他们的值是否相等，如果比较的是引用类型，那么比较的是他们引用的内存地址</strong></p>\n<p><strong>equals 不能用于作用与基本数据类型的变量，他继承至 Object 类，比较的是是否是同一对象，如果没有对 equals 方法进行重写，则比较的是引用类型变量所指向对象的地址</strong></p>\n</blockquote>\n<h3 id=\"重写equals为何要重写hashcode\"><a class=\"anchor\" href=\"#重写equals为何要重写hashcode\">#</a> 重写 equals 为何要重写 hashcode</h3>\n<blockquote>\n<ol>\n<li><strong>使用 hashcode 方法提前校验，可以避免每一次对比都调用 equals 方法，提高效率（因为 hashcode 不等，equals 一定不等）</strong></li>\n<li><strong>为了保证是同一对象，如果重写了 equals 方法，而没有重写 hashcode 方法，会出现 equals 相等，hashcode 不相等的情况，重写 hashcode 方法就是为了避免这种情况发生</strong></li>\n</ol>\n</blockquote>\n<h3 id=\"stringstringbuilderstringbuffer的区别\"><a class=\"anchor\" href=\"#stringstringbuilderstringbuffer的区别\">#</a> String，StringBuilder，StringBuffer 的区别</h3>\n<blockquote>\n<p><strong>String 是字符串常量，其值不能改变，底层是使用了一个不可变的数组对象 (final char [])</strong></p>\n<p><strong>StringBulider 是线程不安全的，其值可以改变，速度快，底层是使用了一个可变的数组对象（没有用 final 修饰）</strong></p>\n<p><strong>StringBuffer 是线程安全的，其值可以改变，速度慢。</strong></p>\n</blockquote>\n<h3 id=\"拼接字符串\"><a class=\"anchor\" href=\"#拼接字符串\">#</a> 拼接字符串</h3>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>开辟了三个内存空间</strong></p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>只开辟了一个内存空间</strong></p>\n<p><strong>拼接字符串不能使用 String，要是有 StringBuilder 或 StringBuffer</strong></p>\n</blockquote>\n<h2 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h2>\n<h3 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h3>\n<p>可分为 HashMap 和 TreeMap</p>\n<blockquote>\n<p>HashMap：hash 表无序，不能放重复键，允许放空键空值</p>\n<p>TreeMap：数据结构是树，有序</p>\n</blockquote>\n<h3 id=\"collection\"><a class=\"anchor\" href=\"#collection\">#</a> Collection</h3>\n<p>分为 List 和 Set</p>\n<blockquote>\n<p>List：有序的，可以重复的</p>\n<p>Set：无序的，不可重复的，需要重写 equals 和 hashcode 方法</p>\n</blockquote>\n<p>List 接口：ArrayList、LinkedList</p>\n<p>Set 接口：HashSet、TreeSet</p>\n<blockquote>\n<p>HashSet：底层数据结构是哈希链表，保证元素的唯一，不保证元素顺序不变，需要使用 equals 方法和 hashcode 方法</p>\n<p>TreeSet：底层数据结构是二叉树，保证元素唯一，并对元素按自然排序进行排序，可以实现 Compareable 接口重写 compareTo () 实现自定义排序</p>\n</blockquote>\n<h3 id=\"arraylist-linkedlist和vector的区别\"><a class=\"anchor\" href=\"#arraylist-linkedlist和vector的区别\">#</a> ArrayList、LinkedList 和 vector 的区别</h3>\n<p>ArrayLsit 和 LinkedList 都是实现了 List 接口</p>\n<p>ArrayList 是基于动态数组的数据结构，LinkedList 是基于链表的</p>\n<blockquote>\n<p><strong>ArrayList：查询快，增加删除慢，由于数组在内存中是一块连续的内存，查询根据索引就能找到，所以快，而添加和删除需要移动内存，所以慢。</strong></p>\n<p><strong>LinkedList：增加删除快，查询慢，由于链表在内存中不是连续的，查找时，需要从头部开始，挨着找，所以查询慢，而添加删除时，只需要改变引用指向即可，所以增加删除快</strong></p>\n<p><strong>ArrayList：默认容量 10，每次扩容时为之前的 1.5 倍，是线程不安全的，效率高</strong></p>\n<p><strong>vector：默认容量 10，每次扩容是为之前的 2 倍，是线程安全的，效率低</strong></p>\n</blockquote>\n<h3 id=\"hashmap和hashtable的区别\"><a class=\"anchor\" href=\"#hashmap和hashtable的区别\">#</a> HashMap 和 HashTable 的区别</h3>\n<p>相同点</p>\n<blockquote>\n<p><strong>HashMap 和 HashTable 都是通过键值对来存储值的</strong></p>\n</blockquote>\n<p>不同点</p>\n<blockquote>\n<p><strong>HashMap：可以把 null 作为键或值，是线程安全的，效率较高，默认容量 16，每次扩容时为原来的两倍</strong></p>\n<p><strong>HashTable：不能把 null 作为键或值，是线程不安全的，效率较低，默认容量为 11，每次 扩容为原来的两倍加一</strong></p>\n</blockquote>\n<p>创建时，如果给定容量初始值，那么 HashTable 就是给定的初始值，而 HashMap 会自动扩充为 2 的幂次方大小</p>\n<h3 id=\"hashmap与concurrenthashmap的区别\"><a class=\"anchor\" href=\"#hashmap与concurrenthashmap的区别\">#</a> HashMap 与 concurrentHashMap 的区别</h3>\n<blockquote>\n<p><strong>concurrentHashMap 对整个 Map 进行了分段分割，分为了 N 个 Segment，默认提升 16 倍，相对于 HashTable 的 synchronized 锁粒度更精细了一些，并发性能更好，而 HashMap 没有锁机制，不是线程安全的，JDk1.8 之后 concurrentHashMap 摒弃了 Segment 的数据结构，直接采用数组 + 链表 + 红黑树的数据结构实现，并发控制使用 synchronized 和 CAS (compare and swap) 来操作</strong></p>\n</blockquote>\n<h2 id=\"io\"><a class=\"anchor\" href=\"#io\">#</a> IO</h2>\n<h3 id=\"bio-nio-aio的区别\"><a class=\"anchor\" href=\"#bio-nio-aio的区别\">#</a> BIO、NIO、AIO 的区别</h3>\n<blockquote>\n<p><strong>BIO：同步阻塞</strong></p>\n<p><strong>用户发起一个 IO 操作请求后，必须等待 IO 操作的完成，只有当真正完成了 IO 操作之后，用户进程才能运行</strong></p>\n<p><strong>NIO：同步非阻塞</strong></p>\n<p><strong>用户发起一个 IO 操作请求后，后边可以做其他事情，但是用户进程需要时不时的询问 IO 操作是否就绪，从而引起不必要的 CPU 资源浪费</strong></p>\n<p><strong>AIO：异步非阻塞</strong></p>\n<p><strong>用户发起一个 IO 操作请求后立即返回，等 IO 操作真正完成之后，应用程序会得到 IO 操作完成的通知。</strong></p>\n</blockquote>\n<h3 id=\"实现拷贝文件的工具类使用字符流还是字节流\"><a class=\"anchor\" href=\"#实现拷贝文件的工具类使用字符流还是字节流\">#</a> 实现拷贝文件的工具类使用字符流还是字节流</h3>\n<blockquote>\n<p><strong>我们拷贝的文件不确定是只包含字符流，又可能是字节流（图片、声音、图像等），为保证通用性，要是有字节流</strong></p>\n</blockquote>\n<h2 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h2>\n<h3 id=\"实现线程的方式\"><a class=\"anchor\" href=\"#实现线程的方式\">#</a> 实现线程的方式</h3>\n<blockquote>\n<ol>\n<li><strong>继承 Thread 类</strong></li>\n<li><strong>实现 Runnable 接口</strong></li>\n<li><strong>实现 Callable 接口</strong></li>\n</ol>\n</blockquote>\n<p>继承拓展性不强，Java 总是单继承，如果一个类继承了 Thread 类就不能继承其他类了</p>\n<h3 id=\"线程的启动方式\"><a class=\"anchor\" href=\"#线程的启动方式\">#</a> 线程的启动方式</h3>\n<blockquote>\n<p><strong>启动线程调用 start 方法，而启动以后执行的是 run 方法</strong></p>\n</blockquote>\n<h3 id=\"区分线程\"><a class=\"anchor\" href=\"#区分线程\">#</a> 区分线程</h3>\n<blockquote>\n<p><strong>调用 setName 方法，设置一个线程名称，只是一种规范，在线程创建完成后，都需要设置名称</strong></p>\n</blockquote>\n<h3 id=\"sleep和wait的区别\"><a class=\"anchor\" href=\"#sleep和wait的区别\">#</a> sleep 和 wait 的区别</h3>\n<blockquote>\n<ol>\n<li><strong>sleep 定义在 Thread 类上，不会释放锁，使用在任何地方</strong></li>\n<li><strong>wait 定义在 object 类上，会释放锁，必须在同步方法或同步代码块中执行</strong></li>\n<li><strong>超时或调用 interrupt 方法唤醒 sleep 线程</strong></li>\n<li><strong>notify 随机唤醒一个 wait 线程，notifyall 唤醒所有 wait 线程</strong></li>\n</ol>\n</blockquote>\n<h3 id=\"synchronized和lock的区别\"><a class=\"anchor\" href=\"#synchronized和lock的区别\">#</a> synchronized 和 lock 的区别</h3>\n<blockquote>\n<p><strong>synchronized 时一个关键字，lock 是一个接口</strong></p>\n<p><strong>synchronized 可以给方法和同步代码块加锁，lock 只能给同步代码块加锁</strong></p>\n<p><strong>synchronized 无需手动获取和释放锁，发生异常时会自动解锁，不会出现死锁，lock 需要自己手动加锁和释放锁，如 lock ()、unlock ()，如果忘记使用 unlock ()，则会出现死锁，所以一般在 finally 里面加上 unlock ()</strong></p>\n</blockquote>\n<h3 id=\"synchronized和volatile的区别\"><a class=\"anchor\" href=\"#synchronized和volatile的区别\">#</a> synchronized 和 volatile 的区别</h3>\n<blockquote>\n<ol>\n<li>\n<p><strong>作用位置不同</strong></p>\n<p><strong>synchronized 修饰方法、代码块</strong></p>\n<p><strong>volatile 修饰变量</strong></p>\n</li>\n<li>\n<p><strong>作用不同</strong></p>\n<p><strong>synchronized 可以保证原子性和可见性，可能会造成线程阻塞</strong></p>\n<p><strong>volatile 仅能保证可见性，无法保证原子性，不会造成线程阻塞</strong></p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"什么是死锁如何解决\"><a class=\"anchor\" href=\"#什么是死锁如何解决\">#</a> 什么是死锁，如何解决</h3>\n<p>死锁</p>\n<blockquote>\n<p>线程 1 独占资源 a 并且尝试获取独占资源 b，而线程 2 独占资源 b 并尝试获取独占资源 a，两个线程在等待另一个资源的同时不释放资源，就形成了死锁</p>\n</blockquote>\n<p>形成死锁的四个必要条件</p>\n<blockquote>\n<ol>\n<li>互斥条件：一个资源每次只能被一个进程使用</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li>\n<li>不剥夺资源：进程以获得的资源，在未完成之前，不能强行剥夺</li>\n<li>循环等待条件：若干个进程形成一种头尾相接的循环等待资源关系</li>\n</ol>\n</blockquote>\n<p>预防死锁</p>\n<blockquote>\n<ol>\n<li>\n<p><strong>破坏请求和保存条件</strong></p>\n<p><strong>一次性的申请所有资源，之后不再申请资源，如果不满足资源条件则得不到资源分配。</strong></p>\n<p><strong>只获得初期资源运行，之后将运行完的资源释放，请求新的资源</strong></p>\n</li>\n<li>\n<p><strong>破坏不可抢占条件</strong></p>\n<p><strong>当一个进程获取某种不可抢占资源，提出新的资源申请，若不能满足，则释放所有资源，以后需要，再次重新申请</strong></p>\n</li>\n<li>\n<p><strong>破坏循环等待条件</strong></p>\n<p><strong>对资源进行排号，按照序号递增的顺序请求资源，若进程获得序号高的资源想要获取序号低的资源，就需要先释放序号高的资源</strong></p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"线程并发库\"><a class=\"anchor\" href=\"#线程并发库\">#</a> 线程并发库</h3>\n<p>创建线程池的四种方式</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法名</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">newFixedThreadPool()</td>\n<td style=\"text-align:center\">创建固定数量的线程池</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">newCachedThreadPool()</td>\n<td style=\"text-align:center\">创建缓存的线程池</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">newSingleThreadExecutor()</td>\n<td style=\"text-align:center\">创建单个线程</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">newScheduledThreadPool()</td>\n<td style=\"text-align:center\">创建定时器线程池</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"线程池的作用\"><a class=\"anchor\" href=\"#线程池的作用\">#</a> 线程池的作用</h3>\n<blockquote>\n<ol>\n<li><strong>限定线程的个数，提高线程的可管理性</strong></li>\n<li><strong>提高响应速度</strong></li>\n<li><strong>降低资源消耗</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"反射\"><a class=\"anchor\" href=\"#反射\">#</a> 反射</h2>\n<h3 id=\"什么是反射\"><a class=\"anchor\" href=\"#什么是反射\">#</a> 什么是反射</h3>\n<blockquote>\n<p><strong>程序在运行时可以通过类名获取类的所有信息</strong></p>\n</blockquote>\n<h3 id=\"反射的实现方式\"><a class=\"anchor\" href=\"#反射的实现方式\">#</a> 反射的实现方式</h3>\n<blockquote>\n<ol>\n<li><strong>Class.forName()</strong></li>\n<li><strong>类名.class</strong></li>\n<li><strong>对象.getClass ()</strong></li>\n</ol>\n</blockquote>\n<h3 id=\"反射的优缺点\"><a class=\"anchor\" href=\"#反射的优缺点\">#</a> 反射的优缺点</h3>\n<blockquote>\n<p><strong>优点：在运行期间绑定对象，提高了灵活性</strong></p>\n<p><strong>缺点：有性能有影响，他的操作总是慢于直接代码</strong></p>\n</blockquote>\n<h3 id=\"怎么实现动态代理\"><a class=\"anchor\" href=\"#怎么实现动态代理\">#</a> 怎么实现动态代理</h3>\n<p>JDK 动态代理和 Cglib 代理</p>\n<blockquote>\n<p><strong>JDK 代理是基于接口实现的</strong></p>\n<p><strong>Cglib 代理是基于继承实现的</strong></p>\n</blockquote>\n"},{"title":"Mybatis面试题","date":"2020-12-17T04:01:00.000Z","_content":"\n\n\n### 什么是Mybatis\n\n> Mybatis是一款优秀的持久层框架，一个半ORM（对象关系映射）框架，它支持定制SQL、存储过程以及高级映射\n>\n> Mybatis可以使用简单的XML或注解来配置和映射原生类型、接口和Java的POJO为数据库中的记录\n\n### #{}和${}的区别\n\n> #{}是占位符，预编译处理；${}是拼接符，字符串替换；\n>\n> 处理#{}时，#{}传入参数是以字符串传入，会将#{}替换为?，调用PrepareStatement的set方法进行赋值\n>\n> 变量替换后#{}对应的变量自动加上单引号''，${}对应的变量不会加上单引号''；\n>\n> #{}可以有效的防止SQL注入，提高系统安全\n\n### 一级缓存和二级缓存\n\n> 一级缓存：是Session缓存，是基于HashMap存储的，作用域为SqlSession范围的，默认是打开一级缓存\n>\n> 二级缓存：是namespace缓存，是基于HashMap存储的，作用域为Mapper的，默认不开启","source":"_posts/computer/questions/course-1/mybatis.md","raw":"---\ntitle: Mybatis面试题\ndate: 2020/12/17 12:01\ncategories:\n\t- [计算机, 面试, 面试题]\ntags:\n\t- 面试题\n---\n\n\n\n### 什么是Mybatis\n\n> Mybatis是一款优秀的持久层框架，一个半ORM（对象关系映射）框架，它支持定制SQL、存储过程以及高级映射\n>\n> Mybatis可以使用简单的XML或注解来配置和映射原生类型、接口和Java的POJO为数据库中的记录\n\n### #{}和${}的区别\n\n> #{}是占位符，预编译处理；${}是拼接符，字符串替换；\n>\n> 处理#{}时，#{}传入参数是以字符串传入，会将#{}替换为?，调用PrepareStatement的set方法进行赋值\n>\n> 变量替换后#{}对应的变量自动加上单引号''，${}对应的变量不会加上单引号''；\n>\n> #{}可以有效的防止SQL注入，提高系统安全\n\n### 一级缓存和二级缓存\n\n> 一级缓存：是Session缓存，是基于HashMap存储的，作用域为SqlSession范围的，默认是打开一级缓存\n>\n> 二级缓存：是namespace缓存，是基于HashMap存储的，作用域为Mapper的，默认不开启","slug":"computer/questions/course-1/mybatis","published":1,"updated":"2020-12-17T04:15:52.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg7i000vb0ut5xfpbuan","content":"<h3 id=\"什么是mybatis\"><a class=\"anchor\" href=\"#什么是mybatis\">#</a> 什么是 Mybatis</h3>\n<blockquote>\n<p>Mybatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制 SQL、存储过程以及高级映射</p>\n<p>Mybatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO 为数据库中的记录</p>\n</blockquote>\n<h3 id=\"和的区别\"><a class=\"anchor\" href=\"#和的区别\">#</a> #{} 和 ${} 的区别</h3>\n<blockquote>\n<p>#{} 是占位符，预编译处理；${} 是拼接符，字符串替换；</p>\n<p>处理 #{} 时，#{} 传入参数是以字符串传入，会将 #{} 替换为？，调用 PrepareStatement 的 set 方法进行赋值</p>\n<p>变量替换后 #{} 对应的变量自动加上单引号 ''，${} 对应的变量不会加上单引号 ''；</p>\n<p>#{} 可以有效的防止 SQL 注入，提高系统安全</p>\n</blockquote>\n<h3 id=\"一级缓存和二级缓存\"><a class=\"anchor\" href=\"#一级缓存和二级缓存\">#</a> 一级缓存和二级缓存</h3>\n<blockquote>\n<p>一级缓存：是 Session 缓存，是基于 HashMap 存储的，作用域为 SqlSession 范围的，默认是打开一级缓存</p>\n<p>二级缓存：是 namespace 缓存，是基于 HashMap 存储的，作用域为 Mapper 的，默认不开启</p>\n</blockquote>\n","site":{"data":{}},"length":395,"excerpt":"","more":"<h3 id=\"什么是mybatis\"><a class=\"anchor\" href=\"#什么是mybatis\">#</a> 什么是 Mybatis</h3>\n<blockquote>\n<p>Mybatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制 SQL、存储过程以及高级映射</p>\n<p>Mybatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO 为数据库中的记录</p>\n</blockquote>\n<h3 id=\"和的区别\"><a class=\"anchor\" href=\"#和的区别\">#</a> #{} 和 ${} 的区别</h3>\n<blockquote>\n<p>#{} 是占位符，预编译处理；${} 是拼接符，字符串替换；</p>\n<p>处理 #{} 时，#{} 传入参数是以字符串传入，会将 #{} 替换为？，调用 PrepareStatement 的 set 方法进行赋值</p>\n<p>变量替换后 #{} 对应的变量自动加上单引号 ''，${} 对应的变量不会加上单引号 ''；</p>\n<p>#{} 可以有效的防止 SQL 注入，提高系统安全</p>\n</blockquote>\n<h3 id=\"一级缓存和二级缓存\"><a class=\"anchor\" href=\"#一级缓存和二级缓存\">#</a> 一级缓存和二级缓存</h3>\n<blockquote>\n<p>一级缓存：是 Session 缓存，是基于 HashMap 存储的，作用域为 SqlSession 范围的，默认是打开一级缓存</p>\n<p>二级缓存：是 namespace 缓存，是基于 HashMap 存储的，作用域为 Mapper 的，默认不开启</p>\n</blockquote>\n"},{"title":"数据库面试题","date":"2020-12-17T04:04:00.000Z","_content":"\n\n\n## 数据库的分类\n\n> **非关系数据库：mysql、oracle、sqlserver等**\n>\n> **关系型数据库：redis、memcache、mongodb、hahdoop等**\n>\n> **redis：键值对数据库**\n>\n> **mongodb：文档数据库**\n\n## 数据库三范式\n\n范式就是规范，就是在关系型数据库设计表时要遵循的规范\n\n要想满足第二范式就必须满足第一范式，要想满足第三范式就必须满足第二范式\n\n>**第一范式：要求属性具有原子性，不可再分解**\n>\n>**第二范式：每一行必须被唯一标识（主键）**\n>\n>**第三范式：任何字段不能由其他字段派生出来，要求字段没有冗余（外键）**\n\n## 事务四个基本特性\n\n事务是并发控制的单位，是用户定义的一个操作序列，这些操作要么都做要么都不做，是一个不可分割的工作单位\n\n> 1. **原子性（A）**\n>\n>    **一个事务要么完整执行，要么就不执行**\n>\n> 2. **一致性（C）**\n>\n>    **底层数据存储的完整性**\n>\n> 3. **隔离性（I）**\n>\n>    **事务必须在不干扰其他进程或事务的前提下独立完成**\n>\n> 4. **持久性（D）**\n>\n>    **某个事务的执行过程中，对数据所做的所有改动都必须再事务成功结束前保存至某种物理存储设备**\n\n## 事务的隔离级别\n\n> **脏读：A查询B修改后问提交的数据，当B回滚时，A查询的数据是无效的**\n>\n> **不可重复读：A在第一次查询用户甲的信息，B将用户甲的信息修改并提交；A再次读取用户甲的信息，A两次获取的信息不同则称为“不可重复读”**\n>\n> **幻读：A查询用户数量时，当B新增或删除用户时，A再次获取用户数量时，两次数量不一致，则称为“幻读”**\n>\n> **注意：“不可重复读”与“幻读”的区别在于，不可重复读强调的是数据信息的改变，幻读强调的是数量上的改变**\n>\n> |          隔离级别          | 脏读 | 不可重复读 | 幻读 |\n> | :------------------------: | :--: | :--------: | :--: |\n> | 读未提交(Read Uncommitted) |  ×   |     ×      |  ×   |\n> |  读已提交(Read Committed)  |  √   |     ×      |  ×   |\n> |  可重复读(Repeated Read)   |  √   |     √      |  ×   |\n> |    串行化(Serializable)    |  √   |     √      |  √   |\n>\n> **以上四种隔离级别，串行化的级别最高，读未提交的级别最低，级别越高，效率越低**\n>\n> **MySQL支持以上四种隔离级别，默认的隔离级别是可重复度**\n>\n> **Oracle数据库只支持串行化和读已提交 ，默认是读已提交；**\n\n## Mysql最大的默认连接数\n\n> **100**\n\n为什么需要最大连接数？\n\n>**特定服务器上面数据库最多只能支持一定数目同时连接**\n\n## Mysql分页？Oracle分页\n\n为什么需要分页？\n\n> **当有很多数据，一个页面不可能显示为所有数据，需要进行分段显示**\n\nmysql使用了limit关键字来限制查询条数\n\noracle使用了rownum三层嵌套循环\n\n## 对JDBC的理解\n\n> **他就是Java与数据库建立连接的桥梁或插件，用Java代码就能操作数据库的增删查改、存储过程、事务等**\n\n## 写一个简单的JDBC程序\n\n### 操作步骤\n\n> 1. **加载驱动(com.mysql.jdbc.Driver)**\n> 2. **获取参数(DriverManager.getConnection(url,username,password))**\n> 3. **设置参数(Statement PrepareStatement)**\n> 4. **执行(execute)**\n\n### 例子\n\n```java\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\nString url = \"jdbc:mysql://localhost:3306/user?serverTimezone=GMT\";\nString username = \"root\";\nString password = \"123456\";\nConnection connection = DriverManager.getConnection(url,username,password);\nString sql = \"select * from user\";\nPreparedStatement preparedStatement = connection.prepareStatement(sql);\nResultSet resultSet = preparedStatement.executeQuery();\nwhile (resultSet.next()){\n    System.out.println(resultSet.getObject(1)+\" \"+resultSet.getObject(2));\n}\nconnection.close();\npreparedStatement.close();\nresultSet.close();\n```\n\n## PreparedStatement相比于statement的好处\n\n> 1. **PreparedStatement是预编译的，比statement快**\n> 2. **代码的可读性和可维护性高**\n> 3. **可以防SQL注入**\n\n## 数据库连接池的作用\n\n> 1. **限定数据库的连接个数，进行统一的连接管理**\n> 2. **节约资源**\n> 3. **加快响应速度**\n\n## 数据库优化","source":"_posts/computer/questions/course-1/mysql.md","raw":"---\ntitle: 数据库面试题\ndate: 2020/12/17 12:04\ncategories:\n\t- [计算机, 面试, 面试题]\ntags:\n\t- 面试题\n---\n\n\n\n## 数据库的分类\n\n> **非关系数据库：mysql、oracle、sqlserver等**\n>\n> **关系型数据库：redis、memcache、mongodb、hahdoop等**\n>\n> **redis：键值对数据库**\n>\n> **mongodb：文档数据库**\n\n## 数据库三范式\n\n范式就是规范，就是在关系型数据库设计表时要遵循的规范\n\n要想满足第二范式就必须满足第一范式，要想满足第三范式就必须满足第二范式\n\n>**第一范式：要求属性具有原子性，不可再分解**\n>\n>**第二范式：每一行必须被唯一标识（主键）**\n>\n>**第三范式：任何字段不能由其他字段派生出来，要求字段没有冗余（外键）**\n\n## 事务四个基本特性\n\n事务是并发控制的单位，是用户定义的一个操作序列，这些操作要么都做要么都不做，是一个不可分割的工作单位\n\n> 1. **原子性（A）**\n>\n>    **一个事务要么完整执行，要么就不执行**\n>\n> 2. **一致性（C）**\n>\n>    **底层数据存储的完整性**\n>\n> 3. **隔离性（I）**\n>\n>    **事务必须在不干扰其他进程或事务的前提下独立完成**\n>\n> 4. **持久性（D）**\n>\n>    **某个事务的执行过程中，对数据所做的所有改动都必须再事务成功结束前保存至某种物理存储设备**\n\n## 事务的隔离级别\n\n> **脏读：A查询B修改后问提交的数据，当B回滚时，A查询的数据是无效的**\n>\n> **不可重复读：A在第一次查询用户甲的信息，B将用户甲的信息修改并提交；A再次读取用户甲的信息，A两次获取的信息不同则称为“不可重复读”**\n>\n> **幻读：A查询用户数量时，当B新增或删除用户时，A再次获取用户数量时，两次数量不一致，则称为“幻读”**\n>\n> **注意：“不可重复读”与“幻读”的区别在于，不可重复读强调的是数据信息的改变，幻读强调的是数量上的改变**\n>\n> |          隔离级别          | 脏读 | 不可重复读 | 幻读 |\n> | :------------------------: | :--: | :--------: | :--: |\n> | 读未提交(Read Uncommitted) |  ×   |     ×      |  ×   |\n> |  读已提交(Read Committed)  |  √   |     ×      |  ×   |\n> |  可重复读(Repeated Read)   |  √   |     √      |  ×   |\n> |    串行化(Serializable)    |  √   |     √      |  √   |\n>\n> **以上四种隔离级别，串行化的级别最高，读未提交的级别最低，级别越高，效率越低**\n>\n> **MySQL支持以上四种隔离级别，默认的隔离级别是可重复度**\n>\n> **Oracle数据库只支持串行化和读已提交 ，默认是读已提交；**\n\n## Mysql最大的默认连接数\n\n> **100**\n\n为什么需要最大连接数？\n\n>**特定服务器上面数据库最多只能支持一定数目同时连接**\n\n## Mysql分页？Oracle分页\n\n为什么需要分页？\n\n> **当有很多数据，一个页面不可能显示为所有数据，需要进行分段显示**\n\nmysql使用了limit关键字来限制查询条数\n\noracle使用了rownum三层嵌套循环\n\n## 对JDBC的理解\n\n> **他就是Java与数据库建立连接的桥梁或插件，用Java代码就能操作数据库的增删查改、存储过程、事务等**\n\n## 写一个简单的JDBC程序\n\n### 操作步骤\n\n> 1. **加载驱动(com.mysql.jdbc.Driver)**\n> 2. **获取参数(DriverManager.getConnection(url,username,password))**\n> 3. **设置参数(Statement PrepareStatement)**\n> 4. **执行(execute)**\n\n### 例子\n\n```java\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\nString url = \"jdbc:mysql://localhost:3306/user?serverTimezone=GMT\";\nString username = \"root\";\nString password = \"123456\";\nConnection connection = DriverManager.getConnection(url,username,password);\nString sql = \"select * from user\";\nPreparedStatement preparedStatement = connection.prepareStatement(sql);\nResultSet resultSet = preparedStatement.executeQuery();\nwhile (resultSet.next()){\n    System.out.println(resultSet.getObject(1)+\" \"+resultSet.getObject(2));\n}\nconnection.close();\npreparedStatement.close();\nresultSet.close();\n```\n\n## PreparedStatement相比于statement的好处\n\n> 1. **PreparedStatement是预编译的，比statement快**\n> 2. **代码的可读性和可维护性高**\n> 3. **可以防SQL注入**\n\n## 数据库连接池的作用\n\n> 1. **限定数据库的连接个数，进行统一的连接管理**\n> 2. **节约资源**\n> 3. **加快响应速度**\n\n## 数据库优化","slug":"computer/questions/course-1/mysql","published":1,"updated":"2020-12-17T04:16:51.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg7j000xb0uthsxh35m6","content":"<h2 id=\"数据库的分类\"><a class=\"anchor\" href=\"#数据库的分类\">#</a> 数据库的分类</h2>\n<blockquote>\n<p><strong>非关系数据库：mysql、oracle、sqlserver 等</strong></p>\n<p><strong>关系型数据库：redis、memcache、mongodb、hahdoop 等</strong></p>\n<p><strong>redis：键值对数据库</strong></p>\n<p><strong>mongodb：文档数据库</strong></p>\n</blockquote>\n<h2 id=\"数据库三范式\"><a class=\"anchor\" href=\"#数据库三范式\">#</a> 数据库三范式</h2>\n<p>范式就是规范，就是在关系型数据库设计表时要遵循的规范</p>\n<p>要想满足第二范式就必须满足第一范式，要想满足第三范式就必须满足第二范式</p>\n<blockquote>\n<p><strong>第一范式：要求属性具有原子性，不可再分解</strong></p>\n<p><strong>第二范式：每一行必须被唯一标识（主键）</strong></p>\n<p><strong>第三范式：任何字段不能由其他字段派生出来，要求字段没有冗余（外键）</strong></p>\n</blockquote>\n<h2 id=\"事务四个基本特性\"><a class=\"anchor\" href=\"#事务四个基本特性\">#</a> 事务四个基本特性</h2>\n<p>事务是并发控制的单位，是用户定义的一个操作序列，这些操作要么都做要么都不做，是一个不可分割的工作单位</p>\n<blockquote>\n<ol>\n<li>\n<p><strong>原子性（A）</strong></p>\n<p><strong>一个事务要么完整执行，要么就不执行</strong></p>\n</li>\n<li>\n<p><strong>一致性（C）</strong></p>\n<p><strong>底层数据存储的完整性</strong></p>\n</li>\n<li>\n<p><strong>隔离性（I）</strong></p>\n<p><strong>事务必须在不干扰其他进程或事务的前提下独立完成</strong></p>\n</li>\n<li>\n<p><strong>持久性（D）</strong></p>\n<p><strong>某个事务的执行过程中，对数据所做的所有改动都必须再事务成功结束前保存至某种物理存储设备</strong></p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"事务的隔离级别\"><a class=\"anchor\" href=\"#事务的隔离级别\">#</a> 事务的隔离级别</h2>\n<blockquote>\n<p><strong>脏读：A 查询 B 修改后问提交的数据，当 B 回滚时，A 查询的数据是无效的</strong></p>\n<p><strong>不可重复读：A 在第一次查询用户甲的信息，B 将用户甲的信息修改并提交；A 再次读取用户甲的信息，A 两次获取的信息不同则称为 “不可重复读”</strong></p>\n<p><strong>幻读：A 查询用户数量时，当 B 新增或删除用户时，A 再次获取用户数量时，两次数量不一致，则称为 “幻读”</strong></p>\n<p><strong>注意：“不可重复读” 与 “幻读” 的区别在于，不可重复读强调的是数据信息的改变，幻读强调的是数量上的改变</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">隔离级别</th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th style=\"text-align:center\">幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">读未提交 (Read Uncommitted)</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">读已提交 (Read Committed)</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可重复读 (Repeated Read)</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">串行化 (Serializable)</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<p><strong>以上四种隔离级别，串行化的级别最高，读未提交的级别最低，级别越高，效率越低</strong></p>\n<p><strong>MySQL 支持以上四种隔离级别，默认的隔离级别是可重复度</strong></p>\n<p><strong>Oracle 数据库只支持串行化和读已提交 ，默认是读已提交；</strong></p>\n</blockquote>\n<h2 id=\"mysql最大的默认连接数\"><a class=\"anchor\" href=\"#mysql最大的默认连接数\">#</a> Mysql 最大的默认连接数</h2>\n<blockquote>\n<p><strong>100</strong></p>\n</blockquote>\n<p>为什么需要最大连接数？</p>\n<blockquote>\n<p><strong>特定服务器上面数据库最多只能支持一定数目同时连接</strong></p>\n</blockquote>\n<h2 id=\"mysql分页oracle分页\"><a class=\"anchor\" href=\"#mysql分页oracle分页\">#</a> Mysql 分页？Oracle 分页</h2>\n<p>为什么需要分页？</p>\n<blockquote>\n<p><strong>当有很多数据，一个页面不可能显示为所有数据，需要进行分段显示</strong></p>\n</blockquote>\n<p>mysql 使用了 limit 关键字来限制查询条数</p>\n<p>oracle 使用了 rownum 三层嵌套循环</p>\n<h2 id=\"对jdbc的理解\"><a class=\"anchor\" href=\"#对jdbc的理解\">#</a> 对 JDBC 的理解</h2>\n<blockquote>\n<p><strong>他就是 Java 与数据库建立连接的桥梁或插件，用 Java 代码就能操作数据库的增删查改、存储过程、事务等</strong></p>\n</blockquote>\n<h2 id=\"写一个简单的jdbc程序\"><a class=\"anchor\" href=\"#写一个简单的jdbc程序\">#</a> 写一个简单的 JDBC 程序</h2>\n<h3 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h3>\n<blockquote>\n<ol>\n<li><strong>加载驱动 (com.mysql.jdbc.Driver)</strong></li>\n<li><strong>获取参数 (DriverManager.getConnection (url,username,password))</strong></li>\n<li><strong>设置参数 (Statement PrepareStatement)</strong></li>\n<li><strong>执行 (execute)</strong></li>\n</ol>\n</blockquote>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/user?serverTimezone=GMT\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"preparedstatement相比于statement的好处\"><a class=\"anchor\" href=\"#preparedstatement相比于statement的好处\">#</a> PreparedStatement 相比于 statement 的好处</h2>\n<blockquote>\n<ol>\n<li><strong>PreparedStatement 是预编译的，比 statement 快</strong></li>\n<li><strong>代码的可读性和可维护性高</strong></li>\n<li><strong>可以防 SQL 注入</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"数据库连接池的作用\"><a class=\"anchor\" href=\"#数据库连接池的作用\">#</a> 数据库连接池的作用</h2>\n<blockquote>\n<ol>\n<li><strong>限定数据库的连接个数，进行统一的连接管理</strong></li>\n<li><strong>节约资源</strong></li>\n<li><strong>加快响应速度</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"数据库优化\"><a class=\"anchor\" href=\"#数据库优化\">#</a> 数据库优化</h2>\n","site":{"data":{}},"length":1844,"excerpt":"","more":"<h2 id=\"数据库的分类\"><a class=\"anchor\" href=\"#数据库的分类\">#</a> 数据库的分类</h2>\n<blockquote>\n<p><strong>非关系数据库：mysql、oracle、sqlserver 等</strong></p>\n<p><strong>关系型数据库：redis、memcache、mongodb、hahdoop 等</strong></p>\n<p><strong>redis：键值对数据库</strong></p>\n<p><strong>mongodb：文档数据库</strong></p>\n</blockquote>\n<h2 id=\"数据库三范式\"><a class=\"anchor\" href=\"#数据库三范式\">#</a> 数据库三范式</h2>\n<p>范式就是规范，就是在关系型数据库设计表时要遵循的规范</p>\n<p>要想满足第二范式就必须满足第一范式，要想满足第三范式就必须满足第二范式</p>\n<blockquote>\n<p><strong>第一范式：要求属性具有原子性，不可再分解</strong></p>\n<p><strong>第二范式：每一行必须被唯一标识（主键）</strong></p>\n<p><strong>第三范式：任何字段不能由其他字段派生出来，要求字段没有冗余（外键）</strong></p>\n</blockquote>\n<h2 id=\"事务四个基本特性\"><a class=\"anchor\" href=\"#事务四个基本特性\">#</a> 事务四个基本特性</h2>\n<p>事务是并发控制的单位，是用户定义的一个操作序列，这些操作要么都做要么都不做，是一个不可分割的工作单位</p>\n<blockquote>\n<ol>\n<li>\n<p><strong>原子性（A）</strong></p>\n<p><strong>一个事务要么完整执行，要么就不执行</strong></p>\n</li>\n<li>\n<p><strong>一致性（C）</strong></p>\n<p><strong>底层数据存储的完整性</strong></p>\n</li>\n<li>\n<p><strong>隔离性（I）</strong></p>\n<p><strong>事务必须在不干扰其他进程或事务的前提下独立完成</strong></p>\n</li>\n<li>\n<p><strong>持久性（D）</strong></p>\n<p><strong>某个事务的执行过程中，对数据所做的所有改动都必须再事务成功结束前保存至某种物理存储设备</strong></p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"事务的隔离级别\"><a class=\"anchor\" href=\"#事务的隔离级别\">#</a> 事务的隔离级别</h2>\n<blockquote>\n<p><strong>脏读：A 查询 B 修改后问提交的数据，当 B 回滚时，A 查询的数据是无效的</strong></p>\n<p><strong>不可重复读：A 在第一次查询用户甲的信息，B 将用户甲的信息修改并提交；A 再次读取用户甲的信息，A 两次获取的信息不同则称为 “不可重复读”</strong></p>\n<p><strong>幻读：A 查询用户数量时，当 B 新增或删除用户时，A 再次获取用户数量时，两次数量不一致，则称为 “幻读”</strong></p>\n<p><strong>注意：“不可重复读” 与 “幻读” 的区别在于，不可重复读强调的是数据信息的改变，幻读强调的是数量上的改变</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">隔离级别</th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th style=\"text-align:center\">幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">读未提交 (Read Uncommitted)</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">读已提交 (Read Committed)</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可重复读 (Repeated Read)</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">串行化 (Serializable)</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<p><strong>以上四种隔离级别，串行化的级别最高，读未提交的级别最低，级别越高，效率越低</strong></p>\n<p><strong>MySQL 支持以上四种隔离级别，默认的隔离级别是可重复度</strong></p>\n<p><strong>Oracle 数据库只支持串行化和读已提交 ，默认是读已提交；</strong></p>\n</blockquote>\n<h2 id=\"mysql最大的默认连接数\"><a class=\"anchor\" href=\"#mysql最大的默认连接数\">#</a> Mysql 最大的默认连接数</h2>\n<blockquote>\n<p><strong>100</strong></p>\n</blockquote>\n<p>为什么需要最大连接数？</p>\n<blockquote>\n<p><strong>特定服务器上面数据库最多只能支持一定数目同时连接</strong></p>\n</blockquote>\n<h2 id=\"mysql分页oracle分页\"><a class=\"anchor\" href=\"#mysql分页oracle分页\">#</a> Mysql 分页？Oracle 分页</h2>\n<p>为什么需要分页？</p>\n<blockquote>\n<p><strong>当有很多数据，一个页面不可能显示为所有数据，需要进行分段显示</strong></p>\n</blockquote>\n<p>mysql 使用了 limit 关键字来限制查询条数</p>\n<p>oracle 使用了 rownum 三层嵌套循环</p>\n<h2 id=\"对jdbc的理解\"><a class=\"anchor\" href=\"#对jdbc的理解\">#</a> 对 JDBC 的理解</h2>\n<blockquote>\n<p><strong>他就是 Java 与数据库建立连接的桥梁或插件，用 Java 代码就能操作数据库的增删查改、存储过程、事务等</strong></p>\n</blockquote>\n<h2 id=\"写一个简单的jdbc程序\"><a class=\"anchor\" href=\"#写一个简单的jdbc程序\">#</a> 写一个简单的 JDBC 程序</h2>\n<h3 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h3>\n<blockquote>\n<ol>\n<li><strong>加载驱动 (com.mysql.jdbc.Driver)</strong></li>\n<li><strong>获取参数 (DriverManager.getConnection (url,username,password))</strong></li>\n<li><strong>设置参数 (Statement PrepareStatement)</strong></li>\n<li><strong>执行 (execute)</strong></li>\n</ol>\n</blockquote>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.mysql.cj.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/user?serverTimezone=GMT\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">PreparedStatement</span> preparedStatement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>preparedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"preparedstatement相比于statement的好处\"><a class=\"anchor\" href=\"#preparedstatement相比于statement的好处\">#</a> PreparedStatement 相比于 statement 的好处</h2>\n<blockquote>\n<ol>\n<li><strong>PreparedStatement 是预编译的，比 statement 快</strong></li>\n<li><strong>代码的可读性和可维护性高</strong></li>\n<li><strong>可以防 SQL 注入</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"数据库连接池的作用\"><a class=\"anchor\" href=\"#数据库连接池的作用\">#</a> 数据库连接池的作用</h2>\n<blockquote>\n<ol>\n<li><strong>限定数据库的连接个数，进行统一的连接管理</strong></li>\n<li><strong>节约资源</strong></li>\n<li><strong>加快响应速度</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"数据库优化\"><a class=\"anchor\" href=\"#数据库优化\">#</a> 数据库优化</h2>\n"},{"title":"web面试题","date":"2020-12-15T11:21:00.000Z","_content":"\n## Get和Post的区别\n\nget和post都是http的请求方式，用户通过不同的请求方式来完成对资源的不同操作，get、post、put、delete分别对应着资源的查、改、增、删四个操作，一般来说get用来获取资源，post用于更新资源\n\n> 1. **get请求提交的数据会在地址栏显示出来，post请求不会**\n> 2. **由于地址栏长度有限，导致get传输的数据有限，而post不会**\n> 3. **安全性，post安全性比get高**\n\n## 对Servlet的理解\n\n> **Servlet是用Java程序编写的服务端程序，而这些Servlet都要实现Servlet接口，其主要功能是用于交互式的浏览和修改数据，生成动态网页**\n>\n> **HttpServlet重写doget和dopost方法或者重写service方式可以实现对get和post请求的响应**\n\n## Servlet的生命周期\n\n> 加载Servlet的生命周期，调用init()进行初始化，然后调用service()方法来处理客户端的请求，最后调用destroy()终止\n\n## forward与redirect的区别\n\n> 1. forward地址栏不会发生改变，redirect地址栏会发生改变\n> 2. forward是服务器上的行为，redirect是客户端的行为\n> 3. forward是一次请求完成的，redirect是两次请求完成的\n> 4. forward效率较高\n\n## JSP与Servlet的相同点与不同点\n\n> 相同点：JSP是Servlet的扩展，所有的JSP文件最终都会被翻译成一个继承HttpServlet类，也就是说JSP最终也是一个Servlet\n>\n> 不同点：JSP侧重于视图，Servlet侧重于控制逻辑\n\n## JSP的九大内置对象与四大作用域\n\n九大内置对象\n\n> **Request：客户端的请求**\n>\n> **Response：网页传回客户端的响应**\n>\n> **PageContext：网页属性的管理**\n>\n> **Session：会话**\n>\n> **Application：servlet正在执行的内容**\n>\n> **Out：传递回应的输出**\n>\n> **Config：servlet的架构不见**\n>\n> **Page：Jsp网页本身**\n>\n> **Exception：针对错误的网页**\n\n四大作用域\n\n> **page：只在一个页面保留数据**\n>\n> **request：只在一个请求中保存数据**\n>\n> **Session：再一次会话中保存数据，仅供单个用户使用**\n>\n> **Application：在整个服务器中保存数据，全部用户共享**\n\n## Cookie与Session的区别\n\n**cookie和session都是会话跟踪技术**\n\n不同点\n\n> 1. **cookie的数据是存在客户端的，session的数据是存在服务器上的**\n> 2. **cookie是不安全的**\n> 3. **session会在一定时间内存放在服务器上，当访问增多时，会占用服务器的性能**\n> 4. **单个cookie的保存数据不能超过4k,很多浏览器一个站点最多存放20个cookie**\n\n建议\n\n> **将登录信息等重要信息保存在session中，其他信息如需保留，可以放在cookie中，如：购物车**\n>\n> **购物车最好使用cookie，范式cookie实在客户端禁用的，只是要我们需要使用cookie+数据库的方式实现，当从cookie中不能取出数据时，就从数据库中取**\n\n## MVC的各个部分有哪些技术实现\n\n> **M(Model)：模型 Javabean**\n>\n> **V(View)：视图 jsp、html**\n>\n> **C(Control)：控制器：Servlet、Action**\n>\n> **JSP+Servlet+Javabean是最经典的mvc模式，实际上就是model2的实现方式，将逻辑与视图隔离开**\n>\n> **model1：jsp+service+dao**\n>\n> **model2：jsp+servlet+service+dao**","source":"_posts/computer/questions/course-1/spring_questions.md","raw":"---\ntitle: web面试题\ndate: 2020/12/15 19:21\ncategories:\n- [计算机, 面试, 面试题]\ntags: \n- 面试题\n---\n\n## Get和Post的区别\n\nget和post都是http的请求方式，用户通过不同的请求方式来完成对资源的不同操作，get、post、put、delete分别对应着资源的查、改、增、删四个操作，一般来说get用来获取资源，post用于更新资源\n\n> 1. **get请求提交的数据会在地址栏显示出来，post请求不会**\n> 2. **由于地址栏长度有限，导致get传输的数据有限，而post不会**\n> 3. **安全性，post安全性比get高**\n\n## 对Servlet的理解\n\n> **Servlet是用Java程序编写的服务端程序，而这些Servlet都要实现Servlet接口，其主要功能是用于交互式的浏览和修改数据，生成动态网页**\n>\n> **HttpServlet重写doget和dopost方法或者重写service方式可以实现对get和post请求的响应**\n\n## Servlet的生命周期\n\n> 加载Servlet的生命周期，调用init()进行初始化，然后调用service()方法来处理客户端的请求，最后调用destroy()终止\n\n## forward与redirect的区别\n\n> 1. forward地址栏不会发生改变，redirect地址栏会发生改变\n> 2. forward是服务器上的行为，redirect是客户端的行为\n> 3. forward是一次请求完成的，redirect是两次请求完成的\n> 4. forward效率较高\n\n## JSP与Servlet的相同点与不同点\n\n> 相同点：JSP是Servlet的扩展，所有的JSP文件最终都会被翻译成一个继承HttpServlet类，也就是说JSP最终也是一个Servlet\n>\n> 不同点：JSP侧重于视图，Servlet侧重于控制逻辑\n\n## JSP的九大内置对象与四大作用域\n\n九大内置对象\n\n> **Request：客户端的请求**\n>\n> **Response：网页传回客户端的响应**\n>\n> **PageContext：网页属性的管理**\n>\n> **Session：会话**\n>\n> **Application：servlet正在执行的内容**\n>\n> **Out：传递回应的输出**\n>\n> **Config：servlet的架构不见**\n>\n> **Page：Jsp网页本身**\n>\n> **Exception：针对错误的网页**\n\n四大作用域\n\n> **page：只在一个页面保留数据**\n>\n> **request：只在一个请求中保存数据**\n>\n> **Session：再一次会话中保存数据，仅供单个用户使用**\n>\n> **Application：在整个服务器中保存数据，全部用户共享**\n\n## Cookie与Session的区别\n\n**cookie和session都是会话跟踪技术**\n\n不同点\n\n> 1. **cookie的数据是存在客户端的，session的数据是存在服务器上的**\n> 2. **cookie是不安全的**\n> 3. **session会在一定时间内存放在服务器上，当访问增多时，会占用服务器的性能**\n> 4. **单个cookie的保存数据不能超过4k,很多浏览器一个站点最多存放20个cookie**\n\n建议\n\n> **将登录信息等重要信息保存在session中，其他信息如需保留，可以放在cookie中，如：购物车**\n>\n> **购物车最好使用cookie，范式cookie实在客户端禁用的，只是要我们需要使用cookie+数据库的方式实现，当从cookie中不能取出数据时，就从数据库中取**\n\n## MVC的各个部分有哪些技术实现\n\n> **M(Model)：模型 Javabean**\n>\n> **V(View)：视图 jsp、html**\n>\n> **C(Control)：控制器：Servlet、Action**\n>\n> **JSP+Servlet+Javabean是最经典的mvc模式，实际上就是model2的实现方式，将逻辑与视图隔离开**\n>\n> **model1：jsp+service+dao**\n>\n> **model2：jsp+servlet+service+dao**","slug":"computer/questions/course-1/spring_questions","published":1,"updated":"2020-12-15T12:09:06.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg7l0010b0ut7hch5f5h","content":"<h2 id=\"get和post的区别\"><a class=\"anchor\" href=\"#get和post的区别\">#</a> Get 和 Post 的区别</h2>\n<p>get 和 post 都是 http 的请求方式，用户通过不同的请求方式来完成对资源的不同操作，get、post、put、delete 分别对应着资源的查、改、增、删四个操作，一般来说 get 用来获取资源，post 用于更新资源</p>\n<blockquote>\n<ol>\n<li><strong>get 请求提交的数据会在地址栏显示出来，post 请求不会</strong></li>\n<li><strong>由于地址栏长度有限，导致 get 传输的数据有限，而 post 不会</strong></li>\n<li><strong>安全性，post 安全性比 get 高</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"对servlet的理解\"><a class=\"anchor\" href=\"#对servlet的理解\">#</a> 对 Servlet 的理解</h2>\n<blockquote>\n<p><strong>Servlet 是用 Java 程序编写的服务端程序，而这些 Servlet 都要实现 Servlet 接口，其主要功能是用于交互式的浏览和修改数据，生成动态网页</strong></p>\n<p><strong>HttpServlet 重写 doget 和 dopost 方法或者重写 service 方式可以实现对 get 和 post 请求的响应</strong></p>\n</blockquote>\n<h2 id=\"servlet的生命周期\"><a class=\"anchor\" href=\"#servlet的生命周期\">#</a> Servlet 的生命周期</h2>\n<blockquote>\n<p>加载 Servlet 的生命周期，调用 init () 进行初始化，然后调用 service () 方法来处理客户端的请求，最后调用 destroy () 终止</p>\n</blockquote>\n<h2 id=\"forward与redirect的区别\"><a class=\"anchor\" href=\"#forward与redirect的区别\">#</a> forward 与 redirect 的区别</h2>\n<blockquote>\n<ol>\n<li>forward 地址栏不会发生改变，redirect 地址栏会发生改变</li>\n<li>forward 是服务器上的行为，redirect 是客户端的行为</li>\n<li>forward 是一次请求完成的，redirect 是两次请求完成的</li>\n<li>forward 效率较高</li>\n</ol>\n</blockquote>\n<h2 id=\"jsp与servlet的相同点与不同点\"><a class=\"anchor\" href=\"#jsp与servlet的相同点与不同点\">#</a> JSP 与 Servlet 的相同点与不同点</h2>\n<blockquote>\n<p>相同点：JSP 是 Servlet 的扩展，所有的 JSP 文件最终都会被翻译成一个继承 HttpServlet 类，也就是说 JSP 最终也是一个 Servlet</p>\n<p>不同点：JSP 侧重于视图，Servlet 侧重于控制逻辑</p>\n</blockquote>\n<h2 id=\"jsp的九大内置对象与四大作用域\"><a class=\"anchor\" href=\"#jsp的九大内置对象与四大作用域\">#</a> JSP 的九大内置对象与四大作用域</h2>\n<p>九大内置对象</p>\n<blockquote>\n<p><strong>Request：客户端的请求</strong></p>\n<p><strong>Response：网页传回客户端的响应</strong></p>\n<p><strong>PageContext：网页属性的管理</strong></p>\n<p><strong>Session：会话</strong></p>\n<p><strong>Application：servlet 正在执行的内容</strong></p>\n<p><strong>Out：传递回应的输出</strong></p>\n<p><strong>Config：servlet 的架构不见</strong></p>\n<p><strong>Page：Jsp 网页本身</strong></p>\n<p><strong>Exception：针对错误的网页</strong></p>\n</blockquote>\n<p>四大作用域</p>\n<blockquote>\n<p><strong>page：只在一个页面保留数据</strong></p>\n<p><strong>request：只在一个请求中保存数据</strong></p>\n<p><strong>Session：再一次会话中保存数据，仅供单个用户使用</strong></p>\n<p><strong>Application：在整个服务器中保存数据，全部用户共享</strong></p>\n</blockquote>\n<h2 id=\"cookie与session的区别\"><a class=\"anchor\" href=\"#cookie与session的区别\">#</a> Cookie 与 Session 的区别</h2>\n<p><strong>cookie 和 session 都是会话跟踪技术</strong></p>\n<p>不同点</p>\n<blockquote>\n<ol>\n<li><strong>cookie 的数据是存在客户端的，session 的数据是存在服务器上的</strong></li>\n<li><strong>cookie 是不安全的</strong></li>\n<li><strong>session 会在一定时间内存放在服务器上，当访问增多时，会占用服务器的性能</strong></li>\n<li><strong>单个 cookie 的保存数据不能超过 4k, 很多浏览器一个站点最多存放 20 个 cookie</strong></li>\n</ol>\n</blockquote>\n<p>建议</p>\n<blockquote>\n<p><strong>将登录信息等重要信息保存在 session 中，其他信息如需保留，可以放在 cookie 中，如：购物车</strong></p>\n<p><strong>购物车最好使用 cookie，范式 cookie 实在客户端禁用的，只是要我们需要使用 cookie + 数据库的方式实现，当从 cookie 中不能取出数据时，就从数据库中取</strong></p>\n</blockquote>\n<h2 id=\"mvc的各个部分有哪些技术实现\"><a class=\"anchor\" href=\"#mvc的各个部分有哪些技术实现\">#</a> MVC 的各个部分有哪些技术实现</h2>\n<blockquote>\n<p><strong>M (Model)：模型 Javabean</strong></p>\n<p><strong>V (View)：视图 jsp、html</strong></p>\n<p><strong>C (Control)：控制器：Servlet、Action</strong></p>\n<p><strong>JSP+Servlet+Javabean 是最经典的 mvc 模式，实际上就是 model2 的实现方式，将逻辑与视图隔离开</strong></p>\n<p><strong>model1：jsp+service+dao</strong></p>\n<p><strong>model2：jsp+servlet+service+dao</strong></p>\n</blockquote>\n","site":{"data":{}},"length":1420,"excerpt":"","more":"<h2 id=\"get和post的区别\"><a class=\"anchor\" href=\"#get和post的区别\">#</a> Get 和 Post 的区别</h2>\n<p>get 和 post 都是 http 的请求方式，用户通过不同的请求方式来完成对资源的不同操作，get、post、put、delete 分别对应着资源的查、改、增、删四个操作，一般来说 get 用来获取资源，post 用于更新资源</p>\n<blockquote>\n<ol>\n<li><strong>get 请求提交的数据会在地址栏显示出来，post 请求不会</strong></li>\n<li><strong>由于地址栏长度有限，导致 get 传输的数据有限，而 post 不会</strong></li>\n<li><strong>安全性，post 安全性比 get 高</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"对servlet的理解\"><a class=\"anchor\" href=\"#对servlet的理解\">#</a> 对 Servlet 的理解</h2>\n<blockquote>\n<p><strong>Servlet 是用 Java 程序编写的服务端程序，而这些 Servlet 都要实现 Servlet 接口，其主要功能是用于交互式的浏览和修改数据，生成动态网页</strong></p>\n<p><strong>HttpServlet 重写 doget 和 dopost 方法或者重写 service 方式可以实现对 get 和 post 请求的响应</strong></p>\n</blockquote>\n<h2 id=\"servlet的生命周期\"><a class=\"anchor\" href=\"#servlet的生命周期\">#</a> Servlet 的生命周期</h2>\n<blockquote>\n<p>加载 Servlet 的生命周期，调用 init () 进行初始化，然后调用 service () 方法来处理客户端的请求，最后调用 destroy () 终止</p>\n</blockquote>\n<h2 id=\"forward与redirect的区别\"><a class=\"anchor\" href=\"#forward与redirect的区别\">#</a> forward 与 redirect 的区别</h2>\n<blockquote>\n<ol>\n<li>forward 地址栏不会发生改变，redirect 地址栏会发生改变</li>\n<li>forward 是服务器上的行为，redirect 是客户端的行为</li>\n<li>forward 是一次请求完成的，redirect 是两次请求完成的</li>\n<li>forward 效率较高</li>\n</ol>\n</blockquote>\n<h2 id=\"jsp与servlet的相同点与不同点\"><a class=\"anchor\" href=\"#jsp与servlet的相同点与不同点\">#</a> JSP 与 Servlet 的相同点与不同点</h2>\n<blockquote>\n<p>相同点：JSP 是 Servlet 的扩展，所有的 JSP 文件最终都会被翻译成一个继承 HttpServlet 类，也就是说 JSP 最终也是一个 Servlet</p>\n<p>不同点：JSP 侧重于视图，Servlet 侧重于控制逻辑</p>\n</blockquote>\n<h2 id=\"jsp的九大内置对象与四大作用域\"><a class=\"anchor\" href=\"#jsp的九大内置对象与四大作用域\">#</a> JSP 的九大内置对象与四大作用域</h2>\n<p>九大内置对象</p>\n<blockquote>\n<p><strong>Request：客户端的请求</strong></p>\n<p><strong>Response：网页传回客户端的响应</strong></p>\n<p><strong>PageContext：网页属性的管理</strong></p>\n<p><strong>Session：会话</strong></p>\n<p><strong>Application：servlet 正在执行的内容</strong></p>\n<p><strong>Out：传递回应的输出</strong></p>\n<p><strong>Config：servlet 的架构不见</strong></p>\n<p><strong>Page：Jsp 网页本身</strong></p>\n<p><strong>Exception：针对错误的网页</strong></p>\n</blockquote>\n<p>四大作用域</p>\n<blockquote>\n<p><strong>page：只在一个页面保留数据</strong></p>\n<p><strong>request：只在一个请求中保存数据</strong></p>\n<p><strong>Session：再一次会话中保存数据，仅供单个用户使用</strong></p>\n<p><strong>Application：在整个服务器中保存数据，全部用户共享</strong></p>\n</blockquote>\n<h2 id=\"cookie与session的区别\"><a class=\"anchor\" href=\"#cookie与session的区别\">#</a> Cookie 与 Session 的区别</h2>\n<p><strong>cookie 和 session 都是会话跟踪技术</strong></p>\n<p>不同点</p>\n<blockquote>\n<ol>\n<li><strong>cookie 的数据是存在客户端的，session 的数据是存在服务器上的</strong></li>\n<li><strong>cookie 是不安全的</strong></li>\n<li><strong>session 会在一定时间内存放在服务器上，当访问增多时，会占用服务器的性能</strong></li>\n<li><strong>单个 cookie 的保存数据不能超过 4k, 很多浏览器一个站点最多存放 20 个 cookie</strong></li>\n</ol>\n</blockquote>\n<p>建议</p>\n<blockquote>\n<p><strong>将登录信息等重要信息保存在 session 中，其他信息如需保留，可以放在 cookie 中，如：购物车</strong></p>\n<p><strong>购物车最好使用 cookie，范式 cookie 实在客户端禁用的，只是要我们需要使用 cookie + 数据库的方式实现，当从 cookie 中不能取出数据时，就从数据库中取</strong></p>\n</blockquote>\n<h2 id=\"mvc的各个部分有哪些技术实现\"><a class=\"anchor\" href=\"#mvc的各个部分有哪些技术实现\">#</a> MVC 的各个部分有哪些技术实现</h2>\n<blockquote>\n<p><strong>M (Model)：模型 Javabean</strong></p>\n<p><strong>V (View)：视图 jsp、html</strong></p>\n<p><strong>C (Control)：控制器：Servlet、Action</strong></p>\n<p><strong>JSP+Servlet+Javabean 是最经典的 mvc 模式，实际上就是 model2 的实现方式，将逻辑与视图隔离开</strong></p>\n<p><strong>model1：jsp+service+dao</strong></p>\n<p><strong>model2：jsp+servlet+service+dao</strong></p>\n</blockquote>\n"},{"title":"SpringMVC面试题","date":"2020-12-17T03:59:00.000Z","_content":"\n### springmvc的执行流程\n\n> 1. 发送请求到前端控制器DispatcherServlet\n> 2. 前端控制器请求处理映射器HandlerMapping查找Handler\n> 3. 处理映射器向前端控制器返回Handler\n> 4. 前端控制器调用处理适配器去执行Handler\n> 5. Handler执行完给适配器返回ModelAndView\n> 6. 处理适配器向前端控制器返回ModelAndView\n> 7. 前端控制器请求视图解析器ViewResolver去进行视图解析\n> 8. 视图解析器向前端控制器返回View视图\n> 9. 前端控制器进行视图渲染\n> 10. 前端控制器向用户响应结果","source":"_posts/computer/questions/course-1/springmvc_questions.md","raw":"---\ntitle: SpringMVC面试题\ndate: 2020/12/17 11:59\ncategories: \n\t- [计算机, 面试, 面试题]\ntags:\n\t- 面试题\n---\n\n### springmvc的执行流程\n\n> 1. 发送请求到前端控制器DispatcherServlet\n> 2. 前端控制器请求处理映射器HandlerMapping查找Handler\n> 3. 处理映射器向前端控制器返回Handler\n> 4. 前端控制器调用处理适配器去执行Handler\n> 5. Handler执行完给适配器返回ModelAndView\n> 6. 处理适配器向前端控制器返回ModelAndView\n> 7. 前端控制器请求视图解析器ViewResolver去进行视图解析\n> 8. 视图解析器向前端控制器返回View视图\n> 9. 前端控制器进行视图渲染\n> 10. 前端控制器向用户响应结果","slug":"computer/questions/course-1/springmvc_questions","published":1,"updated":"2020-12-17T04:15:19.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg7r0013b0ut7kx73f47","content":"<h3 id=\"springmvc的执行流程\"><a class=\"anchor\" href=\"#springmvc的执行流程\">#</a> springmvc 的执行流程</h3>\n<blockquote>\n<ol>\n<li>发送请求到前端控制器 DispatcherServlet</li>\n<li>前端控制器请求处理映射器 HandlerMapping 查找 Handler</li>\n<li>处理映射器向前端控制器返回 Handler</li>\n<li>前端控制器调用处理适配器去执行 Handler</li>\n<li>Handler 执行完给适配器返回 ModelAndView</li>\n<li>处理适配器向前端控制器返回 ModelAndView</li>\n<li>前端控制器请求视图解析器 ViewResolver 去进行视图解析</li>\n<li>视图解析器向前端控制器返回 View 视图</li>\n<li>前端控制器进行视图渲染</li>\n<li>前端控制器向用户响应结果</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"length":245,"excerpt":"","more":"<h3 id=\"springmvc的执行流程\"><a class=\"anchor\" href=\"#springmvc的执行流程\">#</a> springmvc 的执行流程</h3>\n<blockquote>\n<ol>\n<li>发送请求到前端控制器 DispatcherServlet</li>\n<li>前端控制器请求处理映射器 HandlerMapping 查找 Handler</li>\n<li>处理映射器向前端控制器返回 Handler</li>\n<li>前端控制器调用处理适配器去执行 Handler</li>\n<li>Handler 执行完给适配器返回 ModelAndView</li>\n<li>处理适配器向前端控制器返回 ModelAndView</li>\n<li>前端控制器请求视图解析器 ViewResolver 去进行视图解析</li>\n<li>视图解析器向前端控制器返回 View 视图</li>\n<li>前端控制器进行视图渲染</li>\n<li>前端控制器向用户响应结果</li>\n</ol>\n</blockquote>\n"},{"title":"web面试题","date":"2020-12-17T04:05:00.000Z","_content":"\n\n\n## Get和Post的区别\n\nget和post都是http的请求方式，用户通过不同的请求方式来完成对资源的不同操作，get、post、put、delete分别对应着资源的查、改、增、删四个操作，一般来说get用来获取资源，post用于更新资源\n\n> 1. **get请求提交的数据会在地址栏显示出来，post请求不会**\n> 2. **由于地址栏长度有限，导致get传输的数据有限，而post不会**\n> 3. **安全性，post安全性比get高**\n\n## 对Servlet的理解\n\n> **Servlet是用Java程序编写的服务端程序，而这些Servlet都要实现Servlet接口，其主要功能是用于交互式的浏览和修改数据，生成动态网页**\n>\n> **HttpServlet重写doget和dopost方法或者重写service方式可以实现对get和post请求的响应**\n\n## Servlet的生命周期\n\n> 加载Servlet的生命周期，调用init()进行初始化，然后调用service()方法来处理客户端的请求，最后调用destroy()终止\n\n## forward与redirect的区别\n\n> 1. forward地址栏不会发生改变，redirect地址栏会发生改变\n> 2. forward是服务器上的行为，redirect是客户端的行为\n> 3. forward是一次请求完成的，redirect是两次请求完成的\n> 4. forward效率较高\n\n## JSP与Servlet的相同点与不同点\n\n> 相同点：JSP是Servlet的扩展，所有的JSP文件最终都会被翻译成一个继承HttpServlet类，也就是说JSP最终也是一个Servlet\n>\n> 不同点：JSP侧重于视图，Servlet侧重于控制逻辑\n\n## JSP的九大内置对象与四大作用域\n\n九大内置对象\n\n> **Request：客户端的请求**\n>\n> **Response：网页传回客户端的响应**\n>\n> **PageContext：网页属性的管理**\n>\n> **Session：会话**\n>\n> **Application：servlet正在执行的内容**\n>\n> **Out：传递回应的输出**\n>\n> **Config：servlet的架构不见**\n>\n> **Page：Jsp网页本身**\n>\n> **Exception：针对错误的网页**\n\n四大作用域\n\n> **page：只在一个页面保留数据**\n>\n> **request：只在一个请求中保存数据**\n>\n> **Session：再一次会话中保存数据，仅供单个用户使用**\n>\n> **Application：在整个服务器中保存数据，全部用户共享**\n\n## Cookie与Session的区别\n\n**cookie和session都是会话跟踪技术**\n\n不同点\n\n> 1. **cookie的数据是存在客户端的，session的数据是存在服务器上的**\n> 2. **cookie是不安全的**\n> 3. **session会在一定时间内存放在服务器上，当访问增多时，会占用服务器的性能**\n> 4. **单个cookie的保存数据不能超过4k,很多浏览器一个站点最多存放20个cookie**\n\n建议\n\n> **将登录信息等重要信息保存在session中，其他信息如需保留，可以放在cookie中，如：购物车**\n>\n> **购物车最好使用cookie，范式cookie实在客户端禁用的，只是要我们需要使用cookie+数据库的方式实现，当从cookie中不能取出数据时，就从数据库中取**","source":"_posts/computer/questions/course-1/web_questions.md","raw":"---\ntitle: web面试题\ndate: 2020/12/17 12:05\ncategories:\n\t- [计算机, 面试, 面试题]\ntags:\n\t- 面试题\n---\n\n\n\n## Get和Post的区别\n\nget和post都是http的请求方式，用户通过不同的请求方式来完成对资源的不同操作，get、post、put、delete分别对应着资源的查、改、增、删四个操作，一般来说get用来获取资源，post用于更新资源\n\n> 1. **get请求提交的数据会在地址栏显示出来，post请求不会**\n> 2. **由于地址栏长度有限，导致get传输的数据有限，而post不会**\n> 3. **安全性，post安全性比get高**\n\n## 对Servlet的理解\n\n> **Servlet是用Java程序编写的服务端程序，而这些Servlet都要实现Servlet接口，其主要功能是用于交互式的浏览和修改数据，生成动态网页**\n>\n> **HttpServlet重写doget和dopost方法或者重写service方式可以实现对get和post请求的响应**\n\n## Servlet的生命周期\n\n> 加载Servlet的生命周期，调用init()进行初始化，然后调用service()方法来处理客户端的请求，最后调用destroy()终止\n\n## forward与redirect的区别\n\n> 1. forward地址栏不会发生改变，redirect地址栏会发生改变\n> 2. forward是服务器上的行为，redirect是客户端的行为\n> 3. forward是一次请求完成的，redirect是两次请求完成的\n> 4. forward效率较高\n\n## JSP与Servlet的相同点与不同点\n\n> 相同点：JSP是Servlet的扩展，所有的JSP文件最终都会被翻译成一个继承HttpServlet类，也就是说JSP最终也是一个Servlet\n>\n> 不同点：JSP侧重于视图，Servlet侧重于控制逻辑\n\n## JSP的九大内置对象与四大作用域\n\n九大内置对象\n\n> **Request：客户端的请求**\n>\n> **Response：网页传回客户端的响应**\n>\n> **PageContext：网页属性的管理**\n>\n> **Session：会话**\n>\n> **Application：servlet正在执行的内容**\n>\n> **Out：传递回应的输出**\n>\n> **Config：servlet的架构不见**\n>\n> **Page：Jsp网页本身**\n>\n> **Exception：针对错误的网页**\n\n四大作用域\n\n> **page：只在一个页面保留数据**\n>\n> **request：只在一个请求中保存数据**\n>\n> **Session：再一次会话中保存数据，仅供单个用户使用**\n>\n> **Application：在整个服务器中保存数据，全部用户共享**\n\n## Cookie与Session的区别\n\n**cookie和session都是会话跟踪技术**\n\n不同点\n\n> 1. **cookie的数据是存在客户端的，session的数据是存在服务器上的**\n> 2. **cookie是不安全的**\n> 3. **session会在一定时间内存放在服务器上，当访问增多时，会占用服务器的性能**\n> 4. **单个cookie的保存数据不能超过4k,很多浏览器一个站点最多存放20个cookie**\n\n建议\n\n> **将登录信息等重要信息保存在session中，其他信息如需保留，可以放在cookie中，如：购物车**\n>\n> **购物车最好使用cookie，范式cookie实在客户端禁用的，只是要我们需要使用cookie+数据库的方式实现，当从cookie中不能取出数据时，就从数据库中取**","slug":"computer/questions/course-1/web_questions","published":1,"updated":"2020-12-17T04:46:35.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg8r003fb0ut54vbe06j","content":"<h2 id=\"get和post的区别\"><a class=\"anchor\" href=\"#get和post的区别\">#</a> Get 和 Post 的区别</h2>\n<p>get 和 post 都是 http 的请求方式，用户通过不同的请求方式来完成对资源的不同操作，get、post、put、delete 分别对应着资源的查、改、增、删四个操作，一般来说 get 用来获取资源，post 用于更新资源</p>\n<blockquote>\n<ol>\n<li><strong>get 请求提交的数据会在地址栏显示出来，post 请求不会</strong></li>\n<li><strong>由于地址栏长度有限，导致 get 传输的数据有限，而 post 不会</strong></li>\n<li><strong>安全性，post 安全性比 get 高</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"对servlet的理解\"><a class=\"anchor\" href=\"#对servlet的理解\">#</a> 对 Servlet 的理解</h2>\n<blockquote>\n<p><strong>Servlet 是用 Java 程序编写的服务端程序，而这些 Servlet 都要实现 Servlet 接口，其主要功能是用于交互式的浏览和修改数据，生成动态网页</strong></p>\n<p><strong>HttpServlet 重写 doget 和 dopost 方法或者重写 service 方式可以实现对 get 和 post 请求的响应</strong></p>\n</blockquote>\n<h2 id=\"servlet的生命周期\"><a class=\"anchor\" href=\"#servlet的生命周期\">#</a> Servlet 的生命周期</h2>\n<blockquote>\n<p>加载 Servlet 的生命周期，调用 init () 进行初始化，然后调用 service () 方法来处理客户端的请求，最后调用 destroy () 终止</p>\n</blockquote>\n<h2 id=\"forward与redirect的区别\"><a class=\"anchor\" href=\"#forward与redirect的区别\">#</a> forward 与 redirect 的区别</h2>\n<blockquote>\n<ol>\n<li>forward 地址栏不会发生改变，redirect 地址栏会发生改变</li>\n<li>forward 是服务器上的行为，redirect 是客户端的行为</li>\n<li>forward 是一次请求完成的，redirect 是两次请求完成的</li>\n<li>forward 效率较高</li>\n</ol>\n</blockquote>\n<h2 id=\"jsp与servlet的相同点与不同点\"><a class=\"anchor\" href=\"#jsp与servlet的相同点与不同点\">#</a> JSP 与 Servlet 的相同点与不同点</h2>\n<blockquote>\n<p>相同点：JSP 是 Servlet 的扩展，所有的 JSP 文件最终都会被翻译成一个继承 HttpServlet 类，也就是说 JSP 最终也是一个 Servlet</p>\n<p>不同点：JSP 侧重于视图，Servlet 侧重于控制逻辑</p>\n</blockquote>\n<h2 id=\"jsp的九大内置对象与四大作用域\"><a class=\"anchor\" href=\"#jsp的九大内置对象与四大作用域\">#</a> JSP 的九大内置对象与四大作用域</h2>\n<p>九大内置对象</p>\n<blockquote>\n<p><strong>Request：客户端的请求</strong></p>\n<p><strong>Response：网页传回客户端的响应</strong></p>\n<p><strong>PageContext：网页属性的管理</strong></p>\n<p><strong>Session：会话</strong></p>\n<p><strong>Application：servlet 正在执行的内容</strong></p>\n<p><strong>Out：传递回应的输出</strong></p>\n<p><strong>Config：servlet 的架构不见</strong></p>\n<p><strong>Page：Jsp 网页本身</strong></p>\n<p><strong>Exception：针对错误的网页</strong></p>\n</blockquote>\n<p>四大作用域</p>\n<blockquote>\n<p><strong>page：只在一个页面保留数据</strong></p>\n<p><strong>request：只在一个请求中保存数据</strong></p>\n<p><strong>Session：再一次会话中保存数据，仅供单个用户使用</strong></p>\n<p><strong>Application：在整个服务器中保存数据，全部用户共享</strong></p>\n</blockquote>\n<h2 id=\"cookie与session的区别\"><a class=\"anchor\" href=\"#cookie与session的区别\">#</a> Cookie 与 Session 的区别</h2>\n<p><strong>cookie 和 session 都是会话跟踪技术</strong></p>\n<p>不同点</p>\n<blockquote>\n<ol>\n<li><strong>cookie 的数据是存在客户端的，session 的数据是存在服务器上的</strong></li>\n<li><strong>cookie 是不安全的</strong></li>\n<li><strong>session 会在一定时间内存放在服务器上，当访问增多时，会占用服务器的性能</strong></li>\n<li><strong>单个 cookie 的保存数据不能超过 4k, 很多浏览器一个站点最多存放 20 个 cookie</strong></li>\n</ol>\n</blockquote>\n<p>建议</p>\n<blockquote>\n<p><strong>将登录信息等重要信息保存在 session 中，其他信息如需保留，可以放在 cookie 中，如：购物车</strong></p>\n<p><strong>购物车最好使用 cookie，范式 cookie 实在客户端禁用的，只是要我们需要使用 cookie + 数据库的方式实现，当从 cookie 中不能取出数据时，就从数据库中取</strong></p>\n</blockquote>\n","site":{"data":{}},"length":1229,"excerpt":"","more":"<h2 id=\"get和post的区别\"><a class=\"anchor\" href=\"#get和post的区别\">#</a> Get 和 Post 的区别</h2>\n<p>get 和 post 都是 http 的请求方式，用户通过不同的请求方式来完成对资源的不同操作，get、post、put、delete 分别对应着资源的查、改、增、删四个操作，一般来说 get 用来获取资源，post 用于更新资源</p>\n<blockquote>\n<ol>\n<li><strong>get 请求提交的数据会在地址栏显示出来，post 请求不会</strong></li>\n<li><strong>由于地址栏长度有限，导致 get 传输的数据有限，而 post 不会</strong></li>\n<li><strong>安全性，post 安全性比 get 高</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"对servlet的理解\"><a class=\"anchor\" href=\"#对servlet的理解\">#</a> 对 Servlet 的理解</h2>\n<blockquote>\n<p><strong>Servlet 是用 Java 程序编写的服务端程序，而这些 Servlet 都要实现 Servlet 接口，其主要功能是用于交互式的浏览和修改数据，生成动态网页</strong></p>\n<p><strong>HttpServlet 重写 doget 和 dopost 方法或者重写 service 方式可以实现对 get 和 post 请求的响应</strong></p>\n</blockquote>\n<h2 id=\"servlet的生命周期\"><a class=\"anchor\" href=\"#servlet的生命周期\">#</a> Servlet 的生命周期</h2>\n<blockquote>\n<p>加载 Servlet 的生命周期，调用 init () 进行初始化，然后调用 service () 方法来处理客户端的请求，最后调用 destroy () 终止</p>\n</blockquote>\n<h2 id=\"forward与redirect的区别\"><a class=\"anchor\" href=\"#forward与redirect的区别\">#</a> forward 与 redirect 的区别</h2>\n<blockquote>\n<ol>\n<li>forward 地址栏不会发生改变，redirect 地址栏会发生改变</li>\n<li>forward 是服务器上的行为，redirect 是客户端的行为</li>\n<li>forward 是一次请求完成的，redirect 是两次请求完成的</li>\n<li>forward 效率较高</li>\n</ol>\n</blockquote>\n<h2 id=\"jsp与servlet的相同点与不同点\"><a class=\"anchor\" href=\"#jsp与servlet的相同点与不同点\">#</a> JSP 与 Servlet 的相同点与不同点</h2>\n<blockquote>\n<p>相同点：JSP 是 Servlet 的扩展，所有的 JSP 文件最终都会被翻译成一个继承 HttpServlet 类，也就是说 JSP 最终也是一个 Servlet</p>\n<p>不同点：JSP 侧重于视图，Servlet 侧重于控制逻辑</p>\n</blockquote>\n<h2 id=\"jsp的九大内置对象与四大作用域\"><a class=\"anchor\" href=\"#jsp的九大内置对象与四大作用域\">#</a> JSP 的九大内置对象与四大作用域</h2>\n<p>九大内置对象</p>\n<blockquote>\n<p><strong>Request：客户端的请求</strong></p>\n<p><strong>Response：网页传回客户端的响应</strong></p>\n<p><strong>PageContext：网页属性的管理</strong></p>\n<p><strong>Session：会话</strong></p>\n<p><strong>Application：servlet 正在执行的内容</strong></p>\n<p><strong>Out：传递回应的输出</strong></p>\n<p><strong>Config：servlet 的架构不见</strong></p>\n<p><strong>Page：Jsp 网页本身</strong></p>\n<p><strong>Exception：针对错误的网页</strong></p>\n</blockquote>\n<p>四大作用域</p>\n<blockquote>\n<p><strong>page：只在一个页面保留数据</strong></p>\n<p><strong>request：只在一个请求中保存数据</strong></p>\n<p><strong>Session：再一次会话中保存数据，仅供单个用户使用</strong></p>\n<p><strong>Application：在整个服务器中保存数据，全部用户共享</strong></p>\n</blockquote>\n<h2 id=\"cookie与session的区别\"><a class=\"anchor\" href=\"#cookie与session的区别\">#</a> Cookie 与 Session 的区别</h2>\n<p><strong>cookie 和 session 都是会话跟踪技术</strong></p>\n<p>不同点</p>\n<blockquote>\n<ol>\n<li><strong>cookie 的数据是存在客户端的，session 的数据是存在服务器上的</strong></li>\n<li><strong>cookie 是不安全的</strong></li>\n<li><strong>session 会在一定时间内存放在服务器上，当访问增多时，会占用服务器的性能</strong></li>\n<li><strong>单个 cookie 的保存数据不能超过 4k, 很多浏览器一个站点最多存放 20 个 cookie</strong></li>\n</ol>\n</blockquote>\n<p>建议</p>\n<blockquote>\n<p><strong>将登录信息等重要信息保存在 session 中，其他信息如需保留，可以放在 cookie 中，如：购物车</strong></p>\n<p><strong>购物车最好使用 cookie，范式 cookie 实在客户端禁用的，只是要我们需要使用 cookie + 数据库的方式实现，当从 cookie 中不能取出数据时，就从数据库中取</strong></p>\n</blockquote>\n"},{"title":"创建型模式","date":"2020-12-19T03:45:00.000Z","_content":"\n\n\n### 工厂模式\n\n> 目的：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。\n>\n> 解决：主要解决接口选择的问题。\n>\n> 应用实例：您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。\n\n1. 创建一个汽车接口\n\n> car.java\n\n```java\npublic interface Car {\n    void product();\n}\n```\n\n1. 创建实现汽车接口的实体类\n\n> AudiCar.java\n\n```java\npublic class AudiCar implements Car{\n    @Override\n    public void product() {\n        System.out.println(\"生产奥迪汽车\");\n    }\n}\n```\n\n> BenzCar.java\n\n```java\npublic class BenzCar implements Car{\n    @Override\n    public void product() {\n        System.out.println(\"生产奔驰汽车\");\n    }\n}\n```\n\n> AudiCar.java\n\n```java\npublic class BmwCar implements Car{\n    @Override\n    public void product() {\n        System.out.println(\"生产宝马汽车\");\n    }\n}\n```\n\n1. 创建一个工厂，生成基于给定信息的实体类的对象。\n\n> CarFactory.java\n\n```java\npublic class CarFactory {\n    //通过getCar获得汽车类型的对象\n    public Car getCar(String carType){\n        if (carType == null){\n            return null;\n        }\n        if (carType.equals(\"Audi\")){\n            return new AudiCar();\n        }\n        if (carType.equals(\"Bmw\")){\n            return new BmwCar();\n        }\n        if (carType.equals(\"Benz\")){\n            return new BenzCar();\n        }\n        return null;\n    }\n}\n```\n\n1. 使用该工厂，通过传递类型信息来获取实体类的对象。\n\n> FactoryPatternDemo\n\n```java\npublic class FactoryPatternDemo {\n    public static void main(String[] args) {\n      CarFactory carFactory = new CarFactory();\n      Car adui = carFactory.getCar(\"Audi\");\n      adui.product();\n      Car bmw = carFactory.getCar(\"Bmw\");\n      bmw.product();\n      Car benz = carFactory.getCar(\"Benz\");\n      benz.product();\n    }\n}\n```\n\n1. 输出结果\n\n> 生产奥迪汽车 生产宝马汽车 生产奔驰汽车\n\n### 抽象工厂模式\n\n> 目的：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n>\n> 解决：主要解决接口选择的问题。\n>\n> 应用实例：对于身上的穿搭，每一件成套的衣服都包括具体的衣服（比如长袖、短袖）、具体的裤子（比如牛仔裤、休闲裤），这些具体的衣服也都是衣服（抽象产品），这些具体的裤子也是裤子（另一种抽象产品）\n\n1. 创建一个形状接口\n\n> Shape.java\n\n```java\npublic interface Shape {\n    void draw();\n}\n```\n\n1. 创建实现形状接口的实体类\n\n> Rectangle.java\n\n```java\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"画一个矩形\");\n    }\n}\n```\n\n> Square.java\n\n```java\npublic class Square implements Shape{\n    @Override\n    public void draw() {\n        System.out.println(\"画一个正方形\");\n    }\n}\n```\n\n> Circle.java\n\n```java\npublic class Circle implements Shape{\n    @Override\n    public void draw() {\n        System.out.println(\"画一个圆形\");\n    }\n}\n```\n\n1. 创建一个颜色接口\n\n> Color.java\n\n```java\npublic interface Color {\n    void fill();\n}\n```\n\n1. 创建实现颜色接口的实体类\n\n> Blue.java\n\n```java\npublic class Blue implements Color {\n    @Override\n    public void fill() {\n        System.out.println(\"填充蓝色\");\n    }\n}\n```\n\n> Red.java\n\n```java\npublic class Red implements Color{\n    @Override\n    public void fill() {\n        System.out.println(\"填充红色\");\n    }\n}\n```\n\n> Green.java\n\n```java\npublic class Green implements Color{\n    @Override\n    public void fill() {\n        System.out.println(\"填充绿色\");\n    }\n}\n```\n\n1. 为 Color 和 Shape 对象创建抽象类来获取工厂\n\n> AbstractFactory.java\n\n```java\npublic abstract class AbstractFactory {\n    public abstract Color getColor(String color);\n    public abstract Shape getShape(String shape) ;\n}\n```\n\n1. 创建扩展了 AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。\n\n> ShapeFactory.java\n\n```java\npublic class ShapeFactory extends AbstractFactory {\n    @Override\n    public Color getColor(String color) {\n        return null;\n    }\n    @Override\n    public Shape getShape(String shape) {\n        if (null == shape){\n            return null;\n        }\n        else if (\"Circle\".equals(shape)){\n            return new Circle();\n        }\n        else if (\"Square\".equals(shape)){\n            return new Square();\n        }\n        else if (\"Rectangle\".equals(shape)){\n            return new Rectangle();\n        }\n        return null;\n    }\n}\n```\n\n> ColorFactory.java\n\n```java\npublic class ColorFactory extends AbstractFactory {\n    @Override\n    public Color getColor(String color) {\n        if (null == color){\n            return null;\n        }\n        else if (\"Red\".equals(color)){\n            return new Red();\n        }\n        else if(\"Blue\".equals(color)){\n            return new Blue();\n        }\n        else if (\"Green\".equals(color)){\n            return new Green();\n        }\n        return null;\n    }\n    @Override\n    public Shape getShape(String shape) {\n        return null;\n    }\n}\n```\n\n1. 创建一个工厂创造器/生成器类，通过传递形状或颜色信息来获取工厂。\n\n> FactoryProducer.java\n\n```java\npublic class FactoryProducer {\n    public static AbstractFactory getFactory(String choice){\n        if (\"Shape\".equals(choice)){\n            return new ShapeFactory();\n        }\n        else if (\"Color\".equals(choice)){\n            return new ColorFactory();\n        }\n        return null;\n    }\n}\n```\n\n1. ​\t使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。\n\n> AbstractFactoryPatternDemo.java\n\n```java\npublic class AbstractFactoryPatternDemo {\n    public static void main(String[] args) {\n        //获取形状工厂\n        AbstractFactory shapeFactory = FactoryProducer.getFactory(\"Shape\");\n        //获取形状为Circle的对象\n        Shape circle = shapeFactory.getShape(\"Circle\");\n        circle.draw();\n        //获取形状为Rectangle的对象\n        Shape rectangle = shapeFactory.getShape(\"Rectangle\");\n        rectangle.draw();\n        //获取形状为Square的对象\n        Shape square = shapeFactory.getShape(\"Square\");\n        square.draw();\n        //获取颜色工厂\n        AbstractFactory colorFactory = FactoryProducer.getFactory(\"Color\");\n        //获取颜色为Red的对象\n        Color red = colorFactory.getColor(\"Red\");\n        red.fill();\n        //获取颜色为Blue的对象\n        Color blue = colorFactory.getColor(\"Blue\");\n        blue.fill();\n        //获取颜色为Green的对象\n        Color green = colorFactory.getColor(\"Green\");\n        green.fill();\n    }\n}\n```\n\n1. 输出结果\n\n> 画一个圆形 画一个矩形 画一个正方形 填充红色 填充蓝色 填充绿色\n\n### 单例模式\n\n> 目的：保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n>\n> 解决：一个全局使用的类频繁地创建与销毁。\n>\n> 应用实例：Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。\n\n1. 懒汉式，线程不安全\n\n> 描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。 这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton (){}\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n1. 懒汉式，线程安全\n\n> 描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n>\n> 优点：第一次调用才初始化，避免内存浪费。\n>\n> 缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\n>\n> getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton (){}\n    public static synchronized Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n1. 饿汉式\n\n> 描述：这种方式比较常用，但容易产生垃圾对象。\n>\n> 优点：没有加锁，执行效率会提高。\n>\n> 缺点：类加载时就初始化，浪费内存。\n>\n> 它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。\n\n```java\npublic class Singleton {\n    private static Singleton instance = new Singleton();\n    private Singleton (){}\n    public static Singleton getInstance() {\n        return instance;\n    }\n}\n```\n\n1. 双检锁/双重校验锁（DCL，即 double-checked locking）\n\n> 描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。 getInstance() 的性能对应用程序很关键。\n\n```java\npublic class Singleton {\n    private volatile static Singleton singleton;\n    private Singleton (){}\n    public static Singleton getSingleton() {\n        if (singleton == null) {\n            synchronized (Singleton.class) {\n                if (singleton == null) {\n                    singleton = new Singleton();\n                }\n            }\n        }\n        return singleton;\n    }\n}\n```\n\n1. 登记式/静态内部类\n\n> 描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n\n```java\npublic class Singleton {\n    private static class SingletonHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    private Singleton (){}\n    public static final Singleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n```\n\n1. 枚举\n\n> 描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n\n```java\npublic enum Singleton {\n    INSTANCE;\n    public void whateverMethod() {}\n}\n```\n\n**一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。**\n\n### 建造者模式\n\n> 目的：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。\n>\n> 解决：有时候面临着\"一个复杂对象\"的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。\n>\n> 应用实例：去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的\"套餐\"。\n\n1. 创建一个表示食物条目和食物包装的接口。\n\n> Item.java\n\n```java\npublic interface Item {\n    public String name();\n    public Packing packing();\n    public float price();    \n}\n```\n\n> Packing.java\n\n```java\npublic interface Packing {\n    public String pack();\n}\n```\n\n1. 创建实现 Packing 接口的实体类。\n\n> Wrapper.java\n\n```java\npublic class Wrapper implements Packing {\n    @Override\n    public String pack() {\n        return \"纸质包装\";\n    }\n}\n```\n\n> Bottle.java\n\n```java\npublic class Bottle implements Packing {\n    @Override\n    public String pack() {\n        return \"瓶装\";\n    }\n}\n```\n\n1. 创建实现 Item 接口的抽象类，该类提供了默认的功能。\n\n> Burger.java\n\n```java\npublic abstract class Burger implements Item {\n    @Override\n    public Packing packing() {\n        return new Wrapper();\n    }\n\n    @Override\n    public abstract float price();\n}\n```\n\n> ColdDrink.java\n\n```java\npublic abstract class ColdDrink implements Item{\n    @Override\n    public Packing packing() {\n        return new Bottle();\n    }\n\n    @Override\n    public abstract float price();\n}\n```\n\n1. 创建扩展了 Burger 和 ColdDrink 的实体类。\n\n> VegBurger.java\n\n```java\npublic class VegBurger extends Burger{\n    @Override\n    public String name() {\n        return \"蔬菜汉堡\";\n    }\n\n    @Override\n    public float price() {\n        return 12.5f;\n    }\n}\n```\n\n> ChickenBurger.java\n\n```java\npublic class ChickenBurger extends Burger {\n    @Override\n    public String name() {\n        return \"鸡肉汉堡\";\n    }\n\n    @Override\n    public float price() {\n        return 25.7f;\n    }\n}\n```\n\n> Sprite.java\n\n```java\npublic class Sprite extends ColdDrink {\n    @Override\n    public String name() {\n        return \"雪碧\";\n    }\n\n    @Override\n    public float price() {\n        return 3.5f;\n    }\n}\n```\n\n> Pepsi.java\n\n```java\npublic class Pepsi extends ColdDrink {\n    @Override\n    public String name() {\n        return \"可乐\";\n    }\n\n    @Override\n    public float price() {\n        return 3.6f;\n    }\n}\n```\n\n1. 创建一个 Meal 类，带有上面定义的 Item 对象。\n\n> Meal.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Meal {\n    public List<Item> items = new ArrayList<>();\n    public void addItem(Item item){\n        items.add(item);\n    }\n    public float getCost(){\n        float cost = 0.0f;\n        for (Item item : items) {\n            cost += item.price();\n        }\n        return cost;\n    }\n    public void showItems(){\n        for (Item item : items){\n            System.out.print(\"食物：\"+item.name());\n            System.out.print(\",包装：\"+item.packing().pack());\n            System.out.println(\",价格：\"+item.price());\n        }\n    }\n}\n```\n\n1. 创建一个 MealBuilder 类，实际的 builder 类负责创建 Meal 对象。\n\n> MealBuilder.java\n\n```java\npublic class MealBuilder {\n    public Meal MealOne(){\n        Meal meal = new Meal();\n        meal.addItem(new VegBurger());\n        meal.addItem(new Pepsi());\n        return meal;\n    }\n    public Meal MealTwo(){\n        Meal meal = new Meal();\n        meal.addItem(new ChickenBurger());\n        meal.addItem(new Sprite());\n        return meal;\n    }\n}\n```\n\n1. BuiderPatternDemo 使用 MealBuider 来演示建造者模式（Builder Pattern）。\n\n> BuilderPatternDemo.java\n\n```java\npublic class BuilderPatternDemo {\n    public static void main(String[] args) {\n        MealBuilder mealBuilder = new MealBuilder();\n        Meal mealOne = mealBuilder.MealOne();\n        System.out.println(\"套餐一\");\n        mealOne.showItems();\n        System.out.println(\"总花费：\"+mealOne.getCost());\n        Meal mealTwo = mealBuilder.MealTwo();\n        System.out.println(\"套餐二\");\n        mealTwo.showItems();\n        System.out.println(\"总花费：\"+mealTwo.getCost());\n    }\n}\n```\n\n### 原型模式\n\n> 目的：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。\n>\n> 主要解决：在运行期建立和删除原型。\n>\n> 应用实例：1. 一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。2.在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。\n\n1. 创建一个实现了 *Cloneable* 接口的抽象类。\n\n> Shape.java\n\n```java\npublic abstract class Shape implements Cloneable{\n    private String id;\n    protected String type;\n\n    abstract void draw();\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    @Override\n    public Object clone(){\n        Object clone = null;\n        try {\n            clone = super.clone();\n        } catch (CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n        return clone;\n    }\n}\n```\n\n1. 创建扩展了上面抽象类的实体类。\n\n> Circle.java\n\n```java\npublic class Circle extends Shape {\n\n    public Circle(){\n        type = \"圆形\";\n    }\n\n    @Override\n    void draw() {\n        System.out.println(\"画一个圆形\");\n    }\n}\n```\n\n> Rectangle.java\n\n```java\npublic class Rectangle extends Shape {\n\n    public Rectangle(){\n        type = \"矩形\";\n    }\n\n    @Override\n    void draw() {\n        System.out.println(\"画一个矩形\");\n    }\n}\n```\n\n> Square.java\n\n```java\npublic class Square extends Shape {\n\n    public Square(){\n        type = \"正方形\";\n    }\n\n    @Override\n    void draw() {\n        System.out.println(\"画一个正方形\");\n    }\n}\n```\n\n1. 创建一个类，从数据库获取实体类，并把它们存储在一个 *Hashtable* 中。\n\n> ShapeCache.java\n\n```java\nimport java.util.Hashtable;\n\npublic class ShapeCache {\n    public static Hashtable<String,Shape> shapeMap = new Hashtable<>();\n    public static Shape getShape(String shapeId){\n        Shape cacheShape = shapeMap.get(shapeId);\n        return (Shape) cacheShape.clone();\n    }\n\n    // 对每种形状都运行数据库查询，并创建该形状\n    // shapeMap.put(shapeKey, shape);\n    // 例如，我们要添加三种形状\n    public static void loadCache(){\n        Circle circle = new Circle();\n        circle.setId(\"1\");\n        shapeMap.put(circle.getId(),circle);\n        Rectangle rectangle = new Rectangle();\n        rectangle.setId(\"2\");\n        shapeMap.put(rectangle.getId(),rectangle);\n        Square square = new Square();\n        square.setId(\"3\");\n        shapeMap.put(square.getId(),square);\n    }\n}\n```\n\n1. *PrototypePatternDemo* 使用 *ShapeCache* 类来获取存储在 *Hashtable* 中的形状的克隆。\n\n> PrototypePatternDemo.java\n\n```java\npublic class PrototypePatternDemo {\n public static void main(String[] args) {\n     ShapeCache.loadCache();\n     Shape circle = ShapeCache.getShape(\"1\");\n     System.out.println(\"形状：\"+circle.getType());\n     Shape rectangle = ShapeCache.getShape(\"2\");\n     System.out.println(\"形状：\"+rectangle.getType());\n     Shape square = ShapeCache.getShape(\"3\");\n     System.out.println(\"形状：\"+square.getType());\n }\n}\n```","source":"_posts/computer/course-3/create_pattern.md","raw":"---\ntitle: 创建型模式\ndate: 2020/12/19 11:45\ncategories:\n\t- [计算机,设计模式]\ntags:\n\t- 设计模式 \n---\n\n\n\n### 工厂模式\n\n> 目的：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。\n>\n> 解决：主要解决接口选择的问题。\n>\n> 应用实例：您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。\n\n1. 创建一个汽车接口\n\n> car.java\n\n```java\npublic interface Car {\n    void product();\n}\n```\n\n1. 创建实现汽车接口的实体类\n\n> AudiCar.java\n\n```java\npublic class AudiCar implements Car{\n    @Override\n    public void product() {\n        System.out.println(\"生产奥迪汽车\");\n    }\n}\n```\n\n> BenzCar.java\n\n```java\npublic class BenzCar implements Car{\n    @Override\n    public void product() {\n        System.out.println(\"生产奔驰汽车\");\n    }\n}\n```\n\n> AudiCar.java\n\n```java\npublic class BmwCar implements Car{\n    @Override\n    public void product() {\n        System.out.println(\"生产宝马汽车\");\n    }\n}\n```\n\n1. 创建一个工厂，生成基于给定信息的实体类的对象。\n\n> CarFactory.java\n\n```java\npublic class CarFactory {\n    //通过getCar获得汽车类型的对象\n    public Car getCar(String carType){\n        if (carType == null){\n            return null;\n        }\n        if (carType.equals(\"Audi\")){\n            return new AudiCar();\n        }\n        if (carType.equals(\"Bmw\")){\n            return new BmwCar();\n        }\n        if (carType.equals(\"Benz\")){\n            return new BenzCar();\n        }\n        return null;\n    }\n}\n```\n\n1. 使用该工厂，通过传递类型信息来获取实体类的对象。\n\n> FactoryPatternDemo\n\n```java\npublic class FactoryPatternDemo {\n    public static void main(String[] args) {\n      CarFactory carFactory = new CarFactory();\n      Car adui = carFactory.getCar(\"Audi\");\n      adui.product();\n      Car bmw = carFactory.getCar(\"Bmw\");\n      bmw.product();\n      Car benz = carFactory.getCar(\"Benz\");\n      benz.product();\n    }\n}\n```\n\n1. 输出结果\n\n> 生产奥迪汽车 生产宝马汽车 生产奔驰汽车\n\n### 抽象工厂模式\n\n> 目的：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n>\n> 解决：主要解决接口选择的问题。\n>\n> 应用实例：对于身上的穿搭，每一件成套的衣服都包括具体的衣服（比如长袖、短袖）、具体的裤子（比如牛仔裤、休闲裤），这些具体的衣服也都是衣服（抽象产品），这些具体的裤子也是裤子（另一种抽象产品）\n\n1. 创建一个形状接口\n\n> Shape.java\n\n```java\npublic interface Shape {\n    void draw();\n}\n```\n\n1. 创建实现形状接口的实体类\n\n> Rectangle.java\n\n```java\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"画一个矩形\");\n    }\n}\n```\n\n> Square.java\n\n```java\npublic class Square implements Shape{\n    @Override\n    public void draw() {\n        System.out.println(\"画一个正方形\");\n    }\n}\n```\n\n> Circle.java\n\n```java\npublic class Circle implements Shape{\n    @Override\n    public void draw() {\n        System.out.println(\"画一个圆形\");\n    }\n}\n```\n\n1. 创建一个颜色接口\n\n> Color.java\n\n```java\npublic interface Color {\n    void fill();\n}\n```\n\n1. 创建实现颜色接口的实体类\n\n> Blue.java\n\n```java\npublic class Blue implements Color {\n    @Override\n    public void fill() {\n        System.out.println(\"填充蓝色\");\n    }\n}\n```\n\n> Red.java\n\n```java\npublic class Red implements Color{\n    @Override\n    public void fill() {\n        System.out.println(\"填充红色\");\n    }\n}\n```\n\n> Green.java\n\n```java\npublic class Green implements Color{\n    @Override\n    public void fill() {\n        System.out.println(\"填充绿色\");\n    }\n}\n```\n\n1. 为 Color 和 Shape 对象创建抽象类来获取工厂\n\n> AbstractFactory.java\n\n```java\npublic abstract class AbstractFactory {\n    public abstract Color getColor(String color);\n    public abstract Shape getShape(String shape) ;\n}\n```\n\n1. 创建扩展了 AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。\n\n> ShapeFactory.java\n\n```java\npublic class ShapeFactory extends AbstractFactory {\n    @Override\n    public Color getColor(String color) {\n        return null;\n    }\n    @Override\n    public Shape getShape(String shape) {\n        if (null == shape){\n            return null;\n        }\n        else if (\"Circle\".equals(shape)){\n            return new Circle();\n        }\n        else if (\"Square\".equals(shape)){\n            return new Square();\n        }\n        else if (\"Rectangle\".equals(shape)){\n            return new Rectangle();\n        }\n        return null;\n    }\n}\n```\n\n> ColorFactory.java\n\n```java\npublic class ColorFactory extends AbstractFactory {\n    @Override\n    public Color getColor(String color) {\n        if (null == color){\n            return null;\n        }\n        else if (\"Red\".equals(color)){\n            return new Red();\n        }\n        else if(\"Blue\".equals(color)){\n            return new Blue();\n        }\n        else if (\"Green\".equals(color)){\n            return new Green();\n        }\n        return null;\n    }\n    @Override\n    public Shape getShape(String shape) {\n        return null;\n    }\n}\n```\n\n1. 创建一个工厂创造器/生成器类，通过传递形状或颜色信息来获取工厂。\n\n> FactoryProducer.java\n\n```java\npublic class FactoryProducer {\n    public static AbstractFactory getFactory(String choice){\n        if (\"Shape\".equals(choice)){\n            return new ShapeFactory();\n        }\n        else if (\"Color\".equals(choice)){\n            return new ColorFactory();\n        }\n        return null;\n    }\n}\n```\n\n1. ​\t使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。\n\n> AbstractFactoryPatternDemo.java\n\n```java\npublic class AbstractFactoryPatternDemo {\n    public static void main(String[] args) {\n        //获取形状工厂\n        AbstractFactory shapeFactory = FactoryProducer.getFactory(\"Shape\");\n        //获取形状为Circle的对象\n        Shape circle = shapeFactory.getShape(\"Circle\");\n        circle.draw();\n        //获取形状为Rectangle的对象\n        Shape rectangle = shapeFactory.getShape(\"Rectangle\");\n        rectangle.draw();\n        //获取形状为Square的对象\n        Shape square = shapeFactory.getShape(\"Square\");\n        square.draw();\n        //获取颜色工厂\n        AbstractFactory colorFactory = FactoryProducer.getFactory(\"Color\");\n        //获取颜色为Red的对象\n        Color red = colorFactory.getColor(\"Red\");\n        red.fill();\n        //获取颜色为Blue的对象\n        Color blue = colorFactory.getColor(\"Blue\");\n        blue.fill();\n        //获取颜色为Green的对象\n        Color green = colorFactory.getColor(\"Green\");\n        green.fill();\n    }\n}\n```\n\n1. 输出结果\n\n> 画一个圆形 画一个矩形 画一个正方形 填充红色 填充蓝色 填充绿色\n\n### 单例模式\n\n> 目的：保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n>\n> 解决：一个全局使用的类频繁地创建与销毁。\n>\n> 应用实例：Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。\n\n1. 懒汉式，线程不安全\n\n> 描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。 这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton (){}\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n1. 懒汉式，线程安全\n\n> 描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。\n>\n> 优点：第一次调用才初始化，避免内存浪费。\n>\n> 缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。\n>\n> getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。\n\n```java\npublic class Singleton {\n    private static Singleton instance;\n    private Singleton (){}\n    public static synchronized Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n1. 饿汉式\n\n> 描述：这种方式比较常用，但容易产生垃圾对象。\n>\n> 优点：没有加锁，执行效率会提高。\n>\n> 缺点：类加载时就初始化，浪费内存。\n>\n> 它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。\n\n```java\npublic class Singleton {\n    private static Singleton instance = new Singleton();\n    private Singleton (){}\n    public static Singleton getInstance() {\n        return instance;\n    }\n}\n```\n\n1. 双检锁/双重校验锁（DCL，即 double-checked locking）\n\n> 描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。 getInstance() 的性能对应用程序很关键。\n\n```java\npublic class Singleton {\n    private volatile static Singleton singleton;\n    private Singleton (){}\n    public static Singleton getSingleton() {\n        if (singleton == null) {\n            synchronized (Singleton.class) {\n                if (singleton == null) {\n                    singleton = new Singleton();\n                }\n            }\n        }\n        return singleton;\n    }\n}\n```\n\n1. 登记式/静态内部类\n\n> 描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。\n\n```java\npublic class Singleton {\n    private static class SingletonHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    private Singleton (){}\n    public static final Singleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n```\n\n1. 枚举\n\n> 描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。\n\n```java\npublic enum Singleton {\n    INSTANCE;\n    public void whateverMethod() {}\n}\n```\n\n**一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。**\n\n### 建造者模式\n\n> 目的：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。\n>\n> 解决：有时候面临着\"一个复杂对象\"的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。\n>\n> 应用实例：去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的\"套餐\"。\n\n1. 创建一个表示食物条目和食物包装的接口。\n\n> Item.java\n\n```java\npublic interface Item {\n    public String name();\n    public Packing packing();\n    public float price();    \n}\n```\n\n> Packing.java\n\n```java\npublic interface Packing {\n    public String pack();\n}\n```\n\n1. 创建实现 Packing 接口的实体类。\n\n> Wrapper.java\n\n```java\npublic class Wrapper implements Packing {\n    @Override\n    public String pack() {\n        return \"纸质包装\";\n    }\n}\n```\n\n> Bottle.java\n\n```java\npublic class Bottle implements Packing {\n    @Override\n    public String pack() {\n        return \"瓶装\";\n    }\n}\n```\n\n1. 创建实现 Item 接口的抽象类，该类提供了默认的功能。\n\n> Burger.java\n\n```java\npublic abstract class Burger implements Item {\n    @Override\n    public Packing packing() {\n        return new Wrapper();\n    }\n\n    @Override\n    public abstract float price();\n}\n```\n\n> ColdDrink.java\n\n```java\npublic abstract class ColdDrink implements Item{\n    @Override\n    public Packing packing() {\n        return new Bottle();\n    }\n\n    @Override\n    public abstract float price();\n}\n```\n\n1. 创建扩展了 Burger 和 ColdDrink 的实体类。\n\n> VegBurger.java\n\n```java\npublic class VegBurger extends Burger{\n    @Override\n    public String name() {\n        return \"蔬菜汉堡\";\n    }\n\n    @Override\n    public float price() {\n        return 12.5f;\n    }\n}\n```\n\n> ChickenBurger.java\n\n```java\npublic class ChickenBurger extends Burger {\n    @Override\n    public String name() {\n        return \"鸡肉汉堡\";\n    }\n\n    @Override\n    public float price() {\n        return 25.7f;\n    }\n}\n```\n\n> Sprite.java\n\n```java\npublic class Sprite extends ColdDrink {\n    @Override\n    public String name() {\n        return \"雪碧\";\n    }\n\n    @Override\n    public float price() {\n        return 3.5f;\n    }\n}\n```\n\n> Pepsi.java\n\n```java\npublic class Pepsi extends ColdDrink {\n    @Override\n    public String name() {\n        return \"可乐\";\n    }\n\n    @Override\n    public float price() {\n        return 3.6f;\n    }\n}\n```\n\n1. 创建一个 Meal 类，带有上面定义的 Item 对象。\n\n> Meal.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Meal {\n    public List<Item> items = new ArrayList<>();\n    public void addItem(Item item){\n        items.add(item);\n    }\n    public float getCost(){\n        float cost = 0.0f;\n        for (Item item : items) {\n            cost += item.price();\n        }\n        return cost;\n    }\n    public void showItems(){\n        for (Item item : items){\n            System.out.print(\"食物：\"+item.name());\n            System.out.print(\",包装：\"+item.packing().pack());\n            System.out.println(\",价格：\"+item.price());\n        }\n    }\n}\n```\n\n1. 创建一个 MealBuilder 类，实际的 builder 类负责创建 Meal 对象。\n\n> MealBuilder.java\n\n```java\npublic class MealBuilder {\n    public Meal MealOne(){\n        Meal meal = new Meal();\n        meal.addItem(new VegBurger());\n        meal.addItem(new Pepsi());\n        return meal;\n    }\n    public Meal MealTwo(){\n        Meal meal = new Meal();\n        meal.addItem(new ChickenBurger());\n        meal.addItem(new Sprite());\n        return meal;\n    }\n}\n```\n\n1. BuiderPatternDemo 使用 MealBuider 来演示建造者模式（Builder Pattern）。\n\n> BuilderPatternDemo.java\n\n```java\npublic class BuilderPatternDemo {\n    public static void main(String[] args) {\n        MealBuilder mealBuilder = new MealBuilder();\n        Meal mealOne = mealBuilder.MealOne();\n        System.out.println(\"套餐一\");\n        mealOne.showItems();\n        System.out.println(\"总花费：\"+mealOne.getCost());\n        Meal mealTwo = mealBuilder.MealTwo();\n        System.out.println(\"套餐二\");\n        mealTwo.showItems();\n        System.out.println(\"总花费：\"+mealTwo.getCost());\n    }\n}\n```\n\n### 原型模式\n\n> 目的：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。\n>\n> 主要解决：在运行期建立和删除原型。\n>\n> 应用实例：1. 一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。2.在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。\n\n1. 创建一个实现了 *Cloneable* 接口的抽象类。\n\n> Shape.java\n\n```java\npublic abstract class Shape implements Cloneable{\n    private String id;\n    protected String type;\n\n    abstract void draw();\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    @Override\n    public Object clone(){\n        Object clone = null;\n        try {\n            clone = super.clone();\n        } catch (CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n        return clone;\n    }\n}\n```\n\n1. 创建扩展了上面抽象类的实体类。\n\n> Circle.java\n\n```java\npublic class Circle extends Shape {\n\n    public Circle(){\n        type = \"圆形\";\n    }\n\n    @Override\n    void draw() {\n        System.out.println(\"画一个圆形\");\n    }\n}\n```\n\n> Rectangle.java\n\n```java\npublic class Rectangle extends Shape {\n\n    public Rectangle(){\n        type = \"矩形\";\n    }\n\n    @Override\n    void draw() {\n        System.out.println(\"画一个矩形\");\n    }\n}\n```\n\n> Square.java\n\n```java\npublic class Square extends Shape {\n\n    public Square(){\n        type = \"正方形\";\n    }\n\n    @Override\n    void draw() {\n        System.out.println(\"画一个正方形\");\n    }\n}\n```\n\n1. 创建一个类，从数据库获取实体类，并把它们存储在一个 *Hashtable* 中。\n\n> ShapeCache.java\n\n```java\nimport java.util.Hashtable;\n\npublic class ShapeCache {\n    public static Hashtable<String,Shape> shapeMap = new Hashtable<>();\n    public static Shape getShape(String shapeId){\n        Shape cacheShape = shapeMap.get(shapeId);\n        return (Shape) cacheShape.clone();\n    }\n\n    // 对每种形状都运行数据库查询，并创建该形状\n    // shapeMap.put(shapeKey, shape);\n    // 例如，我们要添加三种形状\n    public static void loadCache(){\n        Circle circle = new Circle();\n        circle.setId(\"1\");\n        shapeMap.put(circle.getId(),circle);\n        Rectangle rectangle = new Rectangle();\n        rectangle.setId(\"2\");\n        shapeMap.put(rectangle.getId(),rectangle);\n        Square square = new Square();\n        square.setId(\"3\");\n        shapeMap.put(square.getId(),square);\n    }\n}\n```\n\n1. *PrototypePatternDemo* 使用 *ShapeCache* 类来获取存储在 *Hashtable* 中的形状的克隆。\n\n> PrototypePatternDemo.java\n\n```java\npublic class PrototypePatternDemo {\n public static void main(String[] args) {\n     ShapeCache.loadCache();\n     Shape circle = ShapeCache.getShape(\"1\");\n     System.out.println(\"形状：\"+circle.getType());\n     Shape rectangle = ShapeCache.getShape(\"2\");\n     System.out.println(\"形状：\"+rectangle.getType());\n     Shape square = ShapeCache.getShape(\"3\");\n     System.out.println(\"形状：\"+square.getType());\n }\n}\n```","slug":"computer/course-3/create_pattern","published":1,"updated":"2020-12-19T04:00:35.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg8v003gb0ut3hck24g8","content":"<h3 id=\"工厂模式\"><a class=\"anchor\" href=\"#工厂模式\">#</a> 工厂模式</h3>\n<blockquote>\n<p>目的：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>\n<p>解决：主要解决接口选择的问题。</p>\n<p>应用实例：您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。</p>\n</blockquote>\n<ol>\n<li>创建一个汽车接口</li>\n</ol>\n<blockquote>\n<p>car.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建实现汽车接口的实体类</li>\n</ol>\n<blockquote>\n<p>AudiCar.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AudiCar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产奥迪汽车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>BenzCar.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BenzCar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产奔驰汽车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>AudiCar.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BmwCar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产宝马汽车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个工厂，生成基于给定信息的实体类的对象。</li>\n</ol>\n<blockquote>\n<p>CarFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CarFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 通过 getCar 获得汽车类型的对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> carType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carType <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carType<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Audi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudiCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carType<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bmw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BmwCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carType<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Benz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BenzCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>使用该工厂，通过传递类型信息来获取实体类的对象。</li>\n</ol>\n<blockquote>\n<p>FactoryPatternDemo</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token class-name\">CarFactory</span> carFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token class-name\">Car</span> adui <span class=\"token operator\">=</span> carFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Audi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      adui<span class=\"token punctuation\">.</span><span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token class-name\">Car</span> bmw <span class=\"token operator\">=</span> carFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bmw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      bmw<span class=\"token punctuation\">.</span><span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token class-name\">Car</span> benz <span class=\"token operator\">=</span> carFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Benz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      benz<span class=\"token punctuation\">.</span><span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>生产奥迪汽车 生产宝马汽车 生产奔驰汽车</p>\n</blockquote>\n<h3 id=\"抽象工厂模式\"><a class=\"anchor\" href=\"#抽象工厂模式\">#</a> 抽象工厂模式</h3>\n<blockquote>\n<p>目的：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n<p>解决：主要解决接口选择的问题。</p>\n<p>应用实例：对于身上的穿搭，每一件成套的衣服都包括具体的衣服（比如长袖、短袖）、具体的裤子（比如牛仔裤、休闲裤），这些具体的衣服也都是衣服（抽象产品），这些具体的裤子也是裤子（另一种抽象产品）</p>\n</blockquote>\n<ol>\n<li>创建一个形状接口</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建实现形状接口的实体类</li>\n</ol>\n<blockquote>\n<p>Rectangle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个矩形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Square.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个正方形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个圆形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个颜色接口</li>\n</ol>\n<blockquote>\n<p>Color.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建实现颜色接口的实体类</li>\n</ol>\n<blockquote>\n<p>Blue.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Blue</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"填充蓝色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Red.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Red</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"填充红色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Green.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Green</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"填充绿色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>为 Color 和 Shape 对象创建抽象类来获取工厂</li>\n</ol>\n<blockquote>\n<p>AbstractFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Color</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Shape</span> <span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建扩展了 AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。</li>\n</ol>\n<blockquote>\n<p>ShapeFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Color</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span> <span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Circle\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Square\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Rectangle\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ColorFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Color</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Red</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blue\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Green\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Green</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span> <span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个工厂创造器 / 生成器类，通过传递形状或颜色信息来获取工厂。</li>\n</ol>\n<blockquote>\n<p>FactoryProducer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryProducer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AbstractFactory</span> <span class=\"token function\">getFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Shape\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShapeFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Color\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ColorFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>​\t使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。</li>\n</ol>\n<blockquote>\n<p>AbstractFactoryPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractFactoryPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取形状工厂</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AbstractFactory</span> shapeFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">FactoryProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shape\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 获取形状为 Circle 的对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Shape</span> circle <span class=\"token operator\">=</span> shapeFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Circle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取形状为 Rectangle 的对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Shape</span> rectangle <span class=\"token operator\">=</span> shapeFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rectangle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 获取形状为 Square 的对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Shape</span> square <span class=\"token operator\">=</span> shapeFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Square\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        square<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 获取颜色工厂</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">AbstractFactory</span> colorFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">FactoryProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Color\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 获取颜色为 Red 的对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Color</span> red <span class=\"token operator\">=</span> colorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        red<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 获取颜色为 Blue 的对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Color</span> blue <span class=\"token operator\">=</span> colorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        blue<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 获取颜色为 Green 的对象</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Color</span> green <span class=\"token operator\">=</span> colorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Green\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        green<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>画一个圆形 画一个矩形 画一个正方形 填充红色 填充蓝色 填充绿色</p>\n</blockquote>\n<h3 id=\"单例模式\"><a class=\"anchor\" href=\"#单例模式\">#</a> 单例模式</h3>\n<blockquote>\n<p>目的：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p>解决：一个全局使用的类频繁地创建与销毁。</p>\n<p>应用实例：Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</p>\n</blockquote>\n<ol>\n<li>懒汉式，线程不安全</li>\n</ol>\n<blockquote>\n<p>描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。 这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>懒汉式，线程安全</li>\n</ol>\n<blockquote>\n<p>描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。</p>\n<p>优点：第一次调用才初始化，避免内存浪费。</p>\n<p>缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。</p>\n<p>getInstance () 的性能对应用程序不是很关键（该方法使用不太频繁）。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>饿汉式</li>\n</ol>\n<blockquote>\n<p>描述：这种方式比较常用，但容易产生垃圾对象。</p>\n<p>优点：没有加锁，执行效率会提高。</p>\n<p>缺点：类加载时就初始化，浪费内存。</p>\n<p>它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>双检锁 / 双重校验锁（DCL，即 double-checked locking）</li>\n</ol>\n<blockquote>\n<p>描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。 getInstance () 的性能对应用程序很关键。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>登记式 / 静态内部类</li>\n</ol>\n<blockquote>\n<p>描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonHolder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SingletonHolder</span><span class=\"token punctuation\">.</span>INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>枚举</li>\n</ol>\n<blockquote>\n<p>描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whateverMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</strong></p>\n<h3 id=\"建造者模式\"><a class=\"anchor\" href=\"#建造者模式\">#</a> 建造者模式</h3>\n<blockquote>\n<p>目的：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p>\n<p>解决：有时候面临着 &quot;一个复杂对象&quot; 的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p>\n<p>应用实例：去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的 &quot;套餐&quot;。</p>\n</blockquote>\n<ol>\n<li>创建一个表示食物条目和食物包装的接口。</li>\n</ol>\n<blockquote>\n<p>Item.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Packing</span> <span class=\"token function\">packing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Packing.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Packing</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建实现 Packing 接口的实体类。</li>\n</ol>\n<blockquote>\n<p>Wrapper.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Wrapper</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Packing</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"纸质包装\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Bottle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bottle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Packing</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"瓶装\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建实现 Item 接口的抽象类，该类提供了默认的功能。</li>\n</ol>\n<blockquote>\n<p>Burger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Burger</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Packing</span> <span class=\"token function\">packing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ColdDrink.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColdDrink</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Packing</span> <span class=\"token function\">packing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bottle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建扩展了 Burger 和 ColdDrink 的实体类。</li>\n</ol>\n<blockquote>\n<p>VegBurger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VegBurger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Burger</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"蔬菜汉堡\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">12.5f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ChickenBurger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChickenBurger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Burger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"鸡肉汉堡\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">25.7f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Sprite.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sprite</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ColdDrink</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"雪碧\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">3.5f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Pepsi.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pepsi</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ColdDrink</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"可乐\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">3.6f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个 Meal 类，带有上面定义的 Item 对象。</li>\n</ol>\n<blockquote>\n<p>Meal.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        items<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">float</span> cost <span class=\"token operator\">=</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item <span class=\"token operator\">:</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            cost <span class=\"token operator\">+=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> cost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item <span class=\"token operator\">:</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"食物：\"</span><span class=\"token operator\">+</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",包装：\"</span><span class=\"token operator\">+</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">packing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",价格：\"</span><span class=\"token operator\">+</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个 MealBuilder 类，实际的 builder 类负责创建 Meal 对象。</li>\n</ol>\n<blockquote>\n<p>MealBuilder.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MealBuilder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Meal</span> <span class=\"token class-name\">MealOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Meal</span> meal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Meal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        meal<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VegBurger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        meal<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pepsi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> meal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Meal</span> <span class=\"token class-name\">MealTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Meal</span> meal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Meal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        meal<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChickenBurger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        meal<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Sprite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> meal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>BuiderPatternDemo 使用 MealBuider 来演示建造者模式（Builder Pattern）。</li>\n</ol>\n<blockquote>\n<p>BuilderPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BuilderPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">MealBuilder</span> mealBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MealBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Meal</span> mealOne <span class=\"token operator\">=</span> mealBuilder<span class=\"token punctuation\">.</span><span class=\"token class-name\">MealOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套餐一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        mealOne<span class=\"token punctuation\">.</span><span class=\"token function\">showItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总花费：\"</span><span class=\"token operator\">+</span>mealOne<span class=\"token punctuation\">.</span><span class=\"token function\">getCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Meal</span> mealTwo <span class=\"token operator\">=</span> mealBuilder<span class=\"token punctuation\">.</span><span class=\"token class-name\">MealTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套餐二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        mealTwo<span class=\"token punctuation\">.</span><span class=\"token function\">showItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总花费：\"</span><span class=\"token operator\">+</span>mealTwo<span class=\"token punctuation\">.</span><span class=\"token function\">getCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"原型模式\"><a class=\"anchor\" href=\"#原型模式\">#</a> 原型模式</h3>\n<blockquote>\n<p>目的：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>\n<p>主要解决：在运行期建立和删除原型。</p>\n<p>应用实例：1. 一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。2. 在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。</p>\n</blockquote>\n<ol>\n<li>创建一个实现了 <em>Cloneable</em> 接口的抽象类。</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Object</span> clone <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            clone <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CloneNotSupportedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建扩展了上面抽象类的实体类。</li>\n</ol>\n<blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        type <span class=\"token operator\">=</span> <span class=\"token string\">\"圆形\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个圆形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Rectangle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        type <span class=\"token operator\">=</span> <span class=\"token string\">\"矩形\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个矩形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Square.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        type <span class=\"token operator\">=</span> <span class=\"token string\">\"正方形\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个正方形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个类，从数据库获取实体类，并把它们存储在一个 <em>Hashtable</em> 中。</li>\n</ol>\n<blockquote>\n<p>ShapeCache.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Hashtable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeCache</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">></span></span> shapeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Shape</span> <span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> shapeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Shape</span> cacheShape <span class=\"token operator\">=</span> shapeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>shapeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">)</span> cacheShape<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 对每种形状都运行数据库查询，并创建该形状</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// shapeMap.put(shapeKey, shape);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 例如，我们要添加三种形状</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">loadCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        circle<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        shapeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>circle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Rectangle</span> rectangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        shapeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rectangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Square</span> square <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        square<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        shapeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li><em>PrototypePatternDemo</em> 使用 <em>ShapeCache</em> 类来获取存储在 <em>Hashtable</em> 中的形状的克隆。</li>\n</ol>\n<blockquote>\n<p>PrototypePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrototypePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token class-name\">ShapeCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token class-name\">Shape</span> circle <span class=\"token operator\">=</span> <span class=\"token class-name\">ShapeCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"形状：\"</span><span class=\"token operator\">+</span>circle<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token class-name\">Shape</span> rectangle <span class=\"token operator\">=</span> <span class=\"token class-name\">ShapeCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"形状：\"</span><span class=\"token operator\">+</span>rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token class-name\">Shape</span> square <span class=\"token operator\">=</span> <span class=\"token class-name\">ShapeCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"形状：\"</span><span class=\"token operator\">+</span>square<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>","site":{"data":{}},"length":11731,"excerpt":"","more":"<h3 id=\"工厂模式\"><a class=\"anchor\" href=\"#工厂模式\">#</a> 工厂模式</h3>\n<blockquote>\n<p>目的：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>\n<p>解决：主要解决接口选择的问题。</p>\n<p>应用实例：您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。</p>\n</blockquote>\n<ol>\n<li>创建一个汽车接口</li>\n</ol>\n<blockquote>\n<p>car.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建实现汽车接口的实体类</li>\n</ol>\n<blockquote>\n<p>AudiCar.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AudiCar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产奥迪汽车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>BenzCar.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BenzCar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产奔驰汽车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>AudiCar.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BmwCar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产宝马汽车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个工厂，生成基于给定信息的实体类的对象。</li>\n</ol>\n<blockquote>\n<p>CarFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CarFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 通过 getCar 获得汽车类型的对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> carType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carType <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carType<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Audi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudiCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carType<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bmw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BmwCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>carType<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Benz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BenzCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>使用该工厂，通过传递类型信息来获取实体类的对象。</li>\n</ol>\n<blockquote>\n<p>FactoryPatternDemo</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token class-name\">CarFactory</span> carFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CarFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token class-name\">Car</span> adui <span class=\"token operator\">=</span> carFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Audi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      adui<span class=\"token punctuation\">.</span><span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token class-name\">Car</span> bmw <span class=\"token operator\">=</span> carFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bmw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      bmw<span class=\"token punctuation\">.</span><span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token class-name\">Car</span> benz <span class=\"token operator\">=</span> carFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Benz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      benz<span class=\"token punctuation\">.</span><span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>生产奥迪汽车 生产宝马汽车 生产奔驰汽车</p>\n</blockquote>\n<h3 id=\"抽象工厂模式\"><a class=\"anchor\" href=\"#抽象工厂模式\">#</a> 抽象工厂模式</h3>\n<blockquote>\n<p>目的：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n<p>解决：主要解决接口选择的问题。</p>\n<p>应用实例：对于身上的穿搭，每一件成套的衣服都包括具体的衣服（比如长袖、短袖）、具体的裤子（比如牛仔裤、休闲裤），这些具体的衣服也都是衣服（抽象产品），这些具体的裤子也是裤子（另一种抽象产品）</p>\n</blockquote>\n<ol>\n<li>创建一个形状接口</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建实现形状接口的实体类</li>\n</ol>\n<blockquote>\n<p>Rectangle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个矩形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Square.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个正方形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个圆形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个颜色接口</li>\n</ol>\n<blockquote>\n<p>Color.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建实现颜色接口的实体类</li>\n</ol>\n<blockquote>\n<p>Blue.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Blue</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"填充蓝色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Red.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Red</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"填充红色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Green.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Green</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"填充绿色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>为 Color 和 Shape 对象创建抽象类来获取工厂</li>\n</ol>\n<blockquote>\n<p>AbstractFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Color</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">Shape</span> <span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建扩展了 AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。</li>\n</ol>\n<blockquote>\n<p>ShapeFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Color</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span> <span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Circle\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Square\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Rectangle\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ColorFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorFactory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Color</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Red</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blue\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Green\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Green</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Shape</span> <span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个工厂创造器 / 生成器类，通过传递形状或颜色信息来获取工厂。</li>\n</ol>\n<blockquote>\n<p>FactoryProducer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FactoryProducer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AbstractFactory</span> <span class=\"token function\">getFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Shape\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShapeFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Color\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ColorFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>​\t使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。</li>\n</ol>\n<blockquote>\n<p>AbstractFactoryPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractFactoryPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取形状工厂</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AbstractFactory</span> shapeFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">FactoryProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shape\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 获取形状为 Circle 的对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Shape</span> circle <span class=\"token operator\">=</span> shapeFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Circle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取形状为 Rectangle 的对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Shape</span> rectangle <span class=\"token operator\">=</span> shapeFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rectangle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 获取形状为 Square 的对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Shape</span> square <span class=\"token operator\">=</span> shapeFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Square\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        square<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 获取颜色工厂</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">AbstractFactory</span> colorFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">FactoryProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Color\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 获取颜色为 Red 的对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Color</span> red <span class=\"token operator\">=</span> colorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        red<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 获取颜色为 Blue 的对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Color</span> blue <span class=\"token operator\">=</span> colorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        blue<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 获取颜色为 Green 的对象</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Color</span> green <span class=\"token operator\">=</span> colorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Green\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        green<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>画一个圆形 画一个矩形 画一个正方形 填充红色 填充蓝色 填充绿色</p>\n</blockquote>\n<h3 id=\"单例模式\"><a class=\"anchor\" href=\"#单例模式\">#</a> 单例模式</h3>\n<blockquote>\n<p>目的：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>\n<p>解决：一个全局使用的类频繁地创建与销毁。</p>\n<p>应用实例：Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</p>\n</blockquote>\n<ol>\n<li>懒汉式，线程不安全</li>\n</ol>\n<blockquote>\n<p>描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。 这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>懒汉式，线程安全</li>\n</ol>\n<blockquote>\n<p>描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。</p>\n<p>优点：第一次调用才初始化，避免内存浪费。</p>\n<p>缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。</p>\n<p>getInstance () 的性能对应用程序不是很关键（该方法使用不太频繁）。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>饿汉式</li>\n</ol>\n<blockquote>\n<p>描述：这种方式比较常用，但容易产生垃圾对象。</p>\n<p>优点：没有加锁，执行效率会提高。</p>\n<p>缺点：类加载时就初始化，浪费内存。</p>\n<p>它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>双检锁 / 双重校验锁（DCL，即 double-checked locking）</li>\n</ol>\n<blockquote>\n<p>描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。 getInstance () 的性能对应用程序很关键。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>登记式 / 静态内部类</li>\n</ol>\n<blockquote>\n<p>描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonHolder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SingletonHolder</span><span class=\"token punctuation\">.</span>INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>枚举</li>\n</ol>\n<blockquote>\n<p>描述：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">whateverMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</strong></p>\n<h3 id=\"建造者模式\"><a class=\"anchor\" href=\"#建造者模式\">#</a> 建造者模式</h3>\n<blockquote>\n<p>目的：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p>\n<p>解决：有时候面临着 &quot;一个复杂对象&quot; 的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p>\n<p>应用实例：去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的 &quot;套餐&quot;。</p>\n</blockquote>\n<ol>\n<li>创建一个表示食物条目和食物包装的接口。</li>\n</ol>\n<blockquote>\n<p>Item.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Packing</span> <span class=\"token function\">packing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Packing.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Packing</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建实现 Packing 接口的实体类。</li>\n</ol>\n<blockquote>\n<p>Wrapper.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Wrapper</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Packing</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"纸质包装\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Bottle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bottle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Packing</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"瓶装\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建实现 Item 接口的抽象类，该类提供了默认的功能。</li>\n</ol>\n<blockquote>\n<p>Burger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Burger</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Packing</span> <span class=\"token function\">packing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Wrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ColdDrink.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColdDrink</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Packing</span> <span class=\"token function\">packing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bottle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建扩展了 Burger 和 ColdDrink 的实体类。</li>\n</ol>\n<blockquote>\n<p>VegBurger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VegBurger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Burger</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"蔬菜汉堡\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">12.5f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ChickenBurger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChickenBurger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Burger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"鸡肉汉堡\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">25.7f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Sprite.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sprite</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ColdDrink</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"雪碧\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">3.5f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Pepsi.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pepsi</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ColdDrink</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"可乐\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">3.6f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个 Meal 类，带有上面定义的 Item 对象。</li>\n</ol>\n<blockquote>\n<p>Meal.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        items<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">float</span> cost <span class=\"token operator\">=</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item <span class=\"token operator\">:</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            cost <span class=\"token operator\">+=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> cost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item <span class=\"token operator\">:</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"食物：\"</span><span class=\"token operator\">+</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",包装：\"</span><span class=\"token operator\">+</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">packing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",价格：\"</span><span class=\"token operator\">+</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个 MealBuilder 类，实际的 builder 类负责创建 Meal 对象。</li>\n</ol>\n<blockquote>\n<p>MealBuilder.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MealBuilder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Meal</span> <span class=\"token class-name\">MealOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Meal</span> meal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Meal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        meal<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VegBurger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        meal<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pepsi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> meal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Meal</span> <span class=\"token class-name\">MealTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Meal</span> meal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Meal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        meal<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChickenBurger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        meal<span class=\"token punctuation\">.</span><span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Sprite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> meal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>BuiderPatternDemo 使用 MealBuider 来演示建造者模式（Builder Pattern）。</li>\n</ol>\n<blockquote>\n<p>BuilderPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BuilderPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">MealBuilder</span> mealBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MealBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Meal</span> mealOne <span class=\"token operator\">=</span> mealBuilder<span class=\"token punctuation\">.</span><span class=\"token class-name\">MealOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套餐一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        mealOne<span class=\"token punctuation\">.</span><span class=\"token function\">showItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总花费：\"</span><span class=\"token operator\">+</span>mealOne<span class=\"token punctuation\">.</span><span class=\"token function\">getCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Meal</span> mealTwo <span class=\"token operator\">=</span> mealBuilder<span class=\"token punctuation\">.</span><span class=\"token class-name\">MealTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"套餐二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        mealTwo<span class=\"token punctuation\">.</span><span class=\"token function\">showItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总花费：\"</span><span class=\"token operator\">+</span>mealTwo<span class=\"token punctuation\">.</span><span class=\"token function\">getCost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"原型模式\"><a class=\"anchor\" href=\"#原型模式\">#</a> 原型模式</h3>\n<blockquote>\n<p>目的：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>\n<p>主要解决：在运行期建立和删除原型。</p>\n<p>应用实例：1. 一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。2. 在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。</p>\n</blockquote>\n<ol>\n<li>创建一个实现了 <em>Cloneable</em> 接口的抽象类。</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Object</span> clone <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            clone <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CloneNotSupportedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建扩展了上面抽象类的实体类。</li>\n</ol>\n<blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        type <span class=\"token operator\">=</span> <span class=\"token string\">\"圆形\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个圆形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Rectangle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        type <span class=\"token operator\">=</span> <span class=\"token string\">\"矩形\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个矩形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Square.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        type <span class=\"token operator\">=</span> <span class=\"token string\">\"正方形\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个正方形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>创建一个类，从数据库获取实体类，并把它们存储在一个 <em>Hashtable</em> 中。</li>\n</ol>\n<blockquote>\n<p>ShapeCache.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Hashtable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeCache</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">></span></span> shapeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Shape</span> <span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> shapeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Shape</span> cacheShape <span class=\"token operator\">=</span> shapeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>shapeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">)</span> cacheShape<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 对每种形状都运行数据库查询，并创建该形状</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// shapeMap.put(shapeKey, shape);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 例如，我们要添加三种形状</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">loadCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        circle<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        shapeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>circle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Rectangle</span> rectangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        shapeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rectangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Square</span> square <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        square<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        shapeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li><em>PrototypePatternDemo</em> 使用 <em>ShapeCache</em> 类来获取存储在 <em>Hashtable</em> 中的形状的克隆。</li>\n</ol>\n<blockquote>\n<p>PrototypePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrototypePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token class-name\">ShapeCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token class-name\">Shape</span> circle <span class=\"token operator\">=</span> <span class=\"token class-name\">ShapeCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"形状：\"</span><span class=\"token operator\">+</span>circle<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token class-name\">Shape</span> rectangle <span class=\"token operator\">=</span> <span class=\"token class-name\">ShapeCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"形状：\"</span><span class=\"token operator\">+</span>rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token class-name\">Shape</span> square <span class=\"token operator\">=</span> <span class=\"token class-name\">ShapeCache</span><span class=\"token punctuation\">.</span><span class=\"token function\">getShape</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"形状：\"</span><span class=\"token operator\">+</span>square<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>"},{"title":"结构型模式","date":"2020-12-19T03:47:00.000Z","_content":"\n### 适配器模式\n\n> 目的：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n>\n> 主要解决：主要解决在软件系统中，常常要将一些\"现存的对象\"放到新的环境中，而新环境要求的接口是现对象不能满足的。\n>\n> 应用实例：音频播放器可以播放mp3的音频文件，媒体播放器可以播放mp4和vlc格式的文件，我们想要音频播放器也可以播放mp4和vlc格式的文件，就需要适配器。\n\n1. 为媒体播放器和更高级的媒体播放器创建接口。\n\n>MediaPlayer.java\n\n```java\npublic interface MediaPlayer {\n    void play(String audioType,String fileName);\n}\n```\n\n>AdvancedMediaPlayer.java\n\n```java\npublic interface AdvancedMediaPlayer {\n    void playVlc(String fileName);\n    void playMp4(String fileName);\n}\n```\n\n2. 创建实现了 *AdvancedMediaPlayer* 接口的实体类。\n\n>Mp4Player.java\n\n```java\npublic class Mp4Player implements AdvancedMediaPlayer {\n    @Override\n    public void playVlc(String fileName) {\n\n    }\n\n    @Override\n    public void playMp4(String fileName) {\n        System.out.println(\"播放mp4文件，文件名：\"+fileName);\n    }\n}\n```\n\n>VlcPlayer.java\n\n```java\npublic class VlcPlayer implements AdvancedMediaPlayer {\n    @Override\n    public void playVlc(String fileName) {\n        System.out.println(\"播放vlc文件，文件名：\"+fileName);\n    }\n\n    @Override\n    public void playMp4(String fileName) {\n\n    }\n}\n```\n\n3. 创建实现了 *MediaPlayer* 接口的适配器类。\n\n>MediaAdapter.java\n\n```java\npublic class MediaAdapter implements MediaPlayer {\n\n    AdvancedMediaPlayer advancedMediaPlayer;\n\n    public MediaAdapter(String audioType){\n        if (audioType.equalsIgnoreCase(\"vlc\")){\n            advancedMediaPlayer = new VlcPlayer();\n        }else if (audioType.equalsIgnoreCase(\"mp4\")){\n            advancedMediaPlayer = new Mp4Player();\n        }\n    }\n\n    @Override\n    public void play(String audioType, String fileName) {\n        if (audioType.equalsIgnoreCase(\"vlc\")){\n            advancedMediaPlayer.playVlc(fileName);\n        }else if (audioType.equalsIgnoreCase(\"mp4\")){\n            advancedMediaPlayer.playMp4(fileName);\n        }\n    }\n}\n```\n\n4. 创建实现了 *MediaPlayer* 接口的实体类。\n\n>AudioPlayer.java\n\n````java\npublic class AudioPlayer implements MediaPlayer {\n\n    MediaAdapter mediaAdapter;\n\n    @Override\n    public void play(String audioType, String fileName) {\n        //播放 mp3 音乐文件的内置支持\n        if (audioType.equalsIgnoreCase(\"mp3\")){\n            System.out.println(\"播放mp3文件，文件名：\"+fileName);\n        }\n        //mediaAdapter 提供了播放其他文件格式的支持\n        else if (audioType.equalsIgnoreCase(\"vlc\")){\n            mediaAdapter = new MediaAdapter(audioType);\n            mediaAdapter.play(audioType,fileName);\n        }else if (audioType.equalsIgnoreCase(\"mp4\")){\n            mediaAdapter = new MediaAdapter(audioType);\n            mediaAdapter.play(audioType,fileName);\n        }else {\n            System.out.println(\"不支持\"+audioType+\"文件\");\n        }\n    }\n}\n````\n\n5. 使用 AudioPlayer 来播放不同类型的音频格式。\n\n>AdapterPatternDemo.java\n\n```java\npublic class AdapterPatternDemo {\n    public static void main(String[] args) {\n        AudioPlayer audioPlayer = new AudioPlayer();\n\n        audioPlayer.play(\"mp3\",\"hello.mp3\");\n        audioPlayer.play(\"mp4\",\"world.mp4\");\n        audioPlayer.play(\"vlc\",\"hello world.vlc\");\n        audioPlayer.play(\"avi\",\"no.avi\");\n    }\n}\n```\n\n6. 输出结果\n\n>播放mp3文件，文件名：hello.mp3\n>播放mp4文件，文件名：world.mp4\n>播放vlc文件，文件名：hello world.vlc\n>不支持avi文件\n\n### 桥接模式\n\n> 意图：将抽象部分与实现部分分离，使它们都可以独立的变化。\n>\n> 主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活\n>\n> 应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。\n\n1. 创建桥接实现接口。\n\n>DrawAPI.java\n\n```java\npublic interface DrawAPI {\n    void drawCircle(int radius,int x,int y);\n}\n```\n\n2. 创建实现了 *DrawAPI* 接口的实体桥接实现类。\n\n> GreenCircle.java\n\n```java\npublic class GreenCircle implements DrawAPI {\n    @Override\n    public void drawCircle(int radius, int x, int y) {\n        System.out.println(\"画一个绿圆，半径：\"+radius+\"，x：\"+x+\"，y：\"+y);\n    }\n}\n```\n\n> RedCircle.java\n\n```java\npublic class RedCircle implements DrawAPI {\n    @Override\n    public void drawCircle(int radius, int x, int y) {\n        System.out.println(\"画一个红圆，半径：\"+radius+\"，x：\"+x+\"，y：\"+y);\n    }\n}\n```\n\n3. 使用 *DrawAPI* 接口创建抽象类 *Shape*。\n\n> Shape.java\n\n```java\npublic abstract class Shape {\n    protected DrawAPI drawAPI;\n    protected Shape(DrawAPI drawAPI){\n        this.drawAPI = drawAPI;\n    }\n    public abstract void draw();\n}\n```\n\n4. 创建实现了 *Shape* 抽象类的实体类。\n\n> Circle.java\n\n```java\npublic class Circle extends Shape {\n\n    private int x,y,radius;\n\n    public Circle(int x,int y,int radius,DrawAPI drawAPI){\n        super(drawAPI);\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n    }\n\n    @Override\n    public void draw() {\n        drawAPI.drawCircle(radius,x,y);\n    }\n}\n```\n\n5. 使用 *Shape* 和 *DrawAPI* 类画出不同颜色的圆。\n\n> BridgePatternDemo.java\n\n```java\npublic class BridgePatternDemo {\n    public static void main(String[] args) {\n        Circle redCircle = new Circle(100, 100, 10, new RedCircle());\n        Circle greenCircle = new Circle(100, 100, 10, new GreenCircle());\n        redCircle.draw();\n        greenCircle.draw();\n    }\n}\n```\n\n6. 输出结果\n\n>画一个红圆，半径：10，x：100，y：100\n>画一个绿圆，半径：10，x：100，y：100\n\n### 过滤器模式\n\n> 过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。\n\n1. 创建一个类，在该类上应用标准。\n\n> Person.java\n\n```java\npublic class Person {\n private String name;\n private String gender;\n private String maritalStatus;\n public Person(String name,String gender,String maritalStatus){\n     this.name = name;\n     this.gender = gender;\n     this.maritalStatus = maritalStatus;\n }\n\n public String getName() {\n     return name;\n }\n\n public String getGender() {\n     return gender;\n }\n\n public String getMaritalStatus() {\n     return maritalStatus;\n }\n}\n```\n\n2. 为标准（Criteria）创建一个接口。\n\n> Criteria.java\n\n```java\nimport java.util.List;\n\npublic interface Criteria {\n    public List<Person> meetCriteria(List<Person> persons);\n}\n```\n\n3. 创建实现了 *Criteria* 接口的实体类。\n\n>CriteriaMale.java\n\n```java\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class CriteriaMale implements Criteria {\n    @Override\n    public List<Person> meetCriteria(List<Person> persons) {\n        List<Person> malePersons = new LinkedList<>();\n        for (Person person : persons){\n            if (\"male\".equalsIgnoreCase(person.getGender())){\n                malePersons.add(person);\n            }\n        }\n        return malePersons;\n    }\n}\n```\n\n>CriteriaFemale.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CriteriaFemale implements Criteria {\n    @Override\n    public List<Person> meetCriteria(List<Person> persons) {\n        List<Person> femalePersons = new ArrayList<>();\n        for (Person person : persons){\n            if (\"female\".equalsIgnoreCase(person.getGender())){\n                femalePersons.add(person);\n            }\n        }\n        return femalePersons;\n    }\n}\n```\n\n>CriteriaSingle.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CriteriaSingle implements Criteria {\n    @Override\n    public List<Person> meetCriteria(List<Person> persons) {\n        List<Person> singlePersons = new ArrayList<>();\n        for (Person person : persons){\n            if (\"single\".equalsIgnoreCase(person.getMaritalStatus())){\n                singlePersons.add(person);\n            }\n        }\n        return singlePersons;\n    }\n}\n```\n\n>AndCriteria.java\n\n```java\nimport java.util.List;\n\npublic class AndCriteria implements Criteria {\n\n    private Criteria criteria;\n    private Criteria otherCriteria;\n\n    public AndCriteria(Criteria criteria,Criteria otherCriteria){\n        this.criteria = criteria;\n        this.otherCriteria = otherCriteria;\n    }\n\n    @Override\n    public List<Person> meetCriteria(List<Person> persons) {\n        List<Person> firstCriteria = criteria.meetCriteria(persons);\n        return otherCriteria.meetCriteria(firstCriteria);\n    }\n}\n```\n\n>OrCriteria.java\n\n```java\nimport java.util.List;\n\npublic class OrCriteria implements Criteria{\n\n    private Criteria criteria;\n    private Criteria otherCriteria;\n\n    public OrCriteria(Criteria criteria,Criteria otherCriteria){\n        this.criteria = criteria;\n        this.otherCriteria = otherCriteria;\n    }\n\n    @Override\n    public List<Person> meetCriteria(List<Person> persons) {\n        List<Person> firstCriteriaItems = criteria.meetCriteria(persons);\n        List<Person> otherCriteriaItems = otherCriteria.meetCriteria(persons);\n        for (Person person : otherCriteriaItems){\n            if (!firstCriteriaItems.contains(person)){\n                firstCriteriaItems.add(person);\n            }\n        }\n        return firstCriteriaItems;\n    }\n}\n```\n\n4. 使用不同的标准（Criteria）和它们的结合来过滤 *Person* 对象的列表。\n\n>CriteriaPatternDemo.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CriteriaPatternDemo {\n    public static void main(String[] args) {\n        List<Person> persons = new ArrayList<>();\n        persons.add(new Person(\"张三\",\"Male\", \"Single\"));\n        persons.add(new Person(\"李四\",\"Male\", \"Married\"));\n        persons.add(new Person(\"王五\",\"Female\", \"Married\"));\n        persons.add(new Person(\"赵六\",\"Female\", \"Single\"));\n        persons.add(new Person(\"赵七\",\"Male\", \"Single\"));\n        persons.add(new Person(\"赵八\",\"Male\", \"Single\"));\n\n        Criteria male = new CriteriaMale();\n        Criteria female = new CriteriaFemale();\n        Criteria single = new CriteriaSingle();\n        Criteria singleMale = new AndCriteria(single, male);\n        Criteria singleOrFemale = new OrCriteria(single, female);\n\n        System.out.println(\"男性: \");\n        printPersons(male.meetCriteria(persons));\n\n        System.out.println(\"女性: \");\n        printPersons(female.meetCriteria(persons));\n\n        System.out.println(\"单身男性: \");\n        printPersons(singleMale.meetCriteria(persons));\n\n        System.out.println(\"单身或者女性: \");\n        printPersons(singleOrFemale.meetCriteria(persons));\n    }\n\n    public static void printPersons(List<Person> persons){\n        for (Person person : persons) {\n            System.out.println(\"Person : [ Name : \" + person.getName()\n                               +\", Gender : \" + person.getGender()\n                               +\", Marital Status : \" + person.getMaritalStatus()\n                               +\" ]\");\n        }\n    }\n}\n```\n\n5. 输出结果\n\n>男性: \n>Person : [ Name : 张三, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 李四, Gender : Male, Marital Status : Married ]\n>Person : [ Name : 赵七, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 赵八, Gender : Male, Marital Status : Single ]\n>女性: \n>Person : [ Name : 王五, Gender : Female, Marital Status : Married ]\n>Person : [ Name : 赵六, Gender : Female, Marital Status : Single ]\n>单身女性: \n>Person : [ Name : 张三, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 赵七, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 赵八, Gender : Male, Marital Status : Single ]\n>单身或者女性: \n>Person : [ Name : 张三, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 赵六, Gender : Female, Marital Status : Single ]\n>Person : [ Name : 赵七, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 赵八, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 王五, Gender : Female, Marital Status : Married ]\n\n### 组合模式\n\n> 目的：将对象组合成树形结构以表示\"部分-整体\"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n>\n> 主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。\n>\n> 应用实例： 算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。\n>\n> 使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。\n\n1. 创建 *Employee* 类，该类带有 *Employee* 对象的列表。\n\n>Employee.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Employee {\n    private String name;\n    private String dept;\n    private int salary;\n    private List<Employee> subordinates;\n\n    public Employee(String name,String dept,int salary){\n        this.name = name;\n        this.dept = dept;\n        this.salary = salary;\n        subordinates = new ArrayList<>();\n    }\n\n    public void add(Employee e){\n        subordinates.add(e);\n    }\n\n    public void remove(Employee e){\n        subordinates.remove(e);\n    }\n\n    public List<Employee> getSubordinates(){\n        return subordinates;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee{\" +\n            \"name='\" + name + '\\'' +\n            \", dept='\" + dept + '\\'' +\n            \", salary=\" + salary +\n            '}';\n    }\n}\n```\n\n2. 使用 *Employee* 类来创建和打印员工的层次结构。\n\n> CompositePatternDemo.java\n\n```java\npublic class CompositePatternDemo {\n    public static void main(String[] args) {\n        Employee ceo = new Employee(\"张三\",\"CEO\",30000);\n        Employee headSales = new Employee(\"李四\",\"销售部主管\",20000);\n        Employee headPersons = new Employee(\"王五\",\"人事部主管\",20000);\n        Employee sale1 = new Employee(\"赵六\",\"销售职工\",10000);\n        Employee sale2 = new Employee(\"赵七\",\"销售职工\",10000);\n        Employee person1 = new Employee(\"赵八\",\"人事职工\",10000);\n        Employee person2 = new Employee(\"赵九\",\"人事职工\",10000);\n\n        ceo.add(headSales);\n        ceo.add(headPersons);\n\n        headSales.add(sale1);\n        headSales.add(sale2);\n\n        headPersons.add(person1);\n        headPersons.add(person2);\n\n        System.out.println(ceo);\n        for (Employee headEmployee : ceo.getSubordinates()){\n            System.out.println(headEmployee);\n            for (Employee employee : headEmployee.getSubordinates()){\n                System.out.println(employee);\n            }\n        }\n    }\n}\n```\n\n3. 输出结果\n\n>Employee{name='张三', dept='CEO', salary=30000}\n>Employee{name='李四', dept='销售部主管', salary=20000}\n>Employee{name='赵六', dept='销售职工', salary=10000}\n>Employee{name='赵七', dept='销售职工', salary=10000}\n>Employee{name='王五', dept='人事部主管', salary=20000}\n>Employee{name='赵八', dept='人事职工', salary=10000}\n>Employee{name='赵九', dept='人事职工', salary=10000}\n\n### 装饰器模式\n\n>意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。\n>\n>主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。\n>\n>应用实例：不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。\n>\n>使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\n\n1. 创建一个接口\n\n>Shape.java\n\n```java\npublic interface Shape {\n    void draw();\n}\n```\n\n2. 创建实现接口的实体类。\n\n> Circle.java\n\n```java\npublic class Circle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"圆形\");\n    }\n}\n```\n\n> Rectangle.java\n\n```java\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"正方形\");\n    }\n}\n```\n\n3. 创建实现了 *Shape* 接口的抽象装饰类。\n\n> ShapeDecorator.java\n\n```java\npublic abstract class ShapeDecorator implements Shape {\n\n    protected Shape decoratorShape;\n\n    public ShapeDecorator(Shape decoratorShape){\n        this.decoratorShape = decoratorShape;\n    }\n\n    @Override\n    public void draw() {\n        decoratorShape.draw();\n    }\n}\n```\n\n4. 创建扩展了 *ShapeDecorator* 类的实体装饰类。\n\n> RedShapeDecorator.java\n\n```java\npublic class RedShapeDecorator extends ShapeDecorator {\n\n    public RedShapeDecorator(Shape decoratorShape){\n        super(decoratorShape);\n    }\n\n    @Override\n    public void draw() {\n        decoratorShape.draw();\n        setRedBorder(decoratorShape);\n    }\n\n    public void setRedBorder(Shape decoratorShape){\n        System.out.println(\"红色边框\");\n    }\n}\n```\n\n5. 使用 *RedShapeDecorator* 来装饰 *Shape* 对象。\n\n> DecoratorPatternDemo.java\n\n```java\npublic class DecoratorPatternDemo {\n    public static void main(String[] args) {\n        Shape circle = new Circle();\n        ShapeDecorator redCircle = new RedShapeDecorator(new Circle());\n        ShapeDecorator redRectangle = new RedShapeDecorator(new Rectangle());\n        System.out.println(\"正常边框的圆形：\");\n        circle.draw();\n        System.out.println(\"红色边框的圆形：\");\n        redCircle.draw();\n        System.out.println(\"红色边框的矩形：\");\n        redRectangle.draw();\n    }\n}\n```\n\n6. 输出结果\n\n> 正常边框的圆形：\n> 圆形\n> 红色边框的圆形：\n> 圆形\n> 红色边框\n> 红色边框的矩形：\n> 正方形\n> 红色边框\n\n### 外观模式\n\n> 目的：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\n>\n> 主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。\n>\n> 应用实例： 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。\n>\n> 使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\n\n1. 创建一个接口。\n\n>Shape.java\n\n````java\npublic interface Shape {\n    void draw();\n}\n````\n\n2. 创建实现接口的实体类。\n\n> Circle.java\n\n```java\npublic class Circle implements Shape{\n    @Override\n    public void draw() {\n        System.out.println(\"画一个圆形\");\n    }\n}\n```\n\n> Rectangle.java\n\n```java\npublic class Rectangle implements Shape{\n    @Override\n    public void draw() {\n        System.out.println(\"画一个矩形\");\n    }\n}\n```\n\n> Square.java\n\n```java\npublic class Square implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"画一个正方形\");\n    }\n}\n```\n\n3. 创建一个外观类。\n\n> ShapeMaker.java\n\n```java\npublic class ShapeMaker {\n    private Shape circle;\n    private Shape rectangle;\n    private Shape square;\n\n    public ShapeMaker(){\n        circle = new Circle();\n        rectangle = new Rectangle();\n        square = new Square();\n    }\n\n    public void drawCircle(){\n        circle.draw();\n    }\n    public void drawRectangle(){\n        rectangle.draw();\n    }\n    public void drawSquare(){\n        square.draw();\n    }\n}\n```\n\n4. 使用该外观类画出各种类型的形状。\n\n> FacadePatternDemo.java\n\n```java\npublic class FacadePatternDemo {\n    public static void main(String[] args) {\n        ShapeMaker shapeMaker = new ShapeMaker();\n        shapeMaker.drawCircle();\n        shapeMaker.drawRectangle();\n        shapeMaker.drawSquare();\n    }\n}\n```\n\n5. 输出结果\n\n>画一个圆形\n>\n>画一个矩形\n>\n>画一个正方形\n\n### 享元模式\n\n> 目的：运用共享技术有效地支持大量细粒度的对象。\n>\n> 主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。\n>\n> 应用实例： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。\n>\n> 使用场景： 1、系统有大量相似对象。 2、需要缓冲池的场景。\n\n1. 创建一个接口。\n\n> Shape.java\n\n```java\npublic interface Shape {\n    void draw();\n}\n```\n\n2. 创建实现接口的实体类。\n\n> Circle.java\n\n```java\npublic class Circle implements Shape{\n\n    private String color;\n    private int x;\n    private int y;\n    private int radius;\n\n    public Circle(String color){\n        this.color = color;\n    }\n    public void setX(int x){\n        this.x = x;\n    }\n    public void setY(int y){\n        this.y = y;\n    }\n\n    @Override\n    public void draw() {\n        System.out.println(\"画一个圆，颜色：\"+color+\"，x：\"+x+\"，y：\"+y+\"，raduis：\"+radius);\n    }\n}\n```\n\n3. 创建一个工厂，生成基于给定信息的实体类的对象。\n\n>ShapeFactory.java\n\n````java\nimport java.util.HashMap;\n\npublic class ShapeFactory {\n    private static final HashMap<String,Shape> circleMap = new HashMap<>();\n\n    public static Shape getCircle(String color){\n        Circle circle = (Circle) circleMap.get(color);\n\n        if (circle == null){\n            circle = new Circle(color);\n            circleMap.put(color,circle);\n            System.out.println(\"创建一个有颜色的圆形：\"+color);\n        }\n        return circle;\n    }\n}\n````\n\n4. 使用该工厂，通过传递颜色信息来获取实体类的对象。\n\n> FlyweightPatternDemo.java\n\n```java\npublic class FlyweightPatternDemo {\n\n    private static final String[] colors = {\"红色\",\"黄色\",\"绿色\",\"蓝色\",\"白色\"};\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 10; i++) {\n            Circle circle = (Circle) ShapeFactory.getCircle(getRandomColor());\n            circle.setX(getRandomX());\n            circle.setY(getRandomY());\n            circle.setRadius(100);\n            circle.draw();\n        }\n    }\n\n    private static int getRandomY() {\n        return (int) (Math.random()*100);\n    }\n\n    private static int getRandomX() {\n        return (int) (Math.random()*100);\n    }\n\n    private static String getRandomColor() {\n        return colors[(int) (Math.random()*colors.length)];\n    }\n}\n```\n\n5. 输出结果\n\n>创建一个有颜色的圆形：白色\n>\n>画一个圆，颜色：白色，x：44，y：48，raduis：100\n>\n>画一个圆，颜色：绿色，x：83，y：14，raduis：100\n>\n>创建一个有颜色的圆形：红色\n>\n>画一个圆，颜色：红色，x：95，y：76，raduis：100\n>\n>画一个圆，颜色：绿色，x：45，y：4，raduis：100\n>\n>画一个圆，颜色：绿色，x：37，y：9，raduis：100\n>\n>画一个圆，颜色：红色，x：6，y：70，raduis：100\n>\n>创建一个有颜色的圆形：蓝色\n>\n>画一个圆，颜色：蓝色，x：44，y：30，raduis：100\n>\n>创建一个有颜色的圆形：黄色\n>\n>画一个圆，颜色：黄色，x：95，y：49，raduis：100\n>\n>画一个圆，颜色：红色，x：65，y：4，raduis：100\n\n### 代理模式\n\n> 意图：为其他对象提供一种代理以控制对这个对象的访问。\n>\n> 主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。\n>\n> 应用实例： 1、Windows 里面的快捷方式。2、买火车票不一定在火车站买，也可以去代售点。3、spring aop。\n>\n> 使用场景：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。\n\n1. 创建一个接口。\n\n> Image.java\n\n```java\npublic interface Image {\n    void display();\n}\n```\n\n2. 创建实现接口的实体类。\n\n> RealImage.java\n\n```java\npublic class RealImage implements Image {\n\n    private String fileName;\n\n    public RealImage(String fileName){\n        this.fileName = fileName;\n        loadFromDisk(fileName);\n    }\n\n    private void loadFromDisk(String fileName) {\n        System.out.println(\"磁盘加载\"+fileName);\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"显示\"+fileName);\n    }\n}\n```\n\n> ProxyImage.java\n\n````java\npublic class ProxyImage implements Image {\n    private RealImage realImage;\n    private String fileName;\n\n    public ProxyImage(String fileName){\n        this.fileName = fileName;\n    }\n\n    @Override\n    public void display() {\n        if (realImage == null){\n            realImage = new RealImage(fileName);\n        }\n        realImage.display();\n    }\n}\n````\n\n3. 当被请求时，使用 *ProxyImage* 来获取 *RealImage* 类的对象。\n\n> ProxyPatternDemo.java\n\n```java\npublic class ProxyPatternDemo {\n    public static void main(String[] args) {\n        ProxyImage proxyImage = new ProxyImage(\"test.jpg\");\n        //从磁盘加载\n        proxyImage.display();\n        //不从磁盘加载\n        proxyImage.display();\n    }\n}\n```\n\n4.输出结果\n\n> 磁盘加载test.jpg\n> 显示test.jpg\n> 显示test.jpg\n","source":"_posts/computer/course-3/structural_pattern.md","raw":"---\ntitle: 结构型模式\ndate: 2020/12/19 11:47\ncategories:\n\t- [计算机, 设计模式]\ntags:\n\t- 设计模式\n---\n\n### 适配器模式\n\n> 目的：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\n>\n> 主要解决：主要解决在软件系统中，常常要将一些\"现存的对象\"放到新的环境中，而新环境要求的接口是现对象不能满足的。\n>\n> 应用实例：音频播放器可以播放mp3的音频文件，媒体播放器可以播放mp4和vlc格式的文件，我们想要音频播放器也可以播放mp4和vlc格式的文件，就需要适配器。\n\n1. 为媒体播放器和更高级的媒体播放器创建接口。\n\n>MediaPlayer.java\n\n```java\npublic interface MediaPlayer {\n    void play(String audioType,String fileName);\n}\n```\n\n>AdvancedMediaPlayer.java\n\n```java\npublic interface AdvancedMediaPlayer {\n    void playVlc(String fileName);\n    void playMp4(String fileName);\n}\n```\n\n2. 创建实现了 *AdvancedMediaPlayer* 接口的实体类。\n\n>Mp4Player.java\n\n```java\npublic class Mp4Player implements AdvancedMediaPlayer {\n    @Override\n    public void playVlc(String fileName) {\n\n    }\n\n    @Override\n    public void playMp4(String fileName) {\n        System.out.println(\"播放mp4文件，文件名：\"+fileName);\n    }\n}\n```\n\n>VlcPlayer.java\n\n```java\npublic class VlcPlayer implements AdvancedMediaPlayer {\n    @Override\n    public void playVlc(String fileName) {\n        System.out.println(\"播放vlc文件，文件名：\"+fileName);\n    }\n\n    @Override\n    public void playMp4(String fileName) {\n\n    }\n}\n```\n\n3. 创建实现了 *MediaPlayer* 接口的适配器类。\n\n>MediaAdapter.java\n\n```java\npublic class MediaAdapter implements MediaPlayer {\n\n    AdvancedMediaPlayer advancedMediaPlayer;\n\n    public MediaAdapter(String audioType){\n        if (audioType.equalsIgnoreCase(\"vlc\")){\n            advancedMediaPlayer = new VlcPlayer();\n        }else if (audioType.equalsIgnoreCase(\"mp4\")){\n            advancedMediaPlayer = new Mp4Player();\n        }\n    }\n\n    @Override\n    public void play(String audioType, String fileName) {\n        if (audioType.equalsIgnoreCase(\"vlc\")){\n            advancedMediaPlayer.playVlc(fileName);\n        }else if (audioType.equalsIgnoreCase(\"mp4\")){\n            advancedMediaPlayer.playMp4(fileName);\n        }\n    }\n}\n```\n\n4. 创建实现了 *MediaPlayer* 接口的实体类。\n\n>AudioPlayer.java\n\n````java\npublic class AudioPlayer implements MediaPlayer {\n\n    MediaAdapter mediaAdapter;\n\n    @Override\n    public void play(String audioType, String fileName) {\n        //播放 mp3 音乐文件的内置支持\n        if (audioType.equalsIgnoreCase(\"mp3\")){\n            System.out.println(\"播放mp3文件，文件名：\"+fileName);\n        }\n        //mediaAdapter 提供了播放其他文件格式的支持\n        else if (audioType.equalsIgnoreCase(\"vlc\")){\n            mediaAdapter = new MediaAdapter(audioType);\n            mediaAdapter.play(audioType,fileName);\n        }else if (audioType.equalsIgnoreCase(\"mp4\")){\n            mediaAdapter = new MediaAdapter(audioType);\n            mediaAdapter.play(audioType,fileName);\n        }else {\n            System.out.println(\"不支持\"+audioType+\"文件\");\n        }\n    }\n}\n````\n\n5. 使用 AudioPlayer 来播放不同类型的音频格式。\n\n>AdapterPatternDemo.java\n\n```java\npublic class AdapterPatternDemo {\n    public static void main(String[] args) {\n        AudioPlayer audioPlayer = new AudioPlayer();\n\n        audioPlayer.play(\"mp3\",\"hello.mp3\");\n        audioPlayer.play(\"mp4\",\"world.mp4\");\n        audioPlayer.play(\"vlc\",\"hello world.vlc\");\n        audioPlayer.play(\"avi\",\"no.avi\");\n    }\n}\n```\n\n6. 输出结果\n\n>播放mp3文件，文件名：hello.mp3\n>播放mp4文件，文件名：world.mp4\n>播放vlc文件，文件名：hello world.vlc\n>不支持avi文件\n\n### 桥接模式\n\n> 意图：将抽象部分与实现部分分离，使它们都可以独立的变化。\n>\n> 主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活\n>\n> 应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。\n\n1. 创建桥接实现接口。\n\n>DrawAPI.java\n\n```java\npublic interface DrawAPI {\n    void drawCircle(int radius,int x,int y);\n}\n```\n\n2. 创建实现了 *DrawAPI* 接口的实体桥接实现类。\n\n> GreenCircle.java\n\n```java\npublic class GreenCircle implements DrawAPI {\n    @Override\n    public void drawCircle(int radius, int x, int y) {\n        System.out.println(\"画一个绿圆，半径：\"+radius+\"，x：\"+x+\"，y：\"+y);\n    }\n}\n```\n\n> RedCircle.java\n\n```java\npublic class RedCircle implements DrawAPI {\n    @Override\n    public void drawCircle(int radius, int x, int y) {\n        System.out.println(\"画一个红圆，半径：\"+radius+\"，x：\"+x+\"，y：\"+y);\n    }\n}\n```\n\n3. 使用 *DrawAPI* 接口创建抽象类 *Shape*。\n\n> Shape.java\n\n```java\npublic abstract class Shape {\n    protected DrawAPI drawAPI;\n    protected Shape(DrawAPI drawAPI){\n        this.drawAPI = drawAPI;\n    }\n    public abstract void draw();\n}\n```\n\n4. 创建实现了 *Shape* 抽象类的实体类。\n\n> Circle.java\n\n```java\npublic class Circle extends Shape {\n\n    private int x,y,radius;\n\n    public Circle(int x,int y,int radius,DrawAPI drawAPI){\n        super(drawAPI);\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n    }\n\n    @Override\n    public void draw() {\n        drawAPI.drawCircle(radius,x,y);\n    }\n}\n```\n\n5. 使用 *Shape* 和 *DrawAPI* 类画出不同颜色的圆。\n\n> BridgePatternDemo.java\n\n```java\npublic class BridgePatternDemo {\n    public static void main(String[] args) {\n        Circle redCircle = new Circle(100, 100, 10, new RedCircle());\n        Circle greenCircle = new Circle(100, 100, 10, new GreenCircle());\n        redCircle.draw();\n        greenCircle.draw();\n    }\n}\n```\n\n6. 输出结果\n\n>画一个红圆，半径：10，x：100，y：100\n>画一个绿圆，半径：10，x：100，y：100\n\n### 过滤器模式\n\n> 过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。\n\n1. 创建一个类，在该类上应用标准。\n\n> Person.java\n\n```java\npublic class Person {\n private String name;\n private String gender;\n private String maritalStatus;\n public Person(String name,String gender,String maritalStatus){\n     this.name = name;\n     this.gender = gender;\n     this.maritalStatus = maritalStatus;\n }\n\n public String getName() {\n     return name;\n }\n\n public String getGender() {\n     return gender;\n }\n\n public String getMaritalStatus() {\n     return maritalStatus;\n }\n}\n```\n\n2. 为标准（Criteria）创建一个接口。\n\n> Criteria.java\n\n```java\nimport java.util.List;\n\npublic interface Criteria {\n    public List<Person> meetCriteria(List<Person> persons);\n}\n```\n\n3. 创建实现了 *Criteria* 接口的实体类。\n\n>CriteriaMale.java\n\n```java\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class CriteriaMale implements Criteria {\n    @Override\n    public List<Person> meetCriteria(List<Person> persons) {\n        List<Person> malePersons = new LinkedList<>();\n        for (Person person : persons){\n            if (\"male\".equalsIgnoreCase(person.getGender())){\n                malePersons.add(person);\n            }\n        }\n        return malePersons;\n    }\n}\n```\n\n>CriteriaFemale.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CriteriaFemale implements Criteria {\n    @Override\n    public List<Person> meetCriteria(List<Person> persons) {\n        List<Person> femalePersons = new ArrayList<>();\n        for (Person person : persons){\n            if (\"female\".equalsIgnoreCase(person.getGender())){\n                femalePersons.add(person);\n            }\n        }\n        return femalePersons;\n    }\n}\n```\n\n>CriteriaSingle.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CriteriaSingle implements Criteria {\n    @Override\n    public List<Person> meetCriteria(List<Person> persons) {\n        List<Person> singlePersons = new ArrayList<>();\n        for (Person person : persons){\n            if (\"single\".equalsIgnoreCase(person.getMaritalStatus())){\n                singlePersons.add(person);\n            }\n        }\n        return singlePersons;\n    }\n}\n```\n\n>AndCriteria.java\n\n```java\nimport java.util.List;\n\npublic class AndCriteria implements Criteria {\n\n    private Criteria criteria;\n    private Criteria otherCriteria;\n\n    public AndCriteria(Criteria criteria,Criteria otherCriteria){\n        this.criteria = criteria;\n        this.otherCriteria = otherCriteria;\n    }\n\n    @Override\n    public List<Person> meetCriteria(List<Person> persons) {\n        List<Person> firstCriteria = criteria.meetCriteria(persons);\n        return otherCriteria.meetCriteria(firstCriteria);\n    }\n}\n```\n\n>OrCriteria.java\n\n```java\nimport java.util.List;\n\npublic class OrCriteria implements Criteria{\n\n    private Criteria criteria;\n    private Criteria otherCriteria;\n\n    public OrCriteria(Criteria criteria,Criteria otherCriteria){\n        this.criteria = criteria;\n        this.otherCriteria = otherCriteria;\n    }\n\n    @Override\n    public List<Person> meetCriteria(List<Person> persons) {\n        List<Person> firstCriteriaItems = criteria.meetCriteria(persons);\n        List<Person> otherCriteriaItems = otherCriteria.meetCriteria(persons);\n        for (Person person : otherCriteriaItems){\n            if (!firstCriteriaItems.contains(person)){\n                firstCriteriaItems.add(person);\n            }\n        }\n        return firstCriteriaItems;\n    }\n}\n```\n\n4. 使用不同的标准（Criteria）和它们的结合来过滤 *Person* 对象的列表。\n\n>CriteriaPatternDemo.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CriteriaPatternDemo {\n    public static void main(String[] args) {\n        List<Person> persons = new ArrayList<>();\n        persons.add(new Person(\"张三\",\"Male\", \"Single\"));\n        persons.add(new Person(\"李四\",\"Male\", \"Married\"));\n        persons.add(new Person(\"王五\",\"Female\", \"Married\"));\n        persons.add(new Person(\"赵六\",\"Female\", \"Single\"));\n        persons.add(new Person(\"赵七\",\"Male\", \"Single\"));\n        persons.add(new Person(\"赵八\",\"Male\", \"Single\"));\n\n        Criteria male = new CriteriaMale();\n        Criteria female = new CriteriaFemale();\n        Criteria single = new CriteriaSingle();\n        Criteria singleMale = new AndCriteria(single, male);\n        Criteria singleOrFemale = new OrCriteria(single, female);\n\n        System.out.println(\"男性: \");\n        printPersons(male.meetCriteria(persons));\n\n        System.out.println(\"女性: \");\n        printPersons(female.meetCriteria(persons));\n\n        System.out.println(\"单身男性: \");\n        printPersons(singleMale.meetCriteria(persons));\n\n        System.out.println(\"单身或者女性: \");\n        printPersons(singleOrFemale.meetCriteria(persons));\n    }\n\n    public static void printPersons(List<Person> persons){\n        for (Person person : persons) {\n            System.out.println(\"Person : [ Name : \" + person.getName()\n                               +\", Gender : \" + person.getGender()\n                               +\", Marital Status : \" + person.getMaritalStatus()\n                               +\" ]\");\n        }\n    }\n}\n```\n\n5. 输出结果\n\n>男性: \n>Person : [ Name : 张三, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 李四, Gender : Male, Marital Status : Married ]\n>Person : [ Name : 赵七, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 赵八, Gender : Male, Marital Status : Single ]\n>女性: \n>Person : [ Name : 王五, Gender : Female, Marital Status : Married ]\n>Person : [ Name : 赵六, Gender : Female, Marital Status : Single ]\n>单身女性: \n>Person : [ Name : 张三, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 赵七, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 赵八, Gender : Male, Marital Status : Single ]\n>单身或者女性: \n>Person : [ Name : 张三, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 赵六, Gender : Female, Marital Status : Single ]\n>Person : [ Name : 赵七, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 赵八, Gender : Male, Marital Status : Single ]\n>Person : [ Name : 王五, Gender : Female, Marital Status : Married ]\n\n### 组合模式\n\n> 目的：将对象组合成树形结构以表示\"部分-整体\"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n>\n> 主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。\n>\n> 应用实例： 算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。\n>\n> 使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。\n\n1. 创建 *Employee* 类，该类带有 *Employee* 对象的列表。\n\n>Employee.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Employee {\n    private String name;\n    private String dept;\n    private int salary;\n    private List<Employee> subordinates;\n\n    public Employee(String name,String dept,int salary){\n        this.name = name;\n        this.dept = dept;\n        this.salary = salary;\n        subordinates = new ArrayList<>();\n    }\n\n    public void add(Employee e){\n        subordinates.add(e);\n    }\n\n    public void remove(Employee e){\n        subordinates.remove(e);\n    }\n\n    public List<Employee> getSubordinates(){\n        return subordinates;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee{\" +\n            \"name='\" + name + '\\'' +\n            \", dept='\" + dept + '\\'' +\n            \", salary=\" + salary +\n            '}';\n    }\n}\n```\n\n2. 使用 *Employee* 类来创建和打印员工的层次结构。\n\n> CompositePatternDemo.java\n\n```java\npublic class CompositePatternDemo {\n    public static void main(String[] args) {\n        Employee ceo = new Employee(\"张三\",\"CEO\",30000);\n        Employee headSales = new Employee(\"李四\",\"销售部主管\",20000);\n        Employee headPersons = new Employee(\"王五\",\"人事部主管\",20000);\n        Employee sale1 = new Employee(\"赵六\",\"销售职工\",10000);\n        Employee sale2 = new Employee(\"赵七\",\"销售职工\",10000);\n        Employee person1 = new Employee(\"赵八\",\"人事职工\",10000);\n        Employee person2 = new Employee(\"赵九\",\"人事职工\",10000);\n\n        ceo.add(headSales);\n        ceo.add(headPersons);\n\n        headSales.add(sale1);\n        headSales.add(sale2);\n\n        headPersons.add(person1);\n        headPersons.add(person2);\n\n        System.out.println(ceo);\n        for (Employee headEmployee : ceo.getSubordinates()){\n            System.out.println(headEmployee);\n            for (Employee employee : headEmployee.getSubordinates()){\n                System.out.println(employee);\n            }\n        }\n    }\n}\n```\n\n3. 输出结果\n\n>Employee{name='张三', dept='CEO', salary=30000}\n>Employee{name='李四', dept='销售部主管', salary=20000}\n>Employee{name='赵六', dept='销售职工', salary=10000}\n>Employee{name='赵七', dept='销售职工', salary=10000}\n>Employee{name='王五', dept='人事部主管', salary=20000}\n>Employee{name='赵八', dept='人事职工', salary=10000}\n>Employee{name='赵九', dept='人事职工', salary=10000}\n\n### 装饰器模式\n\n>意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。\n>\n>主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。\n>\n>应用实例：不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。\n>\n>使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。\n\n1. 创建一个接口\n\n>Shape.java\n\n```java\npublic interface Shape {\n    void draw();\n}\n```\n\n2. 创建实现接口的实体类。\n\n> Circle.java\n\n```java\npublic class Circle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"圆形\");\n    }\n}\n```\n\n> Rectangle.java\n\n```java\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"正方形\");\n    }\n}\n```\n\n3. 创建实现了 *Shape* 接口的抽象装饰类。\n\n> ShapeDecorator.java\n\n```java\npublic abstract class ShapeDecorator implements Shape {\n\n    protected Shape decoratorShape;\n\n    public ShapeDecorator(Shape decoratorShape){\n        this.decoratorShape = decoratorShape;\n    }\n\n    @Override\n    public void draw() {\n        decoratorShape.draw();\n    }\n}\n```\n\n4. 创建扩展了 *ShapeDecorator* 类的实体装饰类。\n\n> RedShapeDecorator.java\n\n```java\npublic class RedShapeDecorator extends ShapeDecorator {\n\n    public RedShapeDecorator(Shape decoratorShape){\n        super(decoratorShape);\n    }\n\n    @Override\n    public void draw() {\n        decoratorShape.draw();\n        setRedBorder(decoratorShape);\n    }\n\n    public void setRedBorder(Shape decoratorShape){\n        System.out.println(\"红色边框\");\n    }\n}\n```\n\n5. 使用 *RedShapeDecorator* 来装饰 *Shape* 对象。\n\n> DecoratorPatternDemo.java\n\n```java\npublic class DecoratorPatternDemo {\n    public static void main(String[] args) {\n        Shape circle = new Circle();\n        ShapeDecorator redCircle = new RedShapeDecorator(new Circle());\n        ShapeDecorator redRectangle = new RedShapeDecorator(new Rectangle());\n        System.out.println(\"正常边框的圆形：\");\n        circle.draw();\n        System.out.println(\"红色边框的圆形：\");\n        redCircle.draw();\n        System.out.println(\"红色边框的矩形：\");\n        redRectangle.draw();\n    }\n}\n```\n\n6. 输出结果\n\n> 正常边框的圆形：\n> 圆形\n> 红色边框的圆形：\n> 圆形\n> 红色边框\n> 红色边框的矩形：\n> 正方形\n> 红色边框\n\n### 外观模式\n\n> 目的：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\n>\n> 主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。\n>\n> 应用实例： 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。\n>\n> 使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。\n\n1. 创建一个接口。\n\n>Shape.java\n\n````java\npublic interface Shape {\n    void draw();\n}\n````\n\n2. 创建实现接口的实体类。\n\n> Circle.java\n\n```java\npublic class Circle implements Shape{\n    @Override\n    public void draw() {\n        System.out.println(\"画一个圆形\");\n    }\n}\n```\n\n> Rectangle.java\n\n```java\npublic class Rectangle implements Shape{\n    @Override\n    public void draw() {\n        System.out.println(\"画一个矩形\");\n    }\n}\n```\n\n> Square.java\n\n```java\npublic class Square implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"画一个正方形\");\n    }\n}\n```\n\n3. 创建一个外观类。\n\n> ShapeMaker.java\n\n```java\npublic class ShapeMaker {\n    private Shape circle;\n    private Shape rectangle;\n    private Shape square;\n\n    public ShapeMaker(){\n        circle = new Circle();\n        rectangle = new Rectangle();\n        square = new Square();\n    }\n\n    public void drawCircle(){\n        circle.draw();\n    }\n    public void drawRectangle(){\n        rectangle.draw();\n    }\n    public void drawSquare(){\n        square.draw();\n    }\n}\n```\n\n4. 使用该外观类画出各种类型的形状。\n\n> FacadePatternDemo.java\n\n```java\npublic class FacadePatternDemo {\n    public static void main(String[] args) {\n        ShapeMaker shapeMaker = new ShapeMaker();\n        shapeMaker.drawCircle();\n        shapeMaker.drawRectangle();\n        shapeMaker.drawSquare();\n    }\n}\n```\n\n5. 输出结果\n\n>画一个圆形\n>\n>画一个矩形\n>\n>画一个正方形\n\n### 享元模式\n\n> 目的：运用共享技术有效地支持大量细粒度的对象。\n>\n> 主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。\n>\n> 应用实例： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。\n>\n> 使用场景： 1、系统有大量相似对象。 2、需要缓冲池的场景。\n\n1. 创建一个接口。\n\n> Shape.java\n\n```java\npublic interface Shape {\n    void draw();\n}\n```\n\n2. 创建实现接口的实体类。\n\n> Circle.java\n\n```java\npublic class Circle implements Shape{\n\n    private String color;\n    private int x;\n    private int y;\n    private int radius;\n\n    public Circle(String color){\n        this.color = color;\n    }\n    public void setX(int x){\n        this.x = x;\n    }\n    public void setY(int y){\n        this.y = y;\n    }\n\n    @Override\n    public void draw() {\n        System.out.println(\"画一个圆，颜色：\"+color+\"，x：\"+x+\"，y：\"+y+\"，raduis：\"+radius);\n    }\n}\n```\n\n3. 创建一个工厂，生成基于给定信息的实体类的对象。\n\n>ShapeFactory.java\n\n````java\nimport java.util.HashMap;\n\npublic class ShapeFactory {\n    private static final HashMap<String,Shape> circleMap = new HashMap<>();\n\n    public static Shape getCircle(String color){\n        Circle circle = (Circle) circleMap.get(color);\n\n        if (circle == null){\n            circle = new Circle(color);\n            circleMap.put(color,circle);\n            System.out.println(\"创建一个有颜色的圆形：\"+color);\n        }\n        return circle;\n    }\n}\n````\n\n4. 使用该工厂，通过传递颜色信息来获取实体类的对象。\n\n> FlyweightPatternDemo.java\n\n```java\npublic class FlyweightPatternDemo {\n\n    private static final String[] colors = {\"红色\",\"黄色\",\"绿色\",\"蓝色\",\"白色\"};\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 10; i++) {\n            Circle circle = (Circle) ShapeFactory.getCircle(getRandomColor());\n            circle.setX(getRandomX());\n            circle.setY(getRandomY());\n            circle.setRadius(100);\n            circle.draw();\n        }\n    }\n\n    private static int getRandomY() {\n        return (int) (Math.random()*100);\n    }\n\n    private static int getRandomX() {\n        return (int) (Math.random()*100);\n    }\n\n    private static String getRandomColor() {\n        return colors[(int) (Math.random()*colors.length)];\n    }\n}\n```\n\n5. 输出结果\n\n>创建一个有颜色的圆形：白色\n>\n>画一个圆，颜色：白色，x：44，y：48，raduis：100\n>\n>画一个圆，颜色：绿色，x：83，y：14，raduis：100\n>\n>创建一个有颜色的圆形：红色\n>\n>画一个圆，颜色：红色，x：95，y：76，raduis：100\n>\n>画一个圆，颜色：绿色，x：45，y：4，raduis：100\n>\n>画一个圆，颜色：绿色，x：37，y：9，raduis：100\n>\n>画一个圆，颜色：红色，x：6，y：70，raduis：100\n>\n>创建一个有颜色的圆形：蓝色\n>\n>画一个圆，颜色：蓝色，x：44，y：30，raduis：100\n>\n>创建一个有颜色的圆形：黄色\n>\n>画一个圆，颜色：黄色，x：95，y：49，raduis：100\n>\n>画一个圆，颜色：红色，x：65，y：4，raduis：100\n\n### 代理模式\n\n> 意图：为其他对象提供一种代理以控制对这个对象的访问。\n>\n> 主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。\n>\n> 应用实例： 1、Windows 里面的快捷方式。2、买火车票不一定在火车站买，也可以去代售点。3、spring aop。\n>\n> 使用场景：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。\n\n1. 创建一个接口。\n\n> Image.java\n\n```java\npublic interface Image {\n    void display();\n}\n```\n\n2. 创建实现接口的实体类。\n\n> RealImage.java\n\n```java\npublic class RealImage implements Image {\n\n    private String fileName;\n\n    public RealImage(String fileName){\n        this.fileName = fileName;\n        loadFromDisk(fileName);\n    }\n\n    private void loadFromDisk(String fileName) {\n        System.out.println(\"磁盘加载\"+fileName);\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"显示\"+fileName);\n    }\n}\n```\n\n> ProxyImage.java\n\n````java\npublic class ProxyImage implements Image {\n    private RealImage realImage;\n    private String fileName;\n\n    public ProxyImage(String fileName){\n        this.fileName = fileName;\n    }\n\n    @Override\n    public void display() {\n        if (realImage == null){\n            realImage = new RealImage(fileName);\n        }\n        realImage.display();\n    }\n}\n````\n\n3. 当被请求时，使用 *ProxyImage* 来获取 *RealImage* 类的对象。\n\n> ProxyPatternDemo.java\n\n```java\npublic class ProxyPatternDemo {\n    public static void main(String[] args) {\n        ProxyImage proxyImage = new ProxyImage(\"test.jpg\");\n        //从磁盘加载\n        proxyImage.display();\n        //不从磁盘加载\n        proxyImage.display();\n    }\n}\n```\n\n4.输出结果\n\n> 磁盘加载test.jpg\n> 显示test.jpg\n> 显示test.jpg\n","slug":"computer/course-3/structural_pattern","published":1,"updated":"2020-12-19T04:00:16.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg8w003ib0uted0zfc3b","content":"<h3 id=\"适配器模式\"><a class=\"anchor\" href=\"#适配器模式\">#</a> 适配器模式</h3>\n<blockquote>\n<p>目的：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n<p>主要解决：主要解决在软件系统中，常常要将一些 &quot;现存的对象&quot; 放到新的环境中，而新环境要求的接口是现对象不能满足的。</p>\n<p>应用实例：音频播放器可以播放 mp3 的音频文件，媒体播放器可以播放 mp4 和 vlc 格式的文件，我们想要音频播放器也可以播放 mp4 和 vlc 格式的文件，就需要适配器。</p>\n</blockquote>\n<ol>\n<li>为媒体播放器和更高级的媒体播放器创建接口。</li>\n</ol>\n<blockquote>\n<p>MediaPlayer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> audioType<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>AdvancedMediaPlayer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AdvancedMediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">playVlc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">playMp4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现了 <em>AdvancedMediaPlayer</em> 接口的实体类。</li>\n</ol>\n<blockquote>\n<p>Mp4Player.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mp4Player</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AdvancedMediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playVlc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playMp4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"播放mp4文件，文件名：\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>VlcPlayer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VlcPlayer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AdvancedMediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playVlc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"播放vlc文件，文件名：\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playMp4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建实现了 <em>MediaPlayer</em> 接口的适配器类。</li>\n</ol>\n<blockquote>\n<p>MediaAdapter.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MediaAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AdvancedMediaPlayer</span> advancedMediaPlayer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MediaAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> audioType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vlc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            advancedMediaPlayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VlcPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            advancedMediaPlayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mp4Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> audioType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vlc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            advancedMediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">playVlc</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            advancedMediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">playMp4</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>创建实现了 <em>MediaPlayer</em> 接口的实体类。</li>\n</ol>\n<blockquote>\n<p>AudioPlayer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AudioPlayer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">MediaAdapter</span> mediaAdapter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> audioType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 播放 mp3 音乐文件的内置支持</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"播放mp3文件，文件名：\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//mediaAdapter 提供了播放其他文件格式的支持</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vlc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            mediaAdapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaAdapter</span><span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            mediaAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">,</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            mediaAdapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaAdapter</span><span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            mediaAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">,</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不支持\"</span><span class=\"token operator\">+</span>audioType<span class=\"token operator\">+</span><span class=\"token string\">\"文件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 AudioPlayer 来播放不同类型的音频格式。</li>\n</ol>\n<blockquote>\n<p>AdapterPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AdapterPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AudioPlayer</span> audioPlayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        audioPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello.mp3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        audioPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp4\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        audioPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vlc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello world.vlc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        audioPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"avi\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"no.avi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>播放 mp3 文件，文件名：hello.mp3<br />\n 播放 mp4 文件，文件名：world.mp4<br />\n 播放 vlc 文件，文件名：hello world.vlc<br />\n 不支持 avi 文件</p>\n</blockquote>\n<h3 id=\"桥接模式\"><a class=\"anchor\" href=\"#桥接模式\">#</a> 桥接模式</h3>\n<blockquote>\n<p>意图：将抽象部分与实现部分分离，使它们都可以独立的变化。</p>\n<p>主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活</p>\n<p>应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</p>\n</blockquote>\n<ol>\n<li>创建桥接实现接口。</li>\n</ol>\n<blockquote>\n<p>DrawAPI.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DrawAPI</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现了 <em>DrawAPI</em> 接口的实体桥接实现类。</li>\n</ol>\n<blockquote>\n<p>GreenCircle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GreenCircle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DrawAPI</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个绿圆，半径：\"</span><span class=\"token operator\">+</span>radius<span class=\"token operator\">+</span><span class=\"token string\">\"，x：\"</span><span class=\"token operator\">+</span>x<span class=\"token operator\">+</span><span class=\"token string\">\"，y：\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>RedCircle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedCircle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DrawAPI</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个红圆，半径：\"</span><span class=\"token operator\">+</span>radius<span class=\"token operator\">+</span><span class=\"token string\">\"，x：\"</span><span class=\"token operator\">+</span>x<span class=\"token operator\">+</span><span class=\"token string\">\"，y：\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用 <em>DrawAPI</em> 接口创建抽象类 <em>Shape</em>。</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">DrawAPI</span> drawAPI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DrawAPI</span> drawAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>drawAPI <span class=\"token operator\">=</span> drawAPI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>创建实现了 <em>Shape</em> 抽象类的实体类。</li>\n</ol>\n<blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>radius<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">,</span><span class=\"token class-name\">DrawAPI</span> drawAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>drawAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        drawAPI<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 <em>Shape</em> 和 <em>DrawAPI</em> 类画出不同颜色的圆。</li>\n</ol>\n<blockquote>\n<p>BridgePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BridgePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Circle</span> redCircle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Circle</span> greenCircle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GreenCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        redCircle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        greenCircle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>画一个红圆，半径：10，x：100，y：100<br />\n 画一个绿圆，半径：10，x：100，y：100</p>\n</blockquote>\n<h3 id=\"过滤器模式\"><a class=\"anchor\" href=\"#过滤器模式\">#</a> 过滤器模式</h3>\n<blockquote>\n<p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p>\n</blockquote>\n<ol>\n<li>创建一个类，在该类上应用标准。</li>\n</ol>\n<blockquote>\n<p>Person.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> maritalStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> maritalStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maritalStatus <span class=\"token operator\">=</span> maritalStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token keyword\">return</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMaritalStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token keyword\">return</span> maritalStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>为标准（Criteria）创建一个接口。</li>\n</ol>\n<blockquote>\n<p>Criteria.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Criteria</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建实现了 <em>Criteria</em> 接口的实体类。</li>\n</ol>\n<blockquote>\n<p>CriteriaMale.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CriteriaMale</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Criteria</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> malePersons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person <span class=\"token operator\">:</span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"male\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                malePersons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> malePersons<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>CriteriaFemale.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CriteriaFemale</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Criteria</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> femalePersons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person <span class=\"token operator\">:</span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"female\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                femalePersons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> femalePersons<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>CriteriaSingle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CriteriaSingle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Criteria</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> singlePersons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person <span class=\"token operator\">:</span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"single\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getMaritalStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                singlePersons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> singlePersons<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>AndCriteria.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AndCriteria</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Criteria</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Criteria</span> criteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Criteria</span> otherCriteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AndCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Criteria</span> criteria<span class=\"token punctuation\">,</span><span class=\"token class-name\">Criteria</span> otherCriteria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>criteria <span class=\"token operator\">=</span> criteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>otherCriteria <span class=\"token operator\">=</span> otherCriteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> firstCriteria <span class=\"token operator\">=</span> criteria<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> otherCriteria<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>firstCriteria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OrCriteria.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrCriteria</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Criteria</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Criteria</span> criteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Criteria</span> otherCriteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Criteria</span> criteria<span class=\"token punctuation\">,</span><span class=\"token class-name\">Criteria</span> otherCriteria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>criteria <span class=\"token operator\">=</span> criteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>otherCriteria <span class=\"token operator\">=</span> otherCriteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> firstCriteriaItems <span class=\"token operator\">=</span> criteria<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> otherCriteriaItems <span class=\"token operator\">=</span> otherCriteria<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person <span class=\"token operator\">:</span> otherCriteriaItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>firstCriteriaItems<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                firstCriteriaItems<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> firstCriteriaItems<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用不同的标准（Criteria）和它们的结合来过滤 <em>Person</em> 对象的列表。</li>\n</ol>\n<blockquote>\n<p>CriteriaPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CriteriaPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Single\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Married\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Female\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Married\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Female\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Single\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵七\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Single\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵八\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Single\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Criteria</span> male <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CriteriaMale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Criteria</span> female <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CriteriaFemale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Criteria</span> single <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CriteriaSingle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Criteria</span> singleMale <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AndCriteria</span><span class=\"token punctuation\">(</span>single<span class=\"token punctuation\">,</span> male<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Criteria</span> singleOrFemale <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrCriteria</span><span class=\"token punctuation\">(</span>single<span class=\"token punctuation\">,</span> female<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"男性: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span>male<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"女性: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span>female<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单身男性: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span>singleMale<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单身或者女性: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span>singleOrFemale<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person <span class=\"token operator\">:</span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person : [ Name : \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                               <span class=\"token operator\">+</span><span class=\"token string\">\", Gender : \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                               <span class=\"token operator\">+</span><span class=\"token string\">\", Marital Status : \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getMaritalStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                               <span class=\"token operator\">+</span><span class=\"token string\">\" ]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>男性:<br />\nPerson : [Name : 张三，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 李四，Gender : Male, Marital Status : Married]<br />\n Person : [Name : 赵七，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 赵八，Gender : Male, Marital Status : Single]<br />\n 女性:<br />\nPerson : [Name : 王五，Gender : Female, Marital Status : Married]<br />\n Person : [Name : 赵六，Gender : Female, Marital Status : Single]<br />\n 单身女性:<br />\nPerson : [Name : 张三，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 赵七，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 赵八，Gender : Male, Marital Status : Single]<br />\n 单身或者女性:<br />\nPerson : [Name : 张三，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 赵六，Gender : Female, Marital Status : Single]<br />\n Person : [Name : 赵七，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 赵八，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 王五，Gender : Female, Marital Status : Married]</p>\n</blockquote>\n<h3 id=\"组合模式\"><a class=\"anchor\" href=\"#组合模式\">#</a> 组合模式</h3>\n<blockquote>\n<p>目的：将对象组合成树形结构以表示 &quot;部分 - 整体&quot; 的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p>\n<p>应用实例： 算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。</p>\n<p>使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。</p>\n</blockquote>\n<ol>\n<li>创建 <em>Employee</em> 类，该类带有 <em>Employee</em> 对象的列表。</li>\n</ol>\n<blockquote>\n<p>Employee.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> dept<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> subordinates<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> dept<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        subordinates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        subordinates<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        subordinates<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSubordinates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> subordinates<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Employee&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token string\">\", dept='\"</span> <span class=\"token operator\">+</span> dept <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token string\">\", salary=\"</span> <span class=\"token operator\">+</span> salary <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>使用 <em>Employee</em> 类来创建和打印员工的层次结构。</li>\n</ol>\n<blockquote>\n<p>CompositePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Employee</span> ceo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CEO\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Employee</span> headSales <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"销售部主管\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Employee</span> headPersons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"人事部主管\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Employee</span> sale1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"销售职工\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Employee</span> sale2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵七\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"销售职工\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Employee</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵八\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"人事职工\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Employee</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵九\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"人事职工\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ceo<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>headSales<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ceo<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>headPersons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        headSales<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sale1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        headSales<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sale2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        headPersons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        headPersons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ceo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> headEmployee <span class=\"token operator\">:</span> ceo<span class=\"token punctuation\">.</span><span class=\"token function\">getSubordinates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>headEmployee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> employee <span class=\"token operator\">:</span> headEmployee<span class=\"token punctuation\">.</span><span class=\"token function\">getSubordinates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>输出结果</li>\n</ol>\n<blockquote name=\"'赵九',\" dept=\"'人事职工',\" salary=\"10000\">\n<p>Employee {name=' 张三 ', dept='CEO', salary=30000}<br />\n Employee {name=' 李四 ', dept=' 销售部主管 ', salary=20000}<br />\n Employee {name=' 赵六 ', dept=' 销售职工 ', salary=10000}<br />\n Employee {name=' 赵七 ', dept=' 销售职工 ', salary=10000}<br />\n Employee {name=' 王五 ', dept=' 人事部主管 ', salary=20000}<br />\n Employee {name=' 赵八 ', dept=' 人事职工 ', salary=10000}<br />\nEmployee</p>\n</blockquote>\n<h3 id=\"装饰器模式\"><a class=\"anchor\" href=\"#装饰器模式\">#</a> 装饰器模式</h3>\n<blockquote>\n<p>意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p>\n<p>主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p>\n<p>应用实例：不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。</p>\n<p>使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。</p>\n</blockquote>\n<ol>\n<li>创建一个接口</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"圆形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Rectangle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正方形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建实现了 <em>Shape</em> 接口的抽象装饰类。</li>\n</ol>\n<blockquote>\n<p>ShapeDecorator.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeDecorator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Shape</span> decoratorShape<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratorShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoratorShape <span class=\"token operator\">=</span> decoratorShape<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        decoratorShape<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>创建扩展了 <em>ShapeDecorator</em> 类的实体装饰类。</li>\n</ol>\n<blockquote>\n<p>RedShapeDecorator.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedShapeDecorator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ShapeDecorator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratorShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>decoratorShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        decoratorShape<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">setRedBorder</span><span class=\"token punctuation\">(</span>decoratorShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRedBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratorShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红色边框\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 <em>RedShapeDecorator</em> 来装饰 <em>Shape</em> 对象。</li>\n</ol>\n<blockquote>\n<p>DecoratorPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DecoratorPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Shape</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ShapeDecorator</span> redCircle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ShapeDecorator</span> redRectangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正常边框的圆形：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红色边框的圆形：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        redCircle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红色边框的矩形：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        redRectangle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>正常边框的圆形：<br />\n圆形<br />\n红色边框的圆形：<br />\n圆形<br />\n红色边框<br />\n红色边框的矩形：<br />\n正方形<br />\n红色边框</p>\n</blockquote>\n<h3 id=\"外观模式\"><a class=\"anchor\" href=\"#外观模式\">#</a> 外观模式</h3>\n<blockquote>\n<p>目的：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>\n<p>主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。</p>\n<p>应用实例： 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。</p>\n<p>使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。</p>\n</blockquote>\n<ol>\n<li>创建一个接口。</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个圆形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Rectangle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个矩形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Square.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个正方形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建一个外观类。</li>\n</ol>\n<blockquote>\n<p>ShapeMaker.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeMaker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Shape</span> circle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Shape</span> rectangle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Shape</span> square<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShapeMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        rectangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        square <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        square<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用该外观类画出各种类型的形状。</li>\n</ol>\n<blockquote>\n<p>FacadePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FacadePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ShapeMaker</span> shapeMaker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShapeMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        shapeMaker<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        shapeMaker<span class=\"token punctuation\">.</span><span class=\"token function\">drawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        shapeMaker<span class=\"token punctuation\">.</span><span class=\"token function\">drawSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>画一个圆形</p>\n<p>画一个矩形</p>\n<p>画一个正方形</p>\n</blockquote>\n<h3 id=\"享元模式\"><a class=\"anchor\" href=\"#享元模式\">#</a> 享元模式</h3>\n<blockquote>\n<p>目的：运用共享技术有效地支持大量细粒度的对象。</p>\n<p>主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p>\n<p>应用实例： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。</p>\n<p>使用场景： 1、系统有大量相似对象。 2、需要缓冲池的场景。</p>\n</blockquote>\n<ol>\n<li>创建一个接口。</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个圆，颜色：\"</span><span class=\"token operator\">+</span>color<span class=\"token operator\">+</span><span class=\"token string\">\"，x：\"</span><span class=\"token operator\">+</span>x<span class=\"token operator\">+</span><span class=\"token string\">\"，y：\"</span><span class=\"token operator\">+</span>y<span class=\"token operator\">+</span><span class=\"token string\">\"，raduis：\"</span><span class=\"token operator\">+</span>radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建一个工厂，生成基于给定信息的实体类的对象。</li>\n</ol>\n<blockquote>\n<p>ShapeFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">></span></span> circleMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Shape</span> <span class=\"token function\">getCircle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Circle</span><span class=\"token punctuation\">)</span> circleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>circle <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            circleMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span>circle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建一个有颜色的圆形：\"</span><span class=\"token operator\">+</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> circle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用该工厂，通过传递颜色信息来获取实体类的对象。</li>\n</ol>\n<blockquote>\n<p>FlyweightPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlyweightPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"红色\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"黄色\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"绿色\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"蓝色\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Circle</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">ShapeFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCircle</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRandomColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            circle<span class=\"token punctuation\">.</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRandomX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            circle<span class=\"token punctuation\">.</span><span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRandomY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            circle<span class=\"token punctuation\">.</span><span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRandomY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRandomX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRandomColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> colors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>colors<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>创建一个有颜色的圆形：白色</p>\n<p>画一个圆，颜色：白色，x：44，y：48，raduis：100</p>\n<p>画一个圆，颜色：绿色，x：83，y：14，raduis：100</p>\n<p>创建一个有颜色的圆形：红色</p>\n<p>画一个圆，颜色：红色，x：95，y：76，raduis：100</p>\n<p>画一个圆，颜色：绿色，x：45，y：4，raduis：100</p>\n<p>画一个圆，颜色：绿色，x：37，y：9，raduis：100</p>\n<p>画一个圆，颜色：红色，x：6，y：70，raduis：100</p>\n<p>创建一个有颜色的圆形：蓝色</p>\n<p>画一个圆，颜色：蓝色，x：44，y：30，raduis：100</p>\n<p>创建一个有颜色的圆形：黄色</p>\n<p>画一个圆，颜色：黄色，x：95，y：49，raduis：100</p>\n<p>画一个圆，颜色：红色，x：65，y：4，raduis：100</p>\n</blockquote>\n<h3 id=\"代理模式\"><a class=\"anchor\" href=\"#代理模式\">#</a> 代理模式</h3>\n<blockquote>\n<p>意图：为其他对象提供一种代理以控制对这个对象的访问。</p>\n<p>主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>\n<p>应用实例： 1、Windows 里面的快捷方式。2、买火车票不一定在火车站买，也可以去代售点。3、spring aop。</p>\n<p>使用场景：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache 代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。</p>\n</blockquote>\n<ol>\n<li>创建一个接口。</li>\n</ol>\n<blockquote>\n<p>Image.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Image</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>RealImage.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealImage</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Image</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RealImage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileName <span class=\"token operator\">=</span> fileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">loadFromDisk</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">loadFromDisk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"磁盘加载\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ProxyImage.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProxyImage</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Image</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RealImage</span> realImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProxyImage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileName <span class=\"token operator\">=</span> fileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>realImage <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            realImage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealImage</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        realImage<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>当被请求时，使用 <em>ProxyImage</em> 来获取 <em>RealImage</em> 类的对象。</li>\n</ol>\n<blockquote>\n<p>ProxyPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProxyPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ProxyImage</span> proxyImage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 从磁盘加载</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        proxyImage<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 不从磁盘加载</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        proxyImage<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4. 输出结果</p>\n<blockquote>\n<p>磁盘加载 test.jpg<br />\n 显示 test.jpg<br />\n 显示 test.jpg</p>\n</blockquote>\n","site":{"data":{}},"length":17243,"excerpt":"","more":"<h3 id=\"适配器模式\"><a class=\"anchor\" href=\"#适配器模式\">#</a> 适配器模式</h3>\n<blockquote>\n<p>目的：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n<p>主要解决：主要解决在软件系统中，常常要将一些 &quot;现存的对象&quot; 放到新的环境中，而新环境要求的接口是现对象不能满足的。</p>\n<p>应用实例：音频播放器可以播放 mp3 的音频文件，媒体播放器可以播放 mp4 和 vlc 格式的文件，我们想要音频播放器也可以播放 mp4 和 vlc 格式的文件，就需要适配器。</p>\n</blockquote>\n<ol>\n<li>为媒体播放器和更高级的媒体播放器创建接口。</li>\n</ol>\n<blockquote>\n<p>MediaPlayer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> audioType<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>AdvancedMediaPlayer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AdvancedMediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">playVlc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">playMp4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现了 <em>AdvancedMediaPlayer</em> 接口的实体类。</li>\n</ol>\n<blockquote>\n<p>Mp4Player.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mp4Player</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AdvancedMediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playVlc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playMp4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"播放mp4文件，文件名：\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>VlcPlayer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VlcPlayer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AdvancedMediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playVlc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"播放vlc文件，文件名：\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">playMp4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建实现了 <em>MediaPlayer</em> 接口的适配器类。</li>\n</ol>\n<blockquote>\n<p>MediaAdapter.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MediaAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">AdvancedMediaPlayer</span> advancedMediaPlayer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MediaAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> audioType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vlc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            advancedMediaPlayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VlcPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            advancedMediaPlayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mp4Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> audioType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vlc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            advancedMediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">playVlc</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            advancedMediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">playMp4</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>创建实现了 <em>MediaPlayer</em> 接口的实体类。</li>\n</ol>\n<blockquote>\n<p>AudioPlayer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AudioPlayer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaPlayer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">MediaAdapter</span> mediaAdapter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> audioType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 播放 mp3 音乐文件的内置支持</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"播放mp3文件，文件名：\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//mediaAdapter 提供了播放其他文件格式的支持</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vlc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            mediaAdapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaAdapter</span><span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            mediaAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">,</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            mediaAdapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaAdapter</span><span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            mediaAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span>audioType<span class=\"token punctuation\">,</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不支持\"</span><span class=\"token operator\">+</span>audioType<span class=\"token operator\">+</span><span class=\"token string\">\"文件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 AudioPlayer 来播放不同类型的音频格式。</li>\n</ol>\n<blockquote>\n<p>AdapterPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AdapterPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AudioPlayer</span> audioPlayer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AudioPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        audioPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello.mp3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        audioPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mp4\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        audioPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vlc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hello world.vlc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        audioPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"avi\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"no.avi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>播放 mp3 文件，文件名：hello.mp3<br />\n 播放 mp4 文件，文件名：world.mp4<br />\n 播放 vlc 文件，文件名：hello world.vlc<br />\n 不支持 avi 文件</p>\n</blockquote>\n<h3 id=\"桥接模式\"><a class=\"anchor\" href=\"#桥接模式\">#</a> 桥接模式</h3>\n<blockquote>\n<p>意图：将抽象部分与实现部分分离，使它们都可以独立的变化。</p>\n<p>主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活</p>\n<p>应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</p>\n</blockquote>\n<ol>\n<li>创建桥接实现接口。</li>\n</ol>\n<blockquote>\n<p>DrawAPI.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DrawAPI</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现了 <em>DrawAPI</em> 接口的实体桥接实现类。</li>\n</ol>\n<blockquote>\n<p>GreenCircle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GreenCircle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DrawAPI</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个绿圆，半径：\"</span><span class=\"token operator\">+</span>radius<span class=\"token operator\">+</span><span class=\"token string\">\"，x：\"</span><span class=\"token operator\">+</span>x<span class=\"token operator\">+</span><span class=\"token string\">\"，y：\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>RedCircle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedCircle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DrawAPI</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个红圆，半径：\"</span><span class=\"token operator\">+</span>radius<span class=\"token operator\">+</span><span class=\"token string\">\"，x：\"</span><span class=\"token operator\">+</span>x<span class=\"token operator\">+</span><span class=\"token string\">\"，y：\"</span><span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用 <em>DrawAPI</em> 接口创建抽象类 <em>Shape</em>。</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">DrawAPI</span> drawAPI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DrawAPI</span> drawAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>drawAPI <span class=\"token operator\">=</span> drawAPI<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>创建实现了 <em>Shape</em> 抽象类的实体类。</li>\n</ol>\n<blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>radius<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">,</span><span class=\"token class-name\">DrawAPI</span> drawAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>drawAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        drawAPI<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 <em>Shape</em> 和 <em>DrawAPI</em> 类画出不同颜色的圆。</li>\n</ol>\n<blockquote>\n<p>BridgePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BridgePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Circle</span> redCircle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Circle</span> greenCircle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GreenCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        redCircle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        greenCircle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>画一个红圆，半径：10，x：100，y：100<br />\n 画一个绿圆，半径：10，x：100，y：100</p>\n</blockquote>\n<h3 id=\"过滤器模式\"><a class=\"anchor\" href=\"#过滤器模式\">#</a> 过滤器模式</h3>\n<blockquote>\n<p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p>\n</blockquote>\n<ol>\n<li>创建一个类，在该类上应用标准。</li>\n</ol>\n<blockquote>\n<p>Person.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> maritalStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> maritalStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maritalStatus <span class=\"token operator\">=</span> maritalStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token keyword\">return</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMaritalStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token keyword\">return</span> maritalStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>为标准（Criteria）创建一个接口。</li>\n</ol>\n<blockquote>\n<p>Criteria.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Criteria</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建实现了 <em>Criteria</em> 接口的实体类。</li>\n</ol>\n<blockquote>\n<p>CriteriaMale.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CriteriaMale</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Criteria</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> malePersons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person <span class=\"token operator\">:</span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"male\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                malePersons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> malePersons<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>CriteriaFemale.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CriteriaFemale</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Criteria</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> femalePersons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person <span class=\"token operator\">:</span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"female\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                femalePersons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> femalePersons<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>CriteriaSingle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CriteriaSingle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Criteria</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> singlePersons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person <span class=\"token operator\">:</span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"single\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getMaritalStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                singlePersons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> singlePersons<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>AndCriteria.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AndCriteria</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Criteria</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Criteria</span> criteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Criteria</span> otherCriteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AndCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Criteria</span> criteria<span class=\"token punctuation\">,</span><span class=\"token class-name\">Criteria</span> otherCriteria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>criteria <span class=\"token operator\">=</span> criteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>otherCriteria <span class=\"token operator\">=</span> otherCriteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> firstCriteria <span class=\"token operator\">=</span> criteria<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> otherCriteria<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>firstCriteria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OrCriteria.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrCriteria</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Criteria</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Criteria</span> criteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Criteria</span> otherCriteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Criteria</span> criteria<span class=\"token punctuation\">,</span><span class=\"token class-name\">Criteria</span> otherCriteria<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>criteria <span class=\"token operator\">=</span> criteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>otherCriteria <span class=\"token operator\">=</span> otherCriteria<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> firstCriteriaItems <span class=\"token operator\">=</span> criteria<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> otherCriteriaItems <span class=\"token operator\">=</span> otherCriteria<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person <span class=\"token operator\">:</span> otherCriteriaItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>firstCriteriaItems<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                firstCriteriaItems<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> firstCriteriaItems<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用不同的标准（Criteria）和它们的结合来过滤 <em>Person</em> 对象的列表。</li>\n</ol>\n<blockquote>\n<p>CriteriaPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CriteriaPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Single\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Married\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Female\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Married\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Female\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Single\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵七\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Single\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        persons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵八\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Male\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Single\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Criteria</span> male <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CriteriaMale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Criteria</span> female <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CriteriaFemale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Criteria</span> single <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CriteriaSingle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Criteria</span> singleMale <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AndCriteria</span><span class=\"token punctuation\">(</span>single<span class=\"token punctuation\">,</span> male<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Criteria</span> singleOrFemale <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrCriteria</span><span class=\"token punctuation\">(</span>single<span class=\"token punctuation\">,</span> female<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"男性: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span>male<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"女性: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span>female<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单身男性: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span>singleMale<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单身或者女性: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span>singleOrFemale<span class=\"token punctuation\">.</span><span class=\"token function\">meetCriteria</span><span class=\"token punctuation\">(</span>persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printPersons</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> persons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person <span class=\"token operator\">:</span> persons<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person : [ Name : \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                               <span class=\"token operator\">+</span><span class=\"token string\">\", Gender : \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getGender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                               <span class=\"token operator\">+</span><span class=\"token string\">\", Marital Status : \"</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getMaritalStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                               <span class=\"token operator\">+</span><span class=\"token string\">\" ]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>男性:<br />\nPerson : [Name : 张三，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 李四，Gender : Male, Marital Status : Married]<br />\n Person : [Name : 赵七，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 赵八，Gender : Male, Marital Status : Single]<br />\n 女性:<br />\nPerson : [Name : 王五，Gender : Female, Marital Status : Married]<br />\n Person : [Name : 赵六，Gender : Female, Marital Status : Single]<br />\n 单身女性:<br />\nPerson : [Name : 张三，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 赵七，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 赵八，Gender : Male, Marital Status : Single]<br />\n 单身或者女性:<br />\nPerson : [Name : 张三，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 赵六，Gender : Female, Marital Status : Single]<br />\n Person : [Name : 赵七，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 赵八，Gender : Male, Marital Status : Single]<br />\n Person : [Name : 王五，Gender : Female, Marital Status : Married]</p>\n</blockquote>\n<h3 id=\"组合模式\"><a class=\"anchor\" href=\"#组合模式\">#</a> 组合模式</h3>\n<blockquote>\n<p>目的：将对象组合成树形结构以表示 &quot;部分 - 整体&quot; 的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p>主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p>\n<p>应用实例： 算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。</p>\n<p>使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。</p>\n</blockquote>\n<ol>\n<li>创建 <em>Employee</em> 类，该类带有 <em>Employee</em> 对象的列表。</li>\n</ol>\n<blockquote>\n<p>Employee.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> dept<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> subordinates<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> dept<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dept <span class=\"token operator\">=</span> dept<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        subordinates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        subordinates<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        subordinates<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSubordinates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> subordinates<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Employee&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token string\">\", dept='\"</span> <span class=\"token operator\">+</span> dept <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token string\">\", salary=\"</span> <span class=\"token operator\">+</span> salary <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>使用 <em>Employee</em> 类来创建和打印员工的层次结构。</li>\n</ol>\n<blockquote>\n<p>CompositePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Employee</span> ceo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CEO\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Employee</span> headSales <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"销售部主管\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Employee</span> headPersons <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"人事部主管\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Employee</span> sale1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"销售职工\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Employee</span> sale2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵七\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"销售职工\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Employee</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵八\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"人事职工\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Employee</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵九\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"人事职工\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ceo<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>headSales<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ceo<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>headPersons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        headSales<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sale1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        headSales<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sale2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        headPersons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        headPersons<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ceo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> headEmployee <span class=\"token operator\">:</span> ceo<span class=\"token punctuation\">.</span><span class=\"token function\">getSubordinates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>headEmployee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> employee <span class=\"token operator\">:</span> headEmployee<span class=\"token punctuation\">.</span><span class=\"token function\">getSubordinates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>输出结果</li>\n</ol>\n<blockquote name=\"'赵九',\" dept=\"'人事职工',\" salary=\"10000\">\n<p>Employee {name=' 张三 ', dept='CEO', salary=30000}<br />\n Employee {name=' 李四 ', dept=' 销售部主管 ', salary=20000}<br />\n Employee {name=' 赵六 ', dept=' 销售职工 ', salary=10000}<br />\n Employee {name=' 赵七 ', dept=' 销售职工 ', salary=10000}<br />\n Employee {name=' 王五 ', dept=' 人事部主管 ', salary=20000}<br />\n Employee {name=' 赵八 ', dept=' 人事职工 ', salary=10000}<br />\nEmployee</p>\n</blockquote>\n<h3 id=\"装饰器模式\"><a class=\"anchor\" href=\"#装饰器模式\">#</a> 装饰器模式</h3>\n<blockquote>\n<p>意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p>\n<p>主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p>\n<p>应用实例：不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。</p>\n<p>使用场景： 1、扩展一个类的功能。 2、动态增加功能，动态撤销。</p>\n</blockquote>\n<ol>\n<li>创建一个接口</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"圆形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Rectangle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正方形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建实现了 <em>Shape</em> 接口的抽象装饰类。</li>\n</ol>\n<blockquote>\n<p>ShapeDecorator.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeDecorator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Shape</span> decoratorShape<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratorShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>decoratorShape <span class=\"token operator\">=</span> decoratorShape<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        decoratorShape<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>创建扩展了 <em>ShapeDecorator</em> 类的实体装饰类。</li>\n</ol>\n<blockquote>\n<p>RedShapeDecorator.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedShapeDecorator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ShapeDecorator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratorShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>decoratorShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        decoratorShape<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">setRedBorder</span><span class=\"token punctuation\">(</span>decoratorShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRedBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Shape</span> decoratorShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红色边框\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 <em>RedShapeDecorator</em> 来装饰 <em>Shape</em> 对象。</li>\n</ol>\n<blockquote>\n<p>DecoratorPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DecoratorPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Shape</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ShapeDecorator</span> redCircle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ShapeDecorator</span> redRectangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedShapeDecorator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正常边框的圆形：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红色边框的圆形：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        redCircle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红色边框的矩形：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        redRectangle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>正常边框的圆形：<br />\n圆形<br />\n红色边框的圆形：<br />\n圆形<br />\n红色边框<br />\n红色边框的矩形：<br />\n正方形<br />\n红色边框</p>\n</blockquote>\n<h3 id=\"外观模式\"><a class=\"anchor\" href=\"#外观模式\">#</a> 外观模式</h3>\n<blockquote>\n<p>目的：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>\n<p>主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。</p>\n<p>应用实例： 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。</p>\n<p>使用场景： 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。</p>\n</blockquote>\n<ol>\n<li>创建一个接口。</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个圆形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Rectangle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个矩形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Square.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个正方形\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建一个外观类。</li>\n</ol>\n<blockquote>\n<p>ShapeMaker.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeMaker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Shape</span> circle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Shape</span> rectangle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Shape</span> square<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShapeMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        rectangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        square <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drawSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        square<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用该外观类画出各种类型的形状。</li>\n</ol>\n<blockquote>\n<p>FacadePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FacadePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ShapeMaker</span> shapeMaker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShapeMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        shapeMaker<span class=\"token punctuation\">.</span><span class=\"token function\">drawCircle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        shapeMaker<span class=\"token punctuation\">.</span><span class=\"token function\">drawRectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        shapeMaker<span class=\"token punctuation\">.</span><span class=\"token function\">drawSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>画一个圆形</p>\n<p>画一个矩形</p>\n<p>画一个正方形</p>\n</blockquote>\n<h3 id=\"享元模式\"><a class=\"anchor\" href=\"#享元模式\">#</a> 享元模式</h3>\n<blockquote>\n<p>目的：运用共享技术有效地支持大量细粒度的对象。</p>\n<p>主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p>\n<p>应用实例： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。</p>\n<p>使用场景： 1、系统有大量相似对象。 2、需要缓冲池的场景。</p>\n</blockquote>\n<ol>\n<li>创建一个接口。</li>\n</ol>\n<blockquote>\n<p>Shape.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>Circle.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> radius<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"画一个圆，颜色：\"</span><span class=\"token operator\">+</span>color<span class=\"token operator\">+</span><span class=\"token string\">\"，x：\"</span><span class=\"token operator\">+</span>x<span class=\"token operator\">+</span><span class=\"token string\">\"，y：\"</span><span class=\"token operator\">+</span>y<span class=\"token operator\">+</span><span class=\"token string\">\"，raduis：\"</span><span class=\"token operator\">+</span>radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建一个工厂，生成基于给定信息的实体类的对象。</li>\n</ol>\n<blockquote>\n<p>ShapeFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Shape</span><span class=\"token punctuation\">></span></span> circleMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Shape</span> <span class=\"token function\">getCircle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Circle</span><span class=\"token punctuation\">)</span> circleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>circle <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            circleMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span>circle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建一个有颜色的圆形：\"</span><span class=\"token operator\">+</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> circle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用该工厂，通过传递颜色信息来获取实体类的对象。</li>\n</ol>\n<blockquote>\n<p>FlyweightPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlyweightPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"红色\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"黄色\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"绿色\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"蓝色\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">Circle</span> circle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Circle</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">ShapeFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCircle</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRandomColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            circle<span class=\"token punctuation\">.</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRandomX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            circle<span class=\"token punctuation\">.</span><span class=\"token function\">setY</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRandomY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            circle<span class=\"token punctuation\">.</span><span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            circle<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRandomY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRandomX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRandomColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> colors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>colors<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>创建一个有颜色的圆形：白色</p>\n<p>画一个圆，颜色：白色，x：44，y：48，raduis：100</p>\n<p>画一个圆，颜色：绿色，x：83，y：14，raduis：100</p>\n<p>创建一个有颜色的圆形：红色</p>\n<p>画一个圆，颜色：红色，x：95，y：76，raduis：100</p>\n<p>画一个圆，颜色：绿色，x：45，y：4，raduis：100</p>\n<p>画一个圆，颜色：绿色，x：37，y：9，raduis：100</p>\n<p>画一个圆，颜色：红色，x：6，y：70，raduis：100</p>\n<p>创建一个有颜色的圆形：蓝色</p>\n<p>画一个圆，颜色：蓝色，x：44，y：30，raduis：100</p>\n<p>创建一个有颜色的圆形：黄色</p>\n<p>画一个圆，颜色：黄色，x：95，y：49，raduis：100</p>\n<p>画一个圆，颜色：红色，x：65，y：4，raduis：100</p>\n</blockquote>\n<h3 id=\"代理模式\"><a class=\"anchor\" href=\"#代理模式\">#</a> 代理模式</h3>\n<blockquote>\n<p>意图：为其他对象提供一种代理以控制对这个对象的访问。</p>\n<p>主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>\n<p>应用实例： 1、Windows 里面的快捷方式。2、买火车票不一定在火车站买，也可以去代售点。3、spring aop。</p>\n<p>使用场景：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache 代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。</p>\n</blockquote>\n<ol>\n<li>创建一个接口。</li>\n</ol>\n<blockquote>\n<p>Image.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Image</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>RealImage.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealImage</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Image</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RealImage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileName <span class=\"token operator\">=</span> fileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">loadFromDisk</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">loadFromDisk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"磁盘加载\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示\"</span><span class=\"token operator\">+</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ProxyImage.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProxyImage</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Image</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RealImage</span> realImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProxyImage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fileName <span class=\"token operator\">=</span> fileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>realImage <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            realImage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealImage</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        realImage<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>当被请求时，使用 <em>ProxyImage</em> 来获取 <em>RealImage</em> 类的对象。</li>\n</ol>\n<blockquote>\n<p>ProxyPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProxyPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ProxyImage</span> proxyImage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyImage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 从磁盘加载</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        proxyImage<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 不从磁盘加载</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        proxyImage<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4. 输出结果</p>\n<blockquote>\n<p>磁盘加载 test.jpg<br />\n 显示 test.jpg<br />\n 显示 test.jpg</p>\n</blockquote>\n"},{"title":"行为型模式","date":"2020-12-19T03:48:00.000Z","_content":"\n### 责任链模式\n\n> 目的：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。\n>\n> 主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。\n>\n> 应用实例： 1、红楼梦中的\"击鼓传花\"。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。\n>\n> 使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。\n\n1. 创建抽象的记录器类。\n\n> AbstractLogger.java\n\n```java\npublic abstract class AbstractLogger {\n    public static int INFO = 1;\n    public static int DEBUG = 2;\n    public static int ERROR = 3;\n\n    protected int level;\n\n    //责任链的下一个元素\n    protected AbstractLogger nextLogger;\n\n    public void setNextLogger(AbstractLogger nextLogger){\n        this.nextLogger = nextLogger;\n    }\n\n    public void logMessage(int level,String message){\n        if (this.level <= level){\n            write(message);\n        }\n        if (nextLogger != null){\n            nextLogger.logMessage(level,message);\n        }\n    }\n\n    protected abstract void write(String message);\n\n}\n```\n\n2. 创建扩展了该记录器类的实体类。\n\n>ConsoleLogger.java\n\n```java\npublic class ConsoleLogger extends AbstractLogger {\n\n    public ConsoleLogger(int level){\n        this.level = level;\n    }\n\n    @Override\n    protected void write(String message) {\n        System.out.println(\"标准打印::日志:\"+message);\n    }\n}\n```\n\n> FileLogger.java\n\n```java\npublic class FileLogger extends AbstractLogger {\n\n    public FileLogger(int level){\n        this.level = level;\n    }\n\n    @Override\n    protected void write(String message) {\n        System.out.println(\"文件打印:日志:\"+message);\n    }\n}\n```\n\n> ErrorLogger.java\n\n```java\npublic class ErrorLogger extends AbstractLogger {\n\n    public ErrorLogger(int level){\n        this.level = level;\n    }\n\n    @Override\n    protected void write(String message) {\n        System.out.println(\"错误打印::日志:\"+message);\n    }\n}\n```\n\n3. 创建不同类型的记录器。赋予它们不同的错误级别，并在每个记录器中设置下一个记录器。每个记录器中的下一个记录器代表的是链的一部分。\n\n> ChainPatternDemo.java\n\n```java\npublic class ChainPatternDemo {\n    public static void main(String[] args) {\n        AbstractLogger loggerChain = getChainOfLoggers();\n        loggerChain.logMessage(AbstractLogger.INFO,\"这是一个信息\");\n        System.out.println();\n        loggerChain.logMessage(AbstractLogger.DEBUG,\"这是一个调试信息\");\n        System.out.println();\n        loggerChain.logMessage(AbstractLogger.ERROR,\"这是一个错误信息\");\n    }\n    public static AbstractLogger getChainOfLoggers(){\n        AbstractLogger errorLogger = new ErrorLogger(AbstractLogger.ERROR);\n        FileLogger fileLogger = new FileLogger(AbstractLogger.DEBUG);\n        ConsoleLogger consoleLogger = new ConsoleLogger(AbstractLogger.INFO);\n\n        errorLogger.setNextLogger(fileLogger);\n        fileLogger.setNextLogger(consoleLogger);\n\n        return errorLogger;\n    }\n}\n```\n\n4. 输出结果\n\n> 标准打印::日志:这是一个信息\n>\n> 文件打印:日志:这是一个调试信息\n>\n> 标准打印::日志:这是一个调试信息\n>\n> 错误打印::日志:这是一个错误信息\n>\n> 文件打印:日志:这是一个错误信息\n>\n> 标准打印::日志:这是一个错误信息\n\n### 命令模式\n\n> 意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。\n>\n> 主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。\n>\n> 应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。\n>\n> 使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。\n\n1. 创建一个命令接口。\n\n> Order.java\n\n```java\npublic interface Order {\n    void excute();\n}\n```\n\n2. 创建一个请求类。\n\n> Stock.java\n\n```java\npublic class Stock {\n    private String name = \"苹果\";\n    private int quantity = 10;\n\n    public void buy(){\n        System.out.println(\"购买商品[名字：\"+name+\"，数量：\"+quantity+\"]\");\n    }\n\n    public void sell(){\n        System.out.println(\"销售商品[名字：\"+name+\"，数量：\"+quantity+\"]\");\n    }\n}\n```\n\n3. 创建实现了 *Order* 接口的实体类。\n\n> BuyStock.java\n\n```java\npublic class BuyStock implements Order {\n\n    private Stock appleStock;\n\n    public BuyStock(Stock appleStock){\n        this.appleStock = appleStock;\n    }\n\n    @Override\n    public void excute() {\n        appleStock.buy();\n    }\n}\n```\n\n> SellStock.java\n\n```java\npublic class SellStock implements Order {\n\n    private Stock appleStock;\n\n    public SellStock(Stock appleStock){\n        this.appleStock = appleStock;\n    }\n\n    @Override\n    public void excute() {\n        appleStock.sell();\n    }\n}\n```\n\n4. 创建命令调用类。\n\n> Broker.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Broker {\n    private List<Order> orderList = new ArrayList<>();\n\n    public void takeOrder(Order order){\n        orderList.add(order);\n    }\n\n    public void plcaeOrder(){\n        for (Order order : orderList){\n            order.excute();\n        }\n        orderList.clear();\n    }\n}\n```\n\n5. 使用 Broker 类来接受并执行命令。\n\n> CommandPatternDemo.java\n\n```java\npublic class CommandPatternDemo {\n    public static void main(String[] args) {\n        Stock appleStock = new Stock();\n\n        BuyStock buyStockOrder = new BuyStock(appleStock);\n        SellStock sellStockOrder = new SellStock(appleStock);\n\n        Broker broker = new Broker();\n        broker.takeOrder(buyStockOrder);\n        broker.takeOrder(sellStockOrder);\n\n        broker.plcaeOrder();\n    }\n}\n```\n\n6. 输出结果\n\n> 购买商品[名字：苹果，数量：10]\n>\n> 销售商品[名字：苹果，数量：10]\n\n### 解释器模式\n\n>意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。\n>\n>主要解决：对于一些固定文法构建一个解释句子的解释器。\n>\n>应用实例：编译器、运算表达式计算。\n>\n>使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。\n\n1. 创建一个表达式接口。\n\n> Expression.java\n\n ```java\npublic interface Expression {\n     boolean interpret(String context);\n}\n ```\n\n2. 创建实现了上述接口的实体类。\n\n> TerminalExpression.java\n\n ```java\npublic class TerminalExpression implements Expression {\n\n    private String data;\n\n    public TerminalExpression(String data){\n        this.data = data;\n    }\n\n    @Override\n    public boolean interpret(String context) {\n        if (context.contains(data)){\n            return true;\n        }\n        return false;\n    }\n}\n ```\n\n> AndExpression.java\n\n````java\npublic class AndExpression implements Expression {\n\n    private Expression expr1 = null;\n    private Expression expr2 = null;\n\n    public AndExpression(Expression expr1,Expression expr2){\n        this.expr1 = expr1;\n        this.expr2 = expr2;\n    }\n\n    @Override\n    public boolean interpret(String context) {\n        return expr1.interpret(context) && expr2.interpret(context);\n    }\n}\n````\n\n> OrExpression.java\n\n```java\npublic class OrExpression implements Expression {\n\n    private Expression expr1 = null;\n    private Expression expr2 = null;\n\n    public OrExpression(Expression expr1, Expression expr2){\n        this.expr1 = expr1;\n        this.expr2 = expr2;\n    }\n\n    @Override\n    public boolean interpret(String context) {\n        return expr1.interpret(context) || expr2.interpret(context);\n    }\n}\n```\n\n3. InterpreterPatternDemo使用 *Expression* 类来创建规则，并解析它们。\n\n> InterpreterPatternDemo.java\n\n```java\npublic class InterpreterPatternDemo {\n\n    //规则：张三 和 李四 是男性\n    public static Expression getMaleExpression(){\n        Expression zhangsan = new TerminalExpression(\"张三\");\n        Expression lisi = new TerminalExpression(\"李四\");\n        return new OrExpression(zhangsan,lisi);\n    }\n\n    //规则：王五是一个已婚的女性\n    public static Expression getMarriedWomenExpression(){\n        Expression wangwu = new TerminalExpression(\"王五\");\n        Expression married = new TerminalExpression(\"已结婚\");\n        return new AndExpression(wangwu,married);\n    }\n\n    public static void main(String[] args) {\n        Expression isMale = getMaleExpression();\n        Expression isMarriedWomen = getMarriedWomenExpression();\n\n        System.out.println(\"张三是男性？\"+isMale.interpret(\"张三\"));\n        System.out.println(\"王五是一个已婚的女性？\"+isMarriedWomen.interpret(\"王五已结婚\"));\n    }\n}\n```\n\n4. 输出结果\n\n> 张三是男性？true\n>\n> 王五是一个已婚的女性？true\n\n### 迭代器模式\n\n> 意图：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。\n>\n> 主要解决：不同的方式来遍历整个整合对象。\n>\n> 应用实例：JAVA 中的 iterator。\n>\n> 使用场景： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。\n\n1. 创建接口。\n\n> Iterator.java\n\n```java\npublic interface Iterator {\n    boolean hasNext();\n    Object next();\n}\n```\n\n2. 创建实现了 *Container* 接口的实体类。该类有实现了 *Iterator* 接口的内部类 *NameIterator*。\n\n> Container.java\n\n```java\npublic interface Container {\n    Iterator getIterator();\n}\n```\n\n> NameRepository.java\n\n```java\npublic class NameRepository implements Container{\n    public String[] names = {\"张三\",\"李四\",\"王五\",\"赵六\"};\n\n    @Override\n    public Iterator getIterator() {\n        return new NameInterator();\n    }\n    private class NameInterator implements Iterator{\n\n        int index;\n\n        @Override\n        public boolean hasNext() {\n            if (index < names.length){\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Object next() {\n            if (this.hasNext()){\n                return names[index++];\n            }\n            return null;\n        }\n    }\n}\n```\n\n3. 使用 *NameRepository* 来获取迭代器，并打印名字。\n\n> IteratorPatternDemo.java\n\n```java\npublic class IteratorPatternDemo {\n    public static void main(String[] args) {\n        NameRepository nameRepository = new NameRepository();\n\n        for (Iterator iterator = nameRepository.getIterator();iterator.hasNext();){\n            String name = (String) iterator.next();\n            System.out.println(name);\n        }\n    }\n}\n```\n\n4. 输出结果\n\n> 张三\n>\n> 李四\n>\n> 王五\n>\n> 赵六\n\n### 中介者模式\n\n> 意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n>\n> 主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。\n>\n> 应用实例： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。\n>\n> 使用场景： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。\n\n1. 创建中介类。\n\n> ChatRoom.java\n\n```java\npublic class ChatRoom {\n    public static void showMessage(User user,String message){\n        System.out.println(\"[\"+user.getName()+\"]\"+message);\n    }\n}\n```\n\n2. 创建 user 类。\n\n> User.java\n\n```java\npublic class User {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n    public User(String name){\n        this.name = name;\n    }\n    public void sendMessage(String message){\n        ChatRoom.showMessage(this,message);\n    }\n}\n```\n\n3. 使用 *User* 对象来显示他们之间的通信。\n\n> MediatorPatternDemo.java\n\n```java\npublic class MediatorPatternDemo {\n    public static void main(String[] args) {\n        User zhangsan = new User(\"张三\");\n        User lisi = new User(\"李四\");\n\n        zhangsan.sendMessage(\"你好！李四\");\n        lisi.sendMessage(\"你好！张三\");\n    }\n}\n```\n\n4. 输出结果\n\n> [张三]你好！李四\n>\n> [李四]你好！张三\n\n### 备忘录模式\n\n> 意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。\n>\n> 主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。\n>\n> 应用实例： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。\n>\n> 使用场景： 1、需要保存/恢复数据的相关状态场景。 2、提供一个可回滚的操作。\n\n1. 创建 Memento 类。\n\n> Memento.java\n\n```java\npublic class Memento {\n    private String state;\n\n    public Memento(String state){\n        this.state = state;\n    }\n    public String getState(){\n        return state;\n    }\n}\n```\n\n2. 创建 Originator 类。\n\n> Originator.java\n\n```java\npublic class Originator {\n    private String state;\n\n    public void setState(String state){\n        this.state = state;\n    }\n\n    public String getState(){\n        return state;\n    }\n\n    public Memento saveStateToMemento(){\n        return new Memento(state);\n    }\n\n    public void getStateFromMemento(Memento memento){\n        state = memento.getState();\n    }\n}\n```\n\n3. 创建 CareTaker 类。\n\n> CareTaker.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CareTaker {\n    private List<Memento> mementoList = new ArrayList<>();\n\n    public void add(Memento state){\n        mementoList.add(state);\n    }\n\n    public Memento get(int index){\n        return mementoList.get(index);\n    }\n}\n```\n\n4. 使用 *CareTaker* 和 *Originator* 对象。\n\n> MementoPatternDemo.java\n\n```java\npublic class MementoPatternDemo {\n    public static void main(String[] args) {\n        Originator originator = new Originator();\n        CareTaker careTaker = new CareTaker();\n        originator.setState(\"状态 #1\");\n        originator.setState(\"状态 #2\");\n        careTaker.add(originator.saveStateToMemento());\n        originator.setState(\"状态 #3\");\n        careTaker.add(originator.saveStateToMemento());\n        originator.setState(\"状态 #4\");\n        System.out.println(\"当前状态：\"+originator.getState());\n        originator.getStateFromMemento(careTaker.get(0));\n        System.out.println(\"第一次保存的状态：\"+originator.getState());\n        originator.getStateFromMemento(careTaker.get(1));\n        System.out.println(\"第二次保存的状态：\"+originator.getState());\n    }\n}\n```\n\n5. 输出结果\n\n> 当前状态：状态 #4\n>\n> 第一次保存的状态：状态 #2\n>\n> 第二次保存的状态：状态 #3\n\n### 观察者模式\n\n> 意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。\n>\n> 主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。\n>\n> 应用实例： 拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。\n>\n> 使用场景：1、一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。2、一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。3、一个对象必须通知其他对象，而并不知道这些对象是谁。4、需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。\n\n1. 创建 Subject 类。\n\n> Subject.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Subject {\n    private List<Observer> observers = new ArrayList<>();\n    private int state;\n\n    public int getState() {\n        return state;\n    }\n\n    public void setState(int state) {\n        this.state = state;\n        notifyAllObserver();\n    }\n\n    public void attach(Observer observer){\n        observers.add(observer);\n    }\n\n    private void notifyAllObserver() {\n        for (Observer observer : observers){\n            observer.update();\n        }\n    }\n\n}\n```\n\n2. 创建 Observer 类。\n\n> Observer.java\n\n```java\npublic abstract class Observer {\n    protected Subject subject;\n    public abstract void update();\n}\n```\n\n3. 创建实体观察者类。\n\n> BinaryObserver.java\n\n```java\npublic class BinaryObserver extends Observer {\n\n    public BinaryObserver(Subject subject){\n        this.subject = subject;\n        this.subject.attach(this);\n    }\n\n    @Override\n    public void update() {\n        System.out.println(\"二进制：\"+Integer.toBinaryString(subject.getState()));\n    }\n}\n```\n\n> OctalObserver.java\n\n```java\npublic class OctalObserver extends Observer {\n\n    public OctalObserver(Subject subject){\n        this.subject = subject;\n        this.subject.attach(this);\n    }\n\n    @Override\n    public void update() {\n        System.out.println(\"八进制：\"+Integer.toOctalString(subject.getState()));\n    }\n}\n```\n\n> HexaObserver.java\n\n```java\npublic class HexaObserver extends Observer {\n\n    public HexaObserver(Subject subject){\n        this.subject = subject;\n        this.subject.attach(this);\n    }\n\n    @Override\n    public void update() {\n        System.out.println(\"十六进制：\"+Integer.toHexString(subject.getState()));\n    }\n}\n```\n\n4. 使用 *Subject* 和实体观察者对象。\n\n> ObserverPatternDemo.java\n\n```java\npublic class ObserverPatternDemo {\n    public static void main(String[] args) {\n        Subject subject = new Subject();\n        new BinaryObserver(subject);\n        new OctalObserver(subject);\n        new HexaObserver(subject);\n\n        System.out.println(\"第一次状态改为15\");\n        subject.setState(15);\n        System.out.println(\"第二次状态改为10\");\n        subject.setState(10);\n    }\n}\n```\n\n5. 输出结果\n\n> 第一次状态改为15\n>\n> 二进制：1111\n>\n> 八进制：17\n>\n> 十六进制：f\n>\n> 第二次状态改为10\n>\n> 二进制：1010\n>\n> 八进制：12\n>\n> 十六进制：a\n\n### 状态模式\n\n> 意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。\n>\n> 主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。\n>\n> 应用实例： 打篮球的时候运动员可以有正常状态、不正常状态和超常状态。\n>\n> 使用场景： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。\n\n1. 创建一个接口。\n\n> State.java\n\n```java\npublic interface State {\n    void doAction(Context context);\n}\n```\n\n2. 创建实现接口的实体类。\n\n> StartState.java\n\n```java\npublic class StartState implements State {\n    @Override\n    public void doAction(Context context) {\n        System.out.println(\"玩家处于一个开始状态\");\n        context.setState(this);\n    }\n\n    @Override\n    public String toString(){\n        return \"开始状态\";\n    }\n}\n```\n\n> StopState.java\n\n```java\npublic class StopState implements State {\n    @Override\n    public void doAction(Context context) {\n        System.out.println(\"玩家处于一个停止状态\");\n        context.setState(this);\n    }\n\n    @Override\n    public String toString() {\n        return \"停止状态\";\n    }\n}\n```\n\n3. 创建 *Context* 类。\n\n> Context.java\n\n````java\npublic class Context {\n    private State state;\n\n    public Context(){\n        state = null;\n    }\n\n    public void setState(State state){\n        this.state = state;\n    }\n\n    public State getState() {\n        return state;\n    }\n}\n````\n\n4. 使用 *Context* 来查看当状态 *State* 改变时的行为变化。\n\n> StatePatternDemo.java\n\n```java\npublic class StatePatternDemo {\n    public static void main(String[] args) {\n        Context context = new Context();\n\n        StartState startState = new StartState();\n        startState.doAction(context);\n        System.out.println(context.getState().toString());\n\n        StopState stopState = new StopState();\n        stopState.doAction(context);\n        System.out.println(context.getState().toString());\n    }\n}\n```\n\n5. 输出结果\n\n> 玩家处于一个开始状态\n> 开始状态\n> 玩家处于一个停止状态\n> 停止状态\n\n### 策略模式\n\n> 意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。\n>\n> 主要解决：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。\n>\n> 应用实例： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。\n>\n> 使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。\n\n1. 创建一个接口。\n\n> Strategy.java\n\n```java\npublic interface Strategy {\n    int doOperation(int num1,int num2);\n}\n```\n\n2. 创建实现接口的实体类。\n\n> OperationAdd.java\n\n```java\npublic class OperationAdd implements Strategy {\n    @Override\n    public int doOperation(int num1, int num2) {\n        return num1 + num2;\n    }\n}\n```\n\n> OperationSubtract.java\n\n```java\npublic class OperationSubtract implements Strategy {\n    @Override\n    public int doOperation(int num1, int num2) {\n        return num1 - num2;\n    }\n}\n```\n\n> OperationMultiply.java\n\n````java\npublic class OperationMultiply implements Strategy {\n    @Override\n    public int doOperation(int num1, int num2) {\n        return num1 * num2;\n    }\n}\n````\n\n3. 创建 *Context* 类。\n\n> Context.java\n\n```java\npublic class Context {\n    private Strategy strategy;\n\n    public Context(Strategy strategy) {\n        this.strategy = strategy;\n    }\n\n    public int executeStrategy(int num1, int num2){\n        return strategy.doOperation(num1,num2);\n    }\n}\n```\n\n4. 使用 *Context* 来查看当它改变策略 *Strategy* 时的行为变化。\n\n> StrategyPatternDemo.java\n\n```java\npublic class StrategyPatternDemo {\n    public static void main(String[] args) {\n        Context context = new Context(new OperationAdd());\n        System.out.println(\"10 + 5 = \"+context.executeStrategy(10,5));\n\n        context = new Context(new OperationSubtract());\n        System.out.println(\"10 - 5 = \"+context.executeStrategy(10,5));\n\n        context = new Context(new OperationMultiply());\n        System.out.println(\"10 * 5 = \"+context.executeStrategy(10,5));\n    }\n}\n```\n\n5. 输出结果\n\n> 10 + 5 = 15\n>\n> 10 - 5 = 5\n>\n> 10 * 5 = 50\n\n### 模板方法\n\n> 意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。\n>\n> 主要解决：一些方法通用，却在每一个子类都重新写了这一方法。\n>\n> 应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。\n>\n> 使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\n\n1. 创建一个抽象类，它的模板方法被设置为 final。\n\n> Game.java\n\n```java\npublic abstract class Game {\n    abstract void initialize();\n    abstract void startPlay();\n    abstract void endPlay();\n\n    //模板\n    public final void play(){\n        //初始化游戏\n        initialize();\n        //开始游戏\n        startPlay();\n        //结束游戏\n        endPlay();\n    }\n}\n```\n\n2. 创建扩展了上述类的实体类。\n\n> Cricket.java\n\n```java\npublic class Cricket extends Game {\n    @Override\n    void initialize() {\n        System.out.println(\"板球游戏初始化完成，请开始游戏\");\n    }\n\n    @Override\n    void startPlay() {\n        System.out.println(\"板球游戏已开始\");\n    }\n\n    @Override\n    void endPlay() {\n        System.out.println(\"板球游戏已结束\");\n    }\n}\n```\n\n> Football.java\n\n```java\npublic class Football extends Game {\n    @Override\n    void initialize() {\n        System.out.println(\"足球游戏初始化完成，请开始游戏\");\n    }\n\n    @Override\n    void startPlay() {\n        System.out.println(\"足球游戏已开始\");\n    }\n\n    @Override\n    void endPlay() {\n        System.out.println(\"足球游戏已结束\");\n    }\n}\n```\n\n3. 使用 *Game* 的模板方法 play() 来演示游戏的定义方式。\n\n> TemplatePatternDemo.java\n\n```java\npublic class TemplatePatternDemo {\n    public static void main(String[] args) {\n        Game game = new Cricket();\n        game.play();\n        game = new Football();\n        game.play();\n    }\n}\n```\n\n4. 输出结果\n\n> 板球游戏初始化完成，请开始游戏\n>\n> 板球游戏已开始\n>\n> 板球游戏已结束\n>\n> 足球游戏初始化完成，请开始游戏\n>\n> 足球游戏已开始\n>\n> 足球游戏已结束\n\n### 访问者模式\n\n> 意图：主要将数据结构与数据操作分离。\n>\n> 主要解决：稳定的数据结构和易变的操作耦合问题。\n>\n> 应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。\n>\n> 使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作\"污染\"这些对象的类，也不希望在增加新操作时修改这些类。\n\n1. 定义一个表示元素的接口。\n\n> ComputerPart.java\n\n```java\npublic interface ComputerPart {\n    void accept(ComputerPartVisitor computerPartVisitor);\n}\n```\n\n2. 创建扩展了上述类的实体类。\n\n> Mouse.java\n\n```java\npublic class Mouse implements ComputerPart {\n    @Override\n    public void accept(ComputerPartVisitor computerPartVisitor) {\n        computerPartVisitor.visit(this);\n    }\n}\n```\n\n> Keyboard.java\n\n```java\npublic class Keyboard implements ComputerPart {\n    @Override\n    public void accept(ComputerPartVisitor computerPartVisitor) {\n        computerPartVisitor.visit(this);\n    }\n}\n```\n\n> Monitor.java\n\n```java\npublic class Monitor implements ComputerPart {\n    @Override\n    public void accept(ComputerPartVisitor computerPartVisitor) {\n        computerPartVisitor.visit(this);\n    }\n}\n```\n\n> Computer.java\n\n```java\npublic class Computer implements ComputerPart {\n\n    ComputerPart[] parts;\n\n    public Computer(){\n        parts = new ComputerPart[]{new Mouse(),new Keyboard(),new Monitor()};\n    }\n\n    @Override\n    public void accept(ComputerPartVisitor computerPartVisitor) {\n        for (int i = 0; i < parts.length; i++) {\n            parts[i].accept(computerPartVisitor);\n        }\n        computerPartVisitor.visit(this);\n    }\n}\n```\n\n3. 定义一个表示访问者的接口。\n\n> ComputerPartVisitor.java\n\n```java\npublic interface ComputerPartVisitor {\n    void visit(Computer computer);\n    void visit(Mouse mouse);\n    void visit(Keyboard keyboard);\n    void visit(Monitor monitor);\n}\n```\n\n4. 定义一个表示访问者的接口。创建实现了上述类的实体访问者。\n\n> ComputerPartDisplayVisitor.java\n\n```java\npublic class ComputerPartDisplayVisitor implements ComputerPartVisitor{\n    @Override\n    public void visit(Computer computer) {\n        System.out.println(\"显示计算机\");\n    }\n\n    @Override\n    public void visit(Mouse mouse) {\n        System.out.println(\"显示鼠标\");\n    }\n\n    @Override\n    public void visit(Keyboard keyboard) {\n        System.out.println(\"显示键盘\");\n    }\n\n    @Override\n    public void visit(Monitor monitor) {\n        System.out.println(\"显示监视器\");\n    }\n}\n```\n\n5. 使用 *ComputerPartDisplayVisitor* 来显示 *Computer* 的组成部分。\n\n> VisitorPatternDemo.java\n\n```java\npublic class VisitorPatternDemo {\n    public static void main(String[] args) {\n        ComputerPart computer = new Computer();\n        computer.accept(new ComputerPartDisplayVisitor());\n    }\n}\n```\n\n6. 显示结果\n\n>显示鼠标\n>\n>显示键盘\n>\n>显示监视器\n>\n>显示计算机\n\n### 空对象模式\n\n> 在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。\n>\n> 在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。\n\n1. 创建一个抽象类。\n\n```java\npublic abstract class AbstractCustomer {\n    protected String name;\n    public abstract boolean isNil();\n    public abstract String getName();\n}\n```\n\n2. 创建扩展了上述类的实体类。\n\n> RealCustomer.java\n\n```java\npublic class RealCustomer extends AbstractCustomer {\n\n    public RealCustomer(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public boolean isNil() {\n        return false;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n}\n```\n\n> NullCustomer.java\n\n```java\npublic class NullCustomer extends AbstractCustomer {\n    @Override\n    public boolean isNil() {\n        return false;\n    }\n\n    @Override\n    public String getName() {\n        return \"不可用的值\";\n    }\n}\n```\n\n3. 创建 *CustomerFactory* 类。\n\n> CustomerFactory.java\n\n```java\npublic class CustomerFactory {\n    public static final String[] names = {\"张三\",\"李四\",\"王五\"};\n\n    public static AbstractCustomer getCustomer(String name){\n        for (int i = 0;i < names.length;i++){\n            if (names[i].equalsIgnoreCase(name)){\n                return new RealCustomer(name);\n            }\n        }\n        return new NullCustomer();\n    }\n}\n```\n\n4. 使用 *CustomerFactory*，基于客户传递的名字，来获取 *RealCustomer* 或 *NullCustomer* 对象。\n\n> NullPatternDemo.java\n\n```java\npublic class NullPatternDemo {\n    public static void main(String[] args) {\n        AbstractCustomer customer1 = CustomerFactory.getCustomer(\"张三\");\n        AbstractCustomer customer2 = CustomerFactory.getCustomer(\"李四\");\n        AbstractCustomer customer3 = CustomerFactory.getCustomer(\"王五\");\n        AbstractCustomer customer4 = CustomerFactory.getCustomer(\"赵六\");\n\n        System.out.println(\"消费者\");\n        System.out.println(customer1.getName());\n        System.out.println(customer2.getName());\n        System.out.println(customer3.getName());\n        System.out.println(customer4.getName());\n    }\n}\n```\n\n5. 输出结果\n\n> 消费者\n> 张三\n> 李四\n> 王五\n> 不可用的值","source":"_posts/computer/course-3/behavioral_pattern.md","raw":"---\ntitle: 行为型模式\ndate: 2020/12/19 11:48\ncategories:\n\t- [计算机, 设计模式]\ntags: 设计模式\n\n---\n\n### 责任链模式\n\n> 目的：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。\n>\n> 主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。\n>\n> 应用实例： 1、红楼梦中的\"击鼓传花\"。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。\n>\n> 使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。\n\n1. 创建抽象的记录器类。\n\n> AbstractLogger.java\n\n```java\npublic abstract class AbstractLogger {\n    public static int INFO = 1;\n    public static int DEBUG = 2;\n    public static int ERROR = 3;\n\n    protected int level;\n\n    //责任链的下一个元素\n    protected AbstractLogger nextLogger;\n\n    public void setNextLogger(AbstractLogger nextLogger){\n        this.nextLogger = nextLogger;\n    }\n\n    public void logMessage(int level,String message){\n        if (this.level <= level){\n            write(message);\n        }\n        if (nextLogger != null){\n            nextLogger.logMessage(level,message);\n        }\n    }\n\n    protected abstract void write(String message);\n\n}\n```\n\n2. 创建扩展了该记录器类的实体类。\n\n>ConsoleLogger.java\n\n```java\npublic class ConsoleLogger extends AbstractLogger {\n\n    public ConsoleLogger(int level){\n        this.level = level;\n    }\n\n    @Override\n    protected void write(String message) {\n        System.out.println(\"标准打印::日志:\"+message);\n    }\n}\n```\n\n> FileLogger.java\n\n```java\npublic class FileLogger extends AbstractLogger {\n\n    public FileLogger(int level){\n        this.level = level;\n    }\n\n    @Override\n    protected void write(String message) {\n        System.out.println(\"文件打印:日志:\"+message);\n    }\n}\n```\n\n> ErrorLogger.java\n\n```java\npublic class ErrorLogger extends AbstractLogger {\n\n    public ErrorLogger(int level){\n        this.level = level;\n    }\n\n    @Override\n    protected void write(String message) {\n        System.out.println(\"错误打印::日志:\"+message);\n    }\n}\n```\n\n3. 创建不同类型的记录器。赋予它们不同的错误级别，并在每个记录器中设置下一个记录器。每个记录器中的下一个记录器代表的是链的一部分。\n\n> ChainPatternDemo.java\n\n```java\npublic class ChainPatternDemo {\n    public static void main(String[] args) {\n        AbstractLogger loggerChain = getChainOfLoggers();\n        loggerChain.logMessage(AbstractLogger.INFO,\"这是一个信息\");\n        System.out.println();\n        loggerChain.logMessage(AbstractLogger.DEBUG,\"这是一个调试信息\");\n        System.out.println();\n        loggerChain.logMessage(AbstractLogger.ERROR,\"这是一个错误信息\");\n    }\n    public static AbstractLogger getChainOfLoggers(){\n        AbstractLogger errorLogger = new ErrorLogger(AbstractLogger.ERROR);\n        FileLogger fileLogger = new FileLogger(AbstractLogger.DEBUG);\n        ConsoleLogger consoleLogger = new ConsoleLogger(AbstractLogger.INFO);\n\n        errorLogger.setNextLogger(fileLogger);\n        fileLogger.setNextLogger(consoleLogger);\n\n        return errorLogger;\n    }\n}\n```\n\n4. 输出结果\n\n> 标准打印::日志:这是一个信息\n>\n> 文件打印:日志:这是一个调试信息\n>\n> 标准打印::日志:这是一个调试信息\n>\n> 错误打印::日志:这是一个错误信息\n>\n> 文件打印:日志:这是一个错误信息\n>\n> 标准打印::日志:这是一个错误信息\n\n### 命令模式\n\n> 意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。\n>\n> 主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。\n>\n> 应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。\n>\n> 使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。\n\n1. 创建一个命令接口。\n\n> Order.java\n\n```java\npublic interface Order {\n    void excute();\n}\n```\n\n2. 创建一个请求类。\n\n> Stock.java\n\n```java\npublic class Stock {\n    private String name = \"苹果\";\n    private int quantity = 10;\n\n    public void buy(){\n        System.out.println(\"购买商品[名字：\"+name+\"，数量：\"+quantity+\"]\");\n    }\n\n    public void sell(){\n        System.out.println(\"销售商品[名字：\"+name+\"，数量：\"+quantity+\"]\");\n    }\n}\n```\n\n3. 创建实现了 *Order* 接口的实体类。\n\n> BuyStock.java\n\n```java\npublic class BuyStock implements Order {\n\n    private Stock appleStock;\n\n    public BuyStock(Stock appleStock){\n        this.appleStock = appleStock;\n    }\n\n    @Override\n    public void excute() {\n        appleStock.buy();\n    }\n}\n```\n\n> SellStock.java\n\n```java\npublic class SellStock implements Order {\n\n    private Stock appleStock;\n\n    public SellStock(Stock appleStock){\n        this.appleStock = appleStock;\n    }\n\n    @Override\n    public void excute() {\n        appleStock.sell();\n    }\n}\n```\n\n4. 创建命令调用类。\n\n> Broker.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Broker {\n    private List<Order> orderList = new ArrayList<>();\n\n    public void takeOrder(Order order){\n        orderList.add(order);\n    }\n\n    public void plcaeOrder(){\n        for (Order order : orderList){\n            order.excute();\n        }\n        orderList.clear();\n    }\n}\n```\n\n5. 使用 Broker 类来接受并执行命令。\n\n> CommandPatternDemo.java\n\n```java\npublic class CommandPatternDemo {\n    public static void main(String[] args) {\n        Stock appleStock = new Stock();\n\n        BuyStock buyStockOrder = new BuyStock(appleStock);\n        SellStock sellStockOrder = new SellStock(appleStock);\n\n        Broker broker = new Broker();\n        broker.takeOrder(buyStockOrder);\n        broker.takeOrder(sellStockOrder);\n\n        broker.plcaeOrder();\n    }\n}\n```\n\n6. 输出结果\n\n> 购买商品[名字：苹果，数量：10]\n>\n> 销售商品[名字：苹果，数量：10]\n\n### 解释器模式\n\n>意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。\n>\n>主要解决：对于一些固定文法构建一个解释句子的解释器。\n>\n>应用实例：编译器、运算表达式计算。\n>\n>使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。\n\n1. 创建一个表达式接口。\n\n> Expression.java\n\n ```java\npublic interface Expression {\n     boolean interpret(String context);\n}\n ```\n\n2. 创建实现了上述接口的实体类。\n\n> TerminalExpression.java\n\n ```java\npublic class TerminalExpression implements Expression {\n\n    private String data;\n\n    public TerminalExpression(String data){\n        this.data = data;\n    }\n\n    @Override\n    public boolean interpret(String context) {\n        if (context.contains(data)){\n            return true;\n        }\n        return false;\n    }\n}\n ```\n\n> AndExpression.java\n\n````java\npublic class AndExpression implements Expression {\n\n    private Expression expr1 = null;\n    private Expression expr2 = null;\n\n    public AndExpression(Expression expr1,Expression expr2){\n        this.expr1 = expr1;\n        this.expr2 = expr2;\n    }\n\n    @Override\n    public boolean interpret(String context) {\n        return expr1.interpret(context) && expr2.interpret(context);\n    }\n}\n````\n\n> OrExpression.java\n\n```java\npublic class OrExpression implements Expression {\n\n    private Expression expr1 = null;\n    private Expression expr2 = null;\n\n    public OrExpression(Expression expr1, Expression expr2){\n        this.expr1 = expr1;\n        this.expr2 = expr2;\n    }\n\n    @Override\n    public boolean interpret(String context) {\n        return expr1.interpret(context) || expr2.interpret(context);\n    }\n}\n```\n\n3. InterpreterPatternDemo使用 *Expression* 类来创建规则，并解析它们。\n\n> InterpreterPatternDemo.java\n\n```java\npublic class InterpreterPatternDemo {\n\n    //规则：张三 和 李四 是男性\n    public static Expression getMaleExpression(){\n        Expression zhangsan = new TerminalExpression(\"张三\");\n        Expression lisi = new TerminalExpression(\"李四\");\n        return new OrExpression(zhangsan,lisi);\n    }\n\n    //规则：王五是一个已婚的女性\n    public static Expression getMarriedWomenExpression(){\n        Expression wangwu = new TerminalExpression(\"王五\");\n        Expression married = new TerminalExpression(\"已结婚\");\n        return new AndExpression(wangwu,married);\n    }\n\n    public static void main(String[] args) {\n        Expression isMale = getMaleExpression();\n        Expression isMarriedWomen = getMarriedWomenExpression();\n\n        System.out.println(\"张三是男性？\"+isMale.interpret(\"张三\"));\n        System.out.println(\"王五是一个已婚的女性？\"+isMarriedWomen.interpret(\"王五已结婚\"));\n    }\n}\n```\n\n4. 输出结果\n\n> 张三是男性？true\n>\n> 王五是一个已婚的女性？true\n\n### 迭代器模式\n\n> 意图：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。\n>\n> 主要解决：不同的方式来遍历整个整合对象。\n>\n> 应用实例：JAVA 中的 iterator。\n>\n> 使用场景： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。\n\n1. 创建接口。\n\n> Iterator.java\n\n```java\npublic interface Iterator {\n    boolean hasNext();\n    Object next();\n}\n```\n\n2. 创建实现了 *Container* 接口的实体类。该类有实现了 *Iterator* 接口的内部类 *NameIterator*。\n\n> Container.java\n\n```java\npublic interface Container {\n    Iterator getIterator();\n}\n```\n\n> NameRepository.java\n\n```java\npublic class NameRepository implements Container{\n    public String[] names = {\"张三\",\"李四\",\"王五\",\"赵六\"};\n\n    @Override\n    public Iterator getIterator() {\n        return new NameInterator();\n    }\n    private class NameInterator implements Iterator{\n\n        int index;\n\n        @Override\n        public boolean hasNext() {\n            if (index < names.length){\n                return true;\n            }\n            return false;\n        }\n\n        @Override\n        public Object next() {\n            if (this.hasNext()){\n                return names[index++];\n            }\n            return null;\n        }\n    }\n}\n```\n\n3. 使用 *NameRepository* 来获取迭代器，并打印名字。\n\n> IteratorPatternDemo.java\n\n```java\npublic class IteratorPatternDemo {\n    public static void main(String[] args) {\n        NameRepository nameRepository = new NameRepository();\n\n        for (Iterator iterator = nameRepository.getIterator();iterator.hasNext();){\n            String name = (String) iterator.next();\n            System.out.println(name);\n        }\n    }\n}\n```\n\n4. 输出结果\n\n> 张三\n>\n> 李四\n>\n> 王五\n>\n> 赵六\n\n### 中介者模式\n\n> 意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n>\n> 主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。\n>\n> 应用实例： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。\n>\n> 使用场景： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。\n\n1. 创建中介类。\n\n> ChatRoom.java\n\n```java\npublic class ChatRoom {\n    public static void showMessage(User user,String message){\n        System.out.println(\"[\"+user.getName()+\"]\"+message);\n    }\n}\n```\n\n2. 创建 user 类。\n\n> User.java\n\n```java\npublic class User {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n    public User(String name){\n        this.name = name;\n    }\n    public void sendMessage(String message){\n        ChatRoom.showMessage(this,message);\n    }\n}\n```\n\n3. 使用 *User* 对象来显示他们之间的通信。\n\n> MediatorPatternDemo.java\n\n```java\npublic class MediatorPatternDemo {\n    public static void main(String[] args) {\n        User zhangsan = new User(\"张三\");\n        User lisi = new User(\"李四\");\n\n        zhangsan.sendMessage(\"你好！李四\");\n        lisi.sendMessage(\"你好！张三\");\n    }\n}\n```\n\n4. 输出结果\n\n> [张三]你好！李四\n>\n> [李四]你好！张三\n\n### 备忘录模式\n\n> 意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。\n>\n> 主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。\n>\n> 应用实例： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。\n>\n> 使用场景： 1、需要保存/恢复数据的相关状态场景。 2、提供一个可回滚的操作。\n\n1. 创建 Memento 类。\n\n> Memento.java\n\n```java\npublic class Memento {\n    private String state;\n\n    public Memento(String state){\n        this.state = state;\n    }\n    public String getState(){\n        return state;\n    }\n}\n```\n\n2. 创建 Originator 类。\n\n> Originator.java\n\n```java\npublic class Originator {\n    private String state;\n\n    public void setState(String state){\n        this.state = state;\n    }\n\n    public String getState(){\n        return state;\n    }\n\n    public Memento saveStateToMemento(){\n        return new Memento(state);\n    }\n\n    public void getStateFromMemento(Memento memento){\n        state = memento.getState();\n    }\n}\n```\n\n3. 创建 CareTaker 类。\n\n> CareTaker.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CareTaker {\n    private List<Memento> mementoList = new ArrayList<>();\n\n    public void add(Memento state){\n        mementoList.add(state);\n    }\n\n    public Memento get(int index){\n        return mementoList.get(index);\n    }\n}\n```\n\n4. 使用 *CareTaker* 和 *Originator* 对象。\n\n> MementoPatternDemo.java\n\n```java\npublic class MementoPatternDemo {\n    public static void main(String[] args) {\n        Originator originator = new Originator();\n        CareTaker careTaker = new CareTaker();\n        originator.setState(\"状态 #1\");\n        originator.setState(\"状态 #2\");\n        careTaker.add(originator.saveStateToMemento());\n        originator.setState(\"状态 #3\");\n        careTaker.add(originator.saveStateToMemento());\n        originator.setState(\"状态 #4\");\n        System.out.println(\"当前状态：\"+originator.getState());\n        originator.getStateFromMemento(careTaker.get(0));\n        System.out.println(\"第一次保存的状态：\"+originator.getState());\n        originator.getStateFromMemento(careTaker.get(1));\n        System.out.println(\"第二次保存的状态：\"+originator.getState());\n    }\n}\n```\n\n5. 输出结果\n\n> 当前状态：状态 #4\n>\n> 第一次保存的状态：状态 #2\n>\n> 第二次保存的状态：状态 #3\n\n### 观察者模式\n\n> 意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。\n>\n> 主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。\n>\n> 应用实例： 拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。\n>\n> 使用场景：1、一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。2、一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。3、一个对象必须通知其他对象，而并不知道这些对象是谁。4、需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。\n\n1. 创建 Subject 类。\n\n> Subject.java\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Subject {\n    private List<Observer> observers = new ArrayList<>();\n    private int state;\n\n    public int getState() {\n        return state;\n    }\n\n    public void setState(int state) {\n        this.state = state;\n        notifyAllObserver();\n    }\n\n    public void attach(Observer observer){\n        observers.add(observer);\n    }\n\n    private void notifyAllObserver() {\n        for (Observer observer : observers){\n            observer.update();\n        }\n    }\n\n}\n```\n\n2. 创建 Observer 类。\n\n> Observer.java\n\n```java\npublic abstract class Observer {\n    protected Subject subject;\n    public abstract void update();\n}\n```\n\n3. 创建实体观察者类。\n\n> BinaryObserver.java\n\n```java\npublic class BinaryObserver extends Observer {\n\n    public BinaryObserver(Subject subject){\n        this.subject = subject;\n        this.subject.attach(this);\n    }\n\n    @Override\n    public void update() {\n        System.out.println(\"二进制：\"+Integer.toBinaryString(subject.getState()));\n    }\n}\n```\n\n> OctalObserver.java\n\n```java\npublic class OctalObserver extends Observer {\n\n    public OctalObserver(Subject subject){\n        this.subject = subject;\n        this.subject.attach(this);\n    }\n\n    @Override\n    public void update() {\n        System.out.println(\"八进制：\"+Integer.toOctalString(subject.getState()));\n    }\n}\n```\n\n> HexaObserver.java\n\n```java\npublic class HexaObserver extends Observer {\n\n    public HexaObserver(Subject subject){\n        this.subject = subject;\n        this.subject.attach(this);\n    }\n\n    @Override\n    public void update() {\n        System.out.println(\"十六进制：\"+Integer.toHexString(subject.getState()));\n    }\n}\n```\n\n4. 使用 *Subject* 和实体观察者对象。\n\n> ObserverPatternDemo.java\n\n```java\npublic class ObserverPatternDemo {\n    public static void main(String[] args) {\n        Subject subject = new Subject();\n        new BinaryObserver(subject);\n        new OctalObserver(subject);\n        new HexaObserver(subject);\n\n        System.out.println(\"第一次状态改为15\");\n        subject.setState(15);\n        System.out.println(\"第二次状态改为10\");\n        subject.setState(10);\n    }\n}\n```\n\n5. 输出结果\n\n> 第一次状态改为15\n>\n> 二进制：1111\n>\n> 八进制：17\n>\n> 十六进制：f\n>\n> 第二次状态改为10\n>\n> 二进制：1010\n>\n> 八进制：12\n>\n> 十六进制：a\n\n### 状态模式\n\n> 意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。\n>\n> 主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。\n>\n> 应用实例： 打篮球的时候运动员可以有正常状态、不正常状态和超常状态。\n>\n> 使用场景： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。\n\n1. 创建一个接口。\n\n> State.java\n\n```java\npublic interface State {\n    void doAction(Context context);\n}\n```\n\n2. 创建实现接口的实体类。\n\n> StartState.java\n\n```java\npublic class StartState implements State {\n    @Override\n    public void doAction(Context context) {\n        System.out.println(\"玩家处于一个开始状态\");\n        context.setState(this);\n    }\n\n    @Override\n    public String toString(){\n        return \"开始状态\";\n    }\n}\n```\n\n> StopState.java\n\n```java\npublic class StopState implements State {\n    @Override\n    public void doAction(Context context) {\n        System.out.println(\"玩家处于一个停止状态\");\n        context.setState(this);\n    }\n\n    @Override\n    public String toString() {\n        return \"停止状态\";\n    }\n}\n```\n\n3. 创建 *Context* 类。\n\n> Context.java\n\n````java\npublic class Context {\n    private State state;\n\n    public Context(){\n        state = null;\n    }\n\n    public void setState(State state){\n        this.state = state;\n    }\n\n    public State getState() {\n        return state;\n    }\n}\n````\n\n4. 使用 *Context* 来查看当状态 *State* 改变时的行为变化。\n\n> StatePatternDemo.java\n\n```java\npublic class StatePatternDemo {\n    public static void main(String[] args) {\n        Context context = new Context();\n\n        StartState startState = new StartState();\n        startState.doAction(context);\n        System.out.println(context.getState().toString());\n\n        StopState stopState = new StopState();\n        stopState.doAction(context);\n        System.out.println(context.getState().toString());\n    }\n}\n```\n\n5. 输出结果\n\n> 玩家处于一个开始状态\n> 开始状态\n> 玩家处于一个停止状态\n> 停止状态\n\n### 策略模式\n\n> 意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。\n>\n> 主要解决：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。\n>\n> 应用实例： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。\n>\n> 使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。\n\n1. 创建一个接口。\n\n> Strategy.java\n\n```java\npublic interface Strategy {\n    int doOperation(int num1,int num2);\n}\n```\n\n2. 创建实现接口的实体类。\n\n> OperationAdd.java\n\n```java\npublic class OperationAdd implements Strategy {\n    @Override\n    public int doOperation(int num1, int num2) {\n        return num1 + num2;\n    }\n}\n```\n\n> OperationSubtract.java\n\n```java\npublic class OperationSubtract implements Strategy {\n    @Override\n    public int doOperation(int num1, int num2) {\n        return num1 - num2;\n    }\n}\n```\n\n> OperationMultiply.java\n\n````java\npublic class OperationMultiply implements Strategy {\n    @Override\n    public int doOperation(int num1, int num2) {\n        return num1 * num2;\n    }\n}\n````\n\n3. 创建 *Context* 类。\n\n> Context.java\n\n```java\npublic class Context {\n    private Strategy strategy;\n\n    public Context(Strategy strategy) {\n        this.strategy = strategy;\n    }\n\n    public int executeStrategy(int num1, int num2){\n        return strategy.doOperation(num1,num2);\n    }\n}\n```\n\n4. 使用 *Context* 来查看当它改变策略 *Strategy* 时的行为变化。\n\n> StrategyPatternDemo.java\n\n```java\npublic class StrategyPatternDemo {\n    public static void main(String[] args) {\n        Context context = new Context(new OperationAdd());\n        System.out.println(\"10 + 5 = \"+context.executeStrategy(10,5));\n\n        context = new Context(new OperationSubtract());\n        System.out.println(\"10 - 5 = \"+context.executeStrategy(10,5));\n\n        context = new Context(new OperationMultiply());\n        System.out.println(\"10 * 5 = \"+context.executeStrategy(10,5));\n    }\n}\n```\n\n5. 输出结果\n\n> 10 + 5 = 15\n>\n> 10 - 5 = 5\n>\n> 10 * 5 = 50\n\n### 模板方法\n\n> 意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。\n>\n> 主要解决：一些方法通用，却在每一个子类都重新写了这一方法。\n>\n> 应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。\n>\n> 使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。\n\n1. 创建一个抽象类，它的模板方法被设置为 final。\n\n> Game.java\n\n```java\npublic abstract class Game {\n    abstract void initialize();\n    abstract void startPlay();\n    abstract void endPlay();\n\n    //模板\n    public final void play(){\n        //初始化游戏\n        initialize();\n        //开始游戏\n        startPlay();\n        //结束游戏\n        endPlay();\n    }\n}\n```\n\n2. 创建扩展了上述类的实体类。\n\n> Cricket.java\n\n```java\npublic class Cricket extends Game {\n    @Override\n    void initialize() {\n        System.out.println(\"板球游戏初始化完成，请开始游戏\");\n    }\n\n    @Override\n    void startPlay() {\n        System.out.println(\"板球游戏已开始\");\n    }\n\n    @Override\n    void endPlay() {\n        System.out.println(\"板球游戏已结束\");\n    }\n}\n```\n\n> Football.java\n\n```java\npublic class Football extends Game {\n    @Override\n    void initialize() {\n        System.out.println(\"足球游戏初始化完成，请开始游戏\");\n    }\n\n    @Override\n    void startPlay() {\n        System.out.println(\"足球游戏已开始\");\n    }\n\n    @Override\n    void endPlay() {\n        System.out.println(\"足球游戏已结束\");\n    }\n}\n```\n\n3. 使用 *Game* 的模板方法 play() 来演示游戏的定义方式。\n\n> TemplatePatternDemo.java\n\n```java\npublic class TemplatePatternDemo {\n    public static void main(String[] args) {\n        Game game = new Cricket();\n        game.play();\n        game = new Football();\n        game.play();\n    }\n}\n```\n\n4. 输出结果\n\n> 板球游戏初始化完成，请开始游戏\n>\n> 板球游戏已开始\n>\n> 板球游戏已结束\n>\n> 足球游戏初始化完成，请开始游戏\n>\n> 足球游戏已开始\n>\n> 足球游戏已结束\n\n### 访问者模式\n\n> 意图：主要将数据结构与数据操作分离。\n>\n> 主要解决：稳定的数据结构和易变的操作耦合问题。\n>\n> 应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。\n>\n> 使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作\"污染\"这些对象的类，也不希望在增加新操作时修改这些类。\n\n1. 定义一个表示元素的接口。\n\n> ComputerPart.java\n\n```java\npublic interface ComputerPart {\n    void accept(ComputerPartVisitor computerPartVisitor);\n}\n```\n\n2. 创建扩展了上述类的实体类。\n\n> Mouse.java\n\n```java\npublic class Mouse implements ComputerPart {\n    @Override\n    public void accept(ComputerPartVisitor computerPartVisitor) {\n        computerPartVisitor.visit(this);\n    }\n}\n```\n\n> Keyboard.java\n\n```java\npublic class Keyboard implements ComputerPart {\n    @Override\n    public void accept(ComputerPartVisitor computerPartVisitor) {\n        computerPartVisitor.visit(this);\n    }\n}\n```\n\n> Monitor.java\n\n```java\npublic class Monitor implements ComputerPart {\n    @Override\n    public void accept(ComputerPartVisitor computerPartVisitor) {\n        computerPartVisitor.visit(this);\n    }\n}\n```\n\n> Computer.java\n\n```java\npublic class Computer implements ComputerPart {\n\n    ComputerPart[] parts;\n\n    public Computer(){\n        parts = new ComputerPart[]{new Mouse(),new Keyboard(),new Monitor()};\n    }\n\n    @Override\n    public void accept(ComputerPartVisitor computerPartVisitor) {\n        for (int i = 0; i < parts.length; i++) {\n            parts[i].accept(computerPartVisitor);\n        }\n        computerPartVisitor.visit(this);\n    }\n}\n```\n\n3. 定义一个表示访问者的接口。\n\n> ComputerPartVisitor.java\n\n```java\npublic interface ComputerPartVisitor {\n    void visit(Computer computer);\n    void visit(Mouse mouse);\n    void visit(Keyboard keyboard);\n    void visit(Monitor monitor);\n}\n```\n\n4. 定义一个表示访问者的接口。创建实现了上述类的实体访问者。\n\n> ComputerPartDisplayVisitor.java\n\n```java\npublic class ComputerPartDisplayVisitor implements ComputerPartVisitor{\n    @Override\n    public void visit(Computer computer) {\n        System.out.println(\"显示计算机\");\n    }\n\n    @Override\n    public void visit(Mouse mouse) {\n        System.out.println(\"显示鼠标\");\n    }\n\n    @Override\n    public void visit(Keyboard keyboard) {\n        System.out.println(\"显示键盘\");\n    }\n\n    @Override\n    public void visit(Monitor monitor) {\n        System.out.println(\"显示监视器\");\n    }\n}\n```\n\n5. 使用 *ComputerPartDisplayVisitor* 来显示 *Computer* 的组成部分。\n\n> VisitorPatternDemo.java\n\n```java\npublic class VisitorPatternDemo {\n    public static void main(String[] args) {\n        ComputerPart computer = new Computer();\n        computer.accept(new ComputerPartDisplayVisitor());\n    }\n}\n```\n\n6. 显示结果\n\n>显示鼠标\n>\n>显示键盘\n>\n>显示监视器\n>\n>显示计算机\n\n### 空对象模式\n\n> 在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。\n>\n> 在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。\n\n1. 创建一个抽象类。\n\n```java\npublic abstract class AbstractCustomer {\n    protected String name;\n    public abstract boolean isNil();\n    public abstract String getName();\n}\n```\n\n2. 创建扩展了上述类的实体类。\n\n> RealCustomer.java\n\n```java\npublic class RealCustomer extends AbstractCustomer {\n\n    public RealCustomer(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public boolean isNil() {\n        return false;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n}\n```\n\n> NullCustomer.java\n\n```java\npublic class NullCustomer extends AbstractCustomer {\n    @Override\n    public boolean isNil() {\n        return false;\n    }\n\n    @Override\n    public String getName() {\n        return \"不可用的值\";\n    }\n}\n```\n\n3. 创建 *CustomerFactory* 类。\n\n> CustomerFactory.java\n\n```java\npublic class CustomerFactory {\n    public static final String[] names = {\"张三\",\"李四\",\"王五\"};\n\n    public static AbstractCustomer getCustomer(String name){\n        for (int i = 0;i < names.length;i++){\n            if (names[i].equalsIgnoreCase(name)){\n                return new RealCustomer(name);\n            }\n        }\n        return new NullCustomer();\n    }\n}\n```\n\n4. 使用 *CustomerFactory*，基于客户传递的名字，来获取 *RealCustomer* 或 *NullCustomer* 对象。\n\n> NullPatternDemo.java\n\n```java\npublic class NullPatternDemo {\n    public static void main(String[] args) {\n        AbstractCustomer customer1 = CustomerFactory.getCustomer(\"张三\");\n        AbstractCustomer customer2 = CustomerFactory.getCustomer(\"李四\");\n        AbstractCustomer customer3 = CustomerFactory.getCustomer(\"王五\");\n        AbstractCustomer customer4 = CustomerFactory.getCustomer(\"赵六\");\n\n        System.out.println(\"消费者\");\n        System.out.println(customer1.getName());\n        System.out.println(customer2.getName());\n        System.out.println(customer3.getName());\n        System.out.println(customer4.getName());\n    }\n}\n```\n\n5. 输出结果\n\n> 消费者\n> 张三\n> 李四\n> 王五\n> 不可用的值","slug":"computer/course-3/behavioral_pattern","published":1,"updated":"2020-12-19T04:50:30.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg98003wb0utea7o0lbu","content":"<h3 id=\"责任链模式\"><a class=\"anchor\" href=\"#责任链模式\">#</a> 责任链模式</h3>\n<blockquote>\n<p>目的：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p>\n<p>主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p>\n<p>应用实例： 1、红楼梦中的 &quot;击鼓传花&quot;。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。</p>\n<p>使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。</p>\n</blockquote>\n<ol>\n<li>创建抽象的记录器类。</li>\n</ol>\n<blockquote>\n<p>AbstractLogger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractLogger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> INFO <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> DEBUG <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> ERROR <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 责任链的下一个元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AbstractLogger</span> nextLogger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNextLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span> nextLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextLogger <span class=\"token operator\">=</span> nextLogger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> level<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">&lt;=</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextLogger <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            nextLogger<span class=\"token punctuation\">.</span><span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建扩展了该记录器类的实体类。</li>\n</ol>\n<blockquote>\n<p>ConsoleLogger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsoleLogger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLogger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsoleLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标准打印::日志:\"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>FileLogger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileLogger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLogger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FileLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件打印:日志:\"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ErrorLogger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorLogger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLogger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ErrorLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"错误打印::日志:\"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建不同类型的记录器。赋予它们不同的错误级别，并在每个记录器中设置下一个记录器。每个记录器中的下一个记录器代表的是链的一部分。</li>\n</ol>\n<blockquote>\n<p>ChainPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChainPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AbstractLogger</span> loggerChain <span class=\"token operator\">=</span> <span class=\"token function\">getChainOfLoggers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        loggerChain<span class=\"token punctuation\">.</span><span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span><span class=\"token string\">\"这是一个信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        loggerChain<span class=\"token punctuation\">.</span><span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">,</span><span class=\"token string\">\"这是一个调试信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        loggerChain<span class=\"token punctuation\">.</span><span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">,</span><span class=\"token string\">\"这是一个错误信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AbstractLogger</span> <span class=\"token function\">getChainOfLoggers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">AbstractLogger</span> errorLogger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ErrorLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">FileLogger</span> fileLogger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">ConsoleLogger</span> consoleLogger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        errorLogger<span class=\"token punctuation\">.</span><span class=\"token function\">setNextLogger</span><span class=\"token punctuation\">(</span>fileLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        fileLogger<span class=\"token punctuation\">.</span><span class=\"token function\">setNextLogger</span><span class=\"token punctuation\">(</span>consoleLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> errorLogger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>标准打印：：日志：这是一个信息</p>\n<p>文件打印：日志：这是一个调试信息</p>\n<p>标准打印：：日志：这是一个调试信息</p>\n<p>错误打印：：日志：这是一个错误信息</p>\n<p>文件打印：日志：这是一个错误信息</p>\n<p>标准打印：：日志：这是一个错误信息</p>\n</blockquote>\n<h3 id=\"命令模式\"><a class=\"anchor\" href=\"#命令模式\">#</a> 命令模式</h3>\n<blockquote>\n<p>意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</p>\n<p>主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p>\n<p>应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。</p>\n<p>使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。</p>\n</blockquote>\n<ol>\n<li>创建一个命令接口。</li>\n</ol>\n<blockquote>\n<p>Order.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建一个请求类。</li>\n</ol>\n<blockquote>\n<p>Stock.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> quantity <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"购买商品[名字：\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"，数量：\"</span><span class=\"token operator\">+</span>quantity<span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销售商品[名字：\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"，数量：\"</span><span class=\"token operator\">+</span>quantity<span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建实现了 <em>Order</em> 接口的实体类。</li>\n</ol>\n<blockquote>\n<p>BuyStock.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BuyStock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stock</span> appleStock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BuyStock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stock</span> appleStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appleStock <span class=\"token operator\">=</span> appleStock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        appleStock<span class=\"token punctuation\">.</span><span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>SellStock.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SellStock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stock</span> appleStock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SellStock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stock</span> appleStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appleStock <span class=\"token operator\">=</span> appleStock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        appleStock<span class=\"token punctuation\">.</span><span class=\"token function\">sell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>创建命令调用类。</li>\n</ol>\n<blockquote>\n<p>Broker.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Broker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">></span></span> orderList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">takeOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        orderList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">plcaeOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order <span class=\"token operator\">:</span> orderList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            order<span class=\"token punctuation\">.</span><span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        orderList<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 Broker 类来接受并执行命令。</li>\n</ol>\n<blockquote>\n<p>CommandPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommandPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Stock</span> appleStock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BuyStock</span> buyStockOrder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BuyStock</span><span class=\"token punctuation\">(</span>appleStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SellStock</span> sellStockOrder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SellStock</span><span class=\"token punctuation\">(</span>appleStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Broker</span> broker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Broker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        broker<span class=\"token punctuation\">.</span><span class=\"token function\">takeOrder</span><span class=\"token punctuation\">(</span>buyStockOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        broker<span class=\"token punctuation\">.</span><span class=\"token function\">takeOrder</span><span class=\"token punctuation\">(</span>sellStockOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        broker<span class=\"token punctuation\">.</span><span class=\"token function\">plcaeOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>购买商品 [名字：苹果，数量：10]</p>\n<p>销售商品 [名字：苹果，数量：10]</p>\n</blockquote>\n<h3 id=\"解释器模式\"><a class=\"anchor\" href=\"#解释器模式\">#</a> 解释器模式</h3>\n<blockquote>\n<p>意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p>\n<p>主要解决：对于一些固定文法构建一个解释句子的解释器。</p>\n<p>应用实例：编译器、运算表达式计算。</p>\n<p>使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。</p>\n</blockquote>\n<ol>\n<li>创建一个表达式接口。</li>\n</ol>\n<blockquote>\n<p>Expression.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Expression</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现了上述接口的实体类。</li>\n</ol>\n<blockquote>\n<p>TerminalExpression.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TerminalExpression</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Expression</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>AndExpression.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AndExpression</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Expression</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Expression</span> expr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Expression</span> expr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AndExpression</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expr1<span class=\"token punctuation\">,</span><span class=\"token class-name\">Expression</span> expr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expr1 <span class=\"token operator\">=</span> expr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expr2 <span class=\"token operator\">=</span> expr2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> expr1<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> expr2<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OrExpression.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrExpression</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Expression</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Expression</span> expr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Expression</span> expr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrExpression</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expr1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Expression</span> expr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expr1 <span class=\"token operator\">=</span> expr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expr2 <span class=\"token operator\">=</span> expr2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> expr1<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> expr2<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>InterpreterPatternDemo 使用 <em>Expression</em> 类来创建规则，并解析它们。</li>\n</ol>\n<blockquote>\n<p>InterpreterPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterpreterPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 规则：张三 和 李四 是男性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Expression</span> <span class=\"token function\">getMaleExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Expression</span> zhangsan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Expression</span> lisi <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrExpression</span><span class=\"token punctuation\">(</span>zhangsan<span class=\"token punctuation\">,</span>lisi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 规则：王五是一个已婚的女性</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Expression</span> <span class=\"token function\">getMarriedWomenExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Expression</span> wangwu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Expression</span> married <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已结婚\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AndExpression</span><span class=\"token punctuation\">(</span>wangwu<span class=\"token punctuation\">,</span>married<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Expression</span> isMale <span class=\"token operator\">=</span> <span class=\"token function\">getMaleExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Expression</span> isMarriedWomen <span class=\"token operator\">=</span> <span class=\"token function\">getMarriedWomenExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三是男性？\"</span><span class=\"token operator\">+</span>isMale<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五是一个已婚的女性？\"</span><span class=\"token operator\">+</span>isMarriedWomen<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五已结婚\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>张三是男性？true</p>\n<p>王五是一个已婚的女性？true</p>\n</blockquote>\n<h3 id=\"迭代器模式\"><a class=\"anchor\" href=\"#迭代器模式\">#</a> 迭代器模式</h3>\n<blockquote>\n<p>意图：提供一种方法顺序访问一个聚合对象中各个元素，而又无须暴露该对象的内部表示。</p>\n<p>主要解决：不同的方式来遍历整个整合对象。</p>\n<p>应用实例：JAVA 中的 iterator。</p>\n<p>使用场景： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。</p>\n</blockquote>\n<ol>\n<li>创建接口。</li>\n</ol>\n<blockquote>\n<p>Iterator.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Object</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现了 <em>Container</em> 接口的实体类。该类有实现了 <em>Iterator</em> 接口的内部类 <em>NameIterator</em>。</li>\n</ol>\n<blockquote>\n<p>Container.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Iterator</span> <span class=\"token function\">getIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>NameRepository.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NameRepository</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span> <span class=\"token function\">getIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NameInterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NameInterator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> names<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">return</span> names<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用 <em>NameRepository</em> 来获取迭代器，并打印名字。</li>\n</ol>\n<blockquote>\n<p>IteratorPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IteratorPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">NameRepository</span> nameRepository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NameRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span> iterator <span class=\"token operator\">=</span> nameRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>张三</p>\n<p>李四</p>\n<p>王五</p>\n<p>赵六</p>\n</blockquote>\n<h3 id=\"中介者模式\"><a class=\"anchor\" href=\"#中介者模式\">#</a> 中介者模式</h3>\n<blockquote>\n<p>意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>\n<p>主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</p>\n<p>应用实例： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中 C（控制器）就是 M（模型）和 V（视图）的中介者。</p>\n<p>使用场景： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</p>\n</blockquote>\n<ol>\n<li>创建中介类。</li>\n</ol>\n<blockquote>\n<p>ChatRoom.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChatRoom</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建 user 类。</li>\n</ol>\n<blockquote>\n<p>User.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">ChatRoom</span><span class=\"token punctuation\">.</span><span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用 <em>User</em> 对象来显示他们之间的通信。</li>\n</ol>\n<blockquote>\n<p>MediatorPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MediatorPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">User</span> zhangsan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">User</span> lisi <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        zhangsan<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好！李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        lisi<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好！张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>[张三] 你好！李四</p>\n<p>[李四] 你好！张三</p>\n</blockquote>\n<h3 id=\"备忘录模式\"><a class=\"anchor\" href=\"#备忘录模式\">#</a> 备忘录模式</h3>\n<blockquote>\n<p>意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p>\n<p>主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p>\n<p>应用实例： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。</p>\n<p>使用场景： 1、需要保存 / 恢复数据的相关状态场景。 2、提供一个可回滚的操作。</p>\n</blockquote>\n<ol>\n<li>创建 Memento 类。</li>\n</ol>\n<blockquote>\n<p>Memento.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Memento</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Memento</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建 Originator 类。</li>\n</ol>\n<blockquote>\n<p>Originator.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Originator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Memento</span> <span class=\"token function\">saveStateToMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Memento</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getStateFromMemento</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Memento</span> memento<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        state <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建 CareTaker 类。</li>\n</ol>\n<blockquote>\n<p>CareTaker.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CareTaker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Memento</span><span class=\"token punctuation\">></span></span> mementoList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Memento</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        mementoList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Memento</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> mementoList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>CareTaker</em> 和 <em>Originator</em> 对象。</li>\n</ol>\n<blockquote>\n<p>MementoPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MementoPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Originator</span> originator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Originator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">CareTaker</span> careTaker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CareTaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"状态 #1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"状态 #2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">saveStateToMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"状态 #3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">saveStateToMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"状态 #4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前状态：\"</span><span class=\"token operator\">+</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">getStateFromMemento</span><span class=\"token punctuation\">(</span>careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一次保存的状态：\"</span><span class=\"token operator\">+</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">getStateFromMemento</span><span class=\"token punctuation\">(</span>careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二次保存的状态：\"</span><span class=\"token operator\">+</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>当前状态：状态 #4</p>\n<p>第一次保存的状态：状态 #2</p>\n<p>第二次保存的状态：状态 #3</p>\n</blockquote>\n<h3 id=\"观察者模式\"><a class=\"anchor\" href=\"#观察者模式\">#</a> 观察者模式</h3>\n<blockquote>\n<p>意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>\n<p>主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p>\n<p>应用实例： 拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。</p>\n<p>使用场景：1、一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。2、一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。3、一个对象必须通知其他对象，而并不知道这些对象是谁。4、需要在系统中创建一个触发链，A 对象的行为将影响 B 对象，B 对象的行为将影响 C 对象……，可以使用观察者模式创建一种链式触发机制。</p>\n</blockquote>\n<ol>\n<li>创建 Subject 类。</li>\n</ol>\n<blockquote>\n<p>Subject.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Observer</span><span class=\"token punctuation\">></span></span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">notifyAllObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observer</span> observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notifyAllObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Observer</span> observer <span class=\"token operator\">:</span> observers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            observer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建 Observer 类。</li>\n</ol>\n<blockquote>\n<p>Observer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建实体观察者类。</li>\n</ol>\n<blockquote>\n<p>BinaryObserver.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryObserver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BinaryObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二进制：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OctalObserver.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OctalObserver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OctalObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"八进制：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toOctalString</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>HexaObserver.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HexaObserver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HexaObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"十六进制：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>Subject</em> 和实体观察者对象。</li>\n</ol>\n<blockquote>\n<p>ObserverPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObserverPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryObserver</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">OctalObserver</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HexaObserver</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一次状态改为15\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二次状态改为10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>第一次状态改为 15</p>\n<p>二进制：1111</p>\n<p>八进制：17</p>\n<p>十六进制：f</p>\n<p>第二次状态改为 10</p>\n<p>二进制：1010</p>\n<p>八进制：12</p>\n<p>十六进制：a</p>\n</blockquote>\n<h3 id=\"状态模式\"><a class=\"anchor\" href=\"#状态模式\">#</a> 状态模式</h3>\n<blockquote>\n<p>意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p>\n<p>主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</p>\n<p>应用实例： 打篮球的时候运动员可以有正常状态、不正常状态和超常状态。</p>\n<p>使用场景： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。</p>\n</blockquote>\n<ol>\n<li>创建一个接口。</li>\n</ol>\n<blockquote>\n<p>State.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>StartState.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StartState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"玩家处于一个开始状态\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"开始状态\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>StopState.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StopState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"玩家处于一个停止状态\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"停止状态\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建 <em>Context</em> 类。</li>\n</ol>\n<blockquote>\n<p>Context.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Context</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">State</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        state <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">State</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>Context</em> 来查看当状态 <em>State</em> 改变时的行为变化。</li>\n</ol>\n<blockquote>\n<p>StatePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StatePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Context</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">StartState</span> startState <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StartState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        startState<span class=\"token punctuation\">.</span><span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">StopState</span> stopState <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StopState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        stopState<span class=\"token punctuation\">.</span><span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>玩家处于一个开始状态<br />\n开始状态<br />\n玩家处于一个停止状态<br />\n停止状态</p>\n</blockquote>\n<h3 id=\"策略模式\"><a class=\"anchor\" href=\"#策略模式\">#</a> 策略模式</h3>\n<blockquote>\n<p>意图：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。</p>\n<p>主要解决：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。</p>\n<p>应用实例： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。</p>\n<p>使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p>\n</blockquote>\n<ol>\n<li>创建一个接口。</li>\n</ol>\n<blockquote>\n<p>Strategy.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Strategy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">doOperation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>OperationAdd.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OperationAdd</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Strategy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">doOperation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OperationSubtract.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OperationSubtract</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Strategy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">doOperation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OperationMultiply.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OperationMultiply</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Strategy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">doOperation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建 <em>Context</em> 类。</li>\n</ol>\n<blockquote>\n<p>Context.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Context</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Strategy</span> strategy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Strategy</span> strategy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strategy <span class=\"token operator\">=</span> strategy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">executeStrategy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> strategy<span class=\"token punctuation\">.</span><span class=\"token function\">doOperation</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>Context</em> 来查看当它改变策略 <em>Strategy</em> 时的行为变化。</li>\n</ol>\n<blockquote>\n<p>StrategyPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StrategyPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Context</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OperationAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 + 5 = \"</span><span class=\"token operator\">+</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">executeStrategy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OperationSubtract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 - 5 = \"</span><span class=\"token operator\">+</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">executeStrategy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OperationMultiply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 * 5 = \"</span><span class=\"token operator\">+</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">executeStrategy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>10 + 5 = 15</p>\n<p>10 - 5 = 5</p>\n<p>10 * 5 = 50</p>\n</blockquote>\n<h3 id=\"模板方法\"><a class=\"anchor\" href=\"#模板方法\">#</a> 模板方法</h3>\n<blockquote>\n<p>意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>\n<p>主要解决：一些方法通用，却在每一个子类都重新写了这一方法。</p>\n<p>应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p>\n<p>使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</p>\n</blockquote>\n<ol>\n<li>创建一个抽象类，它的模板方法被设置为 final。</li>\n</ol>\n<blockquote>\n<p>Game.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">endPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 模板</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 初始化游戏</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 开始游戏</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">startPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 结束游戏</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">endPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建扩展了上述类的实体类。</li>\n</ol>\n<blockquote>\n<p>Cricket.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cricket</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"板球游戏初始化完成，请开始游戏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">startPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"板球游戏已开始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">endPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"板球游戏已结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Football.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Football</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"足球游戏初始化完成，请开始游戏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">startPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"足球游戏已开始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">endPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"足球游戏已结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用 <em>Game</em> 的模板方法 play () 来演示游戏的定义方式。</li>\n</ol>\n<blockquote>\n<p>TemplatePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TemplatePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Game</span> game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cricket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        game<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Football</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        game<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>板球游戏初始化完成，请开始游戏</p>\n<p>板球游戏已开始</p>\n<p>板球游戏已结束</p>\n<p>足球游戏初始化完成，请开始游戏</p>\n<p>足球游戏已开始</p>\n<p>足球游戏已结束</p>\n</blockquote>\n<h3 id=\"访问者模式\"><a class=\"anchor\" href=\"#访问者模式\">#</a> 访问者模式</h3>\n<blockquote>\n<p>意图：主要将数据结构与数据操作分离。</p>\n<p>主要解决：稳定的数据结构和易变的操作耦合问题。</p>\n<p>应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。</p>\n<p>使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作 &quot;污染&quot; 这些对象的类，也不希望在增加新操作时修改这些类。</p>\n</blockquote>\n<ol>\n<li>定义一个表示元素的接口。</li>\n</ol>\n<blockquote>\n<p>ComputerPart.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建扩展了上述类的实体类。</li>\n</ol>\n<blockquote>\n<p>Mouse.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Keyboard.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Keyboard</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Monitor.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Monitor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Computer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ComputerPart</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parts<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        parts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComputerPart</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Mouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Monitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> parts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            parts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>computerPartVisitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>定义一个表示访问者的接口。</li>\n</ol>\n<blockquote>\n<p>ComputerPartVisitor.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ComputerPartVisitor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Computer</span> computer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mouse</span> mouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Keyboard</span> keyboard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Monitor</span> monitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>定义一个表示访问者的接口。创建实现了上述类的实体访问者。</li>\n</ol>\n<blockquote>\n<p>ComputerPartDisplayVisitor.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComputerPartDisplayVisitor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPartVisitor</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Computer</span> computer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示计算机\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mouse</span> mouse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示鼠标\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Keyboard</span> keyboard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示键盘\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Monitor</span> monitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示监视器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 <em>ComputerPartDisplayVisitor</em> 来显示 <em>Computer</em> 的组成部分。</li>\n</ol>\n<blockquote>\n<p>VisitorPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VisitorPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ComputerPart</span> computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ComputerPartDisplayVisitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>显示结果</li>\n</ol>\n<blockquote>\n<p>显示鼠标</p>\n<p>显示键盘</p>\n<p>显示监视器</p>\n<p>显示计算机</p>\n</blockquote>\n<h3 id=\"空对象模式\"><a class=\"anchor\" href=\"#空对象模式\">#</a> 空对象模式</h3>\n<blockquote>\n<p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。</p>\n<p>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p>\n</blockquote>\n<ol>\n<li>创建一个抽象类。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractCustomer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建扩展了上述类的实体类。</li>\n</ol>\n<blockquote>\n<p>RealCustomer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealCustomer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractCustomer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RealCustomer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>NullCustomer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NullCustomer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractCustomer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"不可用的值\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建 <em>CustomerFactory</em> 类。</li>\n</ol>\n<blockquote>\n<p>CustomerFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AbstractCustomer</span> <span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> names<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealCustomer</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>CustomerFactory</em>，基于客户传递的名字，来获取 <em>RealCustomer</em> 或 <em>NullCustomer</em> 对象。</li>\n</ol>\n<blockquote>\n<p>NullPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NullPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AbstractCustomer</span> customer1 <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AbstractCustomer</span> customer2 <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">AbstractCustomer</span> customer3 <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">AbstractCustomer</span> customer4 <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer2<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer3<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer4<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>消费者<br />\n张三<br />\n李四<br />\n王五<br />\n不可用的值</p>\n</blockquote>\n","site":{"data":{}},"length":20423,"excerpt":"","more":"<h3 id=\"责任链模式\"><a class=\"anchor\" href=\"#责任链模式\">#</a> 责任链模式</h3>\n<blockquote>\n<p>目的：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p>\n<p>主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p>\n<p>应用实例： 1、红楼梦中的 &quot;击鼓传花&quot;。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。</p>\n<p>使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。</p>\n</blockquote>\n<ol>\n<li>创建抽象的记录器类。</li>\n</ol>\n<blockquote>\n<p>AbstractLogger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractLogger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> INFO <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> DEBUG <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> ERROR <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 责任链的下一个元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AbstractLogger</span> nextLogger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNextLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span> nextLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextLogger <span class=\"token operator\">=</span> nextLogger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> level<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">&lt;=</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextLogger <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            nextLogger<span class=\"token punctuation\">.</span><span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建扩展了该记录器类的实体类。</li>\n</ol>\n<blockquote>\n<p>ConsoleLogger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsoleLogger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLogger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsoleLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标准打印::日志:\"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>FileLogger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileLogger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLogger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FileLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件打印:日志:\"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>ErrorLogger.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorLogger</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLogger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ErrorLogger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"错误打印::日志:\"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建不同类型的记录器。赋予它们不同的错误级别，并在每个记录器中设置下一个记录器。每个记录器中的下一个记录器代表的是链的一部分。</li>\n</ol>\n<blockquote>\n<p>ChainPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChainPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AbstractLogger</span> loggerChain <span class=\"token operator\">=</span> <span class=\"token function\">getChainOfLoggers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        loggerChain<span class=\"token punctuation\">.</span><span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">,</span><span class=\"token string\">\"这是一个信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        loggerChain<span class=\"token punctuation\">.</span><span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">,</span><span class=\"token string\">\"这是一个调试信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        loggerChain<span class=\"token punctuation\">.</span><span class=\"token function\">logMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">,</span><span class=\"token string\">\"这是一个错误信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AbstractLogger</span> <span class=\"token function\">getChainOfLoggers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">AbstractLogger</span> errorLogger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ErrorLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">FileLogger</span> fileLogger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">ConsoleLogger</span> consoleLogger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLogger</span><span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        errorLogger<span class=\"token punctuation\">.</span><span class=\"token function\">setNextLogger</span><span class=\"token punctuation\">(</span>fileLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        fileLogger<span class=\"token punctuation\">.</span><span class=\"token function\">setNextLogger</span><span class=\"token punctuation\">(</span>consoleLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> errorLogger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>标准打印：：日志：这是一个信息</p>\n<p>文件打印：日志：这是一个调试信息</p>\n<p>标准打印：：日志：这是一个调试信息</p>\n<p>错误打印：：日志：这是一个错误信息</p>\n<p>文件打印：日志：这是一个错误信息</p>\n<p>标准打印：：日志：这是一个错误信息</p>\n</blockquote>\n<h3 id=\"命令模式\"><a class=\"anchor\" href=\"#命令模式\">#</a> 命令模式</h3>\n<blockquote>\n<p>意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</p>\n<p>主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p>\n<p>应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。</p>\n<p>使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。</p>\n</blockquote>\n<ol>\n<li>创建一个命令接口。</li>\n</ol>\n<blockquote>\n<p>Order.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建一个请求类。</li>\n</ol>\n<blockquote>\n<p>Stock.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"苹果\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> quantity <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"购买商品[名字：\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"，数量：\"</span><span class=\"token operator\">+</span>quantity<span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"销售商品[名字：\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"，数量：\"</span><span class=\"token operator\">+</span>quantity<span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建实现了 <em>Order</em> 接口的实体类。</li>\n</ol>\n<blockquote>\n<p>BuyStock.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BuyStock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stock</span> appleStock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BuyStock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stock</span> appleStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appleStock <span class=\"token operator\">=</span> appleStock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        appleStock<span class=\"token punctuation\">.</span><span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>SellStock.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SellStock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Stock</span> appleStock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SellStock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stock</span> appleStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appleStock <span class=\"token operator\">=</span> appleStock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        appleStock<span class=\"token punctuation\">.</span><span class=\"token function\">sell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>创建命令调用类。</li>\n</ol>\n<blockquote>\n<p>Broker.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Broker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">></span></span> orderList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">takeOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        orderList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">plcaeOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order <span class=\"token operator\">:</span> orderList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            order<span class=\"token punctuation\">.</span><span class=\"token function\">excute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        orderList<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 Broker 类来接受并执行命令。</li>\n</ol>\n<blockquote>\n<p>CommandPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommandPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Stock</span> appleStock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BuyStock</span> buyStockOrder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BuyStock</span><span class=\"token punctuation\">(</span>appleStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SellStock</span> sellStockOrder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SellStock</span><span class=\"token punctuation\">(</span>appleStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Broker</span> broker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Broker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        broker<span class=\"token punctuation\">.</span><span class=\"token function\">takeOrder</span><span class=\"token punctuation\">(</span>buyStockOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        broker<span class=\"token punctuation\">.</span><span class=\"token function\">takeOrder</span><span class=\"token punctuation\">(</span>sellStockOrder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        broker<span class=\"token punctuation\">.</span><span class=\"token function\">plcaeOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>购买商品 [名字：苹果，数量：10]</p>\n<p>销售商品 [名字：苹果，数量：10]</p>\n</blockquote>\n<h3 id=\"解释器模式\"><a class=\"anchor\" href=\"#解释器模式\">#</a> 解释器模式</h3>\n<blockquote>\n<p>意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p>\n<p>主要解决：对于一些固定文法构建一个解释句子的解释器。</p>\n<p>应用实例：编译器、运算表达式计算。</p>\n<p>使用场景： 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。</p>\n</blockquote>\n<ol>\n<li>创建一个表达式接口。</li>\n</ol>\n<blockquote>\n<p>Expression.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Expression</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现了上述接口的实体类。</li>\n</ol>\n<blockquote>\n<p>TerminalExpression.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TerminalExpression</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Expression</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>AndExpression.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AndExpression</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Expression</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Expression</span> expr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Expression</span> expr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AndExpression</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expr1<span class=\"token punctuation\">,</span><span class=\"token class-name\">Expression</span> expr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expr1 <span class=\"token operator\">=</span> expr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expr2 <span class=\"token operator\">=</span> expr2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> expr1<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> expr2<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OrExpression.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrExpression</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Expression</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Expression</span> expr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Expression</span> expr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OrExpression</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Expression</span> expr1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Expression</span> expr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expr1 <span class=\"token operator\">=</span> expr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expr2 <span class=\"token operator\">=</span> expr2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> expr1<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> expr2<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>InterpreterPatternDemo 使用 <em>Expression</em> 类来创建规则，并解析它们。</li>\n</ol>\n<blockquote>\n<p>InterpreterPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterpreterPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 规则：张三 和 李四 是男性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Expression</span> <span class=\"token function\">getMaleExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Expression</span> zhangsan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Expression</span> lisi <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrExpression</span><span class=\"token punctuation\">(</span>zhangsan<span class=\"token punctuation\">,</span>lisi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 规则：王五是一个已婚的女性</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Expression</span> <span class=\"token function\">getMarriedWomenExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Expression</span> wangwu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Expression</span> married <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerminalExpression</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已结婚\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AndExpression</span><span class=\"token punctuation\">(</span>wangwu<span class=\"token punctuation\">,</span>married<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Expression</span> isMale <span class=\"token operator\">=</span> <span class=\"token function\">getMaleExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Expression</span> isMarriedWomen <span class=\"token operator\">=</span> <span class=\"token function\">getMarriedWomenExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三是男性？\"</span><span class=\"token operator\">+</span>isMale<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五是一个已婚的女性？\"</span><span class=\"token operator\">+</span>isMarriedWomen<span class=\"token punctuation\">.</span><span class=\"token function\">interpret</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五已结婚\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>张三是男性？true</p>\n<p>王五是一个已婚的女性？true</p>\n</blockquote>\n<h3 id=\"迭代器模式\"><a class=\"anchor\" href=\"#迭代器模式\">#</a> 迭代器模式</h3>\n<blockquote>\n<p>意图：提供一种方法顺序访问一个聚合对象中各个元素，而又无须暴露该对象的内部表示。</p>\n<p>主要解决：不同的方式来遍历整个整合对象。</p>\n<p>应用实例：JAVA 中的 iterator。</p>\n<p>使用场景： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。</p>\n</blockquote>\n<ol>\n<li>创建接口。</li>\n</ol>\n<blockquote>\n<p>Iterator.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iterator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Object</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现了 <em>Container</em> 接口的实体类。该类有实现了 <em>Iterator</em> 接口的内部类 <em>NameIterator</em>。</li>\n</ol>\n<blockquote>\n<p>Container.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Iterator</span> <span class=\"token function\">getIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>NameRepository.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NameRepository</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span> <span class=\"token function\">getIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NameInterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NameInterator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> names<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">return</span> names<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用 <em>NameRepository</em> 来获取迭代器，并打印名字。</li>\n</ol>\n<blockquote>\n<p>IteratorPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IteratorPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">NameRepository</span> nameRepository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NameRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span> iterator <span class=\"token operator\">=</span> nameRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>张三</p>\n<p>李四</p>\n<p>王五</p>\n<p>赵六</p>\n</blockquote>\n<h3 id=\"中介者模式\"><a class=\"anchor\" href=\"#中介者模式\">#</a> 中介者模式</h3>\n<blockquote>\n<p>意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>\n<p>主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</p>\n<p>应用实例： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中 C（控制器）就是 M（模型）和 V（视图）的中介者。</p>\n<p>使用场景： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</p>\n</blockquote>\n<ol>\n<li>创建中介类。</li>\n</ol>\n<blockquote>\n<p>ChatRoom.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChatRoom</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建 user 类。</li>\n</ol>\n<blockquote>\n<p>User.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">ChatRoom</span><span class=\"token punctuation\">.</span><span class=\"token function\">showMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用 <em>User</em> 对象来显示他们之间的通信。</li>\n</ol>\n<blockquote>\n<p>MediatorPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MediatorPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">User</span> zhangsan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">User</span> lisi <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        zhangsan<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好！李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        lisi<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好！张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>[张三] 你好！李四</p>\n<p>[李四] 你好！张三</p>\n</blockquote>\n<h3 id=\"备忘录模式\"><a class=\"anchor\" href=\"#备忘录模式\">#</a> 备忘录模式</h3>\n<blockquote>\n<p>意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p>\n<p>主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p>\n<p>应用实例： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。</p>\n<p>使用场景： 1、需要保存 / 恢复数据的相关状态场景。 2、提供一个可回滚的操作。</p>\n</blockquote>\n<ol>\n<li>创建 Memento 类。</li>\n</ol>\n<blockquote>\n<p>Memento.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Memento</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Memento</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建 Originator 类。</li>\n</ol>\n<blockquote>\n<p>Originator.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Originator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Memento</span> <span class=\"token function\">saveStateToMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Memento</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getStateFromMemento</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Memento</span> memento<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        state <span class=\"token operator\">=</span> memento<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建 CareTaker 类。</li>\n</ol>\n<blockquote>\n<p>CareTaker.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CareTaker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Memento</span><span class=\"token punctuation\">></span></span> mementoList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Memento</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        mementoList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Memento</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> mementoList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>CareTaker</em> 和 <em>Originator</em> 对象。</li>\n</ol>\n<blockquote>\n<p>MementoPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MementoPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Originator</span> originator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Originator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">CareTaker</span> careTaker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CareTaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"状态 #1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"状态 #2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">saveStateToMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"状态 #3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">saveStateToMemento</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"状态 #4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前状态：\"</span><span class=\"token operator\">+</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">getStateFromMemento</span><span class=\"token punctuation\">(</span>careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一次保存的状态：\"</span><span class=\"token operator\">+</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        originator<span class=\"token punctuation\">.</span><span class=\"token function\">getStateFromMemento</span><span class=\"token punctuation\">(</span>careTaker<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二次保存的状态：\"</span><span class=\"token operator\">+</span>originator<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>当前状态：状态 #4</p>\n<p>第一次保存的状态：状态 #2</p>\n<p>第二次保存的状态：状态 #3</p>\n</blockquote>\n<h3 id=\"观察者模式\"><a class=\"anchor\" href=\"#观察者模式\">#</a> 观察者模式</h3>\n<blockquote>\n<p>意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>\n<p>主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p>\n<p>应用实例： 拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。</p>\n<p>使用场景：1、一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。2、一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。3、一个对象必须通知其他对象，而并不知道这些对象是谁。4、需要在系统中创建一个触发链，A 对象的行为将影响 B 对象，B 对象的行为将影响 C 对象……，可以使用观察者模式创建一种链式触发机制。</p>\n</blockquote>\n<ol>\n<li>创建 Subject 类。</li>\n</ol>\n<blockquote>\n<p>Subject.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Observer</span><span class=\"token punctuation\">></span></span> observers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">notifyAllObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observer</span> observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        observers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">notifyAllObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Observer</span> observer <span class=\"token operator\">:</span> observers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            observer<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建 Observer 类。</li>\n</ol>\n<blockquote>\n<p>Observer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建实体观察者类。</li>\n</ol>\n<blockquote>\n<p>BinaryObserver.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryObserver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BinaryObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二进制：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OctalObserver.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OctalObserver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">OctalObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"八进制：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toOctalString</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>HexaObserver.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HexaObserver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HexaObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"十六进制：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>Subject</em> 和实体观察者对象。</li>\n</ol>\n<blockquote>\n<p>ObserverPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObserverPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryObserver</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">OctalObserver</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HexaObserver</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一次状态改为15\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二次状态改为10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>第一次状态改为 15</p>\n<p>二进制：1111</p>\n<p>八进制：17</p>\n<p>十六进制：f</p>\n<p>第二次状态改为 10</p>\n<p>二进制：1010</p>\n<p>八进制：12</p>\n<p>十六进制：a</p>\n</blockquote>\n<h3 id=\"状态模式\"><a class=\"anchor\" href=\"#状态模式\">#</a> 状态模式</h3>\n<blockquote>\n<p>意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p>\n<p>主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</p>\n<p>应用实例： 打篮球的时候运动员可以有正常状态、不正常状态和超常状态。</p>\n<p>使用场景： 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。</p>\n</blockquote>\n<ol>\n<li>创建一个接口。</li>\n</ol>\n<blockquote>\n<p>State.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>StartState.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StartState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"玩家处于一个开始状态\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"开始状态\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>StopState.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StopState</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"玩家处于一个停止状态\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"停止状态\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建 <em>Context</em> 类。</li>\n</ol>\n<blockquote>\n<p>Context.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Context</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">State</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        state <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">State</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">State</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>Context</em> 来查看当状态 <em>State</em> 改变时的行为变化。</li>\n</ol>\n<blockquote>\n<p>StatePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StatePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Context</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">StartState</span> startState <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StartState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        startState<span class=\"token punctuation\">.</span><span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">StopState</span> stopState <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StopState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        stopState<span class=\"token punctuation\">.</span><span class=\"token function\">doAction</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>玩家处于一个开始状态<br />\n开始状态<br />\n玩家处于一个停止状态<br />\n停止状态</p>\n</blockquote>\n<h3 id=\"策略模式\"><a class=\"anchor\" href=\"#策略模式\">#</a> 策略模式</h3>\n<blockquote>\n<p>意图：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。</p>\n<p>主要解决：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。</p>\n<p>应用实例： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。</p>\n<p>使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p>\n</blockquote>\n<ol>\n<li>创建一个接口。</li>\n</ol>\n<blockquote>\n<p>Strategy.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Strategy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">doOperation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建实现接口的实体类。</li>\n</ol>\n<blockquote>\n<p>OperationAdd.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OperationAdd</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Strategy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">doOperation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OperationSubtract.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OperationSubtract</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Strategy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">doOperation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>OperationMultiply.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OperationMultiply</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Strategy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">doOperation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建 <em>Context</em> 类。</li>\n</ol>\n<blockquote>\n<p>Context.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Context</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Strategy</span> strategy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Strategy</span> strategy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>strategy <span class=\"token operator\">=</span> strategy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">executeStrategy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> strategy<span class=\"token punctuation\">.</span><span class=\"token function\">doOperation</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>Context</em> 来查看当它改变策略 <em>Strategy</em> 时的行为变化。</li>\n</ol>\n<blockquote>\n<p>StrategyPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StrategyPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Context</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OperationAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 + 5 = \"</span><span class=\"token operator\">+</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">executeStrategy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OperationSubtract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 - 5 = \"</span><span class=\"token operator\">+</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">executeStrategy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OperationMultiply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 * 5 = \"</span><span class=\"token operator\">+</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">executeStrategy</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>10 + 5 = 15</p>\n<p>10 - 5 = 5</p>\n<p>10 * 5 = 50</p>\n</blockquote>\n<h3 id=\"模板方法\"><a class=\"anchor\" href=\"#模板方法\">#</a> 模板方法</h3>\n<blockquote>\n<p>意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>\n<p>主要解决：一些方法通用，却在每一个子类都重新写了这一方法。</p>\n<p>应用实例： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p>\n<p>使用场景： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</p>\n</blockquote>\n<ol>\n<li>创建一个抽象类，它的模板方法被设置为 final。</li>\n</ol>\n<blockquote>\n<p>Game.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">endPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 模板</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 初始化游戏</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 开始游戏</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">startPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 结束游戏</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">endPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建扩展了上述类的实体类。</li>\n</ol>\n<blockquote>\n<p>Cricket.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cricket</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"板球游戏初始化完成，请开始游戏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">startPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"板球游戏已开始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">endPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"板球游戏已结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Football.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Football</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"足球游戏初始化完成，请开始游戏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">startPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"足球游戏已开始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">endPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"足球游戏已结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用 <em>Game</em> 的模板方法 play () 来演示游戏的定义方式。</li>\n</ol>\n<blockquote>\n<p>TemplatePatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TemplatePatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Game</span> game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cricket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        game<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        game <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Football</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        game<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>板球游戏初始化完成，请开始游戏</p>\n<p>板球游戏已开始</p>\n<p>板球游戏已结束</p>\n<p>足球游戏初始化完成，请开始游戏</p>\n<p>足球游戏已开始</p>\n<p>足球游戏已结束</p>\n</blockquote>\n<h3 id=\"访问者模式\"><a class=\"anchor\" href=\"#访问者模式\">#</a> 访问者模式</h3>\n<blockquote>\n<p>意图：主要将数据结构与数据操作分离。</p>\n<p>主要解决：稳定的数据结构和易变的操作耦合问题。</p>\n<p>应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。</p>\n<p>使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作 &quot;污染&quot; 这些对象的类，也不希望在增加新操作时修改这些类。</p>\n</blockquote>\n<ol>\n<li>定义一个表示元素的接口。</li>\n</ol>\n<blockquote>\n<p>ComputerPart.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建扩展了上述类的实体类。</li>\n</ol>\n<blockquote>\n<p>Mouse.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Keyboard.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Keyboard</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Monitor.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Monitor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Computer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ComputerPart</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parts<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        parts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComputerPart</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Mouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Monitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> parts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            parts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>computerPartVisitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>定义一个表示访问者的接口。</li>\n</ol>\n<blockquote>\n<p>ComputerPartVisitor.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ComputerPartVisitor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Computer</span> computer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mouse</span> mouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Keyboard</span> keyboard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Monitor</span> monitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>定义一个表示访问者的接口。创建实现了上述类的实体访问者。</li>\n</ol>\n<blockquote>\n<p>ComputerPartDisplayVisitor.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComputerPartDisplayVisitor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPartVisitor</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Computer</span> computer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示计算机\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mouse</span> mouse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示鼠标\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Keyboard</span> keyboard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示键盘\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Monitor</span> monitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"显示监视器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>使用 <em>ComputerPartDisplayVisitor</em> 来显示 <em>Computer</em> 的组成部分。</li>\n</ol>\n<blockquote>\n<p>VisitorPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VisitorPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ComputerPart</span> computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        computer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ComputerPartDisplayVisitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>显示结果</li>\n</ol>\n<blockquote>\n<p>显示鼠标</p>\n<p>显示键盘</p>\n<p>显示监视器</p>\n<p>显示计算机</p>\n</blockquote>\n<h3 id=\"空对象模式\"><a class=\"anchor\" href=\"#空对象模式\">#</a> 空对象模式</h3>\n<blockquote>\n<p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。</p>\n<p>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p>\n</blockquote>\n<ol>\n<li>创建一个抽象类。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractCustomer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建扩展了上述类的实体类。</li>\n</ol>\n<blockquote>\n<p>RealCustomer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RealCustomer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractCustomer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RealCustomer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>NullCustomer.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NullCustomer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractCustomer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isNil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"不可用的值\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建 <em>CustomerFactory</em> 类。</li>\n</ol>\n<blockquote>\n<p>CustomerFactory.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AbstractCustomer</span> <span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> names<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RealCustomer</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 <em>CustomerFactory</em>，基于客户传递的名字，来获取 <em>RealCustomer</em> 或 <em>NullCustomer</em> 对象。</li>\n</ol>\n<blockquote>\n<p>NullPatternDemo.java</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NullPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AbstractCustomer</span> customer1 <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AbstractCustomer</span> customer2 <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">AbstractCustomer</span> customer3 <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">AbstractCustomer</span> customer4 <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCustomer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer2<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer3<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>customer4<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>输出结果</li>\n</ol>\n<blockquote>\n<p>消费者<br />\n张三<br />\n李四<br />\n王五<br />\n不可用的值</p>\n</blockquote>\n"},{"title":"Shiro","date":"2020-12-13T16:00:00.000Z","_content":"\n\n\n## 权限管理\n\n1.什么是权限管理？\n\n> 不同身份的用户进入到系统中能够完成的操作是不同的，我们对于不同的用户进行的可执行的操作的管理称之为权限管理。\n\n## Shiro简介\n\n### 认证授权流程\n\n> 认证：对用户的身份进行检查（登录验证）\n>\n> 授权：对用户的权限进行检查（是否有对应的操作权限）\n\n### 安全框架\n\n>帮助我们完成用户身份认证及权限检查功能框架\n>\n>常用的安全框架\n>\n>+ Shrio：Apache Shiro是一个功能强大并且易用的Java安全框架（小而简单）\n>+ spring Security：基于Spring的一个安全框架，依赖于Spring\n>+ OAuth2：第三方授权登录\n>+ 自定义安全认证中心\n>\n\n### Shiro\n\n>* Apache Shiro是一个功能强大并且易用的Java安全框架\n>\n>* 可以完成用户认证、授权、密码以及会话管理\n>\n>* 可以在任何应用系统中使用（主要针对于单体项目的权限管理）\n\n## Shiro的工作原理\n\n### Shiro的核心功能\n\n> Authentication：认证，验证用户是否有相应的身份-登录验证；\n>\n> Authorization：授权，即权限验证；对已经通过的用户检查是否具有某个权限或者角色，从而控制是否能进行某种操作\n>\n> Session Management：会话管理，用户在认证成功之后创建会话，在没有退出之前，之前用户的所有信息都将会保存在这个会话中，可以是普通的JavaSE应用，也可以是Web应用；\n>\n> Cryptography：加密，对敏感信息进行加密处理，shiro就提供这种加密机制；\n>\n> 支持的特性：\n>\n> * Web Support - Shiro提供l过滤器，可以通过过滤器拦截Web请求处理web应用的访问控制\n> * Caching缓存支持，shiro可以缓存用户信息以及用户的角色授权信息，可以提高执行效率\n> * Concurrency shiro支持多线程应用\n> * Testing提供测试支持\n> * Run As允许一个用户以另一种身份去访问\n> * Remember me\n>\n> 说明：Shiro是一个安全框架，不提供用户以及权限的维护（用户权限的权限管理需要我们自己去设计）\n\n### Shiro核心组件\n\n![shiro](Shiro.assets/shiro.jpg)\n\nShiro三大核心组件：Subject、Security Manager、Realms\n\n>* Subject，表示待认证和授权的用户\n>* Security Manager，他是Shiro框架的核心，Shiro就是通过Security Manger来进行内部实例的管理，并通过它来提供安全框架的各种服务\n>  * Authenticator，认证器\n>  * Anthorizer，授权器\n>  * SessionManager，会话管理器\n>  * CacheManager，缓存管理器\n>* Realms，相当于Shiro进行认证授权的数据源，充当了Shiro与安全数据之间的“桥梁”或者“连接器”，也就是说，当用户进行认证（登录）和授权（访问控制）验证时，Shiro会用应用配置的Realm中查找用户以及权限信息\n\n## 基于JavaSE应用\n\n### 创建Maven项目\n\n### 导入Shiro依赖\n\n```xml\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-core</artifactId>\n    <version>1.4.1</version>\n</dependency>\n```\n\n### 创建Shiro配置文件\n\n>在resource目录下创建名为shiro.ini的文件\n>\n>在文件中完成用户角色以及权限的配置\n\n```ini\n[users]\nzhangsan=123456,seller\nlisi=123456,ckmanager\nadmin=222222,admin\n\n[roles]\nadmin=*\nseller=order-add,order-del,order-list\nckmanager=ck-add,ck-del,ck-list\n```\n\nShiro的基本使用\n\n```java\npackage com.hu.shiro;\n\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.mgt.DefaultSecurityManager;\nimport org.apache.shiro.realm.text.IniRealm;\nimport org.apache.shiro.subject.Subject;\n\nimport java.util.Scanner;\n\npublic class TestShiro {\n    public static void main(String[] args) {\n       Scanner scanner = new Scanner(System.in);\n       System.out.println(\"请输入账号\");\n       String username = scanner.nextLine();\n       System.out.println(\"请输入密码\");\n       String password = scanner.nextLine();\n\n       //1.创建安全管理器\n       DefaultSecurityManager securityManager = new DefaultSecurityManager();\n       //2.创建realm\n       IniRealm iniRealm = new IniRealm(\"classpath:shiro.ini\");\n       //3.将realm设置给安全管理器\n       securityManager.setRealm(iniRealm);\n       //4.将realm设置给SecurityUtils工具\n       SecurityUtils.setSecurityManager(securityManager);\n       //5.通过SecurityUtils工具过去Subject对象\n       Subject subject = SecurityUtils.getSubject();\n\n       //认证流程\n       //1.将认证账号密码封装到token对象中\n       UsernamePasswordToken token = new UsernamePasswordToken(username,password);\n       //2.通过subject对象调用login方法进行认证申请\n       boolean flag = false;\n       try {\n           subject.login(token);\n           flag = true;\n       }catch (Exception e){\n           flag = false;\n       }\n       System.out.println(flag?\"登录成功\":\"登录失败\");\n       //授权\n       //判断是否有某个角色\n       System.out.println(subject.hasRole(\"seller\"));\n       //判断是否有某个权限\n       System.out.println(subject.isPermitted(\"order-del\"));\n    }\n}\n```\n\n### Shiro认证流程\n\n>1.通过subject.login(token)进行登录验证，就会将token包含的用户信息（账号和密码）传递给SecurityManager\n>\n>2.SecurityManger将会调用Authenticator进行身份验证\n>\n>3.Authenticator把token传递给对应的Realm\n>\n>4.Realm根据得到的token，调用doGetAuthenticationInfo方法进行认证（如果认证失败通过抛出异常提示认证器）\n>\n>5.将认证结果一层一层的返回到subject（如果subject.login抛出异常则表示认证失败 ）\n\n## SpringBoot应用整合Shiro\n\n### 创建SpringBoot应用\n\n>lombok\n>\n>spring web\n>\n>thymeleaf\n\n### 整合Druid和Mybatis\n\n依赖\n\n```xml\n<!--druid-->\n<dependency>\n<groupId>com.alibaba</groupId>\n<artifactId>druid-spring-boot-starter</artifactId>\n<version>1.1.7</version>\n</dependency>\n<!--mysql-->\n<dependency>\n<groupId>mysql</groupId>\n<artifactId>mysql-connector-java</artifactId>\n<version>8.0.20</version>\n</dependency>\n<!--mybatis-->\n<dependency>\n<groupId>org.mybatis.spring.boot</groupId>\n<artifactId>mybatis-spring-boot-starter</artifactId>\n<version>2.1.1</version>\n</dependency>\n```\n\n配置\n\n>```yml\n>spring:\n>  datasource:\n>    druid:\n>      url: jdbc:mysql://localhost:3306/user\n>      driver-class-name: com.mysql.jdbc.Driver\n>      username: root\n>      password: 123456\n>      initial-size: 1\n>      min-idle: 1\n>      max-active: 20\n>mybatis:\n>  mapper-locations: classpath:mapper/*.xml\n>```\n\n3.整合Shiro\n\n导入依赖\n\n```xml\n<!--shiro-->\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-spring</artifactId>\n    <version>1.4.1</version>\n</dependency>\n```\n\n配置\n\n> SpringBoot默认没有提供Shiro的自动配置\n>\n> ```java\n> package com.example.demo.config;\n> \n> import org.apache.shiro.realm.text.IniRealm;\n> import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n> import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n> import org.springframework.context.annotation.Bean;\n> import org.springframework.stereotype.Controller;\n> \n> import java.util.HashMap;\n> import java.util.Map;\n> \n> @Configuration\n> public class ShiroConfig {\n> \n>     @Bean\n>     public IniRealm getIniRealm(){\n>         IniRealm iniRealm = new IniRealm(\"classpath:shiro.ini\");\n>         return iniRealm;\n>     }\n> \n>     @Bean\n>     public DefaultWebSecurityManager getDefaultWebSecurityManager(IniRealm iniRealm){\n>         DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>         //securityManager要完成校验，需要realm\n>         securityManager.setRealm(iniRealm);\n>         return securityManager;\n>     }\n> \n>     @Bean\n>     public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager){\n>         ShiroFilterFactoryBean filter = new ShiroFilterFactoryBean();\n>         //过滤器就是Shiro进行权限校验的核心，进行认证和授权是需要SecurityManager的\n>         filter.setSecurityManager(securityManager);\n> \n>         //设置shiro的拦截规则\n>         //anon  匿名用户可访问\n>         //authc 认证用户可访问\n>         //user  使用RememberMe的用户可访问\n>         //perms 对应权限可访问\n>         //role  对应角色可访问\n>         Map<String,String> filterMap = new HashMap<>();\n>         filterMap.put(\"/\",\"anon\");\n>         filterMap.put(\"/login.html\",\"anon\");\n>         filterMap.put(\"/user/login\",\"anon\");\n>         filterMap.put(\"/static/**\",\"anon\");\n>         filterMap.put(\"/**\",\"authc\");\n> \n>         filter.setFilterChainDefinitionMap(filterMap);\n>         filter.setLoginUrl(\"/login.html\");\n>         //设置未授权的访问路径\n>         filter.setUnauthorizedUrl(\"/login.html\");\n>        return filter;\n>     }\n> \n> }\n> ```\n>\n> * 认证测试\n>\n>   * UserServiceImpl.java\n>\n>     ```java\n>     package com.example.demo.service;\n>     \n>     import org.apache.shiro.SecurityUtils;\n>     import org.apache.shiro.authc.UsernamePasswordToken;\n>     import org.apache.shiro.subject.Subject;\n>     import org.springframework.stereotype.Service;\n>     \n>     @Service\n>     public class UserServiceImpl {\n>         public void checkLogin(String username,String password) throws Exception{\n>             Subject subject = SecurityUtils.getSubject();\n>             UsernamePasswordToken token = new UsernamePasswordToken(username,password);\n>             subject.login(token);\n>         }\n>     }\n>     ```\n>\n>   * UserController\n>\n>     ```java\n>     package com.example.demo.controller;\n>     \n>     import com.example.demo.service.UserServiceImpl;\n>     import org.springframework.beans.factory.annotation.Autowired;\n>     import org.springframework.stereotype.Controller;\n>     import org.springframework.web.bind.annotation.RequestMapping;\n>     \n>     @Controller\n>     @RequestMapping(\"/user\")\n>     public class UserController {\n>     \n>         @Autowired\n>         private UserServiceImpl userService;\n>     \n>         @RequestMapping(\"/login\")\n>         public String login(String username,String password){\n>             try {\n>                 userService.checkLogin(username,password);\n>                 System.out.println(\"登录成功\");\n>                 return \"index\";\n>             } catch (Exception e) {\n>                 System.out.println(\"登录失败\");\n>                 return \"login\";\n>             }\n>         }\n>     \n>     }\n>     ```\n>\n>   * login.html\n>\n>     ```html\n>     <form action=\"user/login\">\n>         <p>账号：<input type=\"text\" name=\"username\"></p>\n>         <p>密码：<input type=\"text\" name=\"password\"></p>\n>         <p><input type=\"submit\" value=\"登录\"></p>\n>     </form>\n>     ```\n\n## SpringBoot应用整合Shiro-案例（JdbcRealm）\n\n### JdbcRealm介绍\n\n>如果使用JdbcRealm，则必须提供JdbcRealm所需的表结构（权限设计）\n\n### JdbcRealm规定的表结构\n\n>```mysql\n>-- 创建用户表\n>create table users(\n>\tid int primary key auto_increment,\n>    username varchar(20) not null unique,\n>    password varchar(20) not null,\n>    password_salt varchar(20)\n>);\n>insert into users(username,password) values('zhangsan','123456');\n>insert into users(username,password) values('lisi','123456');\n>insert into users(username,password) values('wangwu','123456');\n>insert into users(username,password) values('zhaoliu','123456');\n>insert into users(username,password) values('chengqi','123456');\n>\n>-- 用户角色表\n>create table user_roles(\n>\tid int primary key auto_increment,\n>    username varchar(60) not null,\n>    role_name varchar(100) not null\n>);\n>\n>-- admin 系统管理员\n>-- cmanager 仓库人员\n>-- xmanager 销售人员\n>-- kmanager 客服人员\n>-- zmanager 行政人员\n>\n>insert into user_roles(username,role_name) values('zhangsan','admin');\n>insert into user_roles(username,role_name) values('lisi','cmanager');\n>insert into user_roles(username,role_name) values('wangwu','xmanager');\n>insert into user_roles(username,role_name) values('zhaoliu','kmanager');\n>insert into user_roles(username,role_name) values('chengqi','zmanager');\n>\n>-- 角色权限表\n>create table roles_permissions(\n>\tid int primary key auto_increment,\n>    role_name varchar(100) not null,\n>    permission varchar(100) not null\n>);\n>\n>-- 管理员\n>insert into roles_permissions(role_name,permission) values('admin','*');\n>-- 仓库人员\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:save');\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:delete');\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:update');\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:find');\n>-- 销售人员\n>insert into roles_permissions(role_name,permission) values('xmanager','sys:x:save');\n>insert into roles_permissions(role_name,permission) values('xmanager','sys:x:delete');\n>insert into roles_permissions(role_name,permission) values('xmanager','sys:x:update');\n>insert into roles_permissions(role_name,permission) values('xmanager','sys:x:find');\n>-- 客服人员\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:update');\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:find');\n>-- 行政人员\n>insert into roles_permissions(role_name,permission) values('zmanager','sys:z:find');\n>```\n\n### Springboot整合Shiro\n\n> 创建Springboot应用\n>\n> 整合Druid和Mybatis\n>\n> 整合Shiro\n>\n> * 添加依赖\n>\n> * 配置shiro\n>\n>   ```java\n>   package com.example.demo.config;\n>   \n>   import org.apache.shiro.realm.jdbc.JdbcRealm;\n>   import org.apache.shiro.realm.text.IniRealm;\n>   import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n>   import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n>   import org.springframework.context.annotation.Bean;\n>   import org.springframework.context.annotation.Configuration;\n>   \n>   import javax.sql.DataSource;\n>   import java.util.HashMap;\n>   import java.util.Map;\n>   \n>   @Configuration\n>   public class ShiroConfig {\n>   \n>       @Bean\n>       public JdbcRealm getJdbcRealm(DataSource dataSource){\n>           JdbcRealm jdbcRealm = new JdbcRealm();\n>           //JdbcRealm会自动从数据查询用户及权限数据（数据库的表结构要符合JdbcRealm的规范）\n>           jdbcRealm.setDataSource(dataSource);\n>           //JdbcRealm默认开启认证功能，需要手动开启授权功能\n>           jdbcRealm.setPermissionsLookupEnabled(true);\n>           return jdbcRealm;\n>       }\n>   \n>       @Bean\n>       public DefaultWebSecurityManager getDefaultWebSecurityManager(JdbcRealm jdbcRealm){\n>           DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>           //securityManager要完成校验，需要realm\n>           securityManager.setRealm(jdbcRealm);\n>           return securityManager;\n>       }\n>   \n>       @Bean\n>       public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager){\n>           ShiroFilterFactoryBean filter = new ShiroFilterFactoryBean();\n>           //过滤器就是Shiro进行权限校验的核心，进行认证和授权是需要SecurityManager的\n>           filter.setSecurityManager(securityManager);\n>   \n>           //设置shiro的拦截规则\n>           //anon  匿名用户可访问\n>           //authc 认证用户可访问\n>           //user  使用RememberMe的用户可访问\n>           //perms 对应权限可访问\n>           //role  对应角色可访问\n>           Map<String,String> filterMap = new HashMap<>();\n>           filterMap.put(\"/\",\"anon\");\n>           filterMap.put(\"/login.html\",\"anon\");\n>           filterMap.put(\"/user/login\",\"anon\");\n>           filterMap.put(\"/static/**\",\"anon\");\n>           filterMap.put(\"/**\",\"authc\");\n>   \n>           filter.setFilterChainDefinitionMap(filterMap);\n>           //filter.setLoginUrl(\"/\");\n>           //设置未授权的访问路径\n>           filter.setUnauthorizedUrl(\"/login.html\");\n>           return filter;\n>       }\n>   }\n>   ```\n\n七、Shiro的标签使用\n\n> 当用户认证进入到主页之后，需要显示用户信息以及当前用户的权限信息，Shiro就提供了一套标签用于页面来进行权限数据的呈现\n\nShiro提供了可供JSP使用的标签以及thymeleaf中标签\n\n* JSP页面引用：\n\n  ```jsp\n  <%@ taglib prefix=\"shiro\" uri=\"http://shiro.apache.org/tags\" %>\n  ```\n\n* thymeleaf模板中引用\n\n  在pom.xml文件中导入thymeleaf模板对shiro标签支持的依赖\n\n  ```xml\n  <dependency>\n      <groupId>com.github.theborakompanioni</groupId>\n      <artifactId>thymeleaf-extras-shiro</artifactId>\n      <version>2.0.0</version>\n  </dependency>\n  ```\n\n  在ShiroConfig配置Shiro的\n\n  ```java\n  @Bean\n  public ShiroDialect getShiroDialect(){\n      return new ShiroDialect();\n  }\n  ```\n\n  thymeleaf模板中引入Shiro的命名空间\n\n  ```html\n  <html xmlns:th=\"http://www.thymeleaf.org\"\n        xmlns:shiro=\"http://www.pollix.at/thymeleaf/shiro \">  \n  </html>\n  ```\n\n  常用标签\n\n  >guest，判断用户是否是游客身份，如果是游客身份则显示此标签内容\n  >\n  >```html\n  ><shiro:guest>\n  >    欢迎游客访问，<a href=\"login.html\">登录</a>\n  ></shiro:guest>\n  >```\n  >\n  >user，判断用户是否是认证身份，如果是认证身份则显示此标签内容\n  >\n  >principal，获取当前登录用户名\n  >\n  >```html\n  ><shiro:user>\n  >    用户[<shiro:principal/>]欢迎您！\n  > </shiro:user>\n  >```\n  >\n  >noAuthenticated/authenticated\n  >\n  >hasRole\n  >\n  >hasPermission\n  >\n  >```html\n  ><!DOCTYPE html>\n  ><html xmlns:th=\"http://www.thymeleaf.org\"\n  >      xmlns:shiro=\"http://www.pollix.at/thymeleaf/shiro \">\n  ><head>\n  >    <meta charset=\"UTF-8\">\n  >    <title>Title</title>\n  ></head>\n  ><body>\n  >    index\n  >    <hr/>\n  >    <shiro:guest>\n  >        欢迎游客访问，<a href=\"login.html\">登录</a>\n  >    </shiro:guest>\n  >    <shiro:user>\n  >        用户[<shiro:principal/>]欢迎您！\n  >        当前用户为<shiro:hasRole name=\"admin\">超级管理员</shiro:hasRole>\n  >        <shiro:hasRole name=\"cmanager\">仓库人员</shiro:hasRole>\n  >        <shiro:hasRole name=\"xmanager\">销售人员</shiro:hasRole>\n  >        <shiro:hasRole name=\"kmanager\">客服人员</shiro:hasRole>\n  >        <shiro:hasRole name=\"zmanager\">行政人员</shiro:hasRole>\n  >    </shiro:user>\n  >    <hr/>\n  >    仓库管理\n  >    <ul>\n  >        <shiro:hasPermission name=\"sys:c:save\"><li><a href=\"#\">入库</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:c:delete\"><li><a href=\"#\">出库</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:c:update\"><li><a href=\"#\">修改</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:c:find\"><li><a href=\"#\">查询</a></li></shiro:hasPermission>\n  >    </ul>\n  >    订单管理\n  >    <ul>\n  >        <shiro:hasPermission name=\"sys:x:save\"><li><a href=\"#\">添加订单</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:x:delete\"><li><a href=\"#\">删除订单</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:x:update\"><li><a href=\"#\">修改订单</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:x:find\"><li><a href=\"#\">查询订单</a></li></shiro:hasPermission>\n  >    </ul>\n  >    客户管理\n  >    <ul>\n  >        <shiro:hasPermission name=\"sys:k:save\"><li><a href=\"#\">添加客户</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:k:delete\"><li><a href=\"#\">删除客户</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:k:update\"><li><a href=\"#\">修改客户</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:k:find\"><li><a href=\"#\">查询客户</a></li></shiro:hasPermission>\n  >    </ul>\n  ></body>\n  ></html>\n  >```\n\n## Springboot整合Shiro完成权限管理案例—自定义Realm\n\n>使用JdbcRealm可以完成用户权限管理，但是我们必须提供Jdbc规定的数据表结构，如果我们的项目开发中，这个JdbcReal规定的数据表结构不能满足开发需求，如何处理？\n>\n>* 自定义数据库表结构\n>* 自定义Realm实现认证和授权\n\n### 数据库设计\n\n>```mysql\n>-- 用户信息表\n>create table user(\n>\tid int primary key auto_increment,\n>\tusername varchar(60) not null unique,\n>\tpassword varchar(20) not null,\n>\tpassword_salt varchar(60)\n>);\n>\n>insert into user(username,password) values('zhangsan','123456');\n>insert into user(username,password) values('lisi','123456');\n>insert into user(username,password) values('wangwu','123456');\n>insert into user(username,password) values('zhaoliu','123456');\n>insert into user(username,password) values('chengqi','123456');\n>\n>-- 角色信息表\n>create table role(\n>\tid int primary key auto_increment,\n>\tname varchar(60) not null\n>);\n>\n>insert into role(name) values('admin');\n>insert into role(name) values('cmanager');-- 仓库\n>insert into role(name) values('xmanager');-- 销售\n>insert into role(name) values('kmanager');-- 客服\n>insert into role(name) values('zmanager');-- 行政\n>\n>-- 权限信息表\n>create table permission(\n>\tid int primary key auto_increment,\n>\t`code` varchar(60) not null,\n>\tname varchar(60)\n>);\n>\n>insert into permission(code,name) values('sys:c:save','入库');\n>insert into permission(code,name) values('sys:c:delete','出库');\n>insert into permission(code,name) values('sys:c:update','修改');\n>insert into permission(code,name) values('sys:c:find','查询');\n>\n>insert into permission(code,name) values('sys:x:save','新增订单');\n>insert into permission(code,name) values('sys:x:delete','删除订单');\n>insert into permission(code,name) values('sys:x:update','修改订单');\n>insert into permission(code,name) values('sys:x:find','查询订单');\n>\n>insert into permission(code,name) values('sys:k:save','新增客户');\n>insert into permission(code,name) values('sys:k:delete','删除客户');\n>insert into permission(code,name) values('sys:k:update','修改客户');\n>insert into permission(code,name) values('sys:k:find','查询客户');\n>\n>\n>-- 用户角色表\n>create table user_role(\n>\tuid int not null,\n>\trid int not null\n>-- \tprimary key(uid,rid),\n>-- \tconstraint FK_user foreign key(uid) references user(id),\n>-- \tconstraint FK_role foreign key(rid) references role(id),\n>)\n>\n>insert into user_role(uid,rid) values(1,1);\n>insert into user_role(uid,rid) values(1,2);\n>insert into user_role(uid,rid) values(1,3);\n>insert into user_role(uid,rid) values(1,4);\n>insert into user_role(uid,rid) values(1,5);\n>\n>insert into user_role(uid,rid) values(2,2);\n>insert into user_role(uid,rid) values(3,3);\n>insert into user_role(uid,rid) values(4,4);\n>insert into user_role(uid,rid) values(5,5);\n>\n>-- 角色权限表\n>create table role_permission(\n>\trid int not null,\n>\tpid int not null\n>)\n>-- 给仓库角色分配权限\n>insert into role_permission(rid,pid) values(2,1);\n>insert into role_permission(rid,pid) values(2,2);\n>insert into role_permission(rid,pid) values(2,3);\n>insert into role_permission(rid,pid) values(2,4);\n>-- 给销售角色分配权限\n>insert into role_permission(rid,pid) values(3,5);\n>insert into role_permission(rid,pid) values(3,6);\n>insert into role_permission(rid,pid) values(3,7);\n>insert into role_permission(rid,pid) values(3,8);\n>insert into role_permission(rid,pid) values(3,9);\n>insert into role_permission(rid,pid) values(3,10);\n>insert into role_permission(rid,pid) values(3,11);\n>insert into role_permission(rid,pid) values(3,12);\n>-- 给客服角色分配权限\n>insert into role_permission(rid,pid) values(4,11);\n>insert into role_permission(rid,pid) values(4,12);\n>-- 给行政角色分配权限\n>insert into role_permission(rid,pid) values(5,4);\n>insert into role_permission(rid,pid) values(5,8);\n>insert into role_permission(rid,pid) values(5,12);\n>```\n\n### DAO实现\n\n>Shiro进行认证需要用户信息\n>\n>* 根据用户名查询用户信息\n>\n>Shiro进行授权管理需要当前用户的角色和权限\n>\n>* 根据用户名查询当前用户的角色列表（3张表连接查询）\n>* 根据用户名查询当前用户的权限列表（5张表连接查询）\n\n#### 创建Springboot项目，整合Mybatis\n\n#### 更具用户名查用户信息\n\n* 创建Bean\n\n  ```java\n  @Data\n  public class User {\n      private Integer id;\n      private String username;\n      private String password;\n      private String pwdSalt;\n  }\n  ```\n\n* 创建Dao\n\n  ```java\n  public interface UserDao {\n      User queryUserByUsername(String username) throws Exception;\n  }\n  ```\n\n* 映射配置\n\n  ```xml\n  <resultMap id=\"userMap\" type=\"User\">\n      <id column=\"id\" property=\"id\"></id>\n      <result column=\"username\" property=\"username\"/>\n      <result column=\"password\" property=\"password\"/>\n      <result column=\"password_salt\" property=\"pwdSalt\"/>\n  </resultMap>\n  <select id=\"queryUserByUsername\" resultMap=\"userMap\">\n      select * from user where username = #{username};\n  </select>\n  ```\n\n#### 根据用户名查询角色名列表\n\n* 创建Dao\n\n  ```java\n  public interface RoleDao {\n      Set<String> queryRoleNameByUsername(String username) throws Exception;\n  }\n  ```\n\n* 映射配置\n\n  ```xml\n  <select id=\"queryRoleNameByUsername\" resultSets=\"java.util.set\" resultType=\"String\">\n      SELECT r.name FROM `user` u\n      LEFT JOIN user_role ur ON u.id = ur.uid\n      LEFT JOIN role r ON ur.rid = r.id\n      WHERE u.username = #{username}\n  </select>\n  ```\n\n### 整合Shiro\n\n* 导入依赖\n\n  ```xml\n  <dependency>\n      <groupId>com.github.theborakompanioni</groupId>\n      <artifactId>thymeleaf-extras-shiro</artifactId>\n      <version>2.0.0</version>\n  </dependency>\n  \n  <!--shiro-->\n  <dependency>\n      <groupId>org.apache.shiro</groupId>\n      <artifactId>shiro-spring</artifactId>\n      <version>1.4.1</version>\n  </dependency>\n  ```\n\n* 配置Shiro-基于Java配置方式\n\n* 自定义Realm\n\n  ```java\n  package com.example.demo.config;\n  \n  import com.example.demo.beans.User;\n  import com.example.demo.dao.PermissionDao;\n  import com.example.demo.dao.RoleDao;\n  import com.example.demo.dao.UserDao;\n  import org.apache.shiro.authc.*;\n  import org.apache.shiro.authz.AuthorizationInfo;\n  import org.apache.shiro.authz.SimpleAuthorizationInfo;\n  import org.apache.shiro.realm.AuthorizingRealm;\n  import org.apache.shiro.subject.PrincipalCollection;\n  \n  import javax.annotation.Resource;\n  import java.util.Set;\n  \n  /**\n   * 1.创建一个继承AuthorizingRealm类（实现Realm接口的类）\n   * 2.重新doGetAuthorizationInfo和doGetAuthenticationInfo方法\n   * 3.重新getName方法\n   */\n  public class MyRealm extends AuthorizingRealm {\n  \n      @Resource\n      private UserDao userDao;\n  \n      @Resource\n      private RoleDao roleDao;\n  \n      @Resource\n      private PermissionDao permissionDao;\n  \n      @Override\n      public String getName() {\n          return \"myRealm\";\n      }\n  \n      /**\n       * 获取授权数据(将当前用户的角色以及权限信息查询出来)\n       * @param principalCollection\n       * @return\n       */\n      @Override\n      protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n          //获取用户的用户名\n          String username = (String) principalCollection.iterator().next();\n          //根据用户名查询当前用户角色列表\n          Set<String> roleNames = roleDao.queryRoleNameByUsername(username);\n  \n          //根据用户名查询当前用户权限列表\n          Set<String> permission = permissionDao.queryPermissionByUsername(username);\n          SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n          info.setRoles(roleNames);\n          info.setStringPermissions(permission);\n          return info;\n      }\n  \n      /**\n       * 获取认证数据（从数据库查询的用户的正确数据）\n       * @param authenticationToken\n       * @return\n       * @throws AuthenticationException\n       */\n      @Override\n      protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n          //参数authenticationToken就是传递的 subject.login(token)\n          //从token获取用户名\n          UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n          String username = token.getUsername();\n          //根据用户名，从数据库查询当前用户的安全数据\n          User user = userDao.queryUserByUsername(username);\n          if (user == null){\n              return null;\n          }\n          AuthenticationInfo info = new SimpleAuthenticationInfo(\n                  username,   //当前用户名\n                  user.getPassword(),  //从数据库查询出来的安全密码\n                  getName());\n  \n          return info;\n      }\n  }\n  ```\n\n## 加密\n\n### 加密介绍\n\n> 明文——（加密规则）——密文\n>\n> 加密规则可以自定义，在项目开发中我们通常使用BASE64和MD5编码方式\n>\n> * BASE64：可反编码的编码方式\n>\n>   明文——密文\n>\n>   密文——明文\n>\n> * MD5：不可逆的编码方式（非对称）\n>\n>   明文——密文\n\n如果数据库用户的密码存储的密文，Shiro改如何验证\n\n使用Shiro提供的加密功能，对输入的密码进行加密之后再进行认证\n\n### Shiro使用加密认证\n\n> 配置Shiro\n>\n> ```java\n> package com.example.demo.config;\n> \n> import at.pollux.thymeleaf.shiro.dialect.ShiroDialect;\n> import org.apache.shiro.authc.credential.HashedCredentialsMatcher;\n> import org.apache.shiro.realm.jdbc.JdbcRealm;\n> import org.apache.shiro.realm.text.IniRealm;\n> import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n> import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n> import org.springframework.context.annotation.Bean;\n> import org.springframework.context.annotation.Configuration;\n> \n> import javax.sql.DataSource;\n> import java.util.HashMap;\n> import java.util.Map;\n> \n> @Configuration\n> public class ShiroConfig {\n> \n>    //...\n> \n>     @Bean\n>     public HashedCredentialsMatcher getHashedCredentialsMatcher(){\n>         HashedCredentialsMatcher matcher = new HashedCredentialsMatcher();\n>         //matcher就是用来指定加密规则\n>         matcher.setHashAlgorithmName(\"md5\");\n>         //hash次数\n>         matcher.setHashIterations(1);//次数循环次数要与用户注册时密码加密次数一致\n>         return matcher;\n>     }\n> \n>     /**\n>      * 自定义Realm\n>      */\n>     @Bean\n>     public MyRealm getMyRealm(HashedCredentialsMatcher matcher){\n>         MyRealm realm = new MyRealm();\n>         realm.setCredentialsMatcher(matcher);\n>         return realm;\n>     }\n> \n>     //...\n> }\n> \n> ```\n\n### 用户注册密码加密处理\n\n> register.html\n>\n> ```html\n> <form action=\"user/register\">\n>     <p>账号：<input type=\"text\" name=\"username\"></p>\n>     <p>密码：<input type=\"text\" name=\"password\"></p>\n>     <p><input type=\"submit\" value=\"注册\"></p>\n> </form>\n> ```\n>\n> UserController.java\n>\n> ```java\n> package com.example.demo.controller;\n> \n> import com.example.demo.service.UserServiceImpl;\n> import org.apache.shiro.crypto.hash.Md5Hash;\n> import org.springframework.beans.factory.annotation.Autowired;\n> import org.springframework.stereotype.Controller;\n> import org.springframework.web.bind.annotation.RequestMapping;\n> \n> import java.util.Random;\n> \n> @Controller\n> @RequestMapping(\"/user\")\n> public class UserController {\n> \n>     @Autowired\n>     private UserServiceImpl userService;\n> \n>     @RequestMapping(\"/register\")\n>     public String register(String username,String password){\n>         System.out.println(\"注册\");\n>         //注册的时候要对密码进行加密存储\n>         Md5Hash md5Hash = new Md5Hash(password);\n>         System.out.println(md5Hash.toHex());\n> \n>         //加盐加密\n>         int num = new Random().nextInt(90000)+10000;//10000-99999\n>         System.out.println(\"salt:\"+num);\n>         Md5Hash md5Hash2 = new Md5Hash(password,num+\"\");\n>         System.out.println(md5Hash2);\n> \n>         //加盐加密+多次hash\n>         Md5Hash md5Hash3 = new Md5Hash(password,num+\"\",3);\n>         System.out.println(md5Hash3);\n>         \n>         //将用户信息保存到数据库时，保存加密后的米，如果生成的随机盐，盐也要保存\n>         \n>         return \"login\";\n>     }\n> }\n> ```\n\n### 如果密码进行了加密处理，则Realm再但会认证数据时需要返回盐\n\n>MyRealm.java\n>\n>```java\n>package com.example.demo.config;\n>\n>import com.example.demo.beans.User;\n>import com.example.demo.dao.PermissionDao;\n>import com.example.demo.dao.RoleDao;\n>import com.example.demo.dao.UserDao;\n>import org.apache.shiro.authc.*;\n>import org.apache.shiro.authz.AuthorizationInfo;\n>import org.apache.shiro.authz.SimpleAuthorizationInfo;\n>import org.apache.shiro.realm.AuthorizingRealm;\n>import org.apache.shiro.subject.PrincipalCollection;\n>import org.apache.shiro.util.ByteSource;\n>\n>import javax.annotation.Resource;\n>import java.util.Set;\n>\n>/**\n> * 1.创建一个继承AuthorizingRealm类（实现Realm接口的类）\n> * 2.重新doGetAuthorizationInfo和doGetAuthenticationInfo方法\n> * 3.重新getName方法\n> */\n>public class MyRealm extends AuthorizingRealm {\n>\n>    @Resource\n>    private UserDao userDao;\n>\n>    @Resource\n>    private RoleDao roleDao;\n>\n>    @Resource\n>    private PermissionDao permissionDao;\n>\n>    //...\n>\n>    /**\n>     * 获取认证数据（从数据库查询的用户的正确数据）\n>     * @param authenticationToken\n>     * @return\n>     * @throws AuthenticationException\n>     */\n>    @Override\n>    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n>        //参数authenticationToken就是传递的 subject.login(token)\n>        //从token获取用户名\n>        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n>        String username = token.getUsername();\n>        //根据用户名，从数据库查询当前用户的安全数据\n>        User user = userDao.queryUserByUsername(username);\n>        if (user == null){\n>            return null;\n>        }\n>        /*AuthenticationInfo info = new SimpleAuthenticationInfo(\n>                username,   //当前用户名\n>                user.getPassword(),  //从数据库查询出来的安全密码\n>                getName());*/\n>        //如果数据库是加了盐的\n>        AuthenticationInfo info = new SimpleAuthenticationInfo(\n>                username,   //当前用户名\n>                user.getPassword(),  //从数据库查询出来的安全密码\n>                ByteSource.Util.bytes(user.getPwdSalt()),\n>                getName());\n>        return info;\n>    }\n>}\n>```\n\n## 退出登录\n\n在shiro过滤器中进行配置，配置logOut对应的路径\n\n```java\nfilterMap.put(\"/exit\",\"logout\");\n```\n\n在页面的退出按钮上，跳转到exit对应的url\n\n```html\n<a href=\"exit\">退出</a>\n```\n\n## 授权\n\n> 用户登录成功之后，要进行的操作就需要有对应的权限，在进行操作之前对权限进行检查—授权\n>\n> 权限控制通常有两种做法：\n>\n> * 不同身份的用户登录，我们显示不同的操作菜单（没有权限的菜单不显示）\n> * 对所有用户显示所有菜单，当用户点击菜单以后再验证当前用户是否有次权限，如果没有则提示权限不足\n\n### html授权\n\n> 在菜单页面只显示当前用户拥有权限操作的菜单\n>\n> shiro标签\n>\n> ```html\n> <shiro:hasPermission name=\"sys:c:save\"><dd><a href=\"c_add.html\"  >入库</a></dd></shiro:hasPermission>\n> ```\n\n### 过滤器授权\n\n>在shiro过滤器中请求的url进行权限设置\n>\n>```java\n>filterMap.put(\"/c_add.html\",\"perms[sys:c:save]\");\n> //设置未授权的访问路径\n>filter.setUnauthorizedUrl(\"/lesspermission.html\");\n>```\n\n### 注解授权\n\n> 配置Spring对Shiro的支持，ShiroConfig.java\n>\n> ```java\n> @Bean\n> public DefaultAdvisorAutoProxyCreator getAdvisorAutoProxyCreator(){\n>     DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator();\n>     autoProxyCreator.setProxyTargetClass(true);\n>     return autoProxyCreator;\n> }\n> \n> @Bean\n> public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultWebSecurityManager securityManager){\n>     AuthorizationAttributeSourceAdvisor advisor = new AuthorizationAttributeSourceAdvisor();\n>     advisor.setSecurityManager(securityManager);\n>     return advisor;\n> }\n> ```\n>\n> 在请求的控制器添加权限注解\n>\n> ```java\n> package com.example.demo.controller;\n> \n> import org.apache.shiro.authz.annotation.RequiresPermissions;\n> import org.springframework.stereotype.Controller;\n> import org.springframework.web.bind.annotation.RequestMapping;\n> \n> @Controller\n> @RequestMapping(\"/customer\")\n> public class CustomerController {\n> \n>     @RequestMapping(\"/list\")\n>     /**\n>      * 如果没有sys:k:find的权限，则不需要执行此方法\n>      */\n>     @RequiresPermissions(\"sys:k:find\")\n>     public String list(){\n>         return \"customer_list\";\n>     }\n> }\n> ```\n>\n> 通过全局异常处理，指定权限不足时的页面跳转\n>\n> ```java\n> package com.example.demo.utils;\n> \n> import org.apache.shiro.authz.AuthorizationException;\n> import org.springframework.web.bind.annotation.ControllerAdvice;\n> import org.springframework.web.bind.annotation.ExceptionHandler;\n> \n> @ControllerAdvice\n> public class GlobalExceptionhandler {\n> \n>     @ExceptionHandler\n>     public String doException(Exception e){\n>         if (e instanceof AuthorizationException){\n>             return \"lesspermission\";\n>         }\n>         return null;\n>     }\n> }\n> ```\n\n### 手动授权\n\n>在代码中进行手动的权限校验\n>\n>```java\n>Subject subject = SecurityUtils.getSubject();\n>if (subject.isPermitted(\"sys:k:find\")){\n>    return \"customer_list\";\n>}else {\n>    return \"lesspermission\";\n>}\n>```\n\n## 缓存使用\n\n> 使用Shiro进行权限管理过程中，每次授权都会访问realm中的doGetAuthenticationInfo方法查询当前用户的角色及权限信息，如果系统的用户量比较大则会对数据库造成比较大的压力\n>\n> Shiro支持缓存以降低对数据库的访问压力（缓存的时授权信息）\n\n\n\n### 缓存的使用\n\n> 导入依赖\n>\n> ```xml\n>  <dependency>\n>      <groupId>org.springframework.boot</groupId>\n>      <artifactId>spring-boot-starter-cache</artifactId>\n> </dependency>\n> \n> <dependency>\n>     <groupId>net.sf.ehcache</groupId>\n>     <artifactId>ehcache</artifactId>\n> </dependency>\n> \n> <dependency>\n>     <groupId>org.apache.shiro</groupId>\n>     <artifactId>shiro-ehcache</artifactId>\n>     <version>1.4.0</version>\n> </dependency>\n> ```\n\n### 配置缓存策略\n\n> * 在resources目录下创建一个xml文件，ehcache.xml\n>\n> * ```xml\n>   <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n>   <ehcache updateCheck=\"false\" dynamicConfig=\"false\">\n>       <diskStore path=\"C:\\TEMP\" />\n>   \n>       <cache name=\"user\" timeToLiveSeconds=\"300\" maxEntriesLocalHeap=\"1000\"/>\n>   \n>       <defaultCache name=\"defaultCache\"\n>                     maxElementsInMemory=\"10000\"\n>                     eternal=\"false\"\n>                     timeToIdleSeconds=\"120\"\n>                     timeToLiveSeconds=\"120\"\n>                     overflowToDisk=\"false\"\n>                     maxElementsOnDisk=\"100000\"\n>                     diskPersistent=\"false\"\n>                     diskExpiryThreadIntervalSeconds=\"120\"\n>                     memoryStoreEvictionPolicy=\"LRU\"/>\n>       <!--缓存淘汰策略：当缓存空间比较紧张时，我们要存储新的数据进来，就必然删除一些老的数据\n>           LRU 最近最少使用\n>           FIFO 先进先出\n>           LFU 最少使用\n>       -->\n>   \n>   </ehcache>\n>   ```\n\n### 加入缓存\n\n> ShiroConfig\n>\n> ```java\n> @Bean\n> public EhCacheManager getEhCacheManager(){\n>     EhCacheManager ehCacheManager = new EhCacheManager();\n>     ehCacheManager.setCacheManagerConfigFile(\"classpth:ehcache.xml\");\n>     return ehCacheManager;\n> }\n> @Bean\n> public DefaultWebSecurityManager getDefaultWebSecurityManager(MyRealm realm){\n>     DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>     //securityManager要完成校验，需要realm\n>     securityManager.setRealm(realm);\n>     securityManager.setCacheManager(getEhCacheManager());\n>     return securityManager;\n> }\n> ```\n\n## session管理\n\n> Shiro进行认证和授权时基于session\n\n如果我们需要对session进行管理\n\n* 自定义session管理器\n* 将自定义的session管理器设置给SecurityManager\n\n配置自定义SessionManager：ShiroConfig.java\n\n>```java\n>@Bean\n>public DefaultWebSessionManager getDefaultWebSessionManager(){\n>    DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();\n>    System.out.println(sessionManager.getGlobalSessionTimeout());//1800000\n>    //配置sessionManager\n>    sessionManager.setGlobalSessionTimeout(15*1000);\n>    return sessionManager;\n>}\n>@Bean\n>public DefaultWebSecurityManager getDefaultWebSecurityManager(MyRealm realm){\n>    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>    //securityManager要完成校验，需要realm\n>    securityManager.setRealm(realm);\n>    //设置缓存\n>    securityManager.setCacheManager(getEhCacheManager());\n>    //设置session\n>    securityManager.setSessionManager(getDefaultWebSessionManager());\n>    return securityManager;\n>}\n>```\n\n## RememberMe\n\n> 将用户对页面的访问权限分为三个级别\n>\n> * 未认证—可访问的页面\n>   * login.html、register.html\n> * 曾认证—可访问的页面\n>   * info.html\n> * 已认证—可访问的页面\n>   * 转账.html\n\n### 在过滤器中设置“记住我”可访问的url\n\n```java\n \t\t//anon  匿名用户可访问\n        //authc 认证用户可访问\n        //user  使用RememberMe的用户可访问\n        //perms 对应权限可访问   \n\t\t//logout 退出指定的url\nMap<String,String> filterMap = new HashMap<>();\n        filterMap.put(\"/\",\"anon\");\n        filterMap.put(\"/login.html\",\"anon\");\n//        filterMap.put(\"/index.html\",\"anon\");\n        filterMap.put(\"/index.html\",\"user\");\n        filterMap.put(\"/register.html\",\"anon\");\n        filterMap.put(\"/user/login\",\"anon\");\n        filterMap.put(\"/user/register\",\"anon\");\n        filterMap.put(\"/static/**\",\"anon\");\n        filterMap.put(\"/**\",\"authc\");\n  \t\tfilterMap.put(\"/c_add.html\",\"perms[sys:c:save]\");\n\n        filterMap.put(\"/exit\",\"logout\");\n```\n\n### 在ShiroConfig.java中配置基于Cookie的rememberMe管理器\n\n> ```java\n> @Bean\n> public CookieRememberMeManager getCookieRememberMeManager(){\n>     CookieRememberMeManager rememberMeManager = new CookieRememberMeManager();\n>     //cookie必须设置name\n>     SimpleCookie cookie = new SimpleCookie(\"rememberMe\");\n>     cookie.setMaxAge(30*24*3600);\n>     rememberMeManager.setCookie(cookie);\n>     return rememberMeManager;\n> }\n> \n> @Bean\n> public DefaultWebSecurityManager getDefaultWebSecurityManager(MyRealm realm){\n>     DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>     //securityManager要完成校验，需要realm\n>     securityManager.setRealm(realm);\n>     //设置缓存\n>     securityManager.setCacheManager(getEhCacheManager());\n>     //设置session\n>     securityManager.setSessionManager(getDefaultWebSessionManager());\n>     //设置rememberMe管理器\n>     securityManager.setRememberMeManager(getCookieRememberMeManager());\n>     return securityManager;\n> }\n> ```\n\n### 登录认证时设置token“记住我”\n\n> 登录页面\n>\n> ```html\n> <form action=\"user/login\">\n>     <p>账号：<input type=\"text\" name=\"username\"></p>\n>     <p>密码：<input type=\"text\" name=\"password\"></p>\n>     <p>记住我：<input type=\"checkbox\" name=\"rememberMe\"></p>\n>     <p><input type=\"submit\" value=\"登录\"></p>\n> </form>\n> ```\n>\n> 控制器\n>\n> ```java\n> package com.example.demo.controller;\n> \n> import com.example.demo.service.UserServiceImpl;\n> import org.apache.shiro.crypto.hash.Md5Hash;\n> import org.springframework.beans.factory.annotation.Autowired;\n> import org.springframework.stereotype.Controller;\n> import org.springframework.web.bind.annotation.RequestMapping;\n> \n> import java.util.Random;\n> \n> @Controller\n> @RequestMapping(\"/user\")\n> public class UserController {\n> \n>     @Autowired\n>     private UserServiceImpl userService;\n> \n>     @RequestMapping(\"/login\")\n>     public String login(String username,String password,boolean rememberMe){\n>         try {\n>             userService.checkLogin(username,password,rememberMe);\n>             System.out.println(\"登录成功\");\n>             return \"index.html\";\n>         } catch (Exception e) {\n>             System.out.println(\"登录失败\");\n>             return \"login\";\n>         }\n>     }\n>    //...\n> }\n> ```\n>\n> service\n>\n> ```java\n> package com.example.demo.service;\n> \n> import org.apache.shiro.SecurityUtils;\n> import org.apache.shiro.authc.UsernamePasswordToken;\n> import org.apache.shiro.subject.Subject;\n> import org.springframework.stereotype.Service;\n> \n> @Service\n> public class UserServiceImpl {\n>        public void checkLogin(String username, String password, boolean rememberMe) throws Exception{\n>            Subject subject = SecurityUtils.getSubject();\n>            UsernamePasswordToken token = new UsernamePasswordToken(username,password);\n>            token.setRememberMe(rememberMe);\n>            subject.login(token);\n>        }\n> }\n> ```\n\n## Shiro多Realm配置\n\n### 使用场景\n\n> 当Shiro进行权限管理，数据来自不同的数据源时，我们可以给SecurityManager配置多个Realm\n\n### 多个Realm的处理方式\n\n> 1.链式处理\n>\n> * 多个Realm一次进行认证\n>\n> 2.分支处理\n>\n> * 根据不同的条件从多个Realm中选择一个进行认证处理\n\n### 多Realm配置（链式处理）\n\n定义多个Realm\n\n> UserRealm.java\n>\n> ```java\n> package com.example.demo.realm;\n> \n> import lombok.extern.slf4j.Slf4j;\n> import org.apache.shiro.authc.*;\n> import org.apache.shiro.authz.AuthorizationInfo;\n> import org.apache.shiro.realm.AuthorizingRealm;\n> import org.apache.shiro.subject.PrincipalCollection;\n> \n> @Slf4j\n> public class UserRealm extends AuthorizingRealm {\n> \n>     @Override\n>     public String getName() {\n>         return \"UserRealm\";\n>     }\n> \n>     @Override\n>     protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n>         return null;\n>     }\n> \n>     @Override\n>     protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n>         log.info(\"-------UserRealm--------\");\n> \n>         UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n>         String username = token.getUsername();\n> \n>         SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(username,\"123456\",getName());\n>         return info;\n>     }\n> }\n> ```\n>\n> ManagerRealm.java\n>\n> ```java\n> package com.example.demo.realm;\n> \n> import lombok.extern.slf4j.Slf4j;\n> import org.apache.shiro.authc.*;\n> import org.apache.shiro.authz.AuthorizationInfo;\n> import org.apache.shiro.realm.AuthorizingRealm;\n> import org.apache.shiro.subject.PrincipalCollection;\n> \n> @Slf4j\n> public class ManagerRealm extends AuthorizingRealm {\n> \n>     @Override\n>     public String getName() {\n>         return \"ManagerRealm\";\n>     }\n> \n>     @Override\n>     protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n>         return null;\n>     }\n> \n>     @Override\n>     protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n>         log.info(\"-------ManagerRealm--------\");\n> \n>         UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n>         String username = token.getUsername();\n> \n>         SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(username,\"222222\",getName());\n>         return info;\n>     }\n> }\n> ```\n\n在ShiroConfig.java中为Securitymanager配置多个Realm\n\n> ```java\n> package com.example.demo.config;\n> \n> import com.example.demo.realm.ManagerRealm;\n> import com.example.demo.realm.UserRealm;\n> import org.apache.shiro.realm.Realm;\n> import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n> import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n> import org.springframework.context.annotation.Bean;\n> import org.springframework.context.annotation.Configuration;\n> \n> import java.util.ArrayList;\n> import java.util.Collection;\n> import java.util.HashMap;\n> import java.util.Map;\n> \n> @Configuration\n> public class ShiroConfig {\n> \n>     @Bean\n>     public UserRealm getUserRealm(){\n>         return new UserRealm();\n>     }\n> \n>     @Bean\n>     public ManagerRealm getManagerRealm(){\n>         return new ManagerRealm();\n>     }\n> \n>     @Bean\n>     public DefaultWebSecurityManager getDefaultWebSecurityManager(){\n>         DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>         //securityManager要完成校验，需要realm\n>         Collection<Realm> realms = new ArrayList<>();\n>         realms.add(getUserRealm());\n>         realms.add(getManagerRealm());\n>         securityManager.setRealms(realms);\n>         return securityManager;\n>     }\n> \t//....\n> }\n> ```\n\n测试代码\n\n> login.html\n>\n> ```html\n> <form action=\"user/login\">\n>     <p>账号：<input type=\"text\" name=\"username\"></p>\n>     <p>密码：<input type=\"text\" name=\"password\"></p>\n>     <input type=\"submit\" value=\"登录\">\n> </form>\n> ```\n>\n> UserController.java\n>\n> ```java\n> package com.example.demo.controller;\n> \n> import lombok.extern.slf4j.Slf4j;\n> import org.apache.shiro.SecurityUtils;\n> import org.apache.shiro.authc.UsernamePasswordToken;\n> import org.apache.shiro.subject.Subject;\n> import org.springframework.stereotype.Controller;\n> import org.springframework.web.bind.annotation.RequestMapping;\n> \n> @Controller\n> @RequestMapping(\"user\")\n> @Slf4j\n> public class UserController {\n> \n>     @RequestMapping(\"/login\")\n>     public String login(String username,String password){\n>       log.info(\"----UserController---\");\n>       try {\n>           UsernamePasswordToken token = new UsernamePasswordToken(username,password);\n>           Subject subject = SecurityUtils.getSubject();\n>           subject.login(token);\n>           return \"index\";\n>       }catch (Exception e){\n>           return \"login\";\n>       }\n>     }\n> }\n> ```\n\n### 多Realm配置（分支处理）\n\n> 根据不同的条件执行不同的Realm\n\n实现 案例：用户不同身份登录执行不同的Realm\n\n> 自定义Realm（UserRealm、ManagerRealm）\n>\n> * 当登录页面选择“普通用户”登录，则执行UserRealm的认证\n> * 当登录页面选择“管理员”登录，则执行ManagerRealm的认证\n>\n> Realm的声明及配置\n>\n> 自定义Token\n>\n> ```java\n> package com.example.demo.config;\n> \n> import org.apache.shiro.authc.UsernamePasswordToken;\n> \n> public class MyToken extends UsernamePasswordToken {\n>     private String loginType;\n> \n>     public MyToken(String username,String password,String loginType){\n>         super(username,password);\n>         this.loginType = loginType;\n>     }\n> \n>     public String getLoginType() {\n>         return loginType;\n>     }\n> \n>     public void setLoginType(String loginType) {\n>         this.loginType = loginType;\n>     }\n> }\n> ```\n>\n> 自定义认证器\n>\n> ```java\n> package com.example.demo.config;\n> \n> import lombok.extern.slf4j.Slf4j;\n> import org.apache.shiro.authc.AuthenticationException;\n> import org.apache.shiro.authc.AuthenticationInfo;\n> import org.apache.shiro.authc.AuthenticationToken;\n> import org.apache.shiro.authc.pam.ModularRealmAuthenticator;\n> import org.apache.shiro.realm.Realm;\n> \n> import java.util.ArrayList;\n> import java.util.Collection;\n> \n> @Slf4j\n> public class MymodularRealmAuthenticator extends ModularRealmAuthenticator {\n>     @Override\n>     protected AuthenticationInfo doAuthenticate(AuthenticationToken authenticationToken) throws AuthenticationException {\n>         log.info(\"-----MymodularRealmAuthenticator---------\");\n> \n>         Collection<Realm> realms = this.getRealms();\n>         MyToken myToken = (MyToken) authenticationToken;\n> \n>         String loginType = myToken.getLoginType();\n> \n>         log.info(\"-------------loginType:\"+loginType);\n>         Collection<Realm> typeRealms = new ArrayList<>();\n>         for (Realm realm : realms){\n>             if (realm.getName().startsWith(loginType)){\n>                 typeRealms.add(realm);\n>             }\n>         }\n>         if (typeRealms.size() == 1){\n>             return this.doSingleRealmAuthentication((Realm) \t\t\t\ttypeRealms.iterator().next(),authenticationToken);\n>         }else {\n>             return this.doMultiRealmAuthentication(typeRealms,authenticationToken);\n>         }\n> \n>     }\n> }\n> ```\n>\n> 配置自定义认证器\n>\n> ```java\n> package com.example.demo.config;\n> \n> import com.example.demo.realm.ManagerRealm;\n> import com.example.demo.realm.UserRealm;\n> import org.apache.shiro.realm.Realm;\n> import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n> import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n> import org.springframework.context.annotation.Bean;\n> import org.springframework.context.annotation.Configuration;\n> \n> import java.util.ArrayList;\n> import java.util.Collection;\n> import java.util.HashMap;\n> import java.util.Map;\n> \n> @Configuration\n> public class ShiroConfig {\n> \n>     @Bean\n>     public UserRealm getUserRealm(){\n>         return new UserRealm();\n>     }\n> \n>     @Bean\n>     public ManagerRealm getManagerRealm(){\n>         return new ManagerRealm();\n>     }\n> \n>     @Bean\n>     public MymodularRealmAuthenticator getMymodularRealmAuthenticator(){\n>         return new MymodularRealmAuthenticator();\n>     }\n> \n>     @Bean\n>     public DefaultWebSecurityManager getDefaultWebSecurityManager(){\n>         DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n> \n>         //配置自定义认证器(防在realms设置之前)\n>         securityManager.setAuthenticator(getMymodularRealmAuthenticator());\n> \n>         //securityManager要完成校验，需要realm\n>         Collection<Realm> realms = new ArrayList<>();\n>         realms.add(getUserRealm());\n>         realms.add(getManagerRealm());\n>         securityManager.setRealms(realms);\n>         return securityManager;\n>     }\n> \n>  \t//...\n> }\n> ```\n\n","source":"_posts/computer/course-1/Shiro.md","raw":"---\ntitle: Shiro\ndate: 2020/12/14\ncategories:\n\t- [计算机, 框架]\ntags: Shiro\n---\n\n\n\n## 权限管理\n\n1.什么是权限管理？\n\n> 不同身份的用户进入到系统中能够完成的操作是不同的，我们对于不同的用户进行的可执行的操作的管理称之为权限管理。\n\n## Shiro简介\n\n### 认证授权流程\n\n> 认证：对用户的身份进行检查（登录验证）\n>\n> 授权：对用户的权限进行检查（是否有对应的操作权限）\n\n### 安全框架\n\n>帮助我们完成用户身份认证及权限检查功能框架\n>\n>常用的安全框架\n>\n>+ Shrio：Apache Shiro是一个功能强大并且易用的Java安全框架（小而简单）\n>+ spring Security：基于Spring的一个安全框架，依赖于Spring\n>+ OAuth2：第三方授权登录\n>+ 自定义安全认证中心\n>\n\n### Shiro\n\n>* Apache Shiro是一个功能强大并且易用的Java安全框架\n>\n>* 可以完成用户认证、授权、密码以及会话管理\n>\n>* 可以在任何应用系统中使用（主要针对于单体项目的权限管理）\n\n## Shiro的工作原理\n\n### Shiro的核心功能\n\n> Authentication：认证，验证用户是否有相应的身份-登录验证；\n>\n> Authorization：授权，即权限验证；对已经通过的用户检查是否具有某个权限或者角色，从而控制是否能进行某种操作\n>\n> Session Management：会话管理，用户在认证成功之后创建会话，在没有退出之前，之前用户的所有信息都将会保存在这个会话中，可以是普通的JavaSE应用，也可以是Web应用；\n>\n> Cryptography：加密，对敏感信息进行加密处理，shiro就提供这种加密机制；\n>\n> 支持的特性：\n>\n> * Web Support - Shiro提供l过滤器，可以通过过滤器拦截Web请求处理web应用的访问控制\n> * Caching缓存支持，shiro可以缓存用户信息以及用户的角色授权信息，可以提高执行效率\n> * Concurrency shiro支持多线程应用\n> * Testing提供测试支持\n> * Run As允许一个用户以另一种身份去访问\n> * Remember me\n>\n> 说明：Shiro是一个安全框架，不提供用户以及权限的维护（用户权限的权限管理需要我们自己去设计）\n\n### Shiro核心组件\n\n![shiro](Shiro.assets/shiro.jpg)\n\nShiro三大核心组件：Subject、Security Manager、Realms\n\n>* Subject，表示待认证和授权的用户\n>* Security Manager，他是Shiro框架的核心，Shiro就是通过Security Manger来进行内部实例的管理，并通过它来提供安全框架的各种服务\n>  * Authenticator，认证器\n>  * Anthorizer，授权器\n>  * SessionManager，会话管理器\n>  * CacheManager，缓存管理器\n>* Realms，相当于Shiro进行认证授权的数据源，充当了Shiro与安全数据之间的“桥梁”或者“连接器”，也就是说，当用户进行认证（登录）和授权（访问控制）验证时，Shiro会用应用配置的Realm中查找用户以及权限信息\n\n## 基于JavaSE应用\n\n### 创建Maven项目\n\n### 导入Shiro依赖\n\n```xml\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-core</artifactId>\n    <version>1.4.1</version>\n</dependency>\n```\n\n### 创建Shiro配置文件\n\n>在resource目录下创建名为shiro.ini的文件\n>\n>在文件中完成用户角色以及权限的配置\n\n```ini\n[users]\nzhangsan=123456,seller\nlisi=123456,ckmanager\nadmin=222222,admin\n\n[roles]\nadmin=*\nseller=order-add,order-del,order-list\nckmanager=ck-add,ck-del,ck-list\n```\n\nShiro的基本使用\n\n```java\npackage com.hu.shiro;\n\nimport org.apache.shiro.SecurityUtils;\nimport org.apache.shiro.authc.UsernamePasswordToken;\nimport org.apache.shiro.mgt.DefaultSecurityManager;\nimport org.apache.shiro.realm.text.IniRealm;\nimport org.apache.shiro.subject.Subject;\n\nimport java.util.Scanner;\n\npublic class TestShiro {\n    public static void main(String[] args) {\n       Scanner scanner = new Scanner(System.in);\n       System.out.println(\"请输入账号\");\n       String username = scanner.nextLine();\n       System.out.println(\"请输入密码\");\n       String password = scanner.nextLine();\n\n       //1.创建安全管理器\n       DefaultSecurityManager securityManager = new DefaultSecurityManager();\n       //2.创建realm\n       IniRealm iniRealm = new IniRealm(\"classpath:shiro.ini\");\n       //3.将realm设置给安全管理器\n       securityManager.setRealm(iniRealm);\n       //4.将realm设置给SecurityUtils工具\n       SecurityUtils.setSecurityManager(securityManager);\n       //5.通过SecurityUtils工具过去Subject对象\n       Subject subject = SecurityUtils.getSubject();\n\n       //认证流程\n       //1.将认证账号密码封装到token对象中\n       UsernamePasswordToken token = new UsernamePasswordToken(username,password);\n       //2.通过subject对象调用login方法进行认证申请\n       boolean flag = false;\n       try {\n           subject.login(token);\n           flag = true;\n       }catch (Exception e){\n           flag = false;\n       }\n       System.out.println(flag?\"登录成功\":\"登录失败\");\n       //授权\n       //判断是否有某个角色\n       System.out.println(subject.hasRole(\"seller\"));\n       //判断是否有某个权限\n       System.out.println(subject.isPermitted(\"order-del\"));\n    }\n}\n```\n\n### Shiro认证流程\n\n>1.通过subject.login(token)进行登录验证，就会将token包含的用户信息（账号和密码）传递给SecurityManager\n>\n>2.SecurityManger将会调用Authenticator进行身份验证\n>\n>3.Authenticator把token传递给对应的Realm\n>\n>4.Realm根据得到的token，调用doGetAuthenticationInfo方法进行认证（如果认证失败通过抛出异常提示认证器）\n>\n>5.将认证结果一层一层的返回到subject（如果subject.login抛出异常则表示认证失败 ）\n\n## SpringBoot应用整合Shiro\n\n### 创建SpringBoot应用\n\n>lombok\n>\n>spring web\n>\n>thymeleaf\n\n### 整合Druid和Mybatis\n\n依赖\n\n```xml\n<!--druid-->\n<dependency>\n<groupId>com.alibaba</groupId>\n<artifactId>druid-spring-boot-starter</artifactId>\n<version>1.1.7</version>\n</dependency>\n<!--mysql-->\n<dependency>\n<groupId>mysql</groupId>\n<artifactId>mysql-connector-java</artifactId>\n<version>8.0.20</version>\n</dependency>\n<!--mybatis-->\n<dependency>\n<groupId>org.mybatis.spring.boot</groupId>\n<artifactId>mybatis-spring-boot-starter</artifactId>\n<version>2.1.1</version>\n</dependency>\n```\n\n配置\n\n>```yml\n>spring:\n>  datasource:\n>    druid:\n>      url: jdbc:mysql://localhost:3306/user\n>      driver-class-name: com.mysql.jdbc.Driver\n>      username: root\n>      password: 123456\n>      initial-size: 1\n>      min-idle: 1\n>      max-active: 20\n>mybatis:\n>  mapper-locations: classpath:mapper/*.xml\n>```\n\n3.整合Shiro\n\n导入依赖\n\n```xml\n<!--shiro-->\n<dependency>\n    <groupId>org.apache.shiro</groupId>\n    <artifactId>shiro-spring</artifactId>\n    <version>1.4.1</version>\n</dependency>\n```\n\n配置\n\n> SpringBoot默认没有提供Shiro的自动配置\n>\n> ```java\n> package com.example.demo.config;\n> \n> import org.apache.shiro.realm.text.IniRealm;\n> import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n> import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n> import org.springframework.context.annotation.Bean;\n> import org.springframework.stereotype.Controller;\n> \n> import java.util.HashMap;\n> import java.util.Map;\n> \n> @Configuration\n> public class ShiroConfig {\n> \n>     @Bean\n>     public IniRealm getIniRealm(){\n>         IniRealm iniRealm = new IniRealm(\"classpath:shiro.ini\");\n>         return iniRealm;\n>     }\n> \n>     @Bean\n>     public DefaultWebSecurityManager getDefaultWebSecurityManager(IniRealm iniRealm){\n>         DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>         //securityManager要完成校验，需要realm\n>         securityManager.setRealm(iniRealm);\n>         return securityManager;\n>     }\n> \n>     @Bean\n>     public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager){\n>         ShiroFilterFactoryBean filter = new ShiroFilterFactoryBean();\n>         //过滤器就是Shiro进行权限校验的核心，进行认证和授权是需要SecurityManager的\n>         filter.setSecurityManager(securityManager);\n> \n>         //设置shiro的拦截规则\n>         //anon  匿名用户可访问\n>         //authc 认证用户可访问\n>         //user  使用RememberMe的用户可访问\n>         //perms 对应权限可访问\n>         //role  对应角色可访问\n>         Map<String,String> filterMap = new HashMap<>();\n>         filterMap.put(\"/\",\"anon\");\n>         filterMap.put(\"/login.html\",\"anon\");\n>         filterMap.put(\"/user/login\",\"anon\");\n>         filterMap.put(\"/static/**\",\"anon\");\n>         filterMap.put(\"/**\",\"authc\");\n> \n>         filter.setFilterChainDefinitionMap(filterMap);\n>         filter.setLoginUrl(\"/login.html\");\n>         //设置未授权的访问路径\n>         filter.setUnauthorizedUrl(\"/login.html\");\n>        return filter;\n>     }\n> \n> }\n> ```\n>\n> * 认证测试\n>\n>   * UserServiceImpl.java\n>\n>     ```java\n>     package com.example.demo.service;\n>     \n>     import org.apache.shiro.SecurityUtils;\n>     import org.apache.shiro.authc.UsernamePasswordToken;\n>     import org.apache.shiro.subject.Subject;\n>     import org.springframework.stereotype.Service;\n>     \n>     @Service\n>     public class UserServiceImpl {\n>         public void checkLogin(String username,String password) throws Exception{\n>             Subject subject = SecurityUtils.getSubject();\n>             UsernamePasswordToken token = new UsernamePasswordToken(username,password);\n>             subject.login(token);\n>         }\n>     }\n>     ```\n>\n>   * UserController\n>\n>     ```java\n>     package com.example.demo.controller;\n>     \n>     import com.example.demo.service.UserServiceImpl;\n>     import org.springframework.beans.factory.annotation.Autowired;\n>     import org.springframework.stereotype.Controller;\n>     import org.springframework.web.bind.annotation.RequestMapping;\n>     \n>     @Controller\n>     @RequestMapping(\"/user\")\n>     public class UserController {\n>     \n>         @Autowired\n>         private UserServiceImpl userService;\n>     \n>         @RequestMapping(\"/login\")\n>         public String login(String username,String password){\n>             try {\n>                 userService.checkLogin(username,password);\n>                 System.out.println(\"登录成功\");\n>                 return \"index\";\n>             } catch (Exception e) {\n>                 System.out.println(\"登录失败\");\n>                 return \"login\";\n>             }\n>         }\n>     \n>     }\n>     ```\n>\n>   * login.html\n>\n>     ```html\n>     <form action=\"user/login\">\n>         <p>账号：<input type=\"text\" name=\"username\"></p>\n>         <p>密码：<input type=\"text\" name=\"password\"></p>\n>         <p><input type=\"submit\" value=\"登录\"></p>\n>     </form>\n>     ```\n\n## SpringBoot应用整合Shiro-案例（JdbcRealm）\n\n### JdbcRealm介绍\n\n>如果使用JdbcRealm，则必须提供JdbcRealm所需的表结构（权限设计）\n\n### JdbcRealm规定的表结构\n\n>```mysql\n>-- 创建用户表\n>create table users(\n>\tid int primary key auto_increment,\n>    username varchar(20) not null unique,\n>    password varchar(20) not null,\n>    password_salt varchar(20)\n>);\n>insert into users(username,password) values('zhangsan','123456');\n>insert into users(username,password) values('lisi','123456');\n>insert into users(username,password) values('wangwu','123456');\n>insert into users(username,password) values('zhaoliu','123456');\n>insert into users(username,password) values('chengqi','123456');\n>\n>-- 用户角色表\n>create table user_roles(\n>\tid int primary key auto_increment,\n>    username varchar(60) not null,\n>    role_name varchar(100) not null\n>);\n>\n>-- admin 系统管理员\n>-- cmanager 仓库人员\n>-- xmanager 销售人员\n>-- kmanager 客服人员\n>-- zmanager 行政人员\n>\n>insert into user_roles(username,role_name) values('zhangsan','admin');\n>insert into user_roles(username,role_name) values('lisi','cmanager');\n>insert into user_roles(username,role_name) values('wangwu','xmanager');\n>insert into user_roles(username,role_name) values('zhaoliu','kmanager');\n>insert into user_roles(username,role_name) values('chengqi','zmanager');\n>\n>-- 角色权限表\n>create table roles_permissions(\n>\tid int primary key auto_increment,\n>    role_name varchar(100) not null,\n>    permission varchar(100) not null\n>);\n>\n>-- 管理员\n>insert into roles_permissions(role_name,permission) values('admin','*');\n>-- 仓库人员\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:save');\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:delete');\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:update');\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:find');\n>-- 销售人员\n>insert into roles_permissions(role_name,permission) values('xmanager','sys:x:save');\n>insert into roles_permissions(role_name,permission) values('xmanager','sys:x:delete');\n>insert into roles_permissions(role_name,permission) values('xmanager','sys:x:update');\n>insert into roles_permissions(role_name,permission) values('xmanager','sys:x:find');\n>-- 客服人员\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:update');\n>insert into roles_permissions(role_name,permission) values('cmanager','sys:c:find');\n>-- 行政人员\n>insert into roles_permissions(role_name,permission) values('zmanager','sys:z:find');\n>```\n\n### Springboot整合Shiro\n\n> 创建Springboot应用\n>\n> 整合Druid和Mybatis\n>\n> 整合Shiro\n>\n> * 添加依赖\n>\n> * 配置shiro\n>\n>   ```java\n>   package com.example.demo.config;\n>   \n>   import org.apache.shiro.realm.jdbc.JdbcRealm;\n>   import org.apache.shiro.realm.text.IniRealm;\n>   import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n>   import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n>   import org.springframework.context.annotation.Bean;\n>   import org.springframework.context.annotation.Configuration;\n>   \n>   import javax.sql.DataSource;\n>   import java.util.HashMap;\n>   import java.util.Map;\n>   \n>   @Configuration\n>   public class ShiroConfig {\n>   \n>       @Bean\n>       public JdbcRealm getJdbcRealm(DataSource dataSource){\n>           JdbcRealm jdbcRealm = new JdbcRealm();\n>           //JdbcRealm会自动从数据查询用户及权限数据（数据库的表结构要符合JdbcRealm的规范）\n>           jdbcRealm.setDataSource(dataSource);\n>           //JdbcRealm默认开启认证功能，需要手动开启授权功能\n>           jdbcRealm.setPermissionsLookupEnabled(true);\n>           return jdbcRealm;\n>       }\n>   \n>       @Bean\n>       public DefaultWebSecurityManager getDefaultWebSecurityManager(JdbcRealm jdbcRealm){\n>           DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>           //securityManager要完成校验，需要realm\n>           securityManager.setRealm(jdbcRealm);\n>           return securityManager;\n>       }\n>   \n>       @Bean\n>       public ShiroFilterFactoryBean shiroFilter(DefaultWebSecurityManager securityManager){\n>           ShiroFilterFactoryBean filter = new ShiroFilterFactoryBean();\n>           //过滤器就是Shiro进行权限校验的核心，进行认证和授权是需要SecurityManager的\n>           filter.setSecurityManager(securityManager);\n>   \n>           //设置shiro的拦截规则\n>           //anon  匿名用户可访问\n>           //authc 认证用户可访问\n>           //user  使用RememberMe的用户可访问\n>           //perms 对应权限可访问\n>           //role  对应角色可访问\n>           Map<String,String> filterMap = new HashMap<>();\n>           filterMap.put(\"/\",\"anon\");\n>           filterMap.put(\"/login.html\",\"anon\");\n>           filterMap.put(\"/user/login\",\"anon\");\n>           filterMap.put(\"/static/**\",\"anon\");\n>           filterMap.put(\"/**\",\"authc\");\n>   \n>           filter.setFilterChainDefinitionMap(filterMap);\n>           //filter.setLoginUrl(\"/\");\n>           //设置未授权的访问路径\n>           filter.setUnauthorizedUrl(\"/login.html\");\n>           return filter;\n>       }\n>   }\n>   ```\n\n七、Shiro的标签使用\n\n> 当用户认证进入到主页之后，需要显示用户信息以及当前用户的权限信息，Shiro就提供了一套标签用于页面来进行权限数据的呈现\n\nShiro提供了可供JSP使用的标签以及thymeleaf中标签\n\n* JSP页面引用：\n\n  ```jsp\n  <%@ taglib prefix=\"shiro\" uri=\"http://shiro.apache.org/tags\" %>\n  ```\n\n* thymeleaf模板中引用\n\n  在pom.xml文件中导入thymeleaf模板对shiro标签支持的依赖\n\n  ```xml\n  <dependency>\n      <groupId>com.github.theborakompanioni</groupId>\n      <artifactId>thymeleaf-extras-shiro</artifactId>\n      <version>2.0.0</version>\n  </dependency>\n  ```\n\n  在ShiroConfig配置Shiro的\n\n  ```java\n  @Bean\n  public ShiroDialect getShiroDialect(){\n      return new ShiroDialect();\n  }\n  ```\n\n  thymeleaf模板中引入Shiro的命名空间\n\n  ```html\n  <html xmlns:th=\"http://www.thymeleaf.org\"\n        xmlns:shiro=\"http://www.pollix.at/thymeleaf/shiro \">  \n  </html>\n  ```\n\n  常用标签\n\n  >guest，判断用户是否是游客身份，如果是游客身份则显示此标签内容\n  >\n  >```html\n  ><shiro:guest>\n  >    欢迎游客访问，<a href=\"login.html\">登录</a>\n  ></shiro:guest>\n  >```\n  >\n  >user，判断用户是否是认证身份，如果是认证身份则显示此标签内容\n  >\n  >principal，获取当前登录用户名\n  >\n  >```html\n  ><shiro:user>\n  >    用户[<shiro:principal/>]欢迎您！\n  > </shiro:user>\n  >```\n  >\n  >noAuthenticated/authenticated\n  >\n  >hasRole\n  >\n  >hasPermission\n  >\n  >```html\n  ><!DOCTYPE html>\n  ><html xmlns:th=\"http://www.thymeleaf.org\"\n  >      xmlns:shiro=\"http://www.pollix.at/thymeleaf/shiro \">\n  ><head>\n  >    <meta charset=\"UTF-8\">\n  >    <title>Title</title>\n  ></head>\n  ><body>\n  >    index\n  >    <hr/>\n  >    <shiro:guest>\n  >        欢迎游客访问，<a href=\"login.html\">登录</a>\n  >    </shiro:guest>\n  >    <shiro:user>\n  >        用户[<shiro:principal/>]欢迎您！\n  >        当前用户为<shiro:hasRole name=\"admin\">超级管理员</shiro:hasRole>\n  >        <shiro:hasRole name=\"cmanager\">仓库人员</shiro:hasRole>\n  >        <shiro:hasRole name=\"xmanager\">销售人员</shiro:hasRole>\n  >        <shiro:hasRole name=\"kmanager\">客服人员</shiro:hasRole>\n  >        <shiro:hasRole name=\"zmanager\">行政人员</shiro:hasRole>\n  >    </shiro:user>\n  >    <hr/>\n  >    仓库管理\n  >    <ul>\n  >        <shiro:hasPermission name=\"sys:c:save\"><li><a href=\"#\">入库</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:c:delete\"><li><a href=\"#\">出库</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:c:update\"><li><a href=\"#\">修改</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:c:find\"><li><a href=\"#\">查询</a></li></shiro:hasPermission>\n  >    </ul>\n  >    订单管理\n  >    <ul>\n  >        <shiro:hasPermission name=\"sys:x:save\"><li><a href=\"#\">添加订单</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:x:delete\"><li><a href=\"#\">删除订单</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:x:update\"><li><a href=\"#\">修改订单</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:x:find\"><li><a href=\"#\">查询订单</a></li></shiro:hasPermission>\n  >    </ul>\n  >    客户管理\n  >    <ul>\n  >        <shiro:hasPermission name=\"sys:k:save\"><li><a href=\"#\">添加客户</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:k:delete\"><li><a href=\"#\">删除客户</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:k:update\"><li><a href=\"#\">修改客户</a></li></shiro:hasPermission>\n  >        <shiro:hasPermission name=\"sys:k:find\"><li><a href=\"#\">查询客户</a></li></shiro:hasPermission>\n  >    </ul>\n  ></body>\n  ></html>\n  >```\n\n## Springboot整合Shiro完成权限管理案例—自定义Realm\n\n>使用JdbcRealm可以完成用户权限管理，但是我们必须提供Jdbc规定的数据表结构，如果我们的项目开发中，这个JdbcReal规定的数据表结构不能满足开发需求，如何处理？\n>\n>* 自定义数据库表结构\n>* 自定义Realm实现认证和授权\n\n### 数据库设计\n\n>```mysql\n>-- 用户信息表\n>create table user(\n>\tid int primary key auto_increment,\n>\tusername varchar(60) not null unique,\n>\tpassword varchar(20) not null,\n>\tpassword_salt varchar(60)\n>);\n>\n>insert into user(username,password) values('zhangsan','123456');\n>insert into user(username,password) values('lisi','123456');\n>insert into user(username,password) values('wangwu','123456');\n>insert into user(username,password) values('zhaoliu','123456');\n>insert into user(username,password) values('chengqi','123456');\n>\n>-- 角色信息表\n>create table role(\n>\tid int primary key auto_increment,\n>\tname varchar(60) not null\n>);\n>\n>insert into role(name) values('admin');\n>insert into role(name) values('cmanager');-- 仓库\n>insert into role(name) values('xmanager');-- 销售\n>insert into role(name) values('kmanager');-- 客服\n>insert into role(name) values('zmanager');-- 行政\n>\n>-- 权限信息表\n>create table permission(\n>\tid int primary key auto_increment,\n>\t`code` varchar(60) not null,\n>\tname varchar(60)\n>);\n>\n>insert into permission(code,name) values('sys:c:save','入库');\n>insert into permission(code,name) values('sys:c:delete','出库');\n>insert into permission(code,name) values('sys:c:update','修改');\n>insert into permission(code,name) values('sys:c:find','查询');\n>\n>insert into permission(code,name) values('sys:x:save','新增订单');\n>insert into permission(code,name) values('sys:x:delete','删除订单');\n>insert into permission(code,name) values('sys:x:update','修改订单');\n>insert into permission(code,name) values('sys:x:find','查询订单');\n>\n>insert into permission(code,name) values('sys:k:save','新增客户');\n>insert into permission(code,name) values('sys:k:delete','删除客户');\n>insert into permission(code,name) values('sys:k:update','修改客户');\n>insert into permission(code,name) values('sys:k:find','查询客户');\n>\n>\n>-- 用户角色表\n>create table user_role(\n>\tuid int not null,\n>\trid int not null\n>-- \tprimary key(uid,rid),\n>-- \tconstraint FK_user foreign key(uid) references user(id),\n>-- \tconstraint FK_role foreign key(rid) references role(id),\n>)\n>\n>insert into user_role(uid,rid) values(1,1);\n>insert into user_role(uid,rid) values(1,2);\n>insert into user_role(uid,rid) values(1,3);\n>insert into user_role(uid,rid) values(1,4);\n>insert into user_role(uid,rid) values(1,5);\n>\n>insert into user_role(uid,rid) values(2,2);\n>insert into user_role(uid,rid) values(3,3);\n>insert into user_role(uid,rid) values(4,4);\n>insert into user_role(uid,rid) values(5,5);\n>\n>-- 角色权限表\n>create table role_permission(\n>\trid int not null,\n>\tpid int not null\n>)\n>-- 给仓库角色分配权限\n>insert into role_permission(rid,pid) values(2,1);\n>insert into role_permission(rid,pid) values(2,2);\n>insert into role_permission(rid,pid) values(2,3);\n>insert into role_permission(rid,pid) values(2,4);\n>-- 给销售角色分配权限\n>insert into role_permission(rid,pid) values(3,5);\n>insert into role_permission(rid,pid) values(3,6);\n>insert into role_permission(rid,pid) values(3,7);\n>insert into role_permission(rid,pid) values(3,8);\n>insert into role_permission(rid,pid) values(3,9);\n>insert into role_permission(rid,pid) values(3,10);\n>insert into role_permission(rid,pid) values(3,11);\n>insert into role_permission(rid,pid) values(3,12);\n>-- 给客服角色分配权限\n>insert into role_permission(rid,pid) values(4,11);\n>insert into role_permission(rid,pid) values(4,12);\n>-- 给行政角色分配权限\n>insert into role_permission(rid,pid) values(5,4);\n>insert into role_permission(rid,pid) values(5,8);\n>insert into role_permission(rid,pid) values(5,12);\n>```\n\n### DAO实现\n\n>Shiro进行认证需要用户信息\n>\n>* 根据用户名查询用户信息\n>\n>Shiro进行授权管理需要当前用户的角色和权限\n>\n>* 根据用户名查询当前用户的角色列表（3张表连接查询）\n>* 根据用户名查询当前用户的权限列表（5张表连接查询）\n\n#### 创建Springboot项目，整合Mybatis\n\n#### 更具用户名查用户信息\n\n* 创建Bean\n\n  ```java\n  @Data\n  public class User {\n      private Integer id;\n      private String username;\n      private String password;\n      private String pwdSalt;\n  }\n  ```\n\n* 创建Dao\n\n  ```java\n  public interface UserDao {\n      User queryUserByUsername(String username) throws Exception;\n  }\n  ```\n\n* 映射配置\n\n  ```xml\n  <resultMap id=\"userMap\" type=\"User\">\n      <id column=\"id\" property=\"id\"></id>\n      <result column=\"username\" property=\"username\"/>\n      <result column=\"password\" property=\"password\"/>\n      <result column=\"password_salt\" property=\"pwdSalt\"/>\n  </resultMap>\n  <select id=\"queryUserByUsername\" resultMap=\"userMap\">\n      select * from user where username = #{username};\n  </select>\n  ```\n\n#### 根据用户名查询角色名列表\n\n* 创建Dao\n\n  ```java\n  public interface RoleDao {\n      Set<String> queryRoleNameByUsername(String username) throws Exception;\n  }\n  ```\n\n* 映射配置\n\n  ```xml\n  <select id=\"queryRoleNameByUsername\" resultSets=\"java.util.set\" resultType=\"String\">\n      SELECT r.name FROM `user` u\n      LEFT JOIN user_role ur ON u.id = ur.uid\n      LEFT JOIN role r ON ur.rid = r.id\n      WHERE u.username = #{username}\n  </select>\n  ```\n\n### 整合Shiro\n\n* 导入依赖\n\n  ```xml\n  <dependency>\n      <groupId>com.github.theborakompanioni</groupId>\n      <artifactId>thymeleaf-extras-shiro</artifactId>\n      <version>2.0.0</version>\n  </dependency>\n  \n  <!--shiro-->\n  <dependency>\n      <groupId>org.apache.shiro</groupId>\n      <artifactId>shiro-spring</artifactId>\n      <version>1.4.1</version>\n  </dependency>\n  ```\n\n* 配置Shiro-基于Java配置方式\n\n* 自定义Realm\n\n  ```java\n  package com.example.demo.config;\n  \n  import com.example.demo.beans.User;\n  import com.example.demo.dao.PermissionDao;\n  import com.example.demo.dao.RoleDao;\n  import com.example.demo.dao.UserDao;\n  import org.apache.shiro.authc.*;\n  import org.apache.shiro.authz.AuthorizationInfo;\n  import org.apache.shiro.authz.SimpleAuthorizationInfo;\n  import org.apache.shiro.realm.AuthorizingRealm;\n  import org.apache.shiro.subject.PrincipalCollection;\n  \n  import javax.annotation.Resource;\n  import java.util.Set;\n  \n  /**\n   * 1.创建一个继承AuthorizingRealm类（实现Realm接口的类）\n   * 2.重新doGetAuthorizationInfo和doGetAuthenticationInfo方法\n   * 3.重新getName方法\n   */\n  public class MyRealm extends AuthorizingRealm {\n  \n      @Resource\n      private UserDao userDao;\n  \n      @Resource\n      private RoleDao roleDao;\n  \n      @Resource\n      private PermissionDao permissionDao;\n  \n      @Override\n      public String getName() {\n          return \"myRealm\";\n      }\n  \n      /**\n       * 获取授权数据(将当前用户的角色以及权限信息查询出来)\n       * @param principalCollection\n       * @return\n       */\n      @Override\n      protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n          //获取用户的用户名\n          String username = (String) principalCollection.iterator().next();\n          //根据用户名查询当前用户角色列表\n          Set<String> roleNames = roleDao.queryRoleNameByUsername(username);\n  \n          //根据用户名查询当前用户权限列表\n          Set<String> permission = permissionDao.queryPermissionByUsername(username);\n          SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n          info.setRoles(roleNames);\n          info.setStringPermissions(permission);\n          return info;\n      }\n  \n      /**\n       * 获取认证数据（从数据库查询的用户的正确数据）\n       * @param authenticationToken\n       * @return\n       * @throws AuthenticationException\n       */\n      @Override\n      protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n          //参数authenticationToken就是传递的 subject.login(token)\n          //从token获取用户名\n          UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n          String username = token.getUsername();\n          //根据用户名，从数据库查询当前用户的安全数据\n          User user = userDao.queryUserByUsername(username);\n          if (user == null){\n              return null;\n          }\n          AuthenticationInfo info = new SimpleAuthenticationInfo(\n                  username,   //当前用户名\n                  user.getPassword(),  //从数据库查询出来的安全密码\n                  getName());\n  \n          return info;\n      }\n  }\n  ```\n\n## 加密\n\n### 加密介绍\n\n> 明文——（加密规则）——密文\n>\n> 加密规则可以自定义，在项目开发中我们通常使用BASE64和MD5编码方式\n>\n> * BASE64：可反编码的编码方式\n>\n>   明文——密文\n>\n>   密文——明文\n>\n> * MD5：不可逆的编码方式（非对称）\n>\n>   明文——密文\n\n如果数据库用户的密码存储的密文，Shiro改如何验证\n\n使用Shiro提供的加密功能，对输入的密码进行加密之后再进行认证\n\n### Shiro使用加密认证\n\n> 配置Shiro\n>\n> ```java\n> package com.example.demo.config;\n> \n> import at.pollux.thymeleaf.shiro.dialect.ShiroDialect;\n> import org.apache.shiro.authc.credential.HashedCredentialsMatcher;\n> import org.apache.shiro.realm.jdbc.JdbcRealm;\n> import org.apache.shiro.realm.text.IniRealm;\n> import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n> import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n> import org.springframework.context.annotation.Bean;\n> import org.springframework.context.annotation.Configuration;\n> \n> import javax.sql.DataSource;\n> import java.util.HashMap;\n> import java.util.Map;\n> \n> @Configuration\n> public class ShiroConfig {\n> \n>    //...\n> \n>     @Bean\n>     public HashedCredentialsMatcher getHashedCredentialsMatcher(){\n>         HashedCredentialsMatcher matcher = new HashedCredentialsMatcher();\n>         //matcher就是用来指定加密规则\n>         matcher.setHashAlgorithmName(\"md5\");\n>         //hash次数\n>         matcher.setHashIterations(1);//次数循环次数要与用户注册时密码加密次数一致\n>         return matcher;\n>     }\n> \n>     /**\n>      * 自定义Realm\n>      */\n>     @Bean\n>     public MyRealm getMyRealm(HashedCredentialsMatcher matcher){\n>         MyRealm realm = new MyRealm();\n>         realm.setCredentialsMatcher(matcher);\n>         return realm;\n>     }\n> \n>     //...\n> }\n> \n> ```\n\n### 用户注册密码加密处理\n\n> register.html\n>\n> ```html\n> <form action=\"user/register\">\n>     <p>账号：<input type=\"text\" name=\"username\"></p>\n>     <p>密码：<input type=\"text\" name=\"password\"></p>\n>     <p><input type=\"submit\" value=\"注册\"></p>\n> </form>\n> ```\n>\n> UserController.java\n>\n> ```java\n> package com.example.demo.controller;\n> \n> import com.example.demo.service.UserServiceImpl;\n> import org.apache.shiro.crypto.hash.Md5Hash;\n> import org.springframework.beans.factory.annotation.Autowired;\n> import org.springframework.stereotype.Controller;\n> import org.springframework.web.bind.annotation.RequestMapping;\n> \n> import java.util.Random;\n> \n> @Controller\n> @RequestMapping(\"/user\")\n> public class UserController {\n> \n>     @Autowired\n>     private UserServiceImpl userService;\n> \n>     @RequestMapping(\"/register\")\n>     public String register(String username,String password){\n>         System.out.println(\"注册\");\n>         //注册的时候要对密码进行加密存储\n>         Md5Hash md5Hash = new Md5Hash(password);\n>         System.out.println(md5Hash.toHex());\n> \n>         //加盐加密\n>         int num = new Random().nextInt(90000)+10000;//10000-99999\n>         System.out.println(\"salt:\"+num);\n>         Md5Hash md5Hash2 = new Md5Hash(password,num+\"\");\n>         System.out.println(md5Hash2);\n> \n>         //加盐加密+多次hash\n>         Md5Hash md5Hash3 = new Md5Hash(password,num+\"\",3);\n>         System.out.println(md5Hash3);\n>         \n>         //将用户信息保存到数据库时，保存加密后的米，如果生成的随机盐，盐也要保存\n>         \n>         return \"login\";\n>     }\n> }\n> ```\n\n### 如果密码进行了加密处理，则Realm再但会认证数据时需要返回盐\n\n>MyRealm.java\n>\n>```java\n>package com.example.demo.config;\n>\n>import com.example.demo.beans.User;\n>import com.example.demo.dao.PermissionDao;\n>import com.example.demo.dao.RoleDao;\n>import com.example.demo.dao.UserDao;\n>import org.apache.shiro.authc.*;\n>import org.apache.shiro.authz.AuthorizationInfo;\n>import org.apache.shiro.authz.SimpleAuthorizationInfo;\n>import org.apache.shiro.realm.AuthorizingRealm;\n>import org.apache.shiro.subject.PrincipalCollection;\n>import org.apache.shiro.util.ByteSource;\n>\n>import javax.annotation.Resource;\n>import java.util.Set;\n>\n>/**\n> * 1.创建一个继承AuthorizingRealm类（实现Realm接口的类）\n> * 2.重新doGetAuthorizationInfo和doGetAuthenticationInfo方法\n> * 3.重新getName方法\n> */\n>public class MyRealm extends AuthorizingRealm {\n>\n>    @Resource\n>    private UserDao userDao;\n>\n>    @Resource\n>    private RoleDao roleDao;\n>\n>    @Resource\n>    private PermissionDao permissionDao;\n>\n>    //...\n>\n>    /**\n>     * 获取认证数据（从数据库查询的用户的正确数据）\n>     * @param authenticationToken\n>     * @return\n>     * @throws AuthenticationException\n>     */\n>    @Override\n>    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n>        //参数authenticationToken就是传递的 subject.login(token)\n>        //从token获取用户名\n>        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n>        String username = token.getUsername();\n>        //根据用户名，从数据库查询当前用户的安全数据\n>        User user = userDao.queryUserByUsername(username);\n>        if (user == null){\n>            return null;\n>        }\n>        /*AuthenticationInfo info = new SimpleAuthenticationInfo(\n>                username,   //当前用户名\n>                user.getPassword(),  //从数据库查询出来的安全密码\n>                getName());*/\n>        //如果数据库是加了盐的\n>        AuthenticationInfo info = new SimpleAuthenticationInfo(\n>                username,   //当前用户名\n>                user.getPassword(),  //从数据库查询出来的安全密码\n>                ByteSource.Util.bytes(user.getPwdSalt()),\n>                getName());\n>        return info;\n>    }\n>}\n>```\n\n## 退出登录\n\n在shiro过滤器中进行配置，配置logOut对应的路径\n\n```java\nfilterMap.put(\"/exit\",\"logout\");\n```\n\n在页面的退出按钮上，跳转到exit对应的url\n\n```html\n<a href=\"exit\">退出</a>\n```\n\n## 授权\n\n> 用户登录成功之后，要进行的操作就需要有对应的权限，在进行操作之前对权限进行检查—授权\n>\n> 权限控制通常有两种做法：\n>\n> * 不同身份的用户登录，我们显示不同的操作菜单（没有权限的菜单不显示）\n> * 对所有用户显示所有菜单，当用户点击菜单以后再验证当前用户是否有次权限，如果没有则提示权限不足\n\n### html授权\n\n> 在菜单页面只显示当前用户拥有权限操作的菜单\n>\n> shiro标签\n>\n> ```html\n> <shiro:hasPermission name=\"sys:c:save\"><dd><a href=\"c_add.html\"  >入库</a></dd></shiro:hasPermission>\n> ```\n\n### 过滤器授权\n\n>在shiro过滤器中请求的url进行权限设置\n>\n>```java\n>filterMap.put(\"/c_add.html\",\"perms[sys:c:save]\");\n> //设置未授权的访问路径\n>filter.setUnauthorizedUrl(\"/lesspermission.html\");\n>```\n\n### 注解授权\n\n> 配置Spring对Shiro的支持，ShiroConfig.java\n>\n> ```java\n> @Bean\n> public DefaultAdvisorAutoProxyCreator getAdvisorAutoProxyCreator(){\n>     DefaultAdvisorAutoProxyCreator autoProxyCreator = new DefaultAdvisorAutoProxyCreator();\n>     autoProxyCreator.setProxyTargetClass(true);\n>     return autoProxyCreator;\n> }\n> \n> @Bean\n> public AuthorizationAttributeSourceAdvisor getAuthorizationAttributeSourceAdvisor(DefaultWebSecurityManager securityManager){\n>     AuthorizationAttributeSourceAdvisor advisor = new AuthorizationAttributeSourceAdvisor();\n>     advisor.setSecurityManager(securityManager);\n>     return advisor;\n> }\n> ```\n>\n> 在请求的控制器添加权限注解\n>\n> ```java\n> package com.example.demo.controller;\n> \n> import org.apache.shiro.authz.annotation.RequiresPermissions;\n> import org.springframework.stereotype.Controller;\n> import org.springframework.web.bind.annotation.RequestMapping;\n> \n> @Controller\n> @RequestMapping(\"/customer\")\n> public class CustomerController {\n> \n>     @RequestMapping(\"/list\")\n>     /**\n>      * 如果没有sys:k:find的权限，则不需要执行此方法\n>      */\n>     @RequiresPermissions(\"sys:k:find\")\n>     public String list(){\n>         return \"customer_list\";\n>     }\n> }\n> ```\n>\n> 通过全局异常处理，指定权限不足时的页面跳转\n>\n> ```java\n> package com.example.demo.utils;\n> \n> import org.apache.shiro.authz.AuthorizationException;\n> import org.springframework.web.bind.annotation.ControllerAdvice;\n> import org.springframework.web.bind.annotation.ExceptionHandler;\n> \n> @ControllerAdvice\n> public class GlobalExceptionhandler {\n> \n>     @ExceptionHandler\n>     public String doException(Exception e){\n>         if (e instanceof AuthorizationException){\n>             return \"lesspermission\";\n>         }\n>         return null;\n>     }\n> }\n> ```\n\n### 手动授权\n\n>在代码中进行手动的权限校验\n>\n>```java\n>Subject subject = SecurityUtils.getSubject();\n>if (subject.isPermitted(\"sys:k:find\")){\n>    return \"customer_list\";\n>}else {\n>    return \"lesspermission\";\n>}\n>```\n\n## 缓存使用\n\n> 使用Shiro进行权限管理过程中，每次授权都会访问realm中的doGetAuthenticationInfo方法查询当前用户的角色及权限信息，如果系统的用户量比较大则会对数据库造成比较大的压力\n>\n> Shiro支持缓存以降低对数据库的访问压力（缓存的时授权信息）\n\n\n\n### 缓存的使用\n\n> 导入依赖\n>\n> ```xml\n>  <dependency>\n>      <groupId>org.springframework.boot</groupId>\n>      <artifactId>spring-boot-starter-cache</artifactId>\n> </dependency>\n> \n> <dependency>\n>     <groupId>net.sf.ehcache</groupId>\n>     <artifactId>ehcache</artifactId>\n> </dependency>\n> \n> <dependency>\n>     <groupId>org.apache.shiro</groupId>\n>     <artifactId>shiro-ehcache</artifactId>\n>     <version>1.4.0</version>\n> </dependency>\n> ```\n\n### 配置缓存策略\n\n> * 在resources目录下创建一个xml文件，ehcache.xml\n>\n> * ```xml\n>   <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n>   <ehcache updateCheck=\"false\" dynamicConfig=\"false\">\n>       <diskStore path=\"C:\\TEMP\" />\n>   \n>       <cache name=\"user\" timeToLiveSeconds=\"300\" maxEntriesLocalHeap=\"1000\"/>\n>   \n>       <defaultCache name=\"defaultCache\"\n>                     maxElementsInMemory=\"10000\"\n>                     eternal=\"false\"\n>                     timeToIdleSeconds=\"120\"\n>                     timeToLiveSeconds=\"120\"\n>                     overflowToDisk=\"false\"\n>                     maxElementsOnDisk=\"100000\"\n>                     diskPersistent=\"false\"\n>                     diskExpiryThreadIntervalSeconds=\"120\"\n>                     memoryStoreEvictionPolicy=\"LRU\"/>\n>       <!--缓存淘汰策略：当缓存空间比较紧张时，我们要存储新的数据进来，就必然删除一些老的数据\n>           LRU 最近最少使用\n>           FIFO 先进先出\n>           LFU 最少使用\n>       -->\n>   \n>   </ehcache>\n>   ```\n\n### 加入缓存\n\n> ShiroConfig\n>\n> ```java\n> @Bean\n> public EhCacheManager getEhCacheManager(){\n>     EhCacheManager ehCacheManager = new EhCacheManager();\n>     ehCacheManager.setCacheManagerConfigFile(\"classpth:ehcache.xml\");\n>     return ehCacheManager;\n> }\n> @Bean\n> public DefaultWebSecurityManager getDefaultWebSecurityManager(MyRealm realm){\n>     DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>     //securityManager要完成校验，需要realm\n>     securityManager.setRealm(realm);\n>     securityManager.setCacheManager(getEhCacheManager());\n>     return securityManager;\n> }\n> ```\n\n## session管理\n\n> Shiro进行认证和授权时基于session\n\n如果我们需要对session进行管理\n\n* 自定义session管理器\n* 将自定义的session管理器设置给SecurityManager\n\n配置自定义SessionManager：ShiroConfig.java\n\n>```java\n>@Bean\n>public DefaultWebSessionManager getDefaultWebSessionManager(){\n>    DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();\n>    System.out.println(sessionManager.getGlobalSessionTimeout());//1800000\n>    //配置sessionManager\n>    sessionManager.setGlobalSessionTimeout(15*1000);\n>    return sessionManager;\n>}\n>@Bean\n>public DefaultWebSecurityManager getDefaultWebSecurityManager(MyRealm realm){\n>    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>    //securityManager要完成校验，需要realm\n>    securityManager.setRealm(realm);\n>    //设置缓存\n>    securityManager.setCacheManager(getEhCacheManager());\n>    //设置session\n>    securityManager.setSessionManager(getDefaultWebSessionManager());\n>    return securityManager;\n>}\n>```\n\n## RememberMe\n\n> 将用户对页面的访问权限分为三个级别\n>\n> * 未认证—可访问的页面\n>   * login.html、register.html\n> * 曾认证—可访问的页面\n>   * info.html\n> * 已认证—可访问的页面\n>   * 转账.html\n\n### 在过滤器中设置“记住我”可访问的url\n\n```java\n \t\t//anon  匿名用户可访问\n        //authc 认证用户可访问\n        //user  使用RememberMe的用户可访问\n        //perms 对应权限可访问   \n\t\t//logout 退出指定的url\nMap<String,String> filterMap = new HashMap<>();\n        filterMap.put(\"/\",\"anon\");\n        filterMap.put(\"/login.html\",\"anon\");\n//        filterMap.put(\"/index.html\",\"anon\");\n        filterMap.put(\"/index.html\",\"user\");\n        filterMap.put(\"/register.html\",\"anon\");\n        filterMap.put(\"/user/login\",\"anon\");\n        filterMap.put(\"/user/register\",\"anon\");\n        filterMap.put(\"/static/**\",\"anon\");\n        filterMap.put(\"/**\",\"authc\");\n  \t\tfilterMap.put(\"/c_add.html\",\"perms[sys:c:save]\");\n\n        filterMap.put(\"/exit\",\"logout\");\n```\n\n### 在ShiroConfig.java中配置基于Cookie的rememberMe管理器\n\n> ```java\n> @Bean\n> public CookieRememberMeManager getCookieRememberMeManager(){\n>     CookieRememberMeManager rememberMeManager = new CookieRememberMeManager();\n>     //cookie必须设置name\n>     SimpleCookie cookie = new SimpleCookie(\"rememberMe\");\n>     cookie.setMaxAge(30*24*3600);\n>     rememberMeManager.setCookie(cookie);\n>     return rememberMeManager;\n> }\n> \n> @Bean\n> public DefaultWebSecurityManager getDefaultWebSecurityManager(MyRealm realm){\n>     DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>     //securityManager要完成校验，需要realm\n>     securityManager.setRealm(realm);\n>     //设置缓存\n>     securityManager.setCacheManager(getEhCacheManager());\n>     //设置session\n>     securityManager.setSessionManager(getDefaultWebSessionManager());\n>     //设置rememberMe管理器\n>     securityManager.setRememberMeManager(getCookieRememberMeManager());\n>     return securityManager;\n> }\n> ```\n\n### 登录认证时设置token“记住我”\n\n> 登录页面\n>\n> ```html\n> <form action=\"user/login\">\n>     <p>账号：<input type=\"text\" name=\"username\"></p>\n>     <p>密码：<input type=\"text\" name=\"password\"></p>\n>     <p>记住我：<input type=\"checkbox\" name=\"rememberMe\"></p>\n>     <p><input type=\"submit\" value=\"登录\"></p>\n> </form>\n> ```\n>\n> 控制器\n>\n> ```java\n> package com.example.demo.controller;\n> \n> import com.example.demo.service.UserServiceImpl;\n> import org.apache.shiro.crypto.hash.Md5Hash;\n> import org.springframework.beans.factory.annotation.Autowired;\n> import org.springframework.stereotype.Controller;\n> import org.springframework.web.bind.annotation.RequestMapping;\n> \n> import java.util.Random;\n> \n> @Controller\n> @RequestMapping(\"/user\")\n> public class UserController {\n> \n>     @Autowired\n>     private UserServiceImpl userService;\n> \n>     @RequestMapping(\"/login\")\n>     public String login(String username,String password,boolean rememberMe){\n>         try {\n>             userService.checkLogin(username,password,rememberMe);\n>             System.out.println(\"登录成功\");\n>             return \"index.html\";\n>         } catch (Exception e) {\n>             System.out.println(\"登录失败\");\n>             return \"login\";\n>         }\n>     }\n>    //...\n> }\n> ```\n>\n> service\n>\n> ```java\n> package com.example.demo.service;\n> \n> import org.apache.shiro.SecurityUtils;\n> import org.apache.shiro.authc.UsernamePasswordToken;\n> import org.apache.shiro.subject.Subject;\n> import org.springframework.stereotype.Service;\n> \n> @Service\n> public class UserServiceImpl {\n>        public void checkLogin(String username, String password, boolean rememberMe) throws Exception{\n>            Subject subject = SecurityUtils.getSubject();\n>            UsernamePasswordToken token = new UsernamePasswordToken(username,password);\n>            token.setRememberMe(rememberMe);\n>            subject.login(token);\n>        }\n> }\n> ```\n\n## Shiro多Realm配置\n\n### 使用场景\n\n> 当Shiro进行权限管理，数据来自不同的数据源时，我们可以给SecurityManager配置多个Realm\n\n### 多个Realm的处理方式\n\n> 1.链式处理\n>\n> * 多个Realm一次进行认证\n>\n> 2.分支处理\n>\n> * 根据不同的条件从多个Realm中选择一个进行认证处理\n\n### 多Realm配置（链式处理）\n\n定义多个Realm\n\n> UserRealm.java\n>\n> ```java\n> package com.example.demo.realm;\n> \n> import lombok.extern.slf4j.Slf4j;\n> import org.apache.shiro.authc.*;\n> import org.apache.shiro.authz.AuthorizationInfo;\n> import org.apache.shiro.realm.AuthorizingRealm;\n> import org.apache.shiro.subject.PrincipalCollection;\n> \n> @Slf4j\n> public class UserRealm extends AuthorizingRealm {\n> \n>     @Override\n>     public String getName() {\n>         return \"UserRealm\";\n>     }\n> \n>     @Override\n>     protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n>         return null;\n>     }\n> \n>     @Override\n>     protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n>         log.info(\"-------UserRealm--------\");\n> \n>         UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n>         String username = token.getUsername();\n> \n>         SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(username,\"123456\",getName());\n>         return info;\n>     }\n> }\n> ```\n>\n> ManagerRealm.java\n>\n> ```java\n> package com.example.demo.realm;\n> \n> import lombok.extern.slf4j.Slf4j;\n> import org.apache.shiro.authc.*;\n> import org.apache.shiro.authz.AuthorizationInfo;\n> import org.apache.shiro.realm.AuthorizingRealm;\n> import org.apache.shiro.subject.PrincipalCollection;\n> \n> @Slf4j\n> public class ManagerRealm extends AuthorizingRealm {\n> \n>     @Override\n>     public String getName() {\n>         return \"ManagerRealm\";\n>     }\n> \n>     @Override\n>     protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n>         return null;\n>     }\n> \n>     @Override\n>     protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n>         log.info(\"-------ManagerRealm--------\");\n> \n>         UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;\n>         String username = token.getUsername();\n> \n>         SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(username,\"222222\",getName());\n>         return info;\n>     }\n> }\n> ```\n\n在ShiroConfig.java中为Securitymanager配置多个Realm\n\n> ```java\n> package com.example.demo.config;\n> \n> import com.example.demo.realm.ManagerRealm;\n> import com.example.demo.realm.UserRealm;\n> import org.apache.shiro.realm.Realm;\n> import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n> import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n> import org.springframework.context.annotation.Bean;\n> import org.springframework.context.annotation.Configuration;\n> \n> import java.util.ArrayList;\n> import java.util.Collection;\n> import java.util.HashMap;\n> import java.util.Map;\n> \n> @Configuration\n> public class ShiroConfig {\n> \n>     @Bean\n>     public UserRealm getUserRealm(){\n>         return new UserRealm();\n>     }\n> \n>     @Bean\n>     public ManagerRealm getManagerRealm(){\n>         return new ManagerRealm();\n>     }\n> \n>     @Bean\n>     public DefaultWebSecurityManager getDefaultWebSecurityManager(){\n>         DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n>         //securityManager要完成校验，需要realm\n>         Collection<Realm> realms = new ArrayList<>();\n>         realms.add(getUserRealm());\n>         realms.add(getManagerRealm());\n>         securityManager.setRealms(realms);\n>         return securityManager;\n>     }\n> \t//....\n> }\n> ```\n\n测试代码\n\n> login.html\n>\n> ```html\n> <form action=\"user/login\">\n>     <p>账号：<input type=\"text\" name=\"username\"></p>\n>     <p>密码：<input type=\"text\" name=\"password\"></p>\n>     <input type=\"submit\" value=\"登录\">\n> </form>\n> ```\n>\n> UserController.java\n>\n> ```java\n> package com.example.demo.controller;\n> \n> import lombok.extern.slf4j.Slf4j;\n> import org.apache.shiro.SecurityUtils;\n> import org.apache.shiro.authc.UsernamePasswordToken;\n> import org.apache.shiro.subject.Subject;\n> import org.springframework.stereotype.Controller;\n> import org.springframework.web.bind.annotation.RequestMapping;\n> \n> @Controller\n> @RequestMapping(\"user\")\n> @Slf4j\n> public class UserController {\n> \n>     @RequestMapping(\"/login\")\n>     public String login(String username,String password){\n>       log.info(\"----UserController---\");\n>       try {\n>           UsernamePasswordToken token = new UsernamePasswordToken(username,password);\n>           Subject subject = SecurityUtils.getSubject();\n>           subject.login(token);\n>           return \"index\";\n>       }catch (Exception e){\n>           return \"login\";\n>       }\n>     }\n> }\n> ```\n\n### 多Realm配置（分支处理）\n\n> 根据不同的条件执行不同的Realm\n\n实现 案例：用户不同身份登录执行不同的Realm\n\n> 自定义Realm（UserRealm、ManagerRealm）\n>\n> * 当登录页面选择“普通用户”登录，则执行UserRealm的认证\n> * 当登录页面选择“管理员”登录，则执行ManagerRealm的认证\n>\n> Realm的声明及配置\n>\n> 自定义Token\n>\n> ```java\n> package com.example.demo.config;\n> \n> import org.apache.shiro.authc.UsernamePasswordToken;\n> \n> public class MyToken extends UsernamePasswordToken {\n>     private String loginType;\n> \n>     public MyToken(String username,String password,String loginType){\n>         super(username,password);\n>         this.loginType = loginType;\n>     }\n> \n>     public String getLoginType() {\n>         return loginType;\n>     }\n> \n>     public void setLoginType(String loginType) {\n>         this.loginType = loginType;\n>     }\n> }\n> ```\n>\n> 自定义认证器\n>\n> ```java\n> package com.example.demo.config;\n> \n> import lombok.extern.slf4j.Slf4j;\n> import org.apache.shiro.authc.AuthenticationException;\n> import org.apache.shiro.authc.AuthenticationInfo;\n> import org.apache.shiro.authc.AuthenticationToken;\n> import org.apache.shiro.authc.pam.ModularRealmAuthenticator;\n> import org.apache.shiro.realm.Realm;\n> \n> import java.util.ArrayList;\n> import java.util.Collection;\n> \n> @Slf4j\n> public class MymodularRealmAuthenticator extends ModularRealmAuthenticator {\n>     @Override\n>     protected AuthenticationInfo doAuthenticate(AuthenticationToken authenticationToken) throws AuthenticationException {\n>         log.info(\"-----MymodularRealmAuthenticator---------\");\n> \n>         Collection<Realm> realms = this.getRealms();\n>         MyToken myToken = (MyToken) authenticationToken;\n> \n>         String loginType = myToken.getLoginType();\n> \n>         log.info(\"-------------loginType:\"+loginType);\n>         Collection<Realm> typeRealms = new ArrayList<>();\n>         for (Realm realm : realms){\n>             if (realm.getName().startsWith(loginType)){\n>                 typeRealms.add(realm);\n>             }\n>         }\n>         if (typeRealms.size() == 1){\n>             return this.doSingleRealmAuthentication((Realm) \t\t\t\ttypeRealms.iterator().next(),authenticationToken);\n>         }else {\n>             return this.doMultiRealmAuthentication(typeRealms,authenticationToken);\n>         }\n> \n>     }\n> }\n> ```\n>\n> 配置自定义认证器\n>\n> ```java\n> package com.example.demo.config;\n> \n> import com.example.demo.realm.ManagerRealm;\n> import com.example.demo.realm.UserRealm;\n> import org.apache.shiro.realm.Realm;\n> import org.apache.shiro.spring.web.ShiroFilterFactoryBean;\n> import org.apache.shiro.web.mgt.DefaultWebSecurityManager;\n> import org.springframework.context.annotation.Bean;\n> import org.springframework.context.annotation.Configuration;\n> \n> import java.util.ArrayList;\n> import java.util.Collection;\n> import java.util.HashMap;\n> import java.util.Map;\n> \n> @Configuration\n> public class ShiroConfig {\n> \n>     @Bean\n>     public UserRealm getUserRealm(){\n>         return new UserRealm();\n>     }\n> \n>     @Bean\n>     public ManagerRealm getManagerRealm(){\n>         return new ManagerRealm();\n>     }\n> \n>     @Bean\n>     public MymodularRealmAuthenticator getMymodularRealmAuthenticator(){\n>         return new MymodularRealmAuthenticator();\n>     }\n> \n>     @Bean\n>     public DefaultWebSecurityManager getDefaultWebSecurityManager(){\n>         DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n> \n>         //配置自定义认证器(防在realms设置之前)\n>         securityManager.setAuthenticator(getMymodularRealmAuthenticator());\n> \n>         //securityManager要完成校验，需要realm\n>         Collection<Realm> realms = new ArrayList<>();\n>         realms.add(getUserRealm());\n>         realms.add(getManagerRealm());\n>         securityManager.setRealms(realms);\n>         return securityManager;\n>     }\n> \n>  \t//...\n> }\n> ```\n\n","slug":"computer/course-1/Shiro","published":1,"updated":"2020-12-17T04:31:32.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj15eg9c0040b0utafeg7g04","content":"<h2 id=\"权限管理\"><a class=\"anchor\" href=\"#权限管理\">#</a> 权限管理</h2>\n<p>1. 什么是权限管理？</p>\n<blockquote>\n<p>不同身份的用户进入到系统中能够完成的操作是不同的，我们对于不同的用户进行的可执行的操作的管理称之为权限管理。</p>\n</blockquote>\n<h2 id=\"shiro简介\"><a class=\"anchor\" href=\"#shiro简介\">#</a> Shiro 简介</h2>\n<h3 id=\"认证授权流程\"><a class=\"anchor\" href=\"#认证授权流程\">#</a> 认证授权流程</h3>\n<blockquote>\n<p>认证：对用户的身份进行检查（登录验证）</p>\n<p>授权：对用户的权限进行检查（是否有对应的操作权限）</p>\n</blockquote>\n<h3 id=\"安全框架\"><a class=\"anchor\" href=\"#安全框架\">#</a> 安全框架</h3>\n<blockquote>\n<p>帮助我们完成用户身份认证及权限检查功能框架</p>\n<p>常用的安全框架</p>\n<ul>\n<li>Shrio：Apache Shiro 是一个功能强大并且易用的 Java 安全框架（小而简单）</li>\n<li>spring Security：基于 Spring 的一个安全框架，依赖于 Spring</li>\n<li>OAuth2：第三方授权登录</li>\n<li>自定义安全认证中心</li>\n</ul>\n</blockquote>\n<h3 id=\"shiro\"><a class=\"anchor\" href=\"#shiro\">#</a> Shiro</h3>\n<blockquote>\n<ul>\n<li>\n<p>Apache Shiro 是一个功能强大并且易用的 Java 安全框架</p>\n</li>\n<li>\n<p>可以完成用户认证、授权、密码以及会话管理</p>\n</li>\n<li>\n<p>可以在任何应用系统中使用（主要针对于单体项目的权限管理）</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"shiro的工作原理\"><a class=\"anchor\" href=\"#shiro的工作原理\">#</a> Shiro 的工作原理</h2>\n<h3 id=\"shiro的核心功能\"><a class=\"anchor\" href=\"#shiro的核心功能\">#</a> Shiro 的核心功能</h3>\n<blockquote>\n<p>Authentication：认证，验证用户是否有相应的身份 - 登录验证；</p>\n<p>Authorization：授权，即权限验证；对已经通过的用户检查是否具有某个权限或者角色，从而控制是否能进行某种操作</p>\n<p>Session Management：会话管理，用户在认证成功之后创建会话，在没有退出之前，之前用户的所有信息都将会保存在这个会话中，可以是普通的 JavaSE 应用，也可以是 Web 应用；</p>\n<p>Cryptography：加密，对敏感信息进行加密处理，shiro 就提供这种加密机制；</p>\n<p>支持的特性：</p>\n<ul>\n<li>Web Support - Shiro 提供 l 过滤器，可以通过过滤器拦截 Web 请求处理 web 应用的访问控制</li>\n<li>Caching 缓存支持，shiro 可以缓存用户信息以及用户的角色授权信息，可以提高执行效率</li>\n<li>Concurrency shiro 支持多线程应用</li>\n<li>Testing 提供测试支持</li>\n<li>Run As 允许一个用户以另一种身份去访问</li>\n<li>Remember me</li>\n</ul>\n<p>说明：Shiro 是一个安全框架，不提供用户以及权限的维护（用户权限的权限管理需要我们自己去设计）</p>\n</blockquote>\n<h3 id=\"shiro核心组件\"><a class=\"anchor\" href=\"#shiro核心组件\">#</a> Shiro 核心组件</h3>\n<p><img data-src=\"Shiro.assets/shiro.jpg\" alt=\"shiro\" /></p>\n<p>Shiro 三大核心组件：Subject、Security Manager、Realms</p>\n<blockquote>\n<ul>\n<li>Subject，表示待认证和授权的用户</li>\n<li>Security Manager，他是 Shiro 框架的核心，Shiro 就是通过 Security Manger 来进行内部实例的管理，并通过它来提供安全框架的各种服务</li>\n<li>Authenticator，认证器</li>\n<li>Anthorizer，授权器</li>\n<li>SessionManager，会话管理器</li>\n<li>CacheManager，缓存管理器</li>\n<li>Realms，相当于 Shiro 进行认证授权的数据源，充当了 Shiro 与安全数据之间的 “桥梁” 或者 “连接器”，也就是说，当用户进行认证（登录）和授权（访问控制）验证时，Shiro 会用应用配置的 Realm 中查找用户以及权限信息</li>\n</ul>\n</blockquote>\n<h2 id=\"基于javase应用\"><a class=\"anchor\" href=\"#基于javase应用\">#</a> 基于 JavaSE 应用</h2>\n<h3 id=\"创建maven项目\"><a class=\"anchor\" href=\"#创建maven项目\">#</a> 创建 Maven 项目</h3>\n<h3 id=\"导入shiro依赖\"><a class=\"anchor\" href=\"#导入shiro依赖\">#</a> 导入 Shiro 依赖</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>shiro-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"创建shiro配置文件\"><a class=\"anchor\" href=\"#创建shiro配置文件\">#</a> 创建 Shiro 配置文件</h3>\n<blockquote>\n<p>在 resource 目录下创建名为 shiro.ini 的文件</p>\n<p>在文件中完成用户角色以及权限的配置</p>\n</blockquote>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">[users]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token constant\">zhangsan</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>123456,seller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">lisi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>123456,ckmanager</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token constant\">admin</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>222222,admin</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token selector\">[roles]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">admin</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>*</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token constant\">seller</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>order-add,order-del,order-list</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token constant\">ckmanager</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>ck-add,ck-del,ck-list</span></pre></td></tr></table></figure><p>Shiro 的基本使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hu<span class=\"token punctuation\">.</span>shiro</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestShiro</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入账号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入密码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token comment\">//1. 创建安全管理器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token class-name\">DefaultSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token comment\">//2. 创建 realm</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       <span class=\"token class-name\">IniRealm</span> iniRealm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:shiro.ini\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token comment\">//3. 将 realm 设置给安全管理器</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>       securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>iniRealm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token comment\">//4. 将 realm 设置给 SecurityUtils 工具</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityManager</span><span class=\"token punctuation\">(</span>securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token comment\">//5. 通过 SecurityUtils 工具过去 Subject 对象</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token comment\">// 认证流程</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token comment\">//1. 将认证账号密码封装到 token 对象中</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token comment\">//2. 通过 subject 对象调用 login 方法进行认证申请</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>           subject<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>           flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>           flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">?</span><span class=\"token string\">\"登录成功\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>       <span class=\"token comment\">// 授权</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       <span class=\"token comment\">// 判断是否有某个角色</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seller\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>       <span class=\"token comment\">// 判断是否有某个权限</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">isPermitted</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order-del\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"shiro认证流程\"><a class=\"anchor\" href=\"#shiro认证流程\">#</a> Shiro 认证流程</h3>\n<blockquote>\n<p>1. 通过 subject.login (token) 进行登录验证，就会将 token 包含的用户信息（账号和密码）传递给 SecurityManager</p>\n<p>2.SecurityManger 将会调用 Authenticator 进行身份验证</p>\n<p>3.Authenticator 把 token 传递给对应的 Realm</p>\n<p>4.Realm 根据得到的 token，调用 doGetAuthenticationInfo 方法进行认证（如果认证失败通过抛出异常提示认证器）</p>\n<p>5. 将认证结果一层一层的返回到 subject（如果 subject.login 抛出异常则表示认证失败 ）</p>\n</blockquote>\n<h2 id=\"springboot应用整合shiro\"><a class=\"anchor\" href=\"#springboot应用整合shiro\">#</a> SpringBoot 应用整合 Shiro</h2>\n<h3 id=\"创建springboot应用\"><a class=\"anchor\" href=\"#创建springboot应用\">#</a> 创建 SpringBoot 应用</h3>\n<blockquote>\n<p>lombok</p>\n<p>spring web</p>\n<p>thymeleaf</p>\n</blockquote>\n<h3 id=\"整合druid和mybatis\"><a class=\"anchor\" href=\"#整合druid和mybatis\">#</a> 整合 Druid 和 Mybatis</h3>\n<p>依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--druid--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!--mysql--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.20<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">&lt;!--mybatis--></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.spring.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>配置</p>\n<blockquote>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token key atrule\">druid</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/user</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.jdbc.Driver</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token key atrule\">initial-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token key atrule\">min-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token key atrule\">max-active</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">mybatis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token key atrule\">mapper-locations</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>mapper/<span class=\"token important\">*.xml</span></pre></td></tr></table></figure></blockquote>\n<p>3. 整合 Shiro</p>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--shiro--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>shiro-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>配置</p>\n<blockquote>\n<p>SpringBoot 默认没有提供 Shiro 的自动配置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShiroConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IniRealm</span> <span class=\"token function\">getIniRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">IniRealm</span> iniRealm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:shiro.ini\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> iniRealm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IniRealm</span> iniRealm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>iniRealm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShiroFilterFactoryBean</span> <span class=\"token function\">shiroFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">ShiroFilterFactoryBean</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 过滤器就是 Shiro 进行权限校验的核心，进行认证和授权是需要 SecurityManager 的</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityManager</span><span class=\"token punctuation\">(</span>securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 设置 shiro 的拦截规则</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//anon  匿名用户可访问</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">//authc 认证用户可访问</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//user  使用 RememberMe 的用户可访问</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//perms 对应权限可访问</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">//role  对应角色可访问</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> filterMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/static/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"authc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setFilterChainDefinitionMap</span><span class=\"token punctuation\">(</span>filterMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setLoginUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 设置未授权的访问路径</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setUnauthorizedUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>       <span class=\"token keyword\">return</span> filter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>认证测试</p>\n<ul>\n<li>\n<p>UserServiceImpl.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkLogin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>UserController</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserServiceImpl</span> userService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            userService<span class=\"token punctuation\">.</span><span class=\"token function\">checkLogin</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>login.html</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>登录<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"springboot应用整合shiro-案例jdbcrealm\"><a class=\"anchor\" href=\"#springboot应用整合shiro-案例jdbcrealm\">#</a> SpringBoot 应用整合 Shiro - 案例（JdbcRealm）</h2>\n<h3 id=\"jdbcrealm介绍\"><a class=\"anchor\" href=\"#jdbcrealm介绍\">#</a> JdbcRealm 介绍</h3>\n<blockquote>\n<p>如果使用 JdbcRealm，则必须提供 JdbcRealm 所需的表结构（权限设计）</p>\n</blockquote>\n<h3 id=\"jdbcrealm规定的表结构\"><a class=\"anchor\" href=\"#jdbcrealm规定的表结构\">#</a> JdbcRealm 规定的表结构</h3>\n<blockquote>\n<pre><code class=\"language-mysql\">-- 创建用户表\ncreate table users(\n\tid int primary key auto_increment,\n   username varchar(20) not null unique,\n   password varchar(20) not null,\n   password_salt varchar(20)\n);\ninsert into users(username,password) values('zhangsan','123456');\ninsert into users(username,password) values('lisi','123456');\ninsert into users(username,password) values('wangwu','123456');\ninsert into users(username,password) values('zhaoliu','123456');\ninsert into users(username,password) values('chengqi','123456');\n\n-- 用户角色表\ncreate table user_roles(\n\tid int primary key auto_increment,\n   username varchar(60) not null,\n   role_name varchar(100) not null\n);\n\n-- admin 系统管理员\n-- cmanager 仓库人员\n-- xmanager 销售人员\n-- kmanager 客服人员\n-- zmanager 行政人员\n\ninsert into user_roles(username,role_name) values('zhangsan','admin');\ninsert into user_roles(username,role_name) values('lisi','cmanager');\ninsert into user_roles(username,role_name) values('wangwu','xmanager');\ninsert into user_roles(username,role_name) values('zhaoliu','kmanager');\ninsert into user_roles(username,role_name) values('chengqi','zmanager');\n\n-- 角色权限表\ncreate table roles_permissions(\n\tid int primary key auto_increment,\n   role_name varchar(100) not null,\n   permission varchar(100) not null\n);\n\n-- 管理员\ninsert into roles_permissions(role_name,permission) values('admin','*');\n-- 仓库人员\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:save');\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:delete');\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:update');\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:find');\n-- 销售人员\ninsert into roles_permissions(role_name,permission) values('xmanager','sys:x:save');\ninsert into roles_permissions(role_name,permission) values('xmanager','sys:x:delete');\ninsert into roles_permissions(role_name,permission) values('xmanager','sys:x:update');\ninsert into roles_permissions(role_name,permission) values('xmanager','sys:x:find');\n-- 客服人员\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:update');\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:find');\n-- 行政人员\ninsert into roles_permissions(role_name,permission) values('zmanager','sys:z:find');\n</code></pre>\n</blockquote>\n<h3 id=\"springboot整合shiro\"><a class=\"anchor\" href=\"#springboot整合shiro\">#</a> Springboot 整合 Shiro</h3>\n<blockquote>\n<p>创建 Springboot 应用</p>\n<p>整合 Druid 和 Mybatis</p>\n<p>整合 Shiro</p>\n<ul>\n<li>\n<p>添加依赖</p>\n</li>\n<li>\n<p>配置 shiro</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JdbcRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShiroConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JdbcRealm</span> <span class=\"token function\">getJdbcRealm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">JdbcRealm</span> jdbcRealm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//JdbcRealm 会自动从数据查询用户及权限数据（数据库的表结构要符合 JdbcRealm 的规范）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        jdbcRealm<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//JdbcRealm 默认开启认证功能，需要手动开启授权功能</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        jdbcRealm<span class=\"token punctuation\">.</span><span class=\"token function\">setPermissionsLookupEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> jdbcRealm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcRealm</span> jdbcRealm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>jdbcRealm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShiroFilterFactoryBean</span> <span class=\"token function\">shiroFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">ShiroFilterFactoryBean</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 过滤器就是 Shiro 进行权限校验的核心，进行认证和授权是需要 SecurityManager 的</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityManager</span><span class=\"token punctuation\">(</span>securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 设置 shiro 的拦截规则</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">//anon  匿名用户可访问</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">//authc 认证用户可访问</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">//user  使用 RememberMe 的用户可访问</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">//perms 对应权限可访问</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">//role  对应角色可访问</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> filterMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/static/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"authc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setFilterChainDefinitionMap</span><span class=\"token punctuation\">(</span>filterMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">//filter.setLoginUrl(\"/\");</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 设置未授权的访问路径</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setUnauthorizedUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> filter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<p>七、Shiro 的标签使用</p>\n<blockquote>\n<p>当用户认证进入到主页之后，需要显示用户信息以及当前用户的权限信息，Shiro 就提供了一套标签用于页面来进行权限数据的呈现</p>\n</blockquote>\n<p>Shiro 提供了可供 JSP 使用的标签以及 thymeleaf 中标签</p>\n<ul>\n<li>\n<p>JSP 页面引用：</p>\n<pre><code class=\"language-jsp\">&lt;%@ taglib prefix=&quot;shiro&quot; uri=&quot;http://shiro.apache.org/tags&quot; %&gt;\n</code></pre>\n</li>\n<li>\n<p>thymeleaf 模板中引用</p>\n<p>在 pom.xml 文件中导入 thymeleaf 模板对 shiro 标签支持的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.github.theborakompanioni<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>thymeleaf-extras-shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在 ShiroConfig 配置 Shiro 的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ShiroDialect</span> <span class=\"token function\">getShiroDialect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShiroDialect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>thymeleaf 模板中引入 Shiro 的命名空间</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>th</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.thymeleaf.org<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>shiro</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.pollix.at/thymeleaf/shiro <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>常用标签</p>\n<blockquote>\n<p>guest，判断用户是否是游客身份，如果是游客身份则显示此标签内容</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>guest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   欢迎游客访问，<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>guest</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>user，判断用户是否是认证身份，如果是认证身份则显示此标签内容</p>\n<p>principal，获取当前登录用户名</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>user</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   用户[<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>principal</span><span class=\"token punctuation\">/></span></span>]欢迎您！</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>user</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>noAuthenticated/authenticated</p>\n<p>hasRole</p>\n<p>hasPermission</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>th</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.thymeleaf.org<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>shiro</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.pollix.at/thymeleaf/shiro <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   index</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>guest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       欢迎游客访问，<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>guest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>user</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       用户[<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>principal</span><span class=\"token punctuation\">/></span></span>]欢迎您！</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       当前用户为<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasRole</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>超级管理员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasRole</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasRole</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cmanager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>仓库人员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasRole</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasRole</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xmanager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>销售人员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasRole</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasRole</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>kmanager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>客服人员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasRole</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasRole</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zmanager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>行政人员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasRole</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>user</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   仓库管理</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:c:save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>入库<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:c:delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>出库<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:c:update<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:c:find<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查询<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   订单管理</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:x:save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>添加订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:x:delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:x:update<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:x:find<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查询订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   客户管理</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:k:save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>添加客户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:k:delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除客户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:k:update<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改客户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:k:find<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查询客户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></blockquote>\n</li>\n</ul>\n<h2 id=\"springboot整合shiro完成权限管理案例自定义realm\"><a class=\"anchor\" href=\"#springboot整合shiro完成权限管理案例自定义realm\">#</a> Springboot 整合 Shiro 完成权限管理案例 — 自定义 Realm</h2>\n<blockquote>\n<p>使用 JdbcRealm 可以完成用户权限管理，但是我们必须提供 Jdbc 规定的数据表结构，如果我们的项目开发中，这个 JdbcReal 规定的数据表结构不能满足开发需求，如何处理？</p>\n<ul>\n<li>自定义数据库表结构</li>\n<li>自定义 Realm 实现认证和授权</li>\n</ul>\n</blockquote>\n<h3 id=\"数据库设计\"><a class=\"anchor\" href=\"#数据库设计\">#</a> 数据库设计</h3>\n<blockquote>\n<pre><code class=\"language-mysql\">-- 用户信息表\ncreate table user(\n\tid int primary key auto_increment,\n\tusername varchar(60) not null unique,\n\tpassword varchar(20) not null,\n\tpassword_salt varchar(60)\n);\n\ninsert into user(username,password) values('zhangsan','123456');\ninsert into user(username,password) values('lisi','123456');\ninsert into user(username,password) values('wangwu','123456');\ninsert into user(username,password) values('zhaoliu','123456');\ninsert into user(username,password) values('chengqi','123456');\n\n-- 角色信息表\ncreate table role(\n\tid int primary key auto_increment,\n\tname varchar(60) not null\n);\n\ninsert into role(name) values('admin');\ninsert into role(name) values('cmanager');-- 仓库\ninsert into role(name) values('xmanager');-- 销售\ninsert into role(name) values('kmanager');-- 客服\ninsert into role(name) values('zmanager');-- 行政\n\n-- 权限信息表\ncreate table permission(\n\tid int primary key auto_increment,\n\t`code` varchar(60) not null,\n\tname varchar(60)\n);\n\ninsert into permission(code,name) values('sys:c:save','入库');\ninsert into permission(code,name) values('sys:c:delete','出库');\ninsert into permission(code,name) values('sys:c:update','修改');\ninsert into permission(code,name) values('sys:c:find','查询');\n\ninsert into permission(code,name) values('sys:x:save','新增订单');\ninsert into permission(code,name) values('sys:x:delete','删除订单');\ninsert into permission(code,name) values('sys:x:update','修改订单');\ninsert into permission(code,name) values('sys:x:find','查询订单');\n\ninsert into permission(code,name) values('sys:k:save','新增客户');\ninsert into permission(code,name) values('sys:k:delete','删除客户');\ninsert into permission(code,name) values('sys:k:update','修改客户');\ninsert into permission(code,name) values('sys:k:find','查询客户');\n\n\n-- 用户角色表\ncreate table user_role(\n\tuid int not null,\n\trid int not null\n-- \tprimary key(uid,rid),\n-- \tconstraint FK_user foreign key(uid) references user(id),\n-- \tconstraint FK_role foreign key(rid) references role(id),\n)\n\ninsert into user_role(uid,rid) values(1,1);\ninsert into user_role(uid,rid) values(1,2);\ninsert into user_role(uid,rid) values(1,3);\ninsert into user_role(uid,rid) values(1,4);\ninsert into user_role(uid,rid) values(1,5);\n\ninsert into user_role(uid,rid) values(2,2);\ninsert into user_role(uid,rid) values(3,3);\ninsert into user_role(uid,rid) values(4,4);\ninsert into user_role(uid,rid) values(5,5);\n\n-- 角色权限表\ncreate table role_permission(\n\trid int not null,\n\tpid int not null\n)\n-- 给仓库角色分配权限\ninsert into role_permission(rid,pid) values(2,1);\ninsert into role_permission(rid,pid) values(2,2);\ninsert into role_permission(rid,pid) values(2,3);\ninsert into role_permission(rid,pid) values(2,4);\n-- 给销售角色分配权限\ninsert into role_permission(rid,pid) values(3,5);\ninsert into role_permission(rid,pid) values(3,6);\ninsert into role_permission(rid,pid) values(3,7);\ninsert into role_permission(rid,pid) values(3,8);\ninsert into role_permission(rid,pid) values(3,9);\ninsert into role_permission(rid,pid) values(3,10);\ninsert into role_permission(rid,pid) values(3,11);\ninsert into role_permission(rid,pid) values(3,12);\n-- 给客服角色分配权限\ninsert into role_permission(rid,pid) values(4,11);\ninsert into role_permission(rid,pid) values(4,12);\n-- 给行政角色分配权限\ninsert into role_permission(rid,pid) values(5,4);\ninsert into role_permission(rid,pid) values(5,8);\ninsert into role_permission(rid,pid) values(5,12);\n</code></pre>\n</blockquote>\n<h3 id=\"dao实现\"><a class=\"anchor\" href=\"#dao实现\">#</a> DAO 实现</h3>\n<blockquote>\n<p>Shiro 进行认证需要用户信息</p>\n<ul>\n<li>根据用户名查询用户信息</li>\n</ul>\n<p>Shiro 进行授权管理需要当前用户的角色和权限</p>\n<ul>\n<li>根据用户名查询当前用户的角色列表（3 张表连接查询）</li>\n<li>根据用户名查询当前用户的权限列表（5 张表连接查询）</li>\n</ul>\n</blockquote>\n<h4 id=\"创建springboot项目整合mybatis\"><a class=\"anchor\" href=\"#创建springboot项目整合mybatis\">#</a> 创建 Springboot 项目，整合 Mybatis</h4>\n<h4 id=\"更具用户名查用户信息\"><a class=\"anchor\" href=\"#更具用户名查用户信息\">#</a> 更具用户名查用户信息</h4>\n<ul>\n<li>\n<p>创建 Bean</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pwdSalt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建 Dao</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">User</span> <span class=\"token function\">queryUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>映射配置</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password_salt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pwdSalt<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>queryUserByUsername<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    select * from user where username = #&#123;username&#125;;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"根据用户名查询角色名列表\"><a class=\"anchor\" href=\"#根据用户名查询角色名列表\">#</a> 根据用户名查询角色名列表</h4>\n<ul>\n<li>\n<p>创建 Dao</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RoleDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">queryRoleNameByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>映射配置</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>queryRoleNameByUsername<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultSets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.util.set<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>String<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SELECT r.name FROM `user` u</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LEFT JOIN user_role ur ON u.id = ur.uid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    LEFT JOIN role r ON ur.rid = r.id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    WHERE u.username = #&#123;username&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"整合shiro\"><a class=\"anchor\" href=\"#整合shiro\">#</a> 整合 Shiro</h3>\n<ul>\n<li>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.github.theborakompanioni<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>thymeleaf-extras-shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!--shiro--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>shiro-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>配置 Shiro - 基于 Java 配置方式</p>\n</li>\n<li>\n<p>自定义 Realm</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PermissionDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RoleDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleAuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizingRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrincipalCollection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * 1. 创建一个继承 AuthorizingRealm 类（实现 Realm 接口的类）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * 2. 重新 doGetAuthorizationInfo 和 doGetAuthenticationInfo 方法</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * 3. 重新 getName 方法</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRealm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizingRealm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RoleDao</span> roleDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PermissionDao</span> permissionDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"myRealm\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 获取授权数据 (将当前用户的角色以及权限信息查询出来)</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @param principalCollection</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthorizationInfo</span> <span class=\"token function\">doGetAuthorizationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrincipalCollection</span> principalCollection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 获取用户的用户名</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> principalCollection<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 根据用户名查询当前用户角色列表</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> roleNames <span class=\"token operator\">=</span> roleDao<span class=\"token punctuation\">.</span><span class=\"token function\">queryRoleNameByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 根据用户名查询当前用户权限列表</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> permission <span class=\"token operator\">=</span> permissionDao<span class=\"token punctuation\">.</span><span class=\"token function\">queryPermissionByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">SimpleAuthorizationInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthorizationInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        info<span class=\"token punctuation\">.</span><span class=\"token function\">setRoles</span><span class=\"token punctuation\">(</span>roleNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        info<span class=\"token punctuation\">.</span><span class=\"token function\">setStringPermissions</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     * 获取认证数据（从数据库查询的用户的正确数据）</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     * @param authenticationToken</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * @throws AuthenticationException</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationInfo</span> <span class=\"token function\">doGetAuthenticationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationToken</span> authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 参数 authenticationToken 就是传递的 subject.login (token)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 从 token 获取用户名</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 根据用户名，从数据库查询当前用户的安全数据</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">queryUserByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">AuthenticationInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthenticationInfo</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                username<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 当前用户名</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 从数据库查询出来的安全密码</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"加密\"><a class=\"anchor\" href=\"#加密\">#</a> 加密</h2>\n<h3 id=\"加密介绍\"><a class=\"anchor\" href=\"#加密介绍\">#</a> 加密介绍</h3>\n<blockquote>\n<p>明文 ——（加密规则）—— 密文</p>\n<p>加密规则可以自定义，在项目开发中我们通常使用 BASE64 和 MD5 编码方式</p>\n<ul>\n<li>\n<p>BASE64：可反编码的编码方式</p>\n<p>明文 —— 密文</p>\n<p>密文 —— 明文</p>\n</li>\n<li>\n<p>MD5：不可逆的编码方式（非对称）</p>\n<p>明文 —— 密文</p>\n</li>\n</ul>\n</blockquote>\n<p>如果数据库用户的密码存储的密文，Shiro 改如何验证</p>\n<p>使用 Shiro 提供的加密功能，对输入的密码进行加密之后再进行认证</p>\n<h3 id=\"shiro使用加密认证\"><a class=\"anchor\" href=\"#shiro使用加密认证\">#</a> Shiro 使用加密认证</h3>\n<blockquote>\n<p>配置 Shiro</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">at<span class=\"token punctuation\">.</span>pollux<span class=\"token punctuation\">.</span>thymeleaf<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>dialect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroDialect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashedCredentialsMatcher</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JdbcRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShiroConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HashedCredentialsMatcher</span> <span class=\"token function\">getHashedCredentialsMatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">HashedCredentialsMatcher</span> matcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashedCredentialsMatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//matcher 就是用来指定加密规则</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        matcher<span class=\"token punctuation\">.</span><span class=\"token function\">setHashAlgorithmName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"md5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//hash 次数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        matcher<span class=\"token punctuation\">.</span><span class=\"token function\">setHashIterations</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 次数循环次数要与用户注册时密码加密次数一致</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> matcher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 自定义 Realm</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyRealm</span> <span class=\"token function\">getMyRealm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HashedCredentialsMatcher</span> matcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">MyRealm</span> realm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        realm<span class=\"token punctuation\">.</span><span class=\"token function\">setCredentialsMatcher</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> realm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"用户注册密码加密处理\"><a class=\"anchor\" href=\"#用户注册密码加密处理\">#</a> 用户注册密码加密处理</h3>\n<blockquote>\n<p>register.html</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/register<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>注册<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>UserController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Md5Hash</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserServiceImpl</span> userService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/register\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注册\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 注册的时候要对密码进行加密存储</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Md5Hash</span> md5Hash <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Md5Hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>md5Hash<span class=\"token punctuation\">.</span><span class=\"token function\">toHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 加盐加密</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">90000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10000-99999</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"salt:\"</span><span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Md5Hash</span> md5Hash2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Md5Hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span>num<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>md5Hash2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 加盐加密 + 多次 hash</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Md5Hash</span> md5Hash3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Md5Hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span>num<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>md5Hash3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 将用户信息保存到数据库时，保存加密后的米，如果生成的随机盐，盐也要保存</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"如果密码进行了加密处理则realm再但会认证数据时需要返回盐\"><a class=\"anchor\" href=\"#如果密码进行了加密处理则realm再但会认证数据时需要返回盐\">#</a> 如果密码进行了加密处理，则 Realm 再但会认证数据时需要返回盐</h3>\n<blockquote>\n<p>MyRealm.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PermissionDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RoleDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleAuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizingRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrincipalCollection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ByteSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>* 1. 创建一个继承 AuthorizingRealm 类（实现 Realm 接口的类）</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>* 2. 重新 doGetAuthorizationInfo 和 doGetAuthenticationInfo 方法</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>* 3. 重新 getName 方法</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRealm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizingRealm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">RoleDao</span> roleDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">PermissionDao</span> permissionDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    * 获取认证数据（从数据库查询的用户的正确数据）</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    * @param authenticationToken</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    * @return</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    * @throws AuthenticationException</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationInfo</span> <span class=\"token function\">doGetAuthenticationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationToken</span> authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       <span class=\"token comment\">// 参数 authenticationToken 就是传递的 subject.login (token)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>       <span class=\"token comment\">// 从 token 获取用户名</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>       <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>       <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>       <span class=\"token comment\">// 根据用户名，从数据库查询当前用户的安全数据</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>       <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">queryUserByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>           <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>       <span class=\"token comment\">/*AuthenticationInfo info = new SimpleAuthenticationInfo (</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>               username,   // 当前用户名</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>               user.getPassword (),  // 从数据库查询出来的安全密码</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>               getName ());*/</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>       <span class=\"token comment\">// 如果数据库是加了盐的</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>       <span class=\"token class-name\">AuthenticationInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthenticationInfo</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>               username<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 当前用户名</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>               user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 从数据库查询出来的安全密码</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>               <span class=\"token class-name\">ByteSource</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">bytes</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getPwdSalt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>               <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>       <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"退出登录\"><a class=\"anchor\" href=\"#退出登录\">#</a> 退出登录</h2>\n<p>在 shiro 过滤器中进行配置，配置 logOut 对应的路径</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/exit\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"logout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在页面的退出按钮上，跳转到 exit 对应的 url</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>exit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>退出<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"授权\"><a class=\"anchor\" href=\"#授权\">#</a> 授权</h2>\n<blockquote>\n<p>用户登录成功之后，要进行的操作就需要有对应的权限，在进行操作之前对权限进行检查 — 授权</p>\n<p>权限控制通常有两种做法：</p>\n<ul>\n<li>不同身份的用户登录，我们显示不同的操作菜单（没有权限的菜单不显示）</li>\n<li>对所有用户显示所有菜单，当用户点击菜单以后再验证当前用户是否有次权限，如果没有则提示权限不足</li>\n</ul>\n</blockquote>\n<h3 id=\"html授权\"><a class=\"anchor\" href=\"#html授权\">#</a> html 授权</h3>\n<blockquote>\n<p>在菜单页面只显示当前用户拥有权限操作的菜单</p>\n<p>shiro 标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:c:save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c_add.html<span class=\"token punctuation\">\"</span></span>  <span class=\"token punctuation\">></span></span>入库<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"过滤器授权\"><a class=\"anchor\" href=\"#过滤器授权\">#</a> 过滤器授权</h3>\n<blockquote>\n<p>在 shiro 过滤器中请求的 url 进行权限设置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/c_add.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"perms[sys:c:save]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 设置未授权的访问路径</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>filter<span class=\"token punctuation\">.</span><span class=\"token function\">setUnauthorizedUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/lesspermission.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"注解授权\"><a class=\"anchor\" href=\"#注解授权\">#</a> 注解授权</h3>\n<blockquote>\n<p>配置 Spring 对 Shiro 的支持，ShiroConfig.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultAdvisorAutoProxyCreator</span> <span class=\"token function\">getAdvisorAutoProxyCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DefaultAdvisorAutoProxyCreator</span> autoProxyCreator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultAdvisorAutoProxyCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    autoProxyCreator<span class=\"token punctuation\">.</span><span class=\"token function\">setProxyTargetClass</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> autoProxyCreator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">AuthorizationAttributeSourceAdvisor</span> <span class=\"token function\">getAuthorizationAttributeSourceAdvisor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">AuthorizationAttributeSourceAdvisor</span> advisor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthorizationAttributeSourceAdvisor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    advisor<span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityManager</span><span class=\"token punctuation\">(</span>securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> advisor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在请求的控制器添加权限注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequiresPermissions</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/customer\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/list\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 如果没有 sys:k:find 的权限，则不需要执行此方法</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequiresPermissions</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sys:k:find\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"customer_list\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过全局异常处理，指定权限不足时的页面跳转</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>utils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizationException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ControllerAdvice</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExceptionHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@ControllerAdvice</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionhandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AuthorizationException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"lesspermission\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"手动授权\"><a class=\"anchor\" href=\"#手动授权\">#</a> 手动授权</h3>\n<blockquote>\n<p>在代码中进行手动的权限校验</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">isPermitted</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sys:k:find\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"customer_list\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"lesspermission\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"缓存使用\"><a class=\"anchor\" href=\"#缓存使用\">#</a> 缓存使用</h2>\n<blockquote>\n<p>使用 Shiro 进行权限管理过程中，每次授权都会访问 realm 中的 doGetAuthenticationInfo 方法查询当前用户的角色及权限信息，如果系统的用户量比较大则会对数据库造成比较大的压力</p>\n<p>Shiro 支持缓存以降低对数据库的访问压力（缓存的时授权信息）</p>\n</blockquote>\n<h3 id=\"缓存的使用\"><a class=\"anchor\" href=\"#缓存的使用\">#</a> 缓存的使用</h3>\n<blockquote>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-cache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>net.sf.ehcache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>ehcache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>shiro-ehcache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"配置缓存策略\"><a class=\"anchor\" href=\"#配置缓存策略\">#</a> 配置缓存策略</h3>\n<blockquote>\n<ul>\n<li>\n<p>在 resources 目录下创建一个 xml 文件，ehcache.xml</p>\n</li>\n<li>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ehcache</span> <span class=\"token attr-name\">updateCheck</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dynamicConfig</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>diskStore</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>C:\\TEMP<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cache</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">timeToLiveSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxEntriesLocalHeap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defaultCache</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>defaultCache<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  <span class=\"token attr-name\">maxElementsInMemory</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10000<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                  <span class=\"token attr-name\">eternal</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                  <span class=\"token attr-name\">timeToIdleSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                  <span class=\"token attr-name\">timeToLiveSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                  <span class=\"token attr-name\">overflowToDisk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                  <span class=\"token attr-name\">maxElementsOnDisk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100000<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                  <span class=\"token attr-name\">diskPersistent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                  <span class=\"token attr-name\">diskExpiryThreadIntervalSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                  <span class=\"token attr-name\">memoryStoreEvictionPolicy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LRU<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 缓存淘汰策略：当缓存空间比较紧张时，我们要存储新的数据进来，就必然删除一些老的数据</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        LRU 最近最少使用</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        FIFO 先进先出</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        LFU 最少使用</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ehcache</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<h3 id=\"加入缓存\"><a class=\"anchor\" href=\"#加入缓存\">#</a> 加入缓存</h3>\n<blockquote>\n<p>ShiroConfig</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">EhCacheManager</span> <span class=\"token function\">getEhCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">EhCacheManager</span> ehCacheManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EhCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ehCacheManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheManagerConfigFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpth:ehcache.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> ehCacheManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyRealm</span> realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEhCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"session管理\"><a class=\"anchor\" href=\"#session管理\">#</a> session 管理</h2>\n<blockquote>\n<p>Shiro 进行认证和授权时基于 session</p>\n</blockquote>\n<p>如果我们需要对 session 进行管理</p>\n<ul>\n<li>自定义 session 管理器</li>\n<li>将自定义的 session 管理器设置给 SecurityManager</li>\n</ul>\n<p>配置自定义 SessionManager：ShiroConfig.java</p>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSessionManager</span> <span class=\"token function\">getDefaultWebSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">DefaultWebSessionManager</span> sessionManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sessionManager<span class=\"token punctuation\">.</span><span class=\"token function\">getGlobalSessionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1800000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 配置 sessionManager</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   sessionManager<span class=\"token punctuation\">.</span><span class=\"token function\">setGlobalSessionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">return</span> sessionManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyRealm</span> realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 设置缓存</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEhCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 设置 session</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDefaultWebSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"rememberme\"><a class=\"anchor\" href=\"#rememberme\">#</a> RememberMe</h2>\n<blockquote>\n<p>将用户对页面的访问权限分为三个级别</p>\n<ul>\n<li>未认证 — 可访问的页面\n<ul>\n<li>login.html、register.html</li>\n</ul>\n</li>\n<li>曾认证 — 可访问的页面\n<ul>\n<li>info.html</li>\n</ul>\n</li>\n<li>已认证 — 可访问的页面\n<ul>\n<li>转账.html</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"在过滤器中设置记住我可访问的url\"><a class=\"anchor\" href=\"#在过滤器中设置记住我可访问的url\">#</a> 在过滤器中设置 “记住我” 可访问的 url</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//anon  匿名用户可访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">//authc 认证用户可访问</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//user  使用 RememberMe 的用户可访问</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//perms 对应权限可访问   </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">//logout 退出指定的 url</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> filterMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//        filterMap.put(\"/index.html\",\"anon\");</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/register.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/register\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/static/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"authc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  \t\tfilterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/c_add.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"perms[sys:c:save]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/exit\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"logout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"在shiroconfigjava中配置基于cookie的rememberme管理器\"><a class=\"anchor\" href=\"#在shiroconfigjava中配置基于cookie的rememberme管理器\">#</a> 在 ShiroConfig.java 中配置基于 Cookie 的 rememberMe 管理器</h3>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">CookieRememberMeManager</span> <span class=\"token function\">getCookieRememberMeManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">CookieRememberMeManager</span> rememberMeManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CookieRememberMeManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//cookie 必须设置 name</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">SimpleCookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rememberMe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    rememberMeManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> rememberMeManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyRealm</span> realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 设置缓存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEhCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 设置 session</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDefaultWebSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 设置 rememberMe 管理器</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRememberMeManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCookieRememberMeManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"登录认证时设置token记住我\"><a class=\"anchor\" href=\"#登录认证时设置token记住我\">#</a> 登录认证时设置 token “记住我”</h3>\n<blockquote>\n<p>登录页面</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>记住我：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rememberMe<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>登录<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>控制器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Md5Hash</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserServiceImpl</span> userService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">,</span><span class=\"token keyword\">boolean</span> rememberMe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            userService<span class=\"token punctuation\">.</span><span class=\"token function\">checkLogin</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span>rememberMe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>service</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkLogin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> rememberMe<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>           <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           token<span class=\"token punctuation\">.</span><span class=\"token function\">setRememberMe</span><span class=\"token punctuation\">(</span>rememberMe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           subject<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"shiro多realm配置\"><a class=\"anchor\" href=\"#shiro多realm配置\">#</a> Shiro 多 Realm 配置</h2>\n<h3 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h3>\n<blockquote>\n<p>当 Shiro 进行权限管理，数据来自不同的数据源时，我们可以给 SecurityManager 配置多个 Realm</p>\n</blockquote>\n<h3 id=\"多个realm的处理方式\"><a class=\"anchor\" href=\"#多个realm的处理方式\">#</a> 多个 Realm 的处理方式</h3>\n<blockquote>\n<p>1. 链式处理</p>\n<ul>\n<li>多个 Realm 一次进行认证</li>\n</ul>\n<p>2. 分支处理</p>\n<ul>\n<li>根据不同的条件从多个 Realm 中选择一个进行认证处理</li>\n</ul>\n</blockquote>\n<h3 id=\"多realm配置链式处理\"><a class=\"anchor\" href=\"#多realm配置链式处理\">#</a> 多 Realm 配置（链式处理）</h3>\n<p>定义多个 Realm</p>\n<blockquote>\n<p>UserRealm.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizingRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrincipalCollection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRealm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizingRealm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"UserRealm\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthorizationInfo</span> <span class=\"token function\">doGetAuthorizationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrincipalCollection</span> principalCollection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationInfo</span> <span class=\"token function\">doGetAuthenticationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationToken</span> authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------UserRealm--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">SimpleAuthenticationInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthenticationInfo</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ManagerRealm.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizingRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrincipalCollection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ManagerRealm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizingRealm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"ManagerRealm\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthorizationInfo</span> <span class=\"token function\">doGetAuthorizationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrincipalCollection</span> principalCollection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationInfo</span> <span class=\"token function\">doGetAuthenticationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationToken</span> authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------ManagerRealm--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">SimpleAuthenticationInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthenticationInfo</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span><span class=\"token string\">\"222222\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<p>在 ShiroConfig.java 中为 Securitymanager 配置多个 Realm</p>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ManagerRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShiroConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRealm</span> <span class=\"token function\">getUserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ManagerRealm</span> <span class=\"token function\">getManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">></span></span> realms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        realms<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        realms<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealms</span><span class=\"token punctuation\">(</span>realms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//....</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<p>测试代码</p>\n<blockquote>\n<p>login.html</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>登录<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>UserController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----UserController---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          subject<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"多realm配置分支处理\"><a class=\"anchor\" href=\"#多realm配置分支处理\">#</a> 多 Realm 配置（分支处理）</h3>\n<blockquote>\n<p>根据不同的条件执行不同的 Realm</p>\n</blockquote>\n<p>实现 案例：用户不同身份登录执行不同的 Realm</p>\n<blockquote>\n<p>自定义 Realm（UserRealm、ManagerRealm）</p>\n<ul>\n<li>当登录页面选择 “普通用户” 登录，则执行 UserRealm 的认证</li>\n<li>当登录页面选择 “管理员” 登录，则执行 ManagerRealm 的认证</li>\n</ul>\n<p>Realm 的声明及配置</p>\n<p>自定义 Token</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyToken</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UsernamePasswordToken</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> loginType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> loginType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loginType <span class=\"token operator\">=</span> loginType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLoginType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> loginType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLoginType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> loginType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loginType <span class=\"token operator\">=</span> loginType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自定义认证器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthenticationException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthenticationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthenticationToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span>pam<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModularRealmAuthenticator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MymodularRealmAuthenticator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ModularRealmAuthenticator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationInfo</span> <span class=\"token function\">doAuthenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationToken</span> authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----MymodularRealmAuthenticator---------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">></span></span> realms <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">MyToken</span> myToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyToken</span><span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> loginType <span class=\"token operator\">=</span> myToken<span class=\"token punctuation\">.</span><span class=\"token function\">getLoginType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------loginType:\"</span><span class=\"token operator\">+</span>loginType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">></span></span> typeRealms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Realm</span> realm <span class=\"token operator\">:</span> realms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>loginType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                typeRealms<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeRealms<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSingleRealmAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">)</span> \t\t\t\ttypeRealms<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>authenticationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doMultiRealmAuthentication</span><span class=\"token punctuation\">(</span>typeRealms<span class=\"token punctuation\">,</span>authenticationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置自定义认证器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ManagerRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShiroConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRealm</span> <span class=\"token function\">getUserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ManagerRealm</span> <span class=\"token function\">getManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MymodularRealmAuthenticator</span> <span class=\"token function\">getMymodularRealmAuthenticator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MymodularRealmAuthenticator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 配置自定义认证器 (防在 realms 设置之前)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticator</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMymodularRealmAuthenticator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">></span></span> realms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        realms<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        realms<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealms</span><span class=\"token punctuation\">(</span>realms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> \t<span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n","site":{"data":{}},"length":38538,"excerpt":"","more":"<h2 id=\"权限管理\"><a class=\"anchor\" href=\"#权限管理\">#</a> 权限管理</h2>\n<p>1. 什么是权限管理？</p>\n<blockquote>\n<p>不同身份的用户进入到系统中能够完成的操作是不同的，我们对于不同的用户进行的可执行的操作的管理称之为权限管理。</p>\n</blockquote>\n<h2 id=\"shiro简介\"><a class=\"anchor\" href=\"#shiro简介\">#</a> Shiro 简介</h2>\n<h3 id=\"认证授权流程\"><a class=\"anchor\" href=\"#认证授权流程\">#</a> 认证授权流程</h3>\n<blockquote>\n<p>认证：对用户的身份进行检查（登录验证）</p>\n<p>授权：对用户的权限进行检查（是否有对应的操作权限）</p>\n</blockquote>\n<h3 id=\"安全框架\"><a class=\"anchor\" href=\"#安全框架\">#</a> 安全框架</h3>\n<blockquote>\n<p>帮助我们完成用户身份认证及权限检查功能框架</p>\n<p>常用的安全框架</p>\n<ul>\n<li>Shrio：Apache Shiro 是一个功能强大并且易用的 Java 安全框架（小而简单）</li>\n<li>spring Security：基于 Spring 的一个安全框架，依赖于 Spring</li>\n<li>OAuth2：第三方授权登录</li>\n<li>自定义安全认证中心</li>\n</ul>\n</blockquote>\n<h3 id=\"shiro\"><a class=\"anchor\" href=\"#shiro\">#</a> Shiro</h3>\n<blockquote>\n<ul>\n<li>\n<p>Apache Shiro 是一个功能强大并且易用的 Java 安全框架</p>\n</li>\n<li>\n<p>可以完成用户认证、授权、密码以及会话管理</p>\n</li>\n<li>\n<p>可以在任何应用系统中使用（主要针对于单体项目的权限管理）</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"shiro的工作原理\"><a class=\"anchor\" href=\"#shiro的工作原理\">#</a> Shiro 的工作原理</h2>\n<h3 id=\"shiro的核心功能\"><a class=\"anchor\" href=\"#shiro的核心功能\">#</a> Shiro 的核心功能</h3>\n<blockquote>\n<p>Authentication：认证，验证用户是否有相应的身份 - 登录验证；</p>\n<p>Authorization：授权，即权限验证；对已经通过的用户检查是否具有某个权限或者角色，从而控制是否能进行某种操作</p>\n<p>Session Management：会话管理，用户在认证成功之后创建会话，在没有退出之前，之前用户的所有信息都将会保存在这个会话中，可以是普通的 JavaSE 应用，也可以是 Web 应用；</p>\n<p>Cryptography：加密，对敏感信息进行加密处理，shiro 就提供这种加密机制；</p>\n<p>支持的特性：</p>\n<ul>\n<li>Web Support - Shiro 提供 l 过滤器，可以通过过滤器拦截 Web 请求处理 web 应用的访问控制</li>\n<li>Caching 缓存支持，shiro 可以缓存用户信息以及用户的角色授权信息，可以提高执行效率</li>\n<li>Concurrency shiro 支持多线程应用</li>\n<li>Testing 提供测试支持</li>\n<li>Run As 允许一个用户以另一种身份去访问</li>\n<li>Remember me</li>\n</ul>\n<p>说明：Shiro 是一个安全框架，不提供用户以及权限的维护（用户权限的权限管理需要我们自己去设计）</p>\n</blockquote>\n<h3 id=\"shiro核心组件\"><a class=\"anchor\" href=\"#shiro核心组件\">#</a> Shiro 核心组件</h3>\n<p><img data-src=\"Shiro.assets/shiro.jpg\" alt=\"shiro\" /></p>\n<p>Shiro 三大核心组件：Subject、Security Manager、Realms</p>\n<blockquote>\n<ul>\n<li>Subject，表示待认证和授权的用户</li>\n<li>Security Manager，他是 Shiro 框架的核心，Shiro 就是通过 Security Manger 来进行内部实例的管理，并通过它来提供安全框架的各种服务</li>\n<li>Authenticator，认证器</li>\n<li>Anthorizer，授权器</li>\n<li>SessionManager，会话管理器</li>\n<li>CacheManager，缓存管理器</li>\n<li>Realms，相当于 Shiro 进行认证授权的数据源，充当了 Shiro 与安全数据之间的 “桥梁” 或者 “连接器”，也就是说，当用户进行认证（登录）和授权（访问控制）验证时，Shiro 会用应用配置的 Realm 中查找用户以及权限信息</li>\n</ul>\n</blockquote>\n<h2 id=\"基于javase应用\"><a class=\"anchor\" href=\"#基于javase应用\">#</a> 基于 JavaSE 应用</h2>\n<h3 id=\"创建maven项目\"><a class=\"anchor\" href=\"#创建maven项目\">#</a> 创建 Maven 项目</h3>\n<h3 id=\"导入shiro依赖\"><a class=\"anchor\" href=\"#导入shiro依赖\">#</a> 导入 Shiro 依赖</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>shiro-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"创建shiro配置文件\"><a class=\"anchor\" href=\"#创建shiro配置文件\">#</a> 创建 Shiro 配置文件</h3>\n<blockquote>\n<p>在 resource 目录下创建名为 shiro.ini 的文件</p>\n<p>在文件中完成用户角色以及权限的配置</p>\n</blockquote>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">[users]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token constant\">zhangsan</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>123456,seller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">lisi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>123456,ckmanager</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token constant\">admin</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>222222,admin</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token selector\">[roles]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">admin</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>*</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token constant\">seller</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>order-add,order-del,order-list</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token constant\">ckmanager</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>ck-add,ck-del,ck-list</span></pre></td></tr></table></figure><p>Shiro 的基本使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hu<span class=\"token punctuation\">.</span>shiro</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestShiro</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入账号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入密码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token comment\">//1. 创建安全管理器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token class-name\">DefaultSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token comment\">//2. 创建 realm</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       <span class=\"token class-name\">IniRealm</span> iniRealm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:shiro.ini\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token comment\">//3. 将 realm 设置给安全管理器</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>       securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>iniRealm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token comment\">//4. 将 realm 设置给 SecurityUtils 工具</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityManager</span><span class=\"token punctuation\">(</span>securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token comment\">//5. 通过 SecurityUtils 工具过去 Subject 对象</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token comment\">// 认证流程</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token comment\">//1. 将认证账号密码封装到 token 对象中</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token comment\">//2. 通过 subject 对象调用 login 方法进行认证申请</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>           subject<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>           flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>           flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">?</span><span class=\"token string\">\"登录成功\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>       <span class=\"token comment\">// 授权</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       <span class=\"token comment\">// 判断是否有某个角色</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seller\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>       <span class=\"token comment\">// 判断是否有某个权限</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">isPermitted</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order-del\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"shiro认证流程\"><a class=\"anchor\" href=\"#shiro认证流程\">#</a> Shiro 认证流程</h3>\n<blockquote>\n<p>1. 通过 subject.login (token) 进行登录验证，就会将 token 包含的用户信息（账号和密码）传递给 SecurityManager</p>\n<p>2.SecurityManger 将会调用 Authenticator 进行身份验证</p>\n<p>3.Authenticator 把 token 传递给对应的 Realm</p>\n<p>4.Realm 根据得到的 token，调用 doGetAuthenticationInfo 方法进行认证（如果认证失败通过抛出异常提示认证器）</p>\n<p>5. 将认证结果一层一层的返回到 subject（如果 subject.login 抛出异常则表示认证失败 ）</p>\n</blockquote>\n<h2 id=\"springboot应用整合shiro\"><a class=\"anchor\" href=\"#springboot应用整合shiro\">#</a> SpringBoot 应用整合 Shiro</h2>\n<h3 id=\"创建springboot应用\"><a class=\"anchor\" href=\"#创建springboot应用\">#</a> 创建 SpringBoot 应用</h3>\n<blockquote>\n<p>lombok</p>\n<p>spring web</p>\n<p>thymeleaf</p>\n</blockquote>\n<h3 id=\"整合druid和mybatis\"><a class=\"anchor\" href=\"#整合druid和mybatis\">#</a> 整合 Druid 和 Mybatis</h3>\n<p>依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--druid--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!--mysql--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.20<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">&lt;!--mybatis--></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.spring.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>配置</p>\n<blockquote>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token key atrule\">druid</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/user</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.jdbc.Driver</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token key atrule\">initial-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token key atrule\">min-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token key atrule\">max-active</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">mybatis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token key atrule\">mapper-locations</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>mapper/<span class=\"token important\">*.xml</span></pre></td></tr></table></figure></blockquote>\n<p>3. 整合 Shiro</p>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--shiro--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>shiro-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>配置</p>\n<blockquote>\n<p>SpringBoot 默认没有提供 Shiro 的自动配置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShiroConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IniRealm</span> <span class=\"token function\">getIniRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">IniRealm</span> iniRealm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:shiro.ini\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> iniRealm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IniRealm</span> iniRealm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>iniRealm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShiroFilterFactoryBean</span> <span class=\"token function\">shiroFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">ShiroFilterFactoryBean</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 过滤器就是 Shiro 进行权限校验的核心，进行认证和授权是需要 SecurityManager 的</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityManager</span><span class=\"token punctuation\">(</span>securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 设置 shiro 的拦截规则</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//anon  匿名用户可访问</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">//authc 认证用户可访问</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//user  使用 RememberMe 的用户可访问</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//perms 对应权限可访问</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">//role  对应角色可访问</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> filterMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/static/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"authc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setFilterChainDefinitionMap</span><span class=\"token punctuation\">(</span>filterMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setLoginUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 设置未授权的访问路径</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setUnauthorizedUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>       <span class=\"token keyword\">return</span> filter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>认证测试</p>\n<ul>\n<li>\n<p>UserServiceImpl.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkLogin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        subject<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>UserController</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserServiceImpl</span> userService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            userService<span class=\"token punctuation\">.</span><span class=\"token function\">checkLogin</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>login.html</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>登录<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"springboot应用整合shiro-案例jdbcrealm\"><a class=\"anchor\" href=\"#springboot应用整合shiro-案例jdbcrealm\">#</a> SpringBoot 应用整合 Shiro - 案例（JdbcRealm）</h2>\n<h3 id=\"jdbcrealm介绍\"><a class=\"anchor\" href=\"#jdbcrealm介绍\">#</a> JdbcRealm 介绍</h3>\n<blockquote>\n<p>如果使用 JdbcRealm，则必须提供 JdbcRealm 所需的表结构（权限设计）</p>\n</blockquote>\n<h3 id=\"jdbcrealm规定的表结构\"><a class=\"anchor\" href=\"#jdbcrealm规定的表结构\">#</a> JdbcRealm 规定的表结构</h3>\n<blockquote>\n<pre><code class=\"language-mysql\">-- 创建用户表\ncreate table users(\n\tid int primary key auto_increment,\n   username varchar(20) not null unique,\n   password varchar(20) not null,\n   password_salt varchar(20)\n);\ninsert into users(username,password) values('zhangsan','123456');\ninsert into users(username,password) values('lisi','123456');\ninsert into users(username,password) values('wangwu','123456');\ninsert into users(username,password) values('zhaoliu','123456');\ninsert into users(username,password) values('chengqi','123456');\n\n-- 用户角色表\ncreate table user_roles(\n\tid int primary key auto_increment,\n   username varchar(60) not null,\n   role_name varchar(100) not null\n);\n\n-- admin 系统管理员\n-- cmanager 仓库人员\n-- xmanager 销售人员\n-- kmanager 客服人员\n-- zmanager 行政人员\n\ninsert into user_roles(username,role_name) values('zhangsan','admin');\ninsert into user_roles(username,role_name) values('lisi','cmanager');\ninsert into user_roles(username,role_name) values('wangwu','xmanager');\ninsert into user_roles(username,role_name) values('zhaoliu','kmanager');\ninsert into user_roles(username,role_name) values('chengqi','zmanager');\n\n-- 角色权限表\ncreate table roles_permissions(\n\tid int primary key auto_increment,\n   role_name varchar(100) not null,\n   permission varchar(100) not null\n);\n\n-- 管理员\ninsert into roles_permissions(role_name,permission) values('admin','*');\n-- 仓库人员\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:save');\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:delete');\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:update');\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:find');\n-- 销售人员\ninsert into roles_permissions(role_name,permission) values('xmanager','sys:x:save');\ninsert into roles_permissions(role_name,permission) values('xmanager','sys:x:delete');\ninsert into roles_permissions(role_name,permission) values('xmanager','sys:x:update');\ninsert into roles_permissions(role_name,permission) values('xmanager','sys:x:find');\n-- 客服人员\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:update');\ninsert into roles_permissions(role_name,permission) values('cmanager','sys:c:find');\n-- 行政人员\ninsert into roles_permissions(role_name,permission) values('zmanager','sys:z:find');\n</code></pre>\n</blockquote>\n<h3 id=\"springboot整合shiro\"><a class=\"anchor\" href=\"#springboot整合shiro\">#</a> Springboot 整合 Shiro</h3>\n<blockquote>\n<p>创建 Springboot 应用</p>\n<p>整合 Druid 和 Mybatis</p>\n<p>整合 Shiro</p>\n<ul>\n<li>\n<p>添加依赖</p>\n</li>\n<li>\n<p>配置 shiro</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JdbcRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShiroConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JdbcRealm</span> <span class=\"token function\">getJdbcRealm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">JdbcRealm</span> jdbcRealm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//JdbcRealm 会自动从数据查询用户及权限数据（数据库的表结构要符合 JdbcRealm 的规范）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        jdbcRealm<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//JdbcRealm 默认开启认证功能，需要手动开启授权功能</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        jdbcRealm<span class=\"token punctuation\">.</span><span class=\"token function\">setPermissionsLookupEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> jdbcRealm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JdbcRealm</span> jdbcRealm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>jdbcRealm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ShiroFilterFactoryBean</span> <span class=\"token function\">shiroFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">ShiroFilterFactoryBean</span> filter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 过滤器就是 Shiro 进行权限校验的核心，进行认证和授权是需要 SecurityManager 的</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityManager</span><span class=\"token punctuation\">(</span>securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 设置 shiro 的拦截规则</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">//anon  匿名用户可访问</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">//authc 认证用户可访问</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">//user  使用 RememberMe 的用户可访问</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">//perms 对应权限可访问</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">//role  对应角色可访问</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> filterMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/static/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"authc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setFilterChainDefinitionMap</span><span class=\"token punctuation\">(</span>filterMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">//filter.setLoginUrl(\"/\");</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 设置未授权的访问路径</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        filter<span class=\"token punctuation\">.</span><span class=\"token function\">setUnauthorizedUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> filter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<p>七、Shiro 的标签使用</p>\n<blockquote>\n<p>当用户认证进入到主页之后，需要显示用户信息以及当前用户的权限信息，Shiro 就提供了一套标签用于页面来进行权限数据的呈现</p>\n</blockquote>\n<p>Shiro 提供了可供 JSP 使用的标签以及 thymeleaf 中标签</p>\n<ul>\n<li>\n<p>JSP 页面引用：</p>\n<pre><code class=\"language-jsp\">&lt;%@ taglib prefix=&quot;shiro&quot; uri=&quot;http://shiro.apache.org/tags&quot; %&gt;\n</code></pre>\n</li>\n<li>\n<p>thymeleaf 模板中引用</p>\n<p>在 pom.xml 文件中导入 thymeleaf 模板对 shiro 标签支持的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.github.theborakompanioni<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>thymeleaf-extras-shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在 ShiroConfig 配置 Shiro 的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ShiroDialect</span> <span class=\"token function\">getShiroDialect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShiroDialect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>thymeleaf 模板中引入 Shiro 的命名空间</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>th</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.thymeleaf.org<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>shiro</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.pollix.at/thymeleaf/shiro <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>常用标签</p>\n<blockquote>\n<p>guest，判断用户是否是游客身份，如果是游客身份则显示此标签内容</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>guest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   欢迎游客访问，<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>guest</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>user，判断用户是否是认证身份，如果是认证身份则显示此标签内容</p>\n<p>principal，获取当前登录用户名</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>user</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   用户[<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>principal</span><span class=\"token punctuation\">/></span></span>]欢迎您！</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>user</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>noAuthenticated/authenticated</p>\n<p>hasRole</p>\n<p>hasPermission</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>th</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.thymeleaf.org<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>shiro</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.pollix.at/thymeleaf/shiro <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   index</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>guest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       欢迎游客访问，<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>guest</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>user</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       用户[<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>principal</span><span class=\"token punctuation\">/></span></span>]欢迎您！</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       当前用户为<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasRole</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>admin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>超级管理员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasRole</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasRole</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cmanager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>仓库人员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasRole</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasRole</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xmanager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>销售人员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasRole</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasRole</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>kmanager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>客服人员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasRole</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasRole</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zmanager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>行政人员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasRole</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>user</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   仓库管理</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:c:save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>入库<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:c:delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>出库<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:c:update<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:c:find<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查询<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   订单管理</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:x:save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>添加订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:x:delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:x:update<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:x:find<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查询订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   客户管理</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:k:save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>添加客户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:k:delete<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除客户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:k:update<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改客户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:k:find<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查询客户<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></blockquote>\n</li>\n</ul>\n<h2 id=\"springboot整合shiro完成权限管理案例自定义realm\"><a class=\"anchor\" href=\"#springboot整合shiro完成权限管理案例自定义realm\">#</a> Springboot 整合 Shiro 完成权限管理案例 — 自定义 Realm</h2>\n<blockquote>\n<p>使用 JdbcRealm 可以完成用户权限管理，但是我们必须提供 Jdbc 规定的数据表结构，如果我们的项目开发中，这个 JdbcReal 规定的数据表结构不能满足开发需求，如何处理？</p>\n<ul>\n<li>自定义数据库表结构</li>\n<li>自定义 Realm 实现认证和授权</li>\n</ul>\n</blockquote>\n<h3 id=\"数据库设计\"><a class=\"anchor\" href=\"#数据库设计\">#</a> 数据库设计</h3>\n<blockquote>\n<pre><code class=\"language-mysql\">-- 用户信息表\ncreate table user(\n\tid int primary key auto_increment,\n\tusername varchar(60) not null unique,\n\tpassword varchar(20) not null,\n\tpassword_salt varchar(60)\n);\n\ninsert into user(username,password) values('zhangsan','123456');\ninsert into user(username,password) values('lisi','123456');\ninsert into user(username,password) values('wangwu','123456');\ninsert into user(username,password) values('zhaoliu','123456');\ninsert into user(username,password) values('chengqi','123456');\n\n-- 角色信息表\ncreate table role(\n\tid int primary key auto_increment,\n\tname varchar(60) not null\n);\n\ninsert into role(name) values('admin');\ninsert into role(name) values('cmanager');-- 仓库\ninsert into role(name) values('xmanager');-- 销售\ninsert into role(name) values('kmanager');-- 客服\ninsert into role(name) values('zmanager');-- 行政\n\n-- 权限信息表\ncreate table permission(\n\tid int primary key auto_increment,\n\t`code` varchar(60) not null,\n\tname varchar(60)\n);\n\ninsert into permission(code,name) values('sys:c:save','入库');\ninsert into permission(code,name) values('sys:c:delete','出库');\ninsert into permission(code,name) values('sys:c:update','修改');\ninsert into permission(code,name) values('sys:c:find','查询');\n\ninsert into permission(code,name) values('sys:x:save','新增订单');\ninsert into permission(code,name) values('sys:x:delete','删除订单');\ninsert into permission(code,name) values('sys:x:update','修改订单');\ninsert into permission(code,name) values('sys:x:find','查询订单');\n\ninsert into permission(code,name) values('sys:k:save','新增客户');\ninsert into permission(code,name) values('sys:k:delete','删除客户');\ninsert into permission(code,name) values('sys:k:update','修改客户');\ninsert into permission(code,name) values('sys:k:find','查询客户');\n\n\n-- 用户角色表\ncreate table user_role(\n\tuid int not null,\n\trid int not null\n-- \tprimary key(uid,rid),\n-- \tconstraint FK_user foreign key(uid) references user(id),\n-- \tconstraint FK_role foreign key(rid) references role(id),\n)\n\ninsert into user_role(uid,rid) values(1,1);\ninsert into user_role(uid,rid) values(1,2);\ninsert into user_role(uid,rid) values(1,3);\ninsert into user_role(uid,rid) values(1,4);\ninsert into user_role(uid,rid) values(1,5);\n\ninsert into user_role(uid,rid) values(2,2);\ninsert into user_role(uid,rid) values(3,3);\ninsert into user_role(uid,rid) values(4,4);\ninsert into user_role(uid,rid) values(5,5);\n\n-- 角色权限表\ncreate table role_permission(\n\trid int not null,\n\tpid int not null\n)\n-- 给仓库角色分配权限\ninsert into role_permission(rid,pid) values(2,1);\ninsert into role_permission(rid,pid) values(2,2);\ninsert into role_permission(rid,pid) values(2,3);\ninsert into role_permission(rid,pid) values(2,4);\n-- 给销售角色分配权限\ninsert into role_permission(rid,pid) values(3,5);\ninsert into role_permission(rid,pid) values(3,6);\ninsert into role_permission(rid,pid) values(3,7);\ninsert into role_permission(rid,pid) values(3,8);\ninsert into role_permission(rid,pid) values(3,9);\ninsert into role_permission(rid,pid) values(3,10);\ninsert into role_permission(rid,pid) values(3,11);\ninsert into role_permission(rid,pid) values(3,12);\n-- 给客服角色分配权限\ninsert into role_permission(rid,pid) values(4,11);\ninsert into role_permission(rid,pid) values(4,12);\n-- 给行政角色分配权限\ninsert into role_permission(rid,pid) values(5,4);\ninsert into role_permission(rid,pid) values(5,8);\ninsert into role_permission(rid,pid) values(5,12);\n</code></pre>\n</blockquote>\n<h3 id=\"dao实现\"><a class=\"anchor\" href=\"#dao实现\">#</a> DAO 实现</h3>\n<blockquote>\n<p>Shiro 进行认证需要用户信息</p>\n<ul>\n<li>根据用户名查询用户信息</li>\n</ul>\n<p>Shiro 进行授权管理需要当前用户的角色和权限</p>\n<ul>\n<li>根据用户名查询当前用户的角色列表（3 张表连接查询）</li>\n<li>根据用户名查询当前用户的权限列表（5 张表连接查询）</li>\n</ul>\n</blockquote>\n<h4 id=\"创建springboot项目整合mybatis\"><a class=\"anchor\" href=\"#创建springboot项目整合mybatis\">#</a> 创建 Springboot 项目，整合 Mybatis</h4>\n<h4 id=\"更具用户名查用户信息\"><a class=\"anchor\" href=\"#更具用户名查用户信息\">#</a> 更具用户名查用户信息</h4>\n<ul>\n<li>\n<p>创建 Bean</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pwdSalt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建 Dao</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">User</span> <span class=\"token function\">queryUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>映射配置</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password_salt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pwdSalt<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>queryUserByUsername<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    select * from user where username = #&#123;username&#125;;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"根据用户名查询角色名列表\"><a class=\"anchor\" href=\"#根据用户名查询角色名列表\">#</a> 根据用户名查询角色名列表</h4>\n<ul>\n<li>\n<p>创建 Dao</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RoleDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">queryRoleNameByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>映射配置</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>queryRoleNameByUsername<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultSets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.util.set<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>String<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SELECT r.name FROM `user` u</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LEFT JOIN user_role ur ON u.id = ur.uid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    LEFT JOIN role r ON ur.rid = r.id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    WHERE u.username = #&#123;username&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"整合shiro\"><a class=\"anchor\" href=\"#整合shiro\">#</a> 整合 Shiro</h3>\n<ul>\n<li>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.github.theborakompanioni<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>thymeleaf-extras-shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!--shiro--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>shiro-spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>配置 Shiro - 基于 Java 配置方式</p>\n</li>\n<li>\n<p>自定义 Realm</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PermissionDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RoleDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleAuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizingRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrincipalCollection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * 1. 创建一个继承 AuthorizingRealm 类（实现 Realm 接口的类）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * 2. 重新 doGetAuthorizationInfo 和 doGetAuthenticationInfo 方法</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * 3. 重新 getName 方法</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRealm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizingRealm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RoleDao</span> roleDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PermissionDao</span> permissionDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"myRealm\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 获取授权数据 (将当前用户的角色以及权限信息查询出来)</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @param principalCollection</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthorizationInfo</span> <span class=\"token function\">doGetAuthorizationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrincipalCollection</span> principalCollection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 获取用户的用户名</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> principalCollection<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 根据用户名查询当前用户角色列表</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> roleNames <span class=\"token operator\">=</span> roleDao<span class=\"token punctuation\">.</span><span class=\"token function\">queryRoleNameByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 根据用户名查询当前用户权限列表</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> permission <span class=\"token operator\">=</span> permissionDao<span class=\"token punctuation\">.</span><span class=\"token function\">queryPermissionByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">SimpleAuthorizationInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthorizationInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        info<span class=\"token punctuation\">.</span><span class=\"token function\">setRoles</span><span class=\"token punctuation\">(</span>roleNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        info<span class=\"token punctuation\">.</span><span class=\"token function\">setStringPermissions</span><span class=\"token punctuation\">(</span>permission<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     * 获取认证数据（从数据库查询的用户的正确数据）</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     * @param authenticationToken</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * @throws AuthenticationException</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationInfo</span> <span class=\"token function\">doGetAuthenticationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationToken</span> authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 参数 authenticationToken 就是传递的 subject.login (token)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 从 token 获取用户名</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 根据用户名，从数据库查询当前用户的安全数据</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">queryUserByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">AuthenticationInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthenticationInfo</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                username<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 当前用户名</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 从数据库查询出来的安全密码</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"加密\"><a class=\"anchor\" href=\"#加密\">#</a> 加密</h2>\n<h3 id=\"加密介绍\"><a class=\"anchor\" href=\"#加密介绍\">#</a> 加密介绍</h3>\n<blockquote>\n<p>明文 ——（加密规则）—— 密文</p>\n<p>加密规则可以自定义，在项目开发中我们通常使用 BASE64 和 MD5 编码方式</p>\n<ul>\n<li>\n<p>BASE64：可反编码的编码方式</p>\n<p>明文 —— 密文</p>\n<p>密文 —— 明文</p>\n</li>\n<li>\n<p>MD5：不可逆的编码方式（非对称）</p>\n<p>明文 —— 密文</p>\n</li>\n</ul>\n</blockquote>\n<p>如果数据库用户的密码存储的密文，Shiro 改如何验证</p>\n<p>使用 Shiro 提供的加密功能，对输入的密码进行加密之后再进行认证</p>\n<h3 id=\"shiro使用加密认证\"><a class=\"anchor\" href=\"#shiro使用加密认证\">#</a> Shiro 使用加密认证</h3>\n<blockquote>\n<p>配置 Shiro</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">at<span class=\"token punctuation\">.</span>pollux<span class=\"token punctuation\">.</span>thymeleaf<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>dialect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroDialect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span>credential<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashedCredentialsMatcher</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JdbcRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IniRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShiroConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HashedCredentialsMatcher</span> <span class=\"token function\">getHashedCredentialsMatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">HashedCredentialsMatcher</span> matcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashedCredentialsMatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//matcher 就是用来指定加密规则</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        matcher<span class=\"token punctuation\">.</span><span class=\"token function\">setHashAlgorithmName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"md5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//hash 次数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        matcher<span class=\"token punctuation\">.</span><span class=\"token function\">setHashIterations</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 次数循环次数要与用户注册时密码加密次数一致</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> matcher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 自定义 Realm</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyRealm</span> <span class=\"token function\">getMyRealm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HashedCredentialsMatcher</span> matcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">MyRealm</span> realm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        realm<span class=\"token punctuation\">.</span><span class=\"token function\">setCredentialsMatcher</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> realm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"用户注册密码加密处理\"><a class=\"anchor\" href=\"#用户注册密码加密处理\">#</a> 用户注册密码加密处理</h3>\n<blockquote>\n<p>register.html</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/register<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>注册<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>UserController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Md5Hash</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserServiceImpl</span> userService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/register\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注册\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 注册的时候要对密码进行加密存储</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Md5Hash</span> md5Hash <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Md5Hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>md5Hash<span class=\"token punctuation\">.</span><span class=\"token function\">toHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 加盐加密</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">90000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10000-99999</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"salt:\"</span><span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Md5Hash</span> md5Hash2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Md5Hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span>num<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>md5Hash2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 加盐加密 + 多次 hash</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Md5Hash</span> md5Hash3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Md5Hash</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span>num<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>md5Hash3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 将用户信息保存到数据库时，保存加密后的米，如果生成的随机盐，盐也要保存</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"如果密码进行了加密处理则realm再但会认证数据时需要返回盐\"><a class=\"anchor\" href=\"#如果密码进行了加密处理则realm再但会认证数据时需要返回盐\">#</a> 如果密码进行了加密处理，则 Realm 再但会认证数据时需要返回盐</h3>\n<blockquote>\n<p>MyRealm.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PermissionDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RoleDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleAuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizingRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrincipalCollection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ByteSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>* 1. 创建一个继承 AuthorizingRealm 类（实现 Realm 接口的类）</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>* 2. 重新 doGetAuthorizationInfo 和 doGetAuthenticationInfo 方法</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>* 3. 重新 getName 方法</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRealm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizingRealm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">RoleDao</span> roleDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">PermissionDao</span> permissionDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    * 获取认证数据（从数据库查询的用户的正确数据）</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    * @param authenticationToken</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    * @return</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    * @throws AuthenticationException</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationInfo</span> <span class=\"token function\">doGetAuthenticationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationToken</span> authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       <span class=\"token comment\">// 参数 authenticationToken 就是传递的 subject.login (token)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>       <span class=\"token comment\">// 从 token 获取用户名</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>       <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>       <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>       <span class=\"token comment\">// 根据用户名，从数据库查询当前用户的安全数据</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>       <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">queryUserByUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>           <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>       <span class=\"token comment\">/*AuthenticationInfo info = new SimpleAuthenticationInfo (</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>               username,   // 当前用户名</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>               user.getPassword (),  // 从数据库查询出来的安全密码</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>               getName ());*/</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>       <span class=\"token comment\">// 如果数据库是加了盐的</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>       <span class=\"token class-name\">AuthenticationInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthenticationInfo</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>               username<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 当前用户名</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>               user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 从数据库查询出来的安全密码</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>               <span class=\"token class-name\">ByteSource</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Util</span><span class=\"token punctuation\">.</span><span class=\"token function\">bytes</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getPwdSalt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>               <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>       <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"退出登录\"><a class=\"anchor\" href=\"#退出登录\">#</a> 退出登录</h2>\n<p>在 shiro 过滤器中进行配置，配置 logOut 对应的路径</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/exit\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"logout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在页面的退出按钮上，跳转到 exit 对应的 url</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>exit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>退出<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"授权\"><a class=\"anchor\" href=\"#授权\">#</a> 授权</h2>\n<blockquote>\n<p>用户登录成功之后，要进行的操作就需要有对应的权限，在进行操作之前对权限进行检查 — 授权</p>\n<p>权限控制通常有两种做法：</p>\n<ul>\n<li>不同身份的用户登录，我们显示不同的操作菜单（没有权限的菜单不显示）</li>\n<li>对所有用户显示所有菜单，当用户点击菜单以后再验证当前用户是否有次权限，如果没有则提示权限不足</li>\n</ul>\n</blockquote>\n<h3 id=\"html授权\"><a class=\"anchor\" href=\"#html授权\">#</a> html 授权</h3>\n<blockquote>\n<p>在菜单页面只显示当前用户拥有权限操作的菜单</p>\n<p>shiro 标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">shiro:</span>hasPermission</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sys:c:save<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c_add.html<span class=\"token punctuation\">\"</span></span>  <span class=\"token punctuation\">></span></span>入库<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">shiro:</span>hasPermission</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"过滤器授权\"><a class=\"anchor\" href=\"#过滤器授权\">#</a> 过滤器授权</h3>\n<blockquote>\n<p>在 shiro 过滤器中请求的 url 进行权限设置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/c_add.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"perms[sys:c:save]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 设置未授权的访问路径</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>filter<span class=\"token punctuation\">.</span><span class=\"token function\">setUnauthorizedUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/lesspermission.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"注解授权\"><a class=\"anchor\" href=\"#注解授权\">#</a> 注解授权</h3>\n<blockquote>\n<p>配置 Spring 对 Shiro 的支持，ShiroConfig.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultAdvisorAutoProxyCreator</span> <span class=\"token function\">getAdvisorAutoProxyCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DefaultAdvisorAutoProxyCreator</span> autoProxyCreator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultAdvisorAutoProxyCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    autoProxyCreator<span class=\"token punctuation\">.</span><span class=\"token function\">setProxyTargetClass</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> autoProxyCreator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">AuthorizationAttributeSourceAdvisor</span> <span class=\"token function\">getAuthorizationAttributeSourceAdvisor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">AuthorizationAttributeSourceAdvisor</span> advisor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthorizationAttributeSourceAdvisor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    advisor<span class=\"token punctuation\">.</span><span class=\"token function\">setSecurityManager</span><span class=\"token punctuation\">(</span>securityManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> advisor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在请求的控制器添加权限注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequiresPermissions</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/customer\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/list\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 如果没有 sys:k:find 的权限，则不需要执行此方法</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequiresPermissions</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sys:k:find\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"customer_list\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过全局异常处理，指定权限不足时的页面跳转</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>utils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizationException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ControllerAdvice</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExceptionHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@ControllerAdvice</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionhandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AuthorizationException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"lesspermission\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"手动授权\"><a class=\"anchor\" href=\"#手动授权\">#</a> 手动授权</h3>\n<blockquote>\n<p>在代码中进行手动的权限校验</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">isPermitted</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sys:k:find\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"customer_list\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"lesspermission\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"缓存使用\"><a class=\"anchor\" href=\"#缓存使用\">#</a> 缓存使用</h2>\n<blockquote>\n<p>使用 Shiro 进行权限管理过程中，每次授权都会访问 realm 中的 doGetAuthenticationInfo 方法查询当前用户的角色及权限信息，如果系统的用户量比较大则会对数据库造成比较大的压力</p>\n<p>Shiro 支持缓存以降低对数据库的访问压力（缓存的时授权信息）</p>\n</blockquote>\n<h3 id=\"缓存的使用\"><a class=\"anchor\" href=\"#缓存的使用\">#</a> 缓存的使用</h3>\n<blockquote>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-cache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>net.sf.ehcache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>ehcache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.shiro<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>shiro-ehcache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"配置缓存策略\"><a class=\"anchor\" href=\"#配置缓存策略\">#</a> 配置缓存策略</h3>\n<blockquote>\n<ul>\n<li>\n<p>在 resources 目录下创建一个 xml 文件，ehcache.xml</p>\n</li>\n<li>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ehcache</span> <span class=\"token attr-name\">updateCheck</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dynamicConfig</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>diskStore</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>C:\\TEMP<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cache</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">timeToLiveSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxEntriesLocalHeap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defaultCache</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>defaultCache<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  <span class=\"token attr-name\">maxElementsInMemory</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10000<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                  <span class=\"token attr-name\">eternal</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                  <span class=\"token attr-name\">timeToIdleSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                  <span class=\"token attr-name\">timeToLiveSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                  <span class=\"token attr-name\">overflowToDisk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                  <span class=\"token attr-name\">maxElementsOnDisk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100000<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                  <span class=\"token attr-name\">diskPersistent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                  <span class=\"token attr-name\">diskExpiryThreadIntervalSeconds</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                  <span class=\"token attr-name\">memoryStoreEvictionPolicy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LRU<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 缓存淘汰策略：当缓存空间比较紧张时，我们要存储新的数据进来，就必然删除一些老的数据</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        LRU 最近最少使用</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        FIFO 先进先出</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        LFU 最少使用</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ehcache</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n<h3 id=\"加入缓存\"><a class=\"anchor\" href=\"#加入缓存\">#</a> 加入缓存</h3>\n<blockquote>\n<p>ShiroConfig</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">EhCacheManager</span> <span class=\"token function\">getEhCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">EhCacheManager</span> ehCacheManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EhCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ehCacheManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheManagerConfigFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpth:ehcache.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> ehCacheManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyRealm</span> realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEhCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"session管理\"><a class=\"anchor\" href=\"#session管理\">#</a> session 管理</h2>\n<blockquote>\n<p>Shiro 进行认证和授权时基于 session</p>\n</blockquote>\n<p>如果我们需要对 session 进行管理</p>\n<ul>\n<li>自定义 session 管理器</li>\n<li>将自定义的 session 管理器设置给 SecurityManager</li>\n</ul>\n<p>配置自定义 SessionManager：ShiroConfig.java</p>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSessionManager</span> <span class=\"token function\">getDefaultWebSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">DefaultWebSessionManager</span> sessionManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sessionManager<span class=\"token punctuation\">.</span><span class=\"token function\">getGlobalSessionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1800000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 配置 sessionManager</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   sessionManager<span class=\"token punctuation\">.</span><span class=\"token function\">setGlobalSessionTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">return</span> sessionManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyRealm</span> realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 设置缓存</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEhCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 设置 session</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDefaultWebSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"rememberme\"><a class=\"anchor\" href=\"#rememberme\">#</a> RememberMe</h2>\n<blockquote>\n<p>将用户对页面的访问权限分为三个级别</p>\n<ul>\n<li>未认证 — 可访问的页面\n<ul>\n<li>login.html、register.html</li>\n</ul>\n</li>\n<li>曾认证 — 可访问的页面\n<ul>\n<li>info.html</li>\n</ul>\n</li>\n<li>已认证 — 可访问的页面\n<ul>\n<li>转账.html</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"在过滤器中设置记住我可访问的url\"><a class=\"anchor\" href=\"#在过滤器中设置记住我可访问的url\">#</a> 在过滤器中设置 “记住我” 可访问的 url</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//anon  匿名用户可访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">//authc 认证用户可访问</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//user  使用 RememberMe 的用户可访问</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//perms 对应权限可访问   </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">//logout 退出指定的 url</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> filterMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//        filterMap.put(\"/index.html\",\"anon\");</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/register.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/register\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/static/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"authc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  \t\tfilterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/c_add.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"perms[sys:c:save]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        filterMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/exit\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"logout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"在shiroconfigjava中配置基于cookie的rememberme管理器\"><a class=\"anchor\" href=\"#在shiroconfigjava中配置基于cookie的rememberme管理器\">#</a> 在 ShiroConfig.java 中配置基于 Cookie 的 rememberMe 管理器</h3>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">CookieRememberMeManager</span> <span class=\"token function\">getCookieRememberMeManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">CookieRememberMeManager</span> rememberMeManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CookieRememberMeManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//cookie 必须设置 name</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">SimpleCookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rememberMe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    rememberMeManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> rememberMeManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyRealm</span> realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealm</span><span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 设置缓存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEhCacheManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 设置 session</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDefaultWebSessionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 设置 rememberMe 管理器</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRememberMeManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCookieRememberMeManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"登录认证时设置token记住我\"><a class=\"anchor\" href=\"#登录认证时设置token记住我\">#</a> 登录认证时设置 token “记住我”</h3>\n<blockquote>\n<p>登录页面</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>记住我：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rememberMe<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>登录<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>控制器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Md5Hash</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserServiceImpl</span> userService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">,</span><span class=\"token keyword\">boolean</span> rememberMe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            userService<span class=\"token punctuation\">.</span><span class=\"token function\">checkLogin</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span>rememberMe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>service</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkLogin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> rememberMe<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>           <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           token<span class=\"token punctuation\">.</span><span class=\"token function\">setRememberMe</span><span class=\"token punctuation\">(</span>rememberMe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           subject<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"shiro多realm配置\"><a class=\"anchor\" href=\"#shiro多realm配置\">#</a> Shiro 多 Realm 配置</h2>\n<h3 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h3>\n<blockquote>\n<p>当 Shiro 进行权限管理，数据来自不同的数据源时，我们可以给 SecurityManager 配置多个 Realm</p>\n</blockquote>\n<h3 id=\"多个realm的处理方式\"><a class=\"anchor\" href=\"#多个realm的处理方式\">#</a> 多个 Realm 的处理方式</h3>\n<blockquote>\n<p>1. 链式处理</p>\n<ul>\n<li>多个 Realm 一次进行认证</li>\n</ul>\n<p>2. 分支处理</p>\n<ul>\n<li>根据不同的条件从多个 Realm 中选择一个进行认证处理</li>\n</ul>\n</blockquote>\n<h3 id=\"多realm配置链式处理\"><a class=\"anchor\" href=\"#多realm配置链式处理\">#</a> 多 Realm 配置（链式处理）</h3>\n<p>定义多个 Realm</p>\n<blockquote>\n<p>UserRealm.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizingRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrincipalCollection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRealm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizingRealm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"UserRealm\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthorizationInfo</span> <span class=\"token function\">doGetAuthorizationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrincipalCollection</span> principalCollection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationInfo</span> <span class=\"token function\">doGetAuthenticationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationToken</span> authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------UserRealm--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">SimpleAuthenticationInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthenticationInfo</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ManagerRealm.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authz<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorizingRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrincipalCollection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ManagerRealm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizingRealm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"ManagerRealm\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthorizationInfo</span> <span class=\"token function\">doGetAuthorizationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrincipalCollection</span> principalCollection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationInfo</span> <span class=\"token function\">doGetAuthenticationInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationToken</span> authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------ManagerRealm--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">SimpleAuthenticationInfo</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthenticationInfo</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span><span class=\"token string\">\"222222\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<p>在 ShiroConfig.java 中为 Securitymanager 配置多个 Realm</p>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ManagerRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShiroConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRealm</span> <span class=\"token function\">getUserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ManagerRealm</span> <span class=\"token function\">getManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">></span></span> realms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        realms<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        realms<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealms</span><span class=\"token punctuation\">(</span>realms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//....</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<p>测试代码</p>\n<blockquote>\n<p>login.html</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user/login<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>登录<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>UserController.java</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----UserController---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token class-name\">UsernamePasswordToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token class-name\">Subject</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          subject<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token string\">\"login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"多realm配置分支处理\"><a class=\"anchor\" href=\"#多realm配置分支处理\">#</a> 多 Realm 配置（分支处理）</h3>\n<blockquote>\n<p>根据不同的条件执行不同的 Realm</p>\n</blockquote>\n<p>实现 案例：用户不同身份登录执行不同的 Realm</p>\n<blockquote>\n<p>自定义 Realm（UserRealm、ManagerRealm）</p>\n<ul>\n<li>当登录页面选择 “普通用户” 登录，则执行 UserRealm 的认证</li>\n<li>当登录页面选择 “管理员” 登录，则执行 ManagerRealm 的认证</li>\n</ul>\n<p>Realm 的声明及配置</p>\n<p>自定义 Token</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyToken</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UsernamePasswordToken</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> loginType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> loginType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loginType <span class=\"token operator\">=</span> loginType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLoginType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> loginType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLoginType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> loginType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loginType <span class=\"token operator\">=</span> loginType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自定义认证器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthenticationException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthenticationInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthenticationToken</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>authc<span class=\"token punctuation\">.</span>pam<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModularRealmAuthenticator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MymodularRealmAuthenticator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ModularRealmAuthenticator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthenticationInfo</span> <span class=\"token function\">doAuthenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationToken</span> authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----MymodularRealmAuthenticator---------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">></span></span> realms <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">MyToken</span> myToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyToken</span><span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> loginType <span class=\"token operator\">=</span> myToken<span class=\"token punctuation\">.</span><span class=\"token function\">getLoginType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------loginType:\"</span><span class=\"token operator\">+</span>loginType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">></span></span> typeRealms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Realm</span> realm <span class=\"token operator\">:</span> realms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>loginType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                typeRealms<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeRealms<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSingleRealmAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">)</span> \t\t\t\ttypeRealms<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>authenticationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doMultiRealmAuthentication</span><span class=\"token punctuation\">(</span>typeRealms<span class=\"token punctuation\">,</span>authenticationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置自定义认证器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ManagerRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserRealm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>realm<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ShiroFilterFactoryBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>shiro<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>mgt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShiroConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRealm</span> <span class=\"token function\">getUserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ManagerRealm</span> <span class=\"token function\">getManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MymodularRealmAuthenticator</span> <span class=\"token function\">getMymodularRealmAuthenticator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MymodularRealmAuthenticator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultWebSecurityManager</span> <span class=\"token function\">getDefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">DefaultWebSecurityManager</span> securityManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultWebSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 配置自定义认证器 (防在 realms 设置之前)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticator</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMymodularRealmAuthenticator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">//securityManager 要完成校验，需要 realm</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Realm</span><span class=\"token punctuation\">></span></span> realms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        realms<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUserRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        realms<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getManagerRealm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        securityManager<span class=\"token punctuation\">.</span><span class=\"token function\">setRealms</span><span class=\"token punctuation\">(</span>realms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> securityManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> \t<span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckj15eg6x000cb0ut7b168hop","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg7q0011b0ut6tpfb2tq"},{"post_id":"ckj15eg6x000cb0ut7b168hop","category_id":"ckj15eg7g000pb0ut51jfc5f6","_id":"ckj15eg7t0014b0utemjohllu"},{"post_id":"ckj15eg6h0005b0utdpzdfj6i","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg7v0017b0ut01rw54ba"},{"post_id":"ckj15eg6h0005b0utdpzdfj6i","category_id":"ckj15eg7i000ub0ut5imc57ak","_id":"ckj15eg7v0019b0ut5fvb7tw5"},{"post_id":"ckj15eg6z000eb0ut2u20gwhg","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg7w001cb0ut594sgmxp"},{"post_id":"ckj15eg6z000eb0ut2u20gwhg","category_id":"ckj15eg7g000pb0ut51jfc5f6","_id":"ckj15eg7w001eb0utbpgyekis"},{"post_id":"ckj15eg77000hb0uthnmz98xz","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg7x001hb0ut7zwp2bp1"},{"post_id":"ckj15eg77000hb0uthnmz98xz","category_id":"ckj15eg7g000pb0ut51jfc5f6","_id":"ckj15eg7y001jb0ut7qo6ejvn"},{"post_id":"ckj15eg6k0008b0ut15bpfdah","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg7y001mb0ut9588b0xz"},{"post_id":"ckj15eg6k0008b0ut15bpfdah","category_id":"ckj15eg7i000ub0ut5imc57ak","_id":"ckj15eg7y001nb0ute2mo7av7"},{"post_id":"ckj15eg6n0009b0utfru54486","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg85001xb0utbdl0h2ei"},{"post_id":"ckj15eg6n0009b0utfru54486","category_id":"ckj15eg7i000ub0ut5imc57ak","_id":"ckj15eg86001zb0ut16w50jxg"},{"post_id":"ckj15eg7a000jb0ut8ioz81q1","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8e002ib0ut46uefn3r"},{"post_id":"ckj15eg7a000jb0ut8ioz81q1","category_id":"ckj15eg7w001fb0ut9o7y2l1a","_id":"ckj15eg8e002jb0utbngh2arg"},{"post_id":"ckj15eg7a000jb0ut8ioz81q1","category_id":"ckj15eg8d002eb0ut16otfp28","_id":"ckj15eg8f002lb0ut97ij2l0j"},{"post_id":"ckj15eg7d000mb0utdh8r05iv","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8f002mb0utbn17aus3"},{"post_id":"ckj15eg7d000mb0utdh8r05iv","category_id":"ckj15eg7w001fb0ut9o7y2l1a","_id":"ckj15eg8f002ob0utfei7gau1"},{"post_id":"ckj15eg7d000mb0utdh8r05iv","category_id":"ckj15eg8d002eb0ut16otfp28","_id":"ckj15eg8f002pb0ut5tza5fot"},{"post_id":"ckj15eg7f000ob0utdefg2hqb","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8g002rb0utffhm5lv3"},{"post_id":"ckj15eg7f000ob0utdefg2hqb","category_id":"ckj15eg7w001fb0ut9o7y2l1a","_id":"ckj15eg8g002sb0ut0m35hsgu"},{"post_id":"ckj15eg7f000ob0utdefg2hqb","category_id":"ckj15eg8d002eb0ut16otfp28","_id":"ckj15eg8h002ub0utbymtb2az"},{"post_id":"ckj15eg7g000qb0ut005fgkbf","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8h002vb0utcjw3eadp"},{"post_id":"ckj15eg7g000qb0ut005fgkbf","category_id":"ckj15eg7w001fb0ut9o7y2l1a","_id":"ckj15eg8h002xb0ut3el19ctp"},{"post_id":"ckj15eg7g000qb0ut005fgkbf","category_id":"ckj15eg8d002eb0ut16otfp28","_id":"ckj15eg8h002yb0ut5v6t2qza"},{"post_id":"ckj15eg7h000tb0utgjtrbssw","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8i0030b0ut3upr45vq"},{"post_id":"ckj15eg7h000tb0utgjtrbssw","category_id":"ckj15eg870020b0utcvdpe3px","_id":"ckj15eg8i0031b0ut4lzw4gnh"},{"post_id":"ckj15eg7h000tb0utgjtrbssw","category_id":"ckj15eg8f002nb0ut6sv0ffmm","_id":"ckj15eg8l0032b0ut7jetg15k"},{"post_id":"ckj15eg7i000vb0ut5xfpbuan","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8m0033b0utef6e7ofz"},{"post_id":"ckj15eg7i000vb0ut5xfpbuan","category_id":"ckj15eg870020b0utcvdpe3px","_id":"ckj15eg8n0034b0ut7essd35s"},{"post_id":"ckj15eg7i000vb0ut5xfpbuan","category_id":"ckj15eg8f002nb0ut6sv0ffmm","_id":"ckj15eg8n0035b0utg4ejbdnj"},{"post_id":"ckj15eg7j000xb0uthsxh35m6","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8n0036b0utc6bwg0en"},{"post_id":"ckj15eg7j000xb0uthsxh35m6","category_id":"ckj15eg870020b0utcvdpe3px","_id":"ckj15eg8n0037b0ut8u2nhncu"},{"post_id":"ckj15eg7j000xb0uthsxh35m6","category_id":"ckj15eg8f002nb0ut6sv0ffmm","_id":"ckj15eg8n0038b0ut7jb7b8qd"},{"post_id":"ckj15eg7l0010b0ut7hch5f5h","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8n0039b0ut7t3hfi6s"},{"post_id":"ckj15eg7l0010b0ut7hch5f5h","category_id":"ckj15eg870020b0utcvdpe3px","_id":"ckj15eg8n003ab0utdqwu4ejm"},{"post_id":"ckj15eg7l0010b0ut7hch5f5h","category_id":"ckj15eg8f002nb0ut6sv0ffmm","_id":"ckj15eg8n003bb0ut62vrg5b7"},{"post_id":"ckj15eg7r0013b0ut7kx73f47","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8n003cb0utccvxguvi"},{"post_id":"ckj15eg7r0013b0ut7kx73f47","category_id":"ckj15eg870020b0utcvdpe3px","_id":"ckj15eg8o003db0ut7059ej8d"},{"post_id":"ckj15eg7r0013b0ut7kx73f47","category_id":"ckj15eg8f002nb0ut6sv0ffmm","_id":"ckj15eg8o003eb0ut7j7m1me1"},{"post_id":"ckj15eg8r003fb0ut54vbe06j","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg8y003lb0ut0te4gg57"},{"post_id":"ckj15eg8r003fb0ut54vbe06j","category_id":"ckj15eg870020b0utcvdpe3px","_id":"ckj15eg8y003ob0utfijvauqd"},{"post_id":"ckj15eg8r003fb0ut54vbe06j","category_id":"ckj15eg8f002nb0ut6sv0ffmm","_id":"ckj15eg94003qb0ut4acv52rh"},{"post_id":"ckj15eg8v003gb0ut3hck24g8","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg95003sb0utbm8i016d"},{"post_id":"ckj15eg8v003gb0ut3hck24g8","category_id":"ckj15eg8x003kb0ut114fbe6c","_id":"ckj15eg95003tb0utc72k4ujs"},{"post_id":"ckj15eg8w003ib0uted0zfc3b","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg95003ub0utgkjecncx"},{"post_id":"ckj15eg8w003ib0uted0zfc3b","category_id":"ckj15eg8x003kb0ut114fbe6c","_id":"ckj15eg96003vb0utahs343ko"},{"post_id":"ckj15eg98003wb0utea7o0lbu","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg9b003yb0uthckjc8lw"},{"post_id":"ckj15eg98003wb0utea7o0lbu","category_id":"ckj15eg8x003kb0ut114fbe6c","_id":"ckj15eg9b003zb0ut934vfrib"},{"post_id":"ckj15eg9c0040b0utafeg7g04","category_id":"ckj15eg6t000ab0ut1hhy07ga","_id":"ckj15eg9e0042b0utgqg613qu"},{"post_id":"ckj15eg9c0040b0utafeg7g04","category_id":"ckj15eg7g000pb0ut51jfc5f6","_id":"ckj15eg9e0044b0ut888g6vyn"}],"PostTag":[{"post_id":"ckj15eg5d0000b0ut6qsa36ar","tag_id":"ckj15eg5w0002b0ut8s3ueoe0","_id":"ckj15eg6j0007b0ute25j1eal"},{"post_id":"ckj15eg5p0001b0ut9xfqd97o","tag_id":"ckj15eg6i0006b0uthwqub3hg","_id":"ckj15eg6z000db0ut7ryg6oar"},{"post_id":"ckj15eg610003b0utd3bz9mqa","tag_id":"ckj15eg6w000bb0uthrrbcn7n","_id":"ckj15eg79000ib0ut73po1zyi"},{"post_id":"ckj15eg660004b0ut3suf6gxo","tag_id":"ckj15eg74000gb0ut708ics9t","_id":"ckj15eg7f000nb0utccx43sfe"},{"post_id":"ckj15eg6h0005b0utdpzdfj6i","tag_id":"ckj15eg7c000lb0ut679a8gvq","_id":"ckj15eg7h000sb0ut09190pc8"},{"post_id":"ckj15eg6k0008b0ut15bpfdah","tag_id":"ckj15eg7h000rb0ut2nihektv","_id":"ckj15eg7k000yb0utdv14c64e"},{"post_id":"ckj15eg6n0009b0utfru54486","tag_id":"ckj15eg7j000wb0ut188bdj82","_id":"ckj15eg7t0015b0ut2ak9gp4q"},{"post_id":"ckj15eg6x000cb0ut7b168hop","tag_id":"ckj15eg7q0012b0ut4k3b2fop","_id":"ckj15eg7v001ab0uta12sb3rm"},{"post_id":"ckj15eg6z000eb0ut2u20gwhg","tag_id":"ckj15eg7v0018b0ut9dah5cgc","_id":"ckj15eg7x001gb0utfw1l0xqp"},{"post_id":"ckj15eg77000hb0uthnmz98xz","tag_id":"ckj15eg7w001db0utb86p5af0","_id":"ckj15eg7y001lb0ut4iia4wyy"},{"post_id":"ckj15eg7a000jb0ut8ioz81q1","tag_id":"ckj15eg7x001ib0ut954nbczk","_id":"ckj15eg7z001qb0utcy4l8lb3"},{"post_id":"ckj15eg7d000mb0utdh8r05iv","tag_id":"ckj15eg7x001ib0ut954nbczk","_id":"ckj15eg80001tb0utfaei7i0l"},{"post_id":"ckj15eg7f000ob0utdefg2hqb","tag_id":"ckj15eg7x001ib0ut954nbczk","_id":"ckj15eg82001wb0ut5bojhqv0"},{"post_id":"ckj15eg7g000qb0ut005fgkbf","tag_id":"ckj15eg7x001ib0ut954nbczk","_id":"ckj15eg880021b0utcs13a8w1"},{"post_id":"ckj15eg7h000tb0utgjtrbssw","tag_id":"ckj15eg86001yb0ut3i9dhc1y","_id":"ckj15eg890024b0ut656wd3bv"},{"post_id":"ckj15eg7i000vb0ut5xfpbuan","tag_id":"ckj15eg86001yb0ut3i9dhc1y","_id":"ckj15eg8b0027b0ut9lv08ge5"},{"post_id":"ckj15eg7j000xb0uthsxh35m6","tag_id":"ckj15eg86001yb0ut3i9dhc1y","_id":"ckj15eg8c002ab0utbbtebyuc"},{"post_id":"ckj15eg7l0010b0ut7hch5f5h","tag_id":"ckj15eg86001yb0ut3i9dhc1y","_id":"ckj15eg8d002db0ut0rxo9u7h"},{"post_id":"ckj15eg7r0013b0ut7kx73f47","tag_id":"ckj15eg86001yb0ut3i9dhc1y","_id":"ckj15eg8d002fb0uthc9l4hqg"},{"post_id":"ckj15eg8r003fb0ut54vbe06j","tag_id":"ckj15eg86001yb0ut3i9dhc1y","_id":"ckj15eg8w003hb0uta3f8cb2d"},{"post_id":"ckj15eg8v003gb0ut3hck24g8","tag_id":"ckj15eg8x003jb0utdcqycyt9","_id":"ckj15eg94003pb0uteqb4bk51"},{"post_id":"ckj15eg8w003ib0uted0zfc3b","tag_id":"ckj15eg8x003jb0utdcqycyt9","_id":"ckj15eg95003rb0ut6q1wa5dw"},{"post_id":"ckj15eg98003wb0utea7o0lbu","tag_id":"ckj15eg8x003jb0utdcqycyt9","_id":"ckj15eg9a003xb0ut35swgrl4"},{"post_id":"ckj15eg9c0040b0utafeg7g04","tag_id":"ckj15eg9d0041b0ut9zkcgsnr","_id":"ckj15eg9e0043b0ut8usxh2tm"}],"Tag":[{"name":"hexo","_id":"ckj15eg5w0002b0ut8s3ueoe0"},{"name":"算法","_id":"ckj15eg6i0006b0uthwqub3hg"},{"name":"Linux","_id":"ckj15eg6w000bb0uthrrbcn7n"},{"name":"MySQL","_id":"ckj15eg74000gb0ut708ics9t"},{"name":"git","_id":"ckj15eg7c000lb0ut679a8gvq"},{"name":"Idea","_id":"ckj15eg7h000rb0ut2nihektv"},{"name":"Typora","_id":"ckj15eg7j000wb0ut188bdj82"},{"name":"MongoDB","_id":"ckj15eg7q0012b0ut4k3b2fop"},{"name":"RabbitMQ","_id":"ckj15eg7v0018b0ut9dah5cgc"},{"name":"Redis","_id":"ckj15eg7w001db0utb86p5af0"},{"name":"Java","_id":"ckj15eg7x001ib0ut954nbczk"},{"name":"面试题","_id":"ckj15eg86001yb0ut3i9dhc1y"},{"name":"设计模式","_id":"ckj15eg8x003jb0utdcqycyt9"},{"name":"Shiro","_id":"ckj15eg9d0041b0ut9zkcgsnr"}]}}